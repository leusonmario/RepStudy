/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 04 14:50:33 GMT 2021
 */

package org.opentripplanner.routing.spt;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileDescriptor;
import java.io.ObjectInputStream;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.opentripplanner.routing.bike_rental.BikeRentalStation;
import org.opentripplanner.routing.core.OptimizeType;
import org.opentripplanner.routing.core.RoutingRequest;
import org.opentripplanner.routing.core.State;
import org.opentripplanner.routing.core.TraverseMode;
import org.opentripplanner.routing.core.TraverseModeSet;
import org.opentripplanner.routing.edgetype.ElevatorHopEdge;
import org.opentripplanner.routing.edgetype.ParkAndRideLinkEdge;
import org.opentripplanner.routing.edgetype.SimpleEdge;
import org.opentripplanner.routing.edgetype.StreetBikeRentalLink;
import org.opentripplanner.routing.edgetype.StreetTraversalPermission;
import org.opentripplanner.routing.graph.Graph;
import org.opentripplanner.routing.graph.Vertex;
import org.opentripplanner.routing.spt.GraphPath;
import org.opentripplanner.routing.spt.MultiShortestPathTree;
import org.opentripplanner.routing.vertextype.BikeRentalStationVertex;
import org.opentripplanner.routing.vertextype.ExitVertex;
import org.opentripplanner.routing.vertextype.IntersectionVertex;
import org.opentripplanner.routing.vertextype.OnboardDepartVertex;
import org.opentripplanner.routing.vertextype.ParkAndRideVertex;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MultiShortestPathTree_ESTest extends MultiShortestPathTree_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      RoutingRequest routingRequest0 = new RoutingRequest();
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.batch);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertNotNull(routingRequest0);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.batch);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertNotNull(multiShortestPathTree0);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      String string0 = multiShortestPathTree0.toString();
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.batch);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertNotNull(string0);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals("MultiSPT(0 vertices)", string0);
      
      OnboardDepartVertex onboardDepartVertex0 = new OnboardDepartVertex(routingRequest0.routerId, routingRequest0.waitAtBeginningFactor, routingRequest0.MIN_SIMILARITY);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.batch);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertNotNull(onboardDepartVertex0);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals("", onboardDepartVertex0.getLabel());
      assertEquals(1000.0, onboardDepartVertex0.getY(), 0.01);
      assertEquals(0.2, onboardDepartVertex0.getLon(), 0.01);
      assertEquals(1000.0, onboardDepartVertex0.getLat(), 0.01);
      assertEquals(1, onboardDepartVertex0.getMaxIndex());
      assertEquals("", onboardDepartVertex0.getName());
      assertEquals(0.2, onboardDepartVertex0.getX(), 0.01);
      assertEquals(0, onboardDepartVertex0.getDegreeIn());
      assertEquals(0, onboardDepartVertex0.getIndex());
      assertEquals(0, onboardDepartVertex0.getDegreeOut());
      
      GraphPath graphPath0 = multiShortestPathTree0.getPath(onboardDepartVertex0, routingRequest0.intermediatePlacesOrdered);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.batch);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertNull(graphPath0);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals("", onboardDepartVertex0.getLabel());
      assertEquals(1000.0, onboardDepartVertex0.getY(), 0.01);
      assertEquals(0.2, onboardDepartVertex0.getLon(), 0.01);
      assertEquals(1000.0, onboardDepartVertex0.getLat(), 0.01);
      assertEquals(1, onboardDepartVertex0.getMaxIndex());
      assertEquals("", onboardDepartVertex0.getName());
      assertEquals(0.2, onboardDepartVertex0.getX(), 0.01);
      assertEquals(0, onboardDepartVertex0.getDegreeIn());
      assertEquals(0, onboardDepartVertex0.getIndex());
      assertEquals(0, onboardDepartVertex0.getDegreeOut());
      
      List<State> list0 = multiShortestPathTree0.getStates(onboardDepartVertex0);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.batch);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertNull(list0);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals("", onboardDepartVertex0.getLabel());
      assertEquals(1000.0, onboardDepartVertex0.getY(), 0.01);
      assertEquals(0.2, onboardDepartVertex0.getLon(), 0.01);
      assertEquals(1000.0, onboardDepartVertex0.getLat(), 0.01);
      assertEquals(1, onboardDepartVertex0.getMaxIndex());
      assertEquals("", onboardDepartVertex0.getName());
      assertEquals(0.2, onboardDepartVertex0.getX(), 0.01);
      assertEquals(0, onboardDepartVertex0.getDegreeIn());
      assertEquals(0, onboardDepartVertex0.getIndex());
      assertEquals(0, onboardDepartVertex0.getDegreeOut());
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.BICYCLE;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.batch);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertNotNull(routingRequest0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(5.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.batch);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertNotNull(multiShortestPathTree0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(5.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      routingRequest0.kissAndRide = routingRequest0.driveOnRight;
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(5.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      
      Graph graph0 = new Graph();
      assertNotNull(graph0);
      assertEquals(0, graph0.countVertices());
      
      ExitVertex exitVertex0 = new ExitVertex(graph0, routingRequest0.routerId, routingRequest0.otherThanPreferredRoutesPenalty, routingRequest0.walkReluctance);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.batch);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(exitVertex0.freeFlowing);
      assertFalse(exitVertex0.trafficLight);
      assertNotNull(exitVertex0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(5.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, graph0.countVertices());
      assertEquals("", exitVertex0.getLabel());
      assertEquals(2.0, exitVertex0.getY(), 0.01);
      assertEquals("", exitVertex0.getName());
      assertEquals(2.0, exitVertex0.getLat(), 0.01);
      assertEquals(300.0, exitVertex0.getLon(), 0.01);
      assertEquals(1, exitVertex0.getMaxIndex());
      assertFalse(exitVertex0.inferredFreeFlowing());
      assertEquals(0, exitVertex0.getDegreeOut());
      assertEquals(0, exitVertex0.getIndex());
      assertNull(exitVertex0.getExitName());
      assertEquals(0, exitVertex0.getDegreeIn());
      assertEquals(300.0, exitVertex0.getX(), 0.01);
      
      State state0 = new State(exitVertex0, multiShortestPathTree0.options);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.batch);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(exitVertex0.freeFlowing);
      assertFalse(exitVertex0.trafficLight);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertNotNull(state0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(5.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("", exitVertex0.getLabel());
      assertEquals(2.0, exitVertex0.getY(), 0.01);
      assertEquals("", exitVertex0.getName());
      assertEquals(2.0, exitVertex0.getLat(), 0.01);
      assertEquals(300.0, exitVertex0.getLon(), 0.01);
      assertEquals(1, exitVertex0.getMaxIndex());
      assertFalse(exitVertex0.inferredFreeFlowing());
      assertEquals(0, exitVertex0.getDegreeOut());
      assertEquals(0, exitVertex0.getIndex());
      assertNull(exitVertex0.getExitName());
      assertEquals(0, exitVertex0.getDegreeIn());
      assertEquals(300.0, exitVertex0.getX(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.isBikeRenting());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getBackMode());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(TraverseMode.CAR, state0.getNonTransitMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.isFinal());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      
      boolean boolean0 = multiShortestPathTree0.add(state0);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.batch);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(exitVertex0.freeFlowing);
      assertFalse(exitVertex0.trafficLight);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(5.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("", exitVertex0.getLabel());
      assertEquals(2.0, exitVertex0.getY(), 0.01);
      assertEquals("", exitVertex0.getName());
      assertEquals(2.0, exitVertex0.getLat(), 0.01);
      assertEquals(300.0, exitVertex0.getLon(), 0.01);
      assertEquals(1, exitVertex0.getMaxIndex());
      assertFalse(exitVertex0.inferredFreeFlowing());
      assertEquals(0, exitVertex0.getDegreeOut());
      assertEquals(0, exitVertex0.getIndex());
      assertNull(exitVertex0.getExitName());
      assertEquals(0, exitVertex0.getDegreeIn());
      assertEquals(300.0, exitVertex0.getX(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.isBikeRenting());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getBackMode());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(TraverseMode.CAR, state0.getNonTransitMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.isFinal());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertTrue(boolean0);
      
      boolean boolean1 = multiShortestPathTree0.visit(state0);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.batch);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(exitVertex0.freeFlowing);
      assertFalse(exitVertex0.trafficLight);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertTrue(boolean1 == boolean0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(5.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("", exitVertex0.getLabel());
      assertEquals(2.0, exitVertex0.getY(), 0.01);
      assertEquals("", exitVertex0.getName());
      assertEquals(2.0, exitVertex0.getLat(), 0.01);
      assertEquals(300.0, exitVertex0.getLon(), 0.01);
      assertEquals(1, exitVertex0.getMaxIndex());
      assertFalse(exitVertex0.inferredFreeFlowing());
      assertEquals(0, exitVertex0.getDegreeOut());
      assertEquals(0, exitVertex0.getIndex());
      assertNull(exitVertex0.getExitName());
      assertEquals(0, exitVertex0.getDegreeIn());
      assertEquals(300.0, exitVertex0.getX(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.isBikeRenting());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getBackMode());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(TraverseMode.CAR, state0.getNonTransitMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.isFinal());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertTrue(boolean1);
      
      State state1 = multiShortestPathTree0.getState(exitVertex0);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.batch);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(exitVertex0.freeFlowing);
      assertFalse(exitVertex0.trafficLight);
      assertNull(state1);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(5.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("", exitVertex0.getLabel());
      assertEquals(2.0, exitVertex0.getY(), 0.01);
      assertEquals("", exitVertex0.getName());
      assertEquals(2.0, exitVertex0.getLat(), 0.01);
      assertEquals(300.0, exitVertex0.getLon(), 0.01);
      assertEquals(1, exitVertex0.getMaxIndex());
      assertFalse(exitVertex0.inferredFreeFlowing());
      assertEquals(0, exitVertex0.getDegreeOut());
      assertEquals(0, exitVertex0.getIndex());
      assertNull(exitVertex0.getExitName());
      assertEquals(0, exitVertex0.getDegreeIn());
      assertEquals(300.0, exitVertex0.getX(), 0.01);
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      String string0 = "68e=`J";
      TraverseMode traverseMode0 = TraverseMode.TRAM;
      OptimizeType optimizeType0 = OptimizeType.FLAT;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0, optimizeType0);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.batch);
      assertNotNull(routingRequest0);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.batch);
      assertNotNull(multiShortestPathTree0);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      Graph graph0 = new Graph();
      assertNotNull(graph0);
      assertEquals(0, graph0.countVertices());
      
      IntersectionVertex intersectionVertex0 = new IntersectionVertex(graph0, routingRequest0.routerId, routingRequest0.carDecelerationSpeed, routingRequest0.carDropoffTime, string0);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.batch);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertNotNull(intersectionVertex0);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, graph0.countVertices());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals("68e=`J", intersectionVertex0.getName());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      
      routingRequest0.setRoutingContext(graph0, routingRequest0.routerId, string0);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, graph0.countVertices());
      
      State state0 = new State(intersectionVertex0, multiShortestPathTree0.options);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.batch);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertNotNull(state0);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals("68e=`J", intersectionVertex0.getName());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertTrue(state0.isFinal());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.getReverseOptimizing());
      assertNull(state0.getNonTransitMode());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      
      boolean boolean0 = multiShortestPathTree0.add(state0);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.batch);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals("68e=`J", intersectionVertex0.getName());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertTrue(state0.isFinal());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.getReverseOptimizing());
      assertNull(state0.getNonTransitMode());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertTrue(boolean0);
      
      SimpleEdge simpleEdge0 = new SimpleEdge(intersectionVertex0, intersectionVertex0, routingRequest0.maxWeight, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.batch);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertNotNull(simpleEdge0);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, graph0.countVertices());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals("68e=`J", intersectionVertex0.getName());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(1, intersectionVertex0.getDegreeOut());
      assertEquals(1, intersectionVertex0.getDegreeIn());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      assertTrue(intersectionVertex0.inferredFreeFlowing());
      assertTrue(simpleEdge0.vertexTypesValid());
      assertFalse(simpleEdge0.isPartial());
      assertEquals(0.0, simpleEdge0.getDistance(), 0.01);
      assertEquals(0, simpleEdge0.getId());
      assertNull(simpleEdge0.getName());
      
      State state1 = simpleEdge0.traverse(state0);
      assertNotSame(state0, state1);
      assertNotSame(state1, state0);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.batch);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(1.7976931348623157E308, state1.weight, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertNotNull(state1);
      assertFalse(state1.equals((Object)state0));
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals("68e=`J", intersectionVertex0.getName());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(1, intersectionVertex0.getDegreeOut());
      assertEquals(1, intersectionVertex0.getDegreeIn());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      assertTrue(intersectionVertex0.inferredFreeFlowing());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertTrue(state0.isFinal());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.getReverseOptimizing());
      assertNull(state0.getNonTransitMode());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertTrue(simpleEdge0.vertexTypesValid());
      assertFalse(simpleEdge0.isPartial());
      assertEquals(0.0, simpleEdge0.getDistance(), 0.01);
      assertEquals(0, simpleEdge0.getId());
      assertNull(simpleEdge0.getName());
      assertEquals(90, state1.getAbsTimeDeltaSeconds());
      assertEquals(1.7976931348623157E308, state1.getWeight(), 0.01);
      assertFalse(state1.getReverseOptimizing());
      assertEquals(1.7976931348623157E308, state1.getWeightDelta(), 0.01);
      assertFalse(state1.isEverBoarded());
      assertEquals(90L, state1.getElapsedTimeSeconds());
      assertEquals(1392409281L, state1.getStartTimeSeconds());
      assertEquals(90, state1.getTimeDeltaSeconds());
      assertFalse(state1.isCarParked());
      assertTrue(state1.isFinal());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertEquals(90.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertNull(state1.getNonTransitMode());
      assertEquals(1392409371000L, state1.getTimeInMillis());
      assertNull(state1.getBackMode());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertNull(state1.getZone());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertFalse(state1.isBackWalkingBike());
      assertFalse(state1.isBikeRenting());
      assertEquals(0, state1.getPreTransitTime());
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals(0, state1.getNumBoardings());
      assertFalse(state1.isOnboard());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertEquals(1392409371L, state1.getTimeSeconds());
      
      double double0 = (-413.82415965173124);
      state1.weight = double0;
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals("68e=`J", intersectionVertex0.getName());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(1, intersectionVertex0.getDegreeOut());
      assertEquals(1, intersectionVertex0.getDegreeIn());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      assertTrue(intersectionVertex0.inferredFreeFlowing());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertTrue(state0.isFinal());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.getReverseOptimizing());
      assertNull(state0.getNonTransitMode());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertTrue(simpleEdge0.vertexTypesValid());
      assertFalse(simpleEdge0.isPartial());
      assertEquals(0.0, simpleEdge0.getDistance(), 0.01);
      assertEquals(0, simpleEdge0.getId());
      assertNull(simpleEdge0.getName());
      assertEquals(90, state1.getAbsTimeDeltaSeconds());
      assertFalse(state1.getReverseOptimizing());
      assertFalse(state1.isEverBoarded());
      assertEquals(90L, state1.getElapsedTimeSeconds());
      assertEquals(1392409281L, state1.getStartTimeSeconds());
      assertEquals(90, state1.getTimeDeltaSeconds());
      assertFalse(state1.isCarParked());
      assertTrue(state1.isFinal());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertEquals(90.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertNull(state1.getNonTransitMode());
      assertEquals(1392409371000L, state1.getTimeInMillis());
      assertNull(state1.getBackMode());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertNull(state1.getZone());
      assertEquals((-413.82415965173124), state1.getWeightDelta(), 0.01);
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertEquals((-413.82415965173124), state1.getWeight(), 0.01);
      assertFalse(state1.isBackWalkingBike());
      assertFalse(state1.isBikeRenting());
      assertEquals(0, state1.getPreTransitTime());
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals(0, state1.getNumBoardings());
      assertFalse(state1.isOnboard());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertEquals(1392409371L, state1.getTimeSeconds());
      
      boolean boolean1 = multiShortestPathTree0.visit(state1);
      assertNotSame(state0, state1);
      assertNotSame(state1, state0);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.batch);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertEquals((-413.82415965173124), state1.weight, 0.01);
      assertFalse(state0.equals((Object)state1));
      assertFalse(state1.equals((Object)state0));
      assertFalse(boolean1 == boolean0);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals("68e=`J", intersectionVertex0.getName());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(1, intersectionVertex0.getDegreeOut());
      assertEquals(1, intersectionVertex0.getDegreeIn());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      assertTrue(intersectionVertex0.inferredFreeFlowing());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertTrue(state0.isFinal());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.getReverseOptimizing());
      assertNull(state0.getNonTransitMode());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertTrue(simpleEdge0.vertexTypesValid());
      assertFalse(simpleEdge0.isPartial());
      assertEquals(0.0, simpleEdge0.getDistance(), 0.01);
      assertEquals(0, simpleEdge0.getId());
      assertNull(simpleEdge0.getName());
      assertEquals(90, state1.getAbsTimeDeltaSeconds());
      assertFalse(state1.getReverseOptimizing());
      assertFalse(state1.isEverBoarded());
      assertEquals(90L, state1.getElapsedTimeSeconds());
      assertEquals(1392409281L, state1.getStartTimeSeconds());
      assertEquals(90, state1.getTimeDeltaSeconds());
      assertFalse(state1.isCarParked());
      assertTrue(state1.isFinal());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertEquals(90.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertNull(state1.getNonTransitMode());
      assertEquals(1392409371000L, state1.getTimeInMillis());
      assertNull(state1.getBackMode());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertNull(state1.getZone());
      assertEquals((-413.82415965173124), state1.getWeightDelta(), 0.01);
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertEquals((-413.82415965173124), state1.getWeight(), 0.01);
      assertFalse(state1.isBackWalkingBike());
      assertFalse(state1.isBikeRenting());
      assertEquals(0, state1.getPreTransitTime());
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals(0, state1.getNumBoardings());
      assertFalse(state1.isOnboard());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertEquals(1392409371L, state1.getTimeSeconds());
      assertFalse(boolean1);
      
      StreetTraversalPermission streetTraversalPermission0 = StreetTraversalPermission.ALL;
      ElevatorHopEdge elevatorHopEdge0 = new ElevatorHopEdge(intersectionVertex0, intersectionVertex0, streetTraversalPermission0);
      assertTrue(elevatorHopEdge0.wheelchairAccessible);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.batch);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertNotNull(elevatorHopEdge0);
      assertTrue(elevatorHopEdge0.vertexTypesValid());
      assertNull(elevatorHopEdge0.getName());
      assertEquals(1, elevatorHopEdge0.getId());
      assertEquals(0.0, elevatorHopEdge0.getDistance(), 0.01);
      assertFalse(elevatorHopEdge0.isPartial());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, graph0.countVertices());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals("68e=`J", intersectionVertex0.getName());
      assertEquals(2, intersectionVertex0.getDegreeIn());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(2, intersectionVertex0.getDegreeOut());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      
      State state2 = elevatorHopEdge0.traverse(state0);
      assertNotSame(state2, state0);
      assertNotSame(state2, state1);
      assertNotSame(state0, state1);
      assertNotSame(state0, state2);
      assertTrue(elevatorHopEdge0.wheelchairAccessible);
      assertEquals(20.0, state2.weight, 0.01);
      assertEquals(0.0, state2.walkDistance, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.batch);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertNotNull(state2);
      assertFalse(state2.equals((Object)state0));
      assertFalse(state2.equals((Object)state1));
      assertFalse(state0.equals((Object)state1));
      assertTrue(elevatorHopEdge0.vertexTypesValid());
      assertNull(elevatorHopEdge0.getName());
      assertEquals(1, elevatorHopEdge0.getId());
      assertEquals(0.0, elevatorHopEdge0.getDistance(), 0.01);
      assertFalse(elevatorHopEdge0.isPartial());
      assertEquals(0.0, state2.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state2.getWalkDistance(), 0.01);
      assertEquals(20.0, state2.getWeight(), 0.01);
      assertEquals(20.0, state2.getWeightDelta(), 0.01);
      assertEquals(0, state2.getLastNextArrivalDelta());
      assertEquals(0.0, state2.getWalkSinceLastTransit(), 0.01);
      assertNull(state2.getZone());
      assertEquals(1392409301000L, state2.getTimeInMillis());
      assertEquals(0, state2.getNumBoardings());
      assertEquals(1392409301L, state2.getTimeSeconds());
      assertFalse(state2.isBikeRenting());
      assertEquals(0, state2.getPreTransitTime());
      assertEquals(0.0, state2.getWalkAtLastTransit(), 0.01);
      assertEquals(20, state2.getTimeDeltaSeconds());
      assertFalse(state2.getReverseOptimizing());
      assertNull(state2.getNonTransitMode());
      assertEquals(TraverseMode.WALK, state2.getBackMode());
      assertEquals(0L, state2.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state2.getStartTimeSeconds());
      assertTrue(state2.isFinal());
      assertFalse(state2.isCarParked());
      assertEquals(0, state2.getPreTransitTimeDelta());
      assertFalse(state2.isEverBoarded());
      assertFalse(state2.isBackWalkingBike());
      assertEquals(20.0, state2.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state2.isOnboard());
      assertEquals(20L, state2.getElapsedTimeSeconds());
      assertEquals(20, state2.getAbsTimeDeltaSeconds());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals("68e=`J", intersectionVertex0.getName());
      assertEquals(2, intersectionVertex0.getDegreeIn());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(2, intersectionVertex0.getDegreeOut());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertTrue(state0.isFinal());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.getReverseOptimizing());
      assertNull(state0.getNonTransitMode());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      
      boolean boolean2 = MultiShortestPathTree.dominates(state1, state2);
      assertNotSame(state0, state1);
      assertNotSame(state0, state2);
      assertNotSame(state1, state0);
      assertNotSame(state1, state2);
      assertNotSame(state2, state0);
      assertNotSame(state2, state1);
      assertTrue(elevatorHopEdge0.wheelchairAccessible);
      assertEquals(20.0, state2.weight, 0.01);
      assertEquals(0.0, state2.walkDistance, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.batch);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertEquals((-413.82415965173124), state1.weight, 0.01);
      assertFalse(state0.equals((Object)state1));
      assertFalse(state0.equals((Object)state2));
      assertFalse(state1.equals((Object)state0));
      assertFalse(state1.equals((Object)state2));
      assertFalse(state2.equals((Object)state0));
      assertFalse(state2.equals((Object)state1));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(elevatorHopEdge0.vertexTypesValid());
      assertNull(elevatorHopEdge0.getName());
      assertEquals(1, elevatorHopEdge0.getId());
      assertEquals(0.0, elevatorHopEdge0.getDistance(), 0.01);
      assertFalse(elevatorHopEdge0.isPartial());
      assertEquals(0.0, state2.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state2.getWalkDistance(), 0.01);
      assertEquals(20.0, state2.getWeight(), 0.01);
      assertEquals(20.0, state2.getWeightDelta(), 0.01);
      assertEquals(0, state2.getLastNextArrivalDelta());
      assertEquals(0.0, state2.getWalkSinceLastTransit(), 0.01);
      assertNull(state2.getZone());
      assertEquals(1392409301000L, state2.getTimeInMillis());
      assertEquals(0, state2.getNumBoardings());
      assertEquals(1392409301L, state2.getTimeSeconds());
      assertFalse(state2.isBikeRenting());
      assertEquals(0, state2.getPreTransitTime());
      assertEquals(0.0, state2.getWalkAtLastTransit(), 0.01);
      assertEquals(20, state2.getTimeDeltaSeconds());
      assertFalse(state2.getReverseOptimizing());
      assertNull(state2.getNonTransitMode());
      assertEquals(TraverseMode.WALK, state2.getBackMode());
      assertEquals(0L, state2.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state2.getStartTimeSeconds());
      assertTrue(state2.isFinal());
      assertFalse(state2.isCarParked());
      assertEquals(0, state2.getPreTransitTimeDelta());
      assertFalse(state2.isEverBoarded());
      assertFalse(state2.isBackWalkingBike());
      assertEquals(20.0, state2.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state2.isOnboard());
      assertEquals(20L, state2.getElapsedTimeSeconds());
      assertEquals(20, state2.getAbsTimeDeltaSeconds());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals("68e=`J", intersectionVertex0.getName());
      assertEquals(2, intersectionVertex0.getDegreeIn());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(2, intersectionVertex0.getDegreeOut());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertTrue(state0.isFinal());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.getReverseOptimizing());
      assertNull(state0.getNonTransitMode());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertTrue(simpleEdge0.vertexTypesValid());
      assertFalse(simpleEdge0.isPartial());
      assertEquals(0.0, simpleEdge0.getDistance(), 0.01);
      assertEquals(0, simpleEdge0.getId());
      assertNull(simpleEdge0.getName());
      assertEquals(90, state1.getAbsTimeDeltaSeconds());
      assertFalse(state1.getReverseOptimizing());
      assertFalse(state1.isEverBoarded());
      assertEquals(90L, state1.getElapsedTimeSeconds());
      assertEquals(1392409281L, state1.getStartTimeSeconds());
      assertEquals(90, state1.getTimeDeltaSeconds());
      assertFalse(state1.isCarParked());
      assertTrue(state1.isFinal());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertEquals(90.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertNull(state1.getNonTransitMode());
      assertEquals(1392409371000L, state1.getTimeInMillis());
      assertNull(state1.getBackMode());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertNull(state1.getZone());
      assertEquals((-413.82415965173124), state1.getWeightDelta(), 0.01);
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertEquals((-413.82415965173124), state1.getWeight(), 0.01);
      assertFalse(state1.isBackWalkingBike());
      assertFalse(state1.isBikeRenting());
      assertEquals(0, state1.getPreTransitTime());
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals(0, state1.getNumBoardings());
      assertFalse(state1.isOnboard());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertEquals(1392409371L, state1.getTimeSeconds());
      assertFalse(boolean2);
      
      boolean boolean3 = multiShortestPathTree0.add(state1);
      assertNotSame(state0, state1);
      assertNotSame(state0, state2);
      assertNotSame(state1, state0);
      assertNotSame(state1, state2);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.batch);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertEquals((-413.82415965173124), state1.weight, 0.01);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(state0.equals((Object)state1));
      assertFalse(state0.equals((Object)state2));
      assertFalse(state1.equals((Object)state0));
      assertFalse(state1.equals((Object)state2));
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals("68e=`J", intersectionVertex0.getName());
      assertEquals(2, intersectionVertex0.getDegreeIn());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(2, intersectionVertex0.getDegreeOut());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertTrue(state0.isFinal());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.getReverseOptimizing());
      assertNull(state0.getNonTransitMode());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertTrue(simpleEdge0.vertexTypesValid());
      assertFalse(simpleEdge0.isPartial());
      assertEquals(0.0, simpleEdge0.getDistance(), 0.01);
      assertEquals(0, simpleEdge0.getId());
      assertNull(simpleEdge0.getName());
      assertEquals(90, state1.getAbsTimeDeltaSeconds());
      assertFalse(state1.getReverseOptimizing());
      assertFalse(state1.isEverBoarded());
      assertEquals(90L, state1.getElapsedTimeSeconds());
      assertEquals(1392409281L, state1.getStartTimeSeconds());
      assertEquals(90, state1.getTimeDeltaSeconds());
      assertFalse(state1.isCarParked());
      assertTrue(state1.isFinal());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertEquals(90.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertNull(state1.getNonTransitMode());
      assertEquals(1392409371000L, state1.getTimeInMillis());
      assertNull(state1.getBackMode());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertNull(state1.getZone());
      assertEquals((-413.82415965173124), state1.getWeightDelta(), 0.01);
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertEquals((-413.82415965173124), state1.getWeight(), 0.01);
      assertFalse(state1.isBackWalkingBike());
      assertFalse(state1.isBikeRenting());
      assertEquals(0, state1.getPreTransitTime());
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals(0, state1.getNumBoardings());
      assertFalse(state1.isOnboard());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertEquals(1392409371L, state1.getTimeSeconds());
      assertTrue(boolean3);
      
      State state3 = multiShortestPathTree0.getState(intersectionVertex0);
      assertNotSame(state3, state0);
      assertSame(state3, state1);
      assertNotSame(state3, state2);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals((-413.82415965173124), state3.weight, 0.01);
      assertEquals(0.0, state3.walkDistance, 0.01);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertNotNull(state3);
      assertFalse(state3.equals((Object)state0));
      assertFalse(state3.equals((Object)state2));
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(state3.isCarParked());
      assertEquals(90.0, state3.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(90L, state3.getElapsedTimeSeconds());
      assertEquals(0.0, state3.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state3.getPreTransitTimeDelta());
      assertFalse(state3.isBikeRenting());
      assertEquals(0L, state3.getLastAlightedTimeSeconds());
      assertEquals(0, state3.getPreTransitTime());
      assertEquals(1392409371L, state3.getTimeSeconds());
      assertEquals(0.0, state3.getWalkSinceLastTransit(), 0.01);
      assertEquals((-413.82415965173124), state3.getWeightDelta(), 0.01);
      assertEquals(0, state3.getLastNextArrivalDelta());
      assertFalse(state3.isBackWalkingBike());
      assertFalse(state3.isEverBoarded());
      assertEquals(0.0, state3.getWalkDistance(), 0.01);
      assertEquals(1392409281L, state3.getStartTimeSeconds());
      assertEquals(90, state3.getAbsTimeDeltaSeconds());
      assertEquals((-413.82415965173124), state3.getWeight(), 0.01);
      assertFalse(state3.isOnboard());
      assertNull(state3.getBackMode());
      assertEquals(90, state3.getTimeDeltaSeconds());
      assertEquals(0, state3.getNumBoardings());
      assertNull(state3.getZone());
      assertEquals(1392409371000L, state3.getTimeInMillis());
      assertTrue(state3.isFinal());
      assertEquals(0.0, state3.getWalkDistanceDelta(), 0.01);
      assertFalse(state3.getReverseOptimizing());
      assertNull(state3.getNonTransitMode());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals("68e=`J", intersectionVertex0.getName());
      assertEquals(2, intersectionVertex0.getDegreeIn());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(2, intersectionVertex0.getDegreeOut());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.batch);
      assertNotNull(set0);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      String string0 = "";
      TraverseMode traverseMode0 = TraverseMode.RAIL;
      OptimizeType optimizeType0 = OptimizeType.FLAT;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0, optimizeType0);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertTrue(routingRequest0.softWalkLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertNotNull(routingRequest0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertTrue(routingRequest0.softWalkLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertNotNull(multiShortestPathTree0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      Graph graph0 = new Graph();
      assertNotNull(graph0);
      assertEquals(0, graph0.countVertices());
      
      ExitVertex exitVertex0 = new ExitVertex(graph0, string0, routingRequest0.maxTransfers, routingRequest0.transferSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertTrue(routingRequest0.softWalkLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(exitVertex0.freeFlowing);
      assertFalse(exitVertex0.trafficLight);
      assertNotNull(exitVertex0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, graph0.countVertices());
      assertEquals("", exitVertex0.getLabel());
      assertEquals(2.0, exitVertex0.getLon(), 0.01);
      assertEquals("", exitVertex0.getName());
      assertEquals(0.0, exitVertex0.getY(), 0.01);
      assertEquals(1, exitVertex0.getMaxIndex());
      assertEquals(0.0, exitVertex0.getLat(), 0.01);
      assertEquals(0, exitVertex0.getDegreeOut());
      assertEquals(0, exitVertex0.getIndex());
      assertEquals(2.0, exitVertex0.getX(), 0.01);
      assertNull(exitVertex0.getExitName());
      assertEquals(0, exitVertex0.getDegreeIn());
      assertFalse(exitVertex0.inferredFreeFlowing());
      
      routingRequest0.setRoutingContext(graph0, string0, routingRequest0.routerId);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertTrue(routingRequest0.softWalkLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, graph0.countVertices());
      
      State state0 = new State(exitVertex0, multiShortestPathTree0.options);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertTrue(routingRequest0.softWalkLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(exitVertex0.freeFlowing);
      assertFalse(exitVertex0.trafficLight);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertNotNull(state0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("", exitVertex0.getLabel());
      assertEquals(2.0, exitVertex0.getLon(), 0.01);
      assertEquals("", exitVertex0.getName());
      assertEquals(0.0, exitVertex0.getY(), 0.01);
      assertEquals(1, exitVertex0.getMaxIndex());
      assertEquals(0.0, exitVertex0.getLat(), 0.01);
      assertEquals(0, exitVertex0.getDegreeOut());
      assertEquals(0, exitVertex0.getIndex());
      assertEquals(2.0, exitVertex0.getX(), 0.01);
      assertNull(exitVertex0.getExitName());
      assertEquals(0, exitVertex0.getDegreeIn());
      assertFalse(exitVertex0.inferredFreeFlowing());
      assertFalse(state0.getReverseOptimizing());
      assertFalse(state0.isEverBoarded());
      assertNull(state0.getNonTransitMode());
      assertTrue(state0.isFinal());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertFalse(state0.isCarParked());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0, state0.getNumBoardings());
      
      boolean boolean0 = multiShortestPathTree0.add(state0);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertTrue(routingRequest0.softWalkLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(exitVertex0.freeFlowing);
      assertFalse(exitVertex0.trafficLight);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("", exitVertex0.getLabel());
      assertEquals(2.0, exitVertex0.getLon(), 0.01);
      assertEquals("", exitVertex0.getName());
      assertEquals(0.0, exitVertex0.getY(), 0.01);
      assertEquals(1, exitVertex0.getMaxIndex());
      assertEquals(0.0, exitVertex0.getLat(), 0.01);
      assertEquals(0, exitVertex0.getDegreeOut());
      assertEquals(0, exitVertex0.getIndex());
      assertEquals(2.0, exitVertex0.getX(), 0.01);
      assertNull(exitVertex0.getExitName());
      assertEquals(0, exitVertex0.getDegreeIn());
      assertFalse(exitVertex0.inferredFreeFlowing());
      assertFalse(state0.getReverseOptimizing());
      assertFalse(state0.isEverBoarded());
      assertNull(state0.getNonTransitMode());
      assertTrue(state0.isFinal());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertFalse(state0.isCarParked());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0, state0.getNumBoardings());
      assertTrue(boolean0);
      
      boolean boolean1 = multiShortestPathTree0.add(state0);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertTrue(routingRequest0.softWalkLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(exitVertex0.freeFlowing);
      assertFalse(exitVertex0.trafficLight);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertTrue(boolean1 == boolean0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("", exitVertex0.getLabel());
      assertEquals(2.0, exitVertex0.getLon(), 0.01);
      assertEquals("", exitVertex0.getName());
      assertEquals(0.0, exitVertex0.getY(), 0.01);
      assertEquals(1, exitVertex0.getMaxIndex());
      assertEquals(0.0, exitVertex0.getLat(), 0.01);
      assertEquals(0, exitVertex0.getDegreeOut());
      assertEquals(0, exitVertex0.getIndex());
      assertEquals(2.0, exitVertex0.getX(), 0.01);
      assertNull(exitVertex0.getExitName());
      assertEquals(0, exitVertex0.getDegreeIn());
      assertFalse(exitVertex0.inferredFreeFlowing());
      assertFalse(state0.getReverseOptimizing());
      assertFalse(state0.isEverBoarded());
      assertNull(state0.getNonTransitMode());
      assertTrue(state0.isFinal());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertFalse(state0.isCarParked());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0, state0.getNumBoardings());
      assertTrue(boolean1);
      
      State state1 = multiShortestPathTree0.getState(exitVertex0);
      assertSame(state1, state0);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertTrue(routingRequest0.softWalkLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(exitVertex0.freeFlowing);
      assertFalse(exitVertex0.trafficLight);
      assertEquals(0.0, state1.weight, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertNotNull(state1);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("", exitVertex0.getLabel());
      assertEquals(2.0, exitVertex0.getLon(), 0.01);
      assertEquals("", exitVertex0.getName());
      assertEquals(0.0, exitVertex0.getY(), 0.01);
      assertEquals(1, exitVertex0.getMaxIndex());
      assertEquals(0.0, exitVertex0.getLat(), 0.01);
      assertEquals(0, exitVertex0.getDegreeOut());
      assertEquals(0, exitVertex0.getIndex());
      assertEquals(2.0, exitVertex0.getX(), 0.01);
      assertNull(exitVertex0.getExitName());
      assertEquals(0, exitVertex0.getDegreeIn());
      assertFalse(exitVertex0.inferredFreeFlowing());
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertFalse(state1.isBackWalkingBike());
      assertNull(state1.getZone());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281000L, state1.getTimeInMillis());
      assertNull(state1.getBackMode());
      assertEquals(0, state1.getNumBoardings());
      assertNull(state1.getNonTransitMode());
      assertTrue(state1.isFinal());
      assertFalse(state1.isBikeRenting());
      assertEquals(0, state1.getPreTransitTime());
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertFalse(state1.getReverseOptimizing());
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertEquals(1392409281L, state1.getTimeSeconds());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertFalse(state1.isCarParked());
      assertFalse(state1.isOnboard());
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertEquals(1392409281L, state1.getStartTimeSeconds());
      assertFalse(state1.isEverBoarded());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state1.getLastNextArrivalDelta());
      
      int int0 = multiShortestPathTree0.getVertexCount();
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertTrue(routingRequest0.softWalkLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, int0);
      
      SimpleEdge simpleEdge0 = new SimpleEdge(exitVertex0, exitVertex0, routingRequest0.maxWeight, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertTrue(routingRequest0.softWalkLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(exitVertex0.freeFlowing);
      assertFalse(exitVertex0.trafficLight);
      assertNotNull(simpleEdge0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, graph0.countVertices());
      assertTrue(exitVertex0.inferredFreeFlowing());
      assertEquals("", exitVertex0.getLabel());
      assertEquals(2.0, exitVertex0.getLon(), 0.01);
      assertEquals("", exitVertex0.getName());
      assertEquals(0.0, exitVertex0.getY(), 0.01);
      assertEquals(1, exitVertex0.getMaxIndex());
      assertEquals(0.0, exitVertex0.getLat(), 0.01);
      assertEquals(0, exitVertex0.getIndex());
      assertEquals(1, exitVertex0.getDegreeOut());
      assertEquals(2.0, exitVertex0.getX(), 0.01);
      assertNull(exitVertex0.getExitName());
      assertEquals(1, exitVertex0.getDegreeIn());
      assertNull(simpleEdge0.getName());
      assertEquals(2, simpleEdge0.getId());
      assertFalse(simpleEdge0.isPartial());
      assertEquals(0.0, simpleEdge0.getDistance(), 0.01);
      assertTrue(simpleEdge0.vertexTypesValid());
      
      State state2 = simpleEdge0.traverse(state1);
      assertSame(state1, state0);
      assertNotSame(state1, state2);
      assertNotSame(state2, state1);
      assertNotSame(state2, state0);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertTrue(routingRequest0.softWalkLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(exitVertex0.freeFlowing);
      assertFalse(exitVertex0.trafficLight);
      assertEquals(0.0, state1.weight, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertEquals(1.7976931348623157E308, state2.weight, 0.01);
      assertEquals(0.0, state2.walkDistance, 0.01);
      assertNotNull(state2);
      assertFalse(state2.equals((Object)state1));
      assertFalse(state2.equals((Object)state0));
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertTrue(exitVertex0.inferredFreeFlowing());
      assertEquals("", exitVertex0.getLabel());
      assertEquals(2.0, exitVertex0.getLon(), 0.01);
      assertEquals("", exitVertex0.getName());
      assertEquals(0.0, exitVertex0.getY(), 0.01);
      assertEquals(1, exitVertex0.getMaxIndex());
      assertEquals(0.0, exitVertex0.getLat(), 0.01);
      assertEquals(0, exitVertex0.getIndex());
      assertEquals(1, exitVertex0.getDegreeOut());
      assertEquals(2.0, exitVertex0.getX(), 0.01);
      assertNull(exitVertex0.getExitName());
      assertEquals(1, exitVertex0.getDegreeIn());
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertFalse(state1.isBackWalkingBike());
      assertNull(state1.getZone());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281000L, state1.getTimeInMillis());
      assertNull(state1.getBackMode());
      assertEquals(0, state1.getNumBoardings());
      assertNull(state1.getNonTransitMode());
      assertTrue(state1.isFinal());
      assertFalse(state1.isBikeRenting());
      assertEquals(0, state1.getPreTransitTime());
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertFalse(state1.getReverseOptimizing());
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertEquals(1392409281L, state1.getTimeSeconds());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertFalse(state1.isCarParked());
      assertFalse(state1.isOnboard());
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertEquals(1392409281L, state1.getStartTimeSeconds());
      assertFalse(state1.isEverBoarded());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertNull(simpleEdge0.getName());
      assertEquals(2, simpleEdge0.getId());
      assertFalse(simpleEdge0.isPartial());
      assertEquals(0.0, simpleEdge0.getDistance(), 0.01);
      assertTrue(simpleEdge0.vertexTypesValid());
      assertNull(state2.getZone());
      assertEquals(1392409461000L, state2.getTimeInMillis());
      assertEquals(180.0, state2.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state2.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state2.getPreTransitTime());
      assertEquals(180, state2.getTimeDeltaSeconds());
      assertFalse(state2.isBikeRenting());
      assertFalse(state2.isBackWalkingBike());
      assertEquals(0, state2.getLastNextArrivalDelta());
      assertFalse(state2.isCarParked());
      assertNull(state2.getBackMode());
      assertEquals(0, state2.getPreTransitTimeDelta());
      assertNull(state2.getNonTransitMode());
      assertEquals(180L, state2.getElapsedTimeSeconds());
      assertEquals(180, state2.getAbsTimeDeltaSeconds());
      assertEquals(0L, state2.getLastAlightedTimeSeconds());
      assertEquals(0.0, state2.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state2.getWalkAtLastTransit(), 0.01);
      assertEquals(1.7976931348623157E308, state2.getWeightDelta(), 0.01);
      assertEquals(1.7976931348623157E308, state2.getWeight(), 0.01);
      assertEquals(1392409461L, state2.getTimeSeconds());
      assertFalse(state2.getReverseOptimizing());
      assertEquals(1392409281L, state2.getStartTimeSeconds());
      assertFalse(state2.isEverBoarded());
      assertTrue(state2.isFinal());
      assertEquals(0, state2.getNumBoardings());
      assertEquals(0.0, state2.getWalkDistance(), 0.01);
      assertFalse(state2.isOnboard());
      
      boolean boolean2 = multiShortestPathTree0.add(state2);
      assertSame(state1, state0);
      assertNotSame(state1, state2);
      assertNotSame(state2, state1);
      assertNotSame(state2, state0);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertTrue(routingRequest0.softWalkLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(exitVertex0.freeFlowing);
      assertFalse(exitVertex0.trafficLight);
      assertEquals(0.0, state1.weight, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertEquals(1.7976931348623157E308, state2.weight, 0.01);
      assertEquals(0.0, state2.walkDistance, 0.01);
      assertFalse(state1.equals((Object)state2));
      assertFalse(state2.equals((Object)state1));
      assertFalse(state2.equals((Object)state0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertTrue(exitVertex0.inferredFreeFlowing());
      assertEquals("", exitVertex0.getLabel());
      assertEquals(2.0, exitVertex0.getLon(), 0.01);
      assertEquals("", exitVertex0.getName());
      assertEquals(0.0, exitVertex0.getY(), 0.01);
      assertEquals(1, exitVertex0.getMaxIndex());
      assertEquals(0.0, exitVertex0.getLat(), 0.01);
      assertEquals(0, exitVertex0.getIndex());
      assertEquals(1, exitVertex0.getDegreeOut());
      assertEquals(2.0, exitVertex0.getX(), 0.01);
      assertNull(exitVertex0.getExitName());
      assertEquals(1, exitVertex0.getDegreeIn());
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertFalse(state1.isBackWalkingBike());
      assertNull(state1.getZone());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281000L, state1.getTimeInMillis());
      assertNull(state1.getBackMode());
      assertEquals(0, state1.getNumBoardings());
      assertNull(state1.getNonTransitMode());
      assertTrue(state1.isFinal());
      assertFalse(state1.isBikeRenting());
      assertEquals(0, state1.getPreTransitTime());
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertFalse(state1.getReverseOptimizing());
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertEquals(1392409281L, state1.getTimeSeconds());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertFalse(state1.isCarParked());
      assertFalse(state1.isOnboard());
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertEquals(1392409281L, state1.getStartTimeSeconds());
      assertFalse(state1.isEverBoarded());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertNull(simpleEdge0.getName());
      assertEquals(2, simpleEdge0.getId());
      assertFalse(simpleEdge0.isPartial());
      assertEquals(0.0, simpleEdge0.getDistance(), 0.01);
      assertTrue(simpleEdge0.vertexTypesValid());
      assertNull(state2.getZone());
      assertEquals(1392409461000L, state2.getTimeInMillis());
      assertEquals(180.0, state2.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state2.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state2.getPreTransitTime());
      assertEquals(180, state2.getTimeDeltaSeconds());
      assertFalse(state2.isBikeRenting());
      assertFalse(state2.isBackWalkingBike());
      assertEquals(0, state2.getLastNextArrivalDelta());
      assertFalse(state2.isCarParked());
      assertNull(state2.getBackMode());
      assertEquals(0, state2.getPreTransitTimeDelta());
      assertNull(state2.getNonTransitMode());
      assertEquals(180L, state2.getElapsedTimeSeconds());
      assertEquals(180, state2.getAbsTimeDeltaSeconds());
      assertEquals(0L, state2.getLastAlightedTimeSeconds());
      assertEquals(0.0, state2.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state2.getWalkAtLastTransit(), 0.01);
      assertEquals(1.7976931348623157E308, state2.getWeightDelta(), 0.01);
      assertEquals(1.7976931348623157E308, state2.getWeight(), 0.01);
      assertEquals(1392409461L, state2.getTimeSeconds());
      assertFalse(state2.getReverseOptimizing());
      assertEquals(1392409281L, state2.getStartTimeSeconds());
      assertFalse(state2.isEverBoarded());
      assertTrue(state2.isFinal());
      assertEquals(0, state2.getNumBoardings());
      assertEquals(0.0, state2.getWalkDistance(), 0.01);
      assertFalse(state2.isOnboard());
      assertFalse(boolean2);
      
      boolean boolean3 = MultiShortestPathTree.dominates(state2, state2);
      assertSame(state1, state0);
      assertNotSame(state1, state2);
      assertNotSame(state2, state1);
      assertNotSame(state2, state0);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertTrue(routingRequest0.softWalkLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(exitVertex0.freeFlowing);
      assertFalse(exitVertex0.trafficLight);
      assertEquals(0.0, state1.weight, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertEquals(1.7976931348623157E308, state2.weight, 0.01);
      assertEquals(0.0, state2.walkDistance, 0.01);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(state1.equals((Object)state2));
      assertFalse(state2.equals((Object)state1));
      assertFalse(state2.equals((Object)state0));
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertTrue(exitVertex0.inferredFreeFlowing());
      assertEquals("", exitVertex0.getLabel());
      assertEquals(2.0, exitVertex0.getLon(), 0.01);
      assertEquals("", exitVertex0.getName());
      assertEquals(0.0, exitVertex0.getY(), 0.01);
      assertEquals(1, exitVertex0.getMaxIndex());
      assertEquals(0.0, exitVertex0.getLat(), 0.01);
      assertEquals(0, exitVertex0.getIndex());
      assertEquals(1, exitVertex0.getDegreeOut());
      assertEquals(2.0, exitVertex0.getX(), 0.01);
      assertNull(exitVertex0.getExitName());
      assertEquals(1, exitVertex0.getDegreeIn());
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertFalse(state1.isBackWalkingBike());
      assertNull(state1.getZone());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281000L, state1.getTimeInMillis());
      assertNull(state1.getBackMode());
      assertEquals(0, state1.getNumBoardings());
      assertNull(state1.getNonTransitMode());
      assertTrue(state1.isFinal());
      assertFalse(state1.isBikeRenting());
      assertEquals(0, state1.getPreTransitTime());
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertFalse(state1.getReverseOptimizing());
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertEquals(1392409281L, state1.getTimeSeconds());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertFalse(state1.isCarParked());
      assertFalse(state1.isOnboard());
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertEquals(1392409281L, state1.getStartTimeSeconds());
      assertFalse(state1.isEverBoarded());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertNull(simpleEdge0.getName());
      assertEquals(2, simpleEdge0.getId());
      assertFalse(simpleEdge0.isPartial());
      assertEquals(0.0, simpleEdge0.getDistance(), 0.01);
      assertTrue(simpleEdge0.vertexTypesValid());
      assertNull(state2.getZone());
      assertEquals(1392409461000L, state2.getTimeInMillis());
      assertEquals(180.0, state2.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state2.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state2.getPreTransitTime());
      assertEquals(180, state2.getTimeDeltaSeconds());
      assertFalse(state2.isBikeRenting());
      assertFalse(state2.isBackWalkingBike());
      assertEquals(0, state2.getLastNextArrivalDelta());
      assertFalse(state2.isCarParked());
      assertNull(state2.getBackMode());
      assertEquals(0, state2.getPreTransitTimeDelta());
      assertNull(state2.getNonTransitMode());
      assertEquals(180L, state2.getElapsedTimeSeconds());
      assertEquals(180, state2.getAbsTimeDeltaSeconds());
      assertEquals(0L, state2.getLastAlightedTimeSeconds());
      assertEquals(0.0, state2.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state2.getWalkAtLastTransit(), 0.01);
      assertEquals(1.7976931348623157E308, state2.getWeightDelta(), 0.01);
      assertEquals(1.7976931348623157E308, state2.getWeight(), 0.01);
      assertEquals(1392409461L, state2.getTimeSeconds());
      assertFalse(state2.getReverseOptimizing());
      assertEquals(1392409281L, state2.getStartTimeSeconds());
      assertFalse(state2.isEverBoarded());
      assertTrue(state2.isFinal());
      assertEquals(0, state2.getNumBoardings());
      assertEquals(0.0, state2.getWalkDistance(), 0.01);
      assertFalse(state2.isOnboard());
      assertTrue(boolean3);
      
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertTrue(routingRequest0.softWalkLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertNotNull(collection0);
      assertFalse(collection0.contains(state2));
      assertTrue(collection0.contains(state0));
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      TraverseModeSet traverseModeSet0 = TraverseModeSet.allModes();
      assertNotNull(traverseModeSet0);
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.getCableCar());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.isTransit());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertTrue(traverseModeSet0.getSubway());
      assertTrue(traverseModeSet0.getBicycle());
      assertEquals(8183, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getRail());
      assertTrue(traverseModeSet0.getCar());
      
      RoutingRequest routingRequest0 = new RoutingRequest(traverseModeSet0);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertNotNull(routingRequest0);
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.getCableCar());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.isTransit());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertTrue(traverseModeSet0.getSubway());
      assertTrue(traverseModeSet0.getBicycle());
      assertEquals(8183, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getRail());
      assertTrue(traverseModeSet0.getCar());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertNotNull(multiShortestPathTree0);
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.getCableCar());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.isTransit());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertTrue(traverseModeSet0.getSubway());
      assertTrue(traverseModeSet0.getBicycle());
      assertEquals(8183, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getRail());
      assertTrue(traverseModeSet0.getCar());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      int int0 = multiShortestPathTree0.getVertexCount();
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.getCableCar());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.isTransit());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertTrue(traverseModeSet0.getSubway());
      assertTrue(traverseModeSet0.getBicycle());
      assertEquals(8183, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getRail());
      assertTrue(traverseModeSet0.getCar());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, int0);
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.FERRY;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertNotNull(routingRequest0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      
      Map<Object, Object> map0 = null;
      routingRequest0.extensions = map0;
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertNotNull(multiShortestPathTree0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      State state0 = null;
      // Undeclared exception!
      try { 
        MultiShortestPathTree.dominates(state0, state0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.GONDOLA;
      OptimizeType optimizeType0 = OptimizeType.GREENWAYS;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0, optimizeType0);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertNotNull(routingRequest0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertNotNull(multiShortestPathTree0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      Graph graph0 = null;
      String string0 = null;
      ExitVertex exitVertex0 = new ExitVertex(graph0, string0, routingRequest0.waitReluctance, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(exitVertex0.freeFlowing);
      assertFalse(exitVertex0.trafficLight);
      assertNotNull(exitVertex0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, exitVertex0.getDegreeIn());
      assertEquals(1.0, exitVertex0.getX(), 0.01);
      assertEquals(1, exitVertex0.getMaxIndex());
      assertFalse(exitVertex0.inferredFreeFlowing());
      assertNull(exitVertex0.getName());
      assertEquals(1.0, exitVertex0.getLon(), 0.01);
      assertNull(exitVertex0.getLabel());
      assertNull(exitVertex0.getExitName());
      assertEquals(1.392409281E9, exitVertex0.getY(), 0.01);
      assertEquals(1.392409281E9, exitVertex0.getLat(), 0.01);
      assertEquals(0, exitVertex0.getDegreeOut());
      assertEquals(0, exitVertex0.getIndex());
      
      BikeRentalStation bikeRentalStation0 = new BikeRentalStation();
      assertTrue(bikeRentalStation0.realTimeData);
      assertEquals(Integer.MAX_VALUE, bikeRentalStation0.spacesAvailable);
      assertEquals(Integer.MAX_VALUE, bikeRentalStation0.bikesAvailable);
      assertEquals(0.0, bikeRentalStation0.x, 0.01);
      assertEquals(0.0, bikeRentalStation0.y, 0.01);
      assertNotNull(bikeRentalStation0);
      
      BikeRentalStationVertex bikeRentalStationVertex0 = new BikeRentalStationVertex(graph0, bikeRentalStation0);
      assertTrue(bikeRentalStation0.realTimeData);
      assertEquals(Integer.MAX_VALUE, bikeRentalStation0.spacesAvailable);
      assertEquals(Integer.MAX_VALUE, bikeRentalStation0.bikesAvailable);
      assertEquals(0.0, bikeRentalStation0.x, 0.01);
      assertEquals(0.0, bikeRentalStation0.y, 0.01);
      assertNotNull(bikeRentalStationVertex0);
      assertEquals(0, bikeRentalStationVertex0.getDegreeIn());
      assertEquals("bike rental station null", bikeRentalStationVertex0.getLabel());
      assertEquals(0.0, bikeRentalStationVertex0.getY(), 0.01);
      assertEquals(0.0, bikeRentalStationVertex0.getX(), 0.01);
      assertEquals(2, bikeRentalStationVertex0.getMaxIndex());
      assertEquals(Integer.MAX_VALUE, bikeRentalStationVertex0.getBikesAvailable());
      assertEquals(0, bikeRentalStationVertex0.getDegreeOut());
      assertEquals(1, bikeRentalStationVertex0.getIndex());
      assertEquals(Integer.MAX_VALUE, bikeRentalStationVertex0.getSpacesAvailable());
      assertEquals(0.0, bikeRentalStationVertex0.getLat(), 0.01);
      assertNull(bikeRentalStationVertex0.getName());
      assertEquals(0.0, bikeRentalStationVertex0.getLon(), 0.01);
      assertNull(bikeRentalStationVertex0.getId());
      
      StreetBikeRentalLink streetBikeRentalLink0 = new StreetBikeRentalLink(exitVertex0, bikeRentalStationVertex0);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(exitVertex0.freeFlowing);
      assertFalse(exitVertex0.trafficLight);
      assertTrue(bikeRentalStation0.realTimeData);
      assertEquals(Integer.MAX_VALUE, bikeRentalStation0.spacesAvailable);
      assertEquals(Integer.MAX_VALUE, bikeRentalStation0.bikesAvailable);
      assertEquals(0.0, bikeRentalStation0.x, 0.01);
      assertEquals(0.0, bikeRentalStation0.y, 0.01);
      assertNotNull(streetBikeRentalLink0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, exitVertex0.getDegreeOut());
      assertEquals(0, exitVertex0.getDegreeIn());
      assertEquals(1.0, exitVertex0.getX(), 0.01);
      assertEquals(2, exitVertex0.getMaxIndex());
      assertFalse(exitVertex0.inferredFreeFlowing());
      assertNull(exitVertex0.getName());
      assertEquals(1.0, exitVertex0.getLon(), 0.01);
      assertNull(exitVertex0.getLabel());
      assertNull(exitVertex0.getExitName());
      assertEquals(1.392409281E9, exitVertex0.getY(), 0.01);
      assertEquals(1.392409281E9, exitVertex0.getLat(), 0.01);
      assertEquals(0, exitVertex0.getIndex());
      assertEquals("bike rental station null", bikeRentalStationVertex0.getLabel());
      assertEquals(0.0, bikeRentalStationVertex0.getY(), 0.01);
      assertEquals(0.0, bikeRentalStationVertex0.getX(), 0.01);
      assertEquals(2, bikeRentalStationVertex0.getMaxIndex());
      assertEquals(Integer.MAX_VALUE, bikeRentalStationVertex0.getBikesAvailable());
      assertEquals(0, bikeRentalStationVertex0.getDegreeOut());
      assertEquals(1, bikeRentalStationVertex0.getIndex());
      assertEquals(Integer.MAX_VALUE, bikeRentalStationVertex0.getSpacesAvailable());
      assertEquals(0.0, bikeRentalStationVertex0.getLat(), 0.01);
      assertNull(bikeRentalStationVertex0.getName());
      assertEquals(0.0, bikeRentalStationVertex0.getLon(), 0.01);
      assertEquals(1, bikeRentalStationVertex0.getDegreeIn());
      assertNull(bikeRentalStationVertex0.getId());
      assertEquals(3, streetBikeRentalLink0.getId());
      assertEquals(0.0, streetBikeRentalLink0.getDistance(), 0.01);
      assertFalse(streetBikeRentalLink0.isPartial());
      assertNull(streetBikeRentalLink0.getName());
      assertNull(streetBikeRentalLink0.getDirection());
      assertTrue(streetBikeRentalLink0.vertexTypesValid());
      
      BikeRentalStationVertex bikeRentalStationVertex1 = (BikeRentalStationVertex)streetBikeRentalLink0.getToVertex();
      assertSame(bikeRentalStationVertex0, bikeRentalStationVertex1);
      assertSame(bikeRentalStationVertex1, bikeRentalStationVertex0);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(exitVertex0.freeFlowing);
      assertFalse(exitVertex0.trafficLight);
      assertTrue(bikeRentalStation0.realTimeData);
      assertEquals(Integer.MAX_VALUE, bikeRentalStation0.spacesAvailable);
      assertEquals(Integer.MAX_VALUE, bikeRentalStation0.bikesAvailable);
      assertEquals(0.0, bikeRentalStation0.x, 0.01);
      assertEquals(0.0, bikeRentalStation0.y, 0.01);
      assertNotNull(bikeRentalStationVertex1);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, exitVertex0.getDegreeOut());
      assertEquals(0, exitVertex0.getDegreeIn());
      assertEquals(1.0, exitVertex0.getX(), 0.01);
      assertEquals(2, exitVertex0.getMaxIndex());
      assertFalse(exitVertex0.inferredFreeFlowing());
      assertNull(exitVertex0.getName());
      assertEquals(1.0, exitVertex0.getLon(), 0.01);
      assertNull(exitVertex0.getLabel());
      assertNull(exitVertex0.getExitName());
      assertEquals(1.392409281E9, exitVertex0.getY(), 0.01);
      assertEquals(1.392409281E9, exitVertex0.getLat(), 0.01);
      assertEquals(0, exitVertex0.getIndex());
      assertEquals("bike rental station null", bikeRentalStationVertex0.getLabel());
      assertEquals(0.0, bikeRentalStationVertex0.getY(), 0.01);
      assertEquals(0.0, bikeRentalStationVertex0.getX(), 0.01);
      assertEquals(2, bikeRentalStationVertex0.getMaxIndex());
      assertEquals(Integer.MAX_VALUE, bikeRentalStationVertex0.getBikesAvailable());
      assertEquals(0, bikeRentalStationVertex0.getDegreeOut());
      assertEquals(1, bikeRentalStationVertex0.getIndex());
      assertEquals(Integer.MAX_VALUE, bikeRentalStationVertex0.getSpacesAvailable());
      assertEquals(0.0, bikeRentalStationVertex0.getLat(), 0.01);
      assertNull(bikeRentalStationVertex0.getName());
      assertEquals(0.0, bikeRentalStationVertex0.getLon(), 0.01);
      assertEquals(1, bikeRentalStationVertex0.getDegreeIn());
      assertNull(bikeRentalStationVertex0.getId());
      assertEquals(3, streetBikeRentalLink0.getId());
      assertEquals(0.0, streetBikeRentalLink0.getDistance(), 0.01);
      assertFalse(streetBikeRentalLink0.isPartial());
      assertNull(streetBikeRentalLink0.getName());
      assertNull(streetBikeRentalLink0.getDirection());
      assertTrue(streetBikeRentalLink0.vertexTypesValid());
      assertEquals(1, bikeRentalStationVertex1.getDegreeIn());
      assertEquals("bike rental station null", bikeRentalStationVertex1.getLabel());
      assertEquals(0.0, bikeRentalStationVertex1.getLon(), 0.01);
      assertNull(bikeRentalStationVertex1.getId());
      assertEquals(2, bikeRentalStationVertex1.getMaxIndex());
      assertEquals(0.0, bikeRentalStationVertex1.getX(), 0.01);
      assertEquals(0.0, bikeRentalStationVertex1.getY(), 0.01);
      assertNull(bikeRentalStationVertex1.getName());
      assertEquals(0.0, bikeRentalStationVertex1.getLat(), 0.01);
      assertEquals(1, bikeRentalStationVertex1.getIndex());
      assertEquals(0, bikeRentalStationVertex1.getDegreeOut());
      assertEquals(Integer.MAX_VALUE, bikeRentalStationVertex1.getSpacesAvailable());
      assertEquals(Integer.MAX_VALUE, bikeRentalStationVertex1.getBikesAvailable());
      
      State state0 = multiShortestPathTree0.getState(bikeRentalStationVertex1);
      assertSame(bikeRentalStationVertex0, bikeRentalStationVertex1);
      assertSame(bikeRentalStationVertex1, bikeRentalStationVertex0);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(exitVertex0.freeFlowing);
      assertFalse(exitVertex0.trafficLight);
      assertTrue(bikeRentalStation0.realTimeData);
      assertEquals(Integer.MAX_VALUE, bikeRentalStation0.spacesAvailable);
      assertEquals(Integer.MAX_VALUE, bikeRentalStation0.bikesAvailable);
      assertEquals(0.0, bikeRentalStation0.x, 0.01);
      assertEquals(0.0, bikeRentalStation0.y, 0.01);
      assertNull(state0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(1, exitVertex0.getDegreeOut());
      assertEquals(0, exitVertex0.getDegreeIn());
      assertEquals(1.0, exitVertex0.getX(), 0.01);
      assertEquals(2, exitVertex0.getMaxIndex());
      assertFalse(exitVertex0.inferredFreeFlowing());
      assertNull(exitVertex0.getName());
      assertEquals(1.0, exitVertex0.getLon(), 0.01);
      assertNull(exitVertex0.getLabel());
      assertNull(exitVertex0.getExitName());
      assertEquals(1.392409281E9, exitVertex0.getY(), 0.01);
      assertEquals(1.392409281E9, exitVertex0.getLat(), 0.01);
      assertEquals(0, exitVertex0.getIndex());
      assertEquals("bike rental station null", bikeRentalStationVertex0.getLabel());
      assertEquals(0.0, bikeRentalStationVertex0.getY(), 0.01);
      assertEquals(0.0, bikeRentalStationVertex0.getX(), 0.01);
      assertEquals(2, bikeRentalStationVertex0.getMaxIndex());
      assertEquals(Integer.MAX_VALUE, bikeRentalStationVertex0.getBikesAvailable());
      assertEquals(0, bikeRentalStationVertex0.getDegreeOut());
      assertEquals(1, bikeRentalStationVertex0.getIndex());
      assertEquals(Integer.MAX_VALUE, bikeRentalStationVertex0.getSpacesAvailable());
      assertEquals(0.0, bikeRentalStationVertex0.getLat(), 0.01);
      assertNull(bikeRentalStationVertex0.getName());
      assertEquals(0.0, bikeRentalStationVertex0.getLon(), 0.01);
      assertEquals(1, bikeRentalStationVertex0.getDegreeIn());
      assertNull(bikeRentalStationVertex0.getId());
      assertEquals(3, streetBikeRentalLink0.getId());
      assertEquals(0.0, streetBikeRentalLink0.getDistance(), 0.01);
      assertFalse(streetBikeRentalLink0.isPartial());
      assertNull(streetBikeRentalLink0.getName());
      assertNull(streetBikeRentalLink0.getDirection());
      assertTrue(streetBikeRentalLink0.vertexTypesValid());
      assertEquals(1, bikeRentalStationVertex1.getDegreeIn());
      assertEquals("bike rental station null", bikeRentalStationVertex1.getLabel());
      assertEquals(0.0, bikeRentalStationVertex1.getLon(), 0.01);
      assertNull(bikeRentalStationVertex1.getId());
      assertEquals(2, bikeRentalStationVertex1.getMaxIndex());
      assertEquals(0.0, bikeRentalStationVertex1.getX(), 0.01);
      assertEquals(0.0, bikeRentalStationVertex1.getY(), 0.01);
      assertNull(bikeRentalStationVertex1.getName());
      assertEquals(0.0, bikeRentalStationVertex1.getLat(), 0.01);
      assertEquals(1, bikeRentalStationVertex1.getIndex());
      assertEquals(0, bikeRentalStationVertex1.getDegreeOut());
      assertEquals(Integer.MAX_VALUE, bikeRentalStationVertex1.getSpacesAvailable());
      assertEquals(Integer.MAX_VALUE, bikeRentalStationVertex1.getBikesAvailable());
      
      // Undeclared exception!
      try { 
        multiShortestPathTree0.add(state0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      State state0 = null;
      // Undeclared exception!
      try { 
        MultiShortestPathTree.dominates(state0, state0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.CUSTOM_MOTOR_VEHICLE;
      OptimizeType optimizeType0 = OptimizeType.TRANSFERS;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0, optimizeType0);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertNotNull(routingRequest0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      
      RoutingRequest routingRequest1 = routingRequest0.clone();
      assertNotSame(routingRequest0, routingRequest1);
      assertNotSame(routingRequest1, routingRequest0);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(3, routingRequest1.numItineraries);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertFalse(routingRequest1.kissAndRide);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertEquals(2, routingRequest1.maxTransfers);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertFalse(routingRequest1.showIntermediateStops);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertFalse(routingRequest1.batch);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertTrue(routingRequest1.driveOnRight);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertEquals(9223372036854775807L, routingRequest1.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(0, routingRequest1.transferSlack);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest1.walkingBike);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertEquals(0, routingRequest1.alightSlack);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest1.transferPenalty);
      assertEquals(0, routingRequest1.boardSlack);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertFalse(routingRequest1.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertFalse(routingRequest1.arriveBy);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertTrue(routingRequest1.softWalkLimiting);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertNotNull(routingRequest1);
      assertTrue(routingRequest1.equals((Object)routingRequest0));
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(40.0, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, routingRequest1.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertFalse(routingRequest1.transitAllowed());
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest1);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(3, routingRequest1.numItineraries);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertFalse(routingRequest1.kissAndRide);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertEquals(2, routingRequest1.maxTransfers);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertFalse(routingRequest1.showIntermediateStops);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertFalse(routingRequest1.batch);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertTrue(routingRequest1.driveOnRight);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertEquals(9223372036854775807L, routingRequest1.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(0, routingRequest1.transferSlack);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest1.walkingBike);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertEquals(0, routingRequest1.alightSlack);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest1.transferPenalty);
      assertEquals(0, routingRequest1.boardSlack);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertFalse(routingRequest1.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertFalse(routingRequest1.arriveBy);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertTrue(routingRequest1.softWalkLimiting);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertNotNull(multiShortestPathTree0);
      assertTrue(routingRequest0.equals((Object)routingRequest1));
      assertTrue(routingRequest1.equals((Object)routingRequest0));
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(40.0, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, routingRequest1.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertFalse(routingRequest1.transitAllowed());
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      assertNotSame(routingRequest0, routingRequest1);
      assertNotSame(routingRequest1, routingRequest0);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(3, routingRequest1.numItineraries);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertFalse(routingRequest1.kissAndRide);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertEquals(2, routingRequest1.maxTransfers);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertFalse(routingRequest1.showIntermediateStops);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertFalse(routingRequest1.batch);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertTrue(routingRequest1.driveOnRight);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertEquals(9223372036854775807L, routingRequest1.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(0, routingRequest1.transferSlack);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest1.walkingBike);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertEquals(0, routingRequest1.alightSlack);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest1.transferPenalty);
      assertEquals(0, routingRequest1.boardSlack);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertFalse(routingRequest1.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertFalse(routingRequest1.arriveBy);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertTrue(routingRequest1.softWalkLimiting);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertNotNull(set0);
      assertTrue(routingRequest0.equals((Object)routingRequest1));
      assertTrue(routingRequest1.equals((Object)routingRequest0));
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(40.0, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, routingRequest1.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertFalse(routingRequest1.transitAllowed());
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.FUNICULAR;
      OptimizeType optimizeType0 = OptimizeType.SAFE;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0, optimizeType0);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertNotNull(routingRequest0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      
      RoutingRequest routingRequest1 = routingRequest0.clone();
      assertNotSame(routingRequest0, routingRequest1);
      assertNotSame(routingRequest1, routingRequest0);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertEquals(3, routingRequest1.numItineraries);
      assertFalse(routingRequest1.kissAndRide);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest1.transferPenalty);
      assertEquals(0, routingRequest1.alightSlack);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertTrue(routingRequest1.softWalkLimiting);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertFalse(routingRequest1.arriveBy);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertEquals(9223372036854775807L, routingRequest1.worstTime);
      assertFalse(routingRequest1.walkingBike);
      assertFalse(routingRequest1.parkAndRide);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest1.boardSlack);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest1.transferSlack);
      assertFalse(routingRequest1.showIntermediateStops);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertFalse(routingRequest1.allowBikeRental);
      assertFalse(routingRequest1.reverseOptimizing);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertFalse(routingRequest1.batch);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(2, routingRequest1.maxTransfers);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertNotNull(routingRequest1);
      assertTrue(routingRequest1.equals((Object)routingRequest0));
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(3, routingRequest1.getNumItineraries());
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest1.transitAllowed());
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest1);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertEquals(3, routingRequest1.numItineraries);
      assertFalse(routingRequest1.kissAndRide);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest1.transferPenalty);
      assertEquals(0, routingRequest1.alightSlack);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertTrue(routingRequest1.softWalkLimiting);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertFalse(routingRequest1.arriveBy);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertEquals(9223372036854775807L, routingRequest1.worstTime);
      assertFalse(routingRequest1.walkingBike);
      assertFalse(routingRequest1.parkAndRide);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest1.boardSlack);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest1.transferSlack);
      assertFalse(routingRequest1.showIntermediateStops);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertFalse(routingRequest1.allowBikeRental);
      assertFalse(routingRequest1.reverseOptimizing);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertFalse(routingRequest1.batch);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(2, routingRequest1.maxTransfers);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertNotNull(multiShortestPathTree0);
      assertTrue(routingRequest0.equals((Object)routingRequest1));
      assertTrue(routingRequest1.equals((Object)routingRequest0));
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(3, routingRequest1.getNumItineraries());
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest1.transitAllowed());
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      Graph graph0 = null;
      double double0 = (-1271.0);
      double double1 = (-3003.048871172);
      IntersectionVertex intersectionVertex0 = new IntersectionVertex(graph0, routingRequest0.routerId, double0, double1);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertNotNull(intersectionVertex0);
      assertTrue(routingRequest0.equals((Object)routingRequest1));
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals((-3003.048871172), intersectionVertex0.getLat(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals((-1271.0), intersectionVertex0.getX(), 0.01);
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals((-1271.0), intersectionVertex0.getLon(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals((-3003.048871172), intersectionVertex0.getY(), 0.01);
      assertEquals("", intersectionVertex0.getName());
      
      List<State> list0 = multiShortestPathTree0.getStates(intersectionVertex0);
      assertNotSame(routingRequest0, routingRequest1);
      assertNotSame(routingRequest1, routingRequest0);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertEquals(3, routingRequest1.numItineraries);
      assertFalse(routingRequest1.kissAndRide);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest1.transferPenalty);
      assertEquals(0, routingRequest1.alightSlack);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertTrue(routingRequest1.softWalkLimiting);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertFalse(routingRequest1.arriveBy);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertEquals(9223372036854775807L, routingRequest1.worstTime);
      assertFalse(routingRequest1.walkingBike);
      assertFalse(routingRequest1.parkAndRide);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest1.boardSlack);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest1.transferSlack);
      assertFalse(routingRequest1.showIntermediateStops);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertFalse(routingRequest1.allowBikeRental);
      assertFalse(routingRequest1.reverseOptimizing);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertFalse(routingRequest1.batch);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(2, routingRequest1.maxTransfers);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertNull(list0);
      assertTrue(routingRequest0.equals((Object)routingRequest1));
      assertTrue(routingRequest1.equals((Object)routingRequest0));
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(3, routingRequest1.getNumItineraries());
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest1.transitAllowed());
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals((-3003.048871172), intersectionVertex0.getLat(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals((-1271.0), intersectionVertex0.getX(), 0.01);
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals((-1271.0), intersectionVertex0.getLon(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals((-3003.048871172), intersectionVertex0.getY(), 0.01);
      assertEquals("", intersectionVertex0.getName());
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.TRAM;
      OptimizeType optimizeType0 = OptimizeType.TRIANGLE;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0, optimizeType0);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertNotNull(routingRequest0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertNotNull(multiShortestPathTree0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      String string0 = multiShortestPathTree0.toString();
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertNotNull(string0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals("MultiSPT(0 vertices)", string0);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      ArrayList<TraverseMode> arrayList0 = new ArrayList<TraverseMode>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      TraverseModeSet traverseModeSet0 = new TraverseModeSet(arrayList0);
      assertNotNull(traverseModeSet0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(traverseModeSet0.isValid());
      assertFalse(traverseModeSet0.getCar());
      assertFalse(traverseModeSet0.getCableCar());
      assertFalse(traverseModeSet0.getRail());
      assertFalse(traverseModeSet0.isTransit());
      assertFalse(traverseModeSet0.getTraininsh());
      assertFalse(traverseModeSet0.getBusish());
      assertFalse(traverseModeSet0.getFerry());
      assertFalse(traverseModeSet0.getFunicular());
      assertFalse(traverseModeSet0.getBicycle());
      assertFalse(traverseModeSet0.getDriving());
      assertFalse(traverseModeSet0.getWalk());
      assertEquals(0, traverseModeSet0.getMask());
      assertFalse(traverseModeSet0.getTrainish());
      assertFalse(traverseModeSet0.getSubway());
      assertFalse(traverseModeSet0.getTram());
      assertFalse(traverseModeSet0.getCustomMotorVehicle());
      assertFalse(traverseModeSet0.getBus());
      assertFalse(traverseModeSet0.getGondola());
      
      OptimizeType optimizeType0 = OptimizeType.SAFE;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseModeSet0, optimizeType0);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
      assertNotNull(routingRequest0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(traverseModeSet0.isValid());
      assertFalse(traverseModeSet0.getCar());
      assertFalse(traverseModeSet0.getCableCar());
      assertFalse(traverseModeSet0.getRail());
      assertFalse(traverseModeSet0.isTransit());
      assertFalse(traverseModeSet0.getTraininsh());
      assertFalse(traverseModeSet0.getBusish());
      assertFalse(traverseModeSet0.getFerry());
      assertFalse(traverseModeSet0.getFunicular());
      assertFalse(traverseModeSet0.getBicycle());
      assertFalse(traverseModeSet0.getDriving());
      assertFalse(traverseModeSet0.getWalk());
      assertEquals(0, traverseModeSet0.getMask());
      assertFalse(traverseModeSet0.getTrainish());
      assertFalse(traverseModeSet0.getSubway());
      assertFalse(traverseModeSet0.getTram());
      assertFalse(traverseModeSet0.getCustomMotorVehicle());
      assertFalse(traverseModeSet0.getBus());
      assertFalse(traverseModeSet0.getGondola());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
      assertNotNull(multiShortestPathTree0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(traverseModeSet0.isValid());
      assertFalse(traverseModeSet0.getCar());
      assertFalse(traverseModeSet0.getCableCar());
      assertFalse(traverseModeSet0.getRail());
      assertFalse(traverseModeSet0.isTransit());
      assertFalse(traverseModeSet0.getTraininsh());
      assertFalse(traverseModeSet0.getBusish());
      assertFalse(traverseModeSet0.getFerry());
      assertFalse(traverseModeSet0.getFunicular());
      assertFalse(traverseModeSet0.getBicycle());
      assertFalse(traverseModeSet0.getDriving());
      assertFalse(traverseModeSet0.getWalk());
      assertEquals(0, traverseModeSet0.getMask());
      assertFalse(traverseModeSet0.getTrainish());
      assertFalse(traverseModeSet0.getSubway());
      assertFalse(traverseModeSet0.getTram());
      assertFalse(traverseModeSet0.getCustomMotorVehicle());
      assertFalse(traverseModeSet0.getBus());
      assertFalse(traverseModeSet0.getGondola());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      String string0 = multiShortestPathTree0.toString();
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
      assertNotNull(string0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(traverseModeSet0.isValid());
      assertFalse(traverseModeSet0.getCar());
      assertFalse(traverseModeSet0.getCableCar());
      assertFalse(traverseModeSet0.getRail());
      assertFalse(traverseModeSet0.isTransit());
      assertFalse(traverseModeSet0.getTraininsh());
      assertFalse(traverseModeSet0.getBusish());
      assertFalse(traverseModeSet0.getFerry());
      assertFalse(traverseModeSet0.getFunicular());
      assertFalse(traverseModeSet0.getBicycle());
      assertFalse(traverseModeSet0.getDriving());
      assertFalse(traverseModeSet0.getWalk());
      assertEquals(0, traverseModeSet0.getMask());
      assertFalse(traverseModeSet0.getTrainish());
      assertFalse(traverseModeSet0.getSubway());
      assertFalse(traverseModeSet0.getTram());
      assertFalse(traverseModeSet0.getCustomMotorVehicle());
      assertFalse(traverseModeSet0.getBus());
      assertFalse(traverseModeSet0.getGondola());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals("MultiSPT(0 vertices)", string0);
      
      int int0 = multiShortestPathTree0.getVertexCount();
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(traverseModeSet0.isValid());
      assertFalse(traverseModeSet0.getCar());
      assertFalse(traverseModeSet0.getCableCar());
      assertFalse(traverseModeSet0.getRail());
      assertFalse(traverseModeSet0.isTransit());
      assertFalse(traverseModeSet0.getTraininsh());
      assertFalse(traverseModeSet0.getBusish());
      assertFalse(traverseModeSet0.getFerry());
      assertFalse(traverseModeSet0.getFunicular());
      assertFalse(traverseModeSet0.getBicycle());
      assertFalse(traverseModeSet0.getDriving());
      assertFalse(traverseModeSet0.getWalk());
      assertEquals(0, traverseModeSet0.getMask());
      assertFalse(traverseModeSet0.getTrainish());
      assertFalse(traverseModeSet0.getSubway());
      assertFalse(traverseModeSet0.getTram());
      assertFalse(traverseModeSet0.getCustomMotorVehicle());
      assertFalse(traverseModeSet0.getBus());
      assertFalse(traverseModeSet0.getGondola());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, int0);
      
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
      assertNotNull(collection0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(traverseModeSet0.isValid());
      assertFalse(traverseModeSet0.getCar());
      assertFalse(traverseModeSet0.getCableCar());
      assertFalse(traverseModeSet0.getRail());
      assertFalse(traverseModeSet0.isTransit());
      assertFalse(traverseModeSet0.getTraininsh());
      assertFalse(traverseModeSet0.getBusish());
      assertFalse(traverseModeSet0.getFerry());
      assertFalse(traverseModeSet0.getFunicular());
      assertFalse(traverseModeSet0.getBicycle());
      assertFalse(traverseModeSet0.getDriving());
      assertFalse(traverseModeSet0.getWalk());
      assertEquals(0, traverseModeSet0.getMask());
      assertFalse(traverseModeSet0.getTrainish());
      assertFalse(traverseModeSet0.getSubway());
      assertFalse(traverseModeSet0.getTram());
      assertFalse(traverseModeSet0.getCustomMotorVehicle());
      assertFalse(traverseModeSet0.getBus());
      assertFalse(traverseModeSet0.getGondola());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      RoutingRequest routingRequest0 = null;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertNotNull(multiShortestPathTree0);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      String string0 = multiShortestPathTree0.toString();
      assertNotNull(string0);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals("MultiSPT(0 vertices)", string0);
      
      Graph graph0 = null;
      String string1 = "xknJ*J&'@'$)?1KxOb/";
      double double0 = 12.27209038716;
      double double1 = 0.0;
      IntersectionVertex intersectionVertex0 = new IntersectionVertex(graph0, string1, double0, double1, string0);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertNotNull(intersectionVertex0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(12.27209038716, intersectionVertex0.getLon(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals(0.0, intersectionVertex0.getY(), 0.01);
      assertEquals(12.27209038716, intersectionVertex0.getX(), 0.01);
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals("xknJ*J&'@'$)?1KxOb/", intersectionVertex0.getLabel());
      assertEquals("MultiSPT(0 vertices)", intersectionVertex0.getName());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(0.0, intersectionVertex0.getLat(), 0.01);
      
      String string2 = "7>YRvSu{&";
      double double2 = 0.0;
      String string3 = "MultiSPT(";
      ParkAndRideVertex parkAndRideVertex0 = new ParkAndRideVertex(graph0, string2, string0, double0, double2, string3);
      assertNotNull(parkAndRideVertex0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double0, double2, 0.01);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(12.27209038716, parkAndRideVertex0.getLon(), 0.01);
      assertEquals(0, parkAndRideVertex0.getDegreeOut());
      assertEquals(1, parkAndRideVertex0.getIndex());
      assertEquals(0, parkAndRideVertex0.getDegreeIn());
      assertEquals("MultiSPT(", parkAndRideVertex0.getName());
      assertEquals("7>YRvSu{&", parkAndRideVertex0.getLabel());
      assertEquals(12.27209038716, parkAndRideVertex0.getX(), 0.01);
      assertEquals(0.0, parkAndRideVertex0.getLat(), 0.01);
      assertEquals("MultiSPT(0 vertices)", parkAndRideVertex0.getId());
      assertEquals(0.0, parkAndRideVertex0.getY(), 0.01);
      assertEquals(2, parkAndRideVertex0.getMaxIndex());
      
      ParkAndRideLinkEdge parkAndRideLinkEdge0 = new ParkAndRideLinkEdge(parkAndRideVertex0, intersectionVertex0);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertNotNull(parkAndRideLinkEdge0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double0, double2, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(double1, double2, 0.01);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(12.27209038716, intersectionVertex0.getLon(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(1, intersectionVertex0.getDegreeIn());
      assertEquals(0.0, intersectionVertex0.getY(), 0.01);
      assertEquals(12.27209038716, intersectionVertex0.getX(), 0.01);
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals("xknJ*J&'@'$)?1KxOb/", intersectionVertex0.getLabel());
      assertEquals("MultiSPT(0 vertices)", intersectionVertex0.getName());
      assertEquals(0.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(2, intersectionVertex0.getMaxIndex());
      assertEquals(12.27209038716, parkAndRideVertex0.getLon(), 0.01);
      assertEquals(1, parkAndRideVertex0.getDegreeOut());
      assertEquals(1, parkAndRideVertex0.getIndex());
      assertEquals(0, parkAndRideVertex0.getDegreeIn());
      assertEquals("MultiSPT(", parkAndRideVertex0.getName());
      assertEquals("7>YRvSu{&", parkAndRideVertex0.getLabel());
      assertEquals(12.27209038716, parkAndRideVertex0.getX(), 0.01);
      assertEquals(0.0, parkAndRideVertex0.getLat(), 0.01);
      assertEquals("MultiSPT(0 vertices)", parkAndRideVertex0.getId());
      assertEquals(0.0, parkAndRideVertex0.getY(), 0.01);
      assertEquals(2, parkAndRideVertex0.getMaxIndex());
      assertTrue(parkAndRideLinkEdge0.vertexTypesValid());
      assertFalse(parkAndRideLinkEdge0.isPartial());
      assertEquals(4, parkAndRideLinkEdge0.getId());
      
      intersectionVertex0.addOutgoing(parkAndRideLinkEdge0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double0, double2, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(double1, double2, 0.01);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertTrue(intersectionVertex0.inferredFreeFlowing());
      assertEquals(12.27209038716, intersectionVertex0.getLon(), 0.01);
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(1, intersectionVertex0.getDegreeOut());
      assertEquals(1, intersectionVertex0.getDegreeIn());
      assertEquals(0.0, intersectionVertex0.getY(), 0.01);
      assertEquals(12.27209038716, intersectionVertex0.getX(), 0.01);
      assertEquals("xknJ*J&'@'$)?1KxOb/", intersectionVertex0.getLabel());
      assertEquals("MultiSPT(0 vertices)", intersectionVertex0.getName());
      assertEquals(0.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(2, intersectionVertex0.getMaxIndex());
      assertEquals(12.27209038716, parkAndRideVertex0.getLon(), 0.01);
      assertEquals(1, parkAndRideVertex0.getDegreeOut());
      assertEquals(1, parkAndRideVertex0.getIndex());
      assertEquals(0, parkAndRideVertex0.getDegreeIn());
      assertEquals("MultiSPT(", parkAndRideVertex0.getName());
      assertEquals("7>YRvSu{&", parkAndRideVertex0.getLabel());
      assertEquals(12.27209038716, parkAndRideVertex0.getX(), 0.01);
      assertEquals(0.0, parkAndRideVertex0.getLat(), 0.01);
      assertEquals("MultiSPT(0 vertices)", parkAndRideVertex0.getId());
      assertEquals(0.0, parkAndRideVertex0.getY(), 0.01);
      assertEquals(2, parkAndRideVertex0.getMaxIndex());
      assertTrue(parkAndRideLinkEdge0.vertexTypesValid());
      assertFalse(parkAndRideLinkEdge0.isPartial());
      assertEquals(4, parkAndRideLinkEdge0.getId());
      
      List<State> list0 = multiShortestPathTree0.getStates(intersectionVertex0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertNull(list0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double0, double2, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(double1, double2, 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertTrue(intersectionVertex0.inferredFreeFlowing());
      assertEquals(12.27209038716, intersectionVertex0.getLon(), 0.01);
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(1, intersectionVertex0.getDegreeOut());
      assertEquals(1, intersectionVertex0.getDegreeIn());
      assertEquals(0.0, intersectionVertex0.getY(), 0.01);
      assertEquals(12.27209038716, intersectionVertex0.getX(), 0.01);
      assertEquals("xknJ*J&'@'$)?1KxOb/", intersectionVertex0.getLabel());
      assertEquals("MultiSPT(0 vertices)", intersectionVertex0.getName());
      assertEquals(0.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(2, intersectionVertex0.getMaxIndex());
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.TRAM;
      OptimizeType optimizeType0 = OptimizeType.TRIANGLE;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0, optimizeType0);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertNotNull(routingRequest0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertNotNull(multiShortestPathTree0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertNotNull(collection0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      String string0 = multiShortestPathTree0.toString();
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertNotNull(string0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals("MultiSPT(0 vertices)", string0);
      
      String string1 = multiShortestPathTree0.toString();
      assertNotSame(string1, string0);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals("MultiSPT(0 vertices)", string1);
      
      Collection<State> collection1 = multiShortestPathTree0.getAllStates();
      assertNotSame(collection1, collection0);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertNotNull(collection1);
      assertTrue(collection1.equals((Object)collection0));
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      RoutingRequest routingRequest0 = null;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertNotNull(multiShortestPathTree0);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      State state0 = null;
      // Undeclared exception!
      try { 
        multiShortestPathTree0.visit(state0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      String string0 = "3";
      TraverseMode traverseMode0 = TraverseMode.CAR;
      OptimizeType optimizeType0 = OptimizeType.FLAT;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0, optimizeType0);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertNotNull(routingRequest0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertNotNull(multiShortestPathTree0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      Graph graph0 = new Graph();
      assertNotNull(graph0);
      assertEquals(0, graph0.countVertices());
      
      double double0 = 3160.60905143;
      IntersectionVertex intersectionVertex0 = new IntersectionVertex(graph0, routingRequest0.routerId, double0, routingRequest0.carDropoffTime, string0);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertNotNull(intersectionVertex0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, graph0.countVertices());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals("3", intersectionVertex0.getName());
      
      State state0 = new State(intersectionVertex0, multiShortestPathTree0.options);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertNotNull(state0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals("3", intersectionVertex0.getName());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(TraverseMode.CAR, state0.getNonTransitMode());
      assertFalse(state0.isEverBoarded());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertTrue(state0.isFinal());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertFalse(state0.isCarParked());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isOnboard());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      
      boolean boolean0 = multiShortestPathTree0.add(state0);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals("3", intersectionVertex0.getName());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(TraverseMode.CAR, state0.getNonTransitMode());
      assertFalse(state0.isEverBoarded());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertTrue(state0.isFinal());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertFalse(state0.isCarParked());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isOnboard());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertTrue(boolean0);
      
      Vertex vertex0 = null;
      State state1 = multiShortestPathTree0.getState(vertex0);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertNull(state1);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      int int0 = multiShortestPathTree0.getVertexCount();
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, int0);
      
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getState(intersectionVertex0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.core.State", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      String string0 = "3";
      TraverseMode traverseMode0 = TraverseMode.CAR;
      OptimizeType optimizeType0 = OptimizeType.FLAT;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0, optimizeType0);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertNotNull(routingRequest0);
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertNotNull(multiShortestPathTree0);
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      Graph graph0 = new Graph();
      assertNotNull(graph0);
      assertEquals(0, graph0.countVertices());
      
      double double0 = 3160.60905143;
      IntersectionVertex intersectionVertex0 = new IntersectionVertex(graph0, routingRequest0.routerId, double0, routingRequest0.carDropoffTime, string0);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertNotNull(intersectionVertex0);
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, graph0.countVertices());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      
      State state0 = new State(intersectionVertex0, multiShortestPathTree0.options);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertNotNull(state0);
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertTrue(state0.isFinal());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getBackMode());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(TraverseMode.CAR, state0.getNonTransitMode());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(1392409281000L, state0.getTimeInMillis());
      
      State state1 = state0.reversedClone();
      assertNotSame(state0, state1);
      assertNotSame(state1, state0);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertEquals(0.0, state1.weight, 0.01);
      assertNotNull(state1);
      assertFalse(state1.equals((Object)state0));
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertTrue(state0.isFinal());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getBackMode());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(TraverseMode.CAR, state0.getNonTransitMode());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(TraverseMode.CAR, state1.getNonTransitMode());
      assertFalse(state1.isEverBoarded());
      assertEquals(0, state1.getNumBoardings());
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertTrue(state1.isFinal());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertFalse(state1.isOnboard());
      assertEquals(1392409281L, state1.getStartTimeSeconds());
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertEquals(1392409281000L, state1.getTimeInMillis());
      assertEquals(0, state1.getPreTransitTime());
      assertFalse(state1.isCarParked());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state1.isBikeRenting());
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertNull(state1.getZone());
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertNull(state1.getBackMode());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281L, state1.getTimeSeconds());
      assertTrue(state1.getReverseOptimizing());
      
      boolean boolean0 = multiShortestPathTree0.add(state0);
      assertNotSame(state0, state1);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertFalse(state0.equals((Object)state1));
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertTrue(state0.isFinal());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getBackMode());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(TraverseMode.CAR, state0.getNonTransitMode());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertTrue(boolean0);
      
      Vertex vertex0 = null;
      State state2 = multiShortestPathTree0.getState(vertex0);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertNull(state2);
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      // Undeclared exception!
      try { 
        MultiShortestPathTree.dominates(state0, state2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      int int0 = (-1661);
      OptimizeType optimizeType0 = OptimizeType.QUICK;
      Vertex vertex0 = null;
      ArrayDeque<TraverseMode> arrayDeque0 = new ArrayDeque<TraverseMode>();
      assertNotNull(arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      TraverseModeSet traverseModeSet0 = new TraverseModeSet(arrayDeque0);
      assertNotNull(traverseModeSet0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(traverseModeSet0.getDriving());
      assertFalse(traverseModeSet0.getCustomMotorVehicle());
      assertFalse(traverseModeSet0.getBus());
      assertFalse(traverseModeSet0.getBicycle());
      assertFalse(traverseModeSet0.getTraininsh());
      assertEquals(0, traverseModeSet0.getMask());
      assertFalse(traverseModeSet0.getSubway());
      assertFalse(traverseModeSet0.getFunicular());
      assertFalse(traverseModeSet0.getCableCar());
      assertFalse(traverseModeSet0.isValid());
      assertFalse(traverseModeSet0.getRail());
      assertFalse(traverseModeSet0.getBusish());
      assertFalse(traverseModeSet0.getCar());
      assertFalse(traverseModeSet0.getFerry());
      assertFalse(traverseModeSet0.getTram());
      assertFalse(traverseModeSet0.getGondola());
      assertFalse(traverseModeSet0.getTrainish());
      assertFalse(traverseModeSet0.isTransit());
      assertFalse(traverseModeSet0.getWalk());
      
      RoutingRequest routingRequest0 = new RoutingRequest(traverseModeSet0);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertNotNull(routingRequest0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(traverseModeSet0.getDriving());
      assertFalse(traverseModeSet0.getCustomMotorVehicle());
      assertFalse(traverseModeSet0.getBus());
      assertFalse(traverseModeSet0.getBicycle());
      assertFalse(traverseModeSet0.getTraininsh());
      assertEquals(0, traverseModeSet0.getMask());
      assertFalse(traverseModeSet0.getSubway());
      assertFalse(traverseModeSet0.getFunicular());
      assertFalse(traverseModeSet0.getCableCar());
      assertFalse(traverseModeSet0.isValid());
      assertFalse(traverseModeSet0.getRail());
      assertFalse(traverseModeSet0.getBusish());
      assertFalse(traverseModeSet0.getCar());
      assertFalse(traverseModeSet0.getFerry());
      assertFalse(traverseModeSet0.getTram());
      assertFalse(traverseModeSet0.getGondola());
      assertFalse(traverseModeSet0.getTrainish());
      assertFalse(traverseModeSet0.isTransit());
      assertFalse(traverseModeSet0.getWalk());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      
      OptimizeType optimizeType1 = OptimizeType.GREENWAYS;
      RoutingRequest routingRequest1 = new RoutingRequest(routingRequest0.modes, optimizeType1);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest1.transferSlack);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertFalse(routingRequest1.allowBikeRental);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertEquals(9223372036854775807L, routingRequest1.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertFalse(routingRequest1.showIntermediateStops);
      assertTrue(routingRequest1.softWalkLimiting);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest1.maxTransfers);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertFalse(routingRequest1.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertFalse(routingRequest1.batch);
      assertEquals(0, routingRequest1.boardSlack);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(3, routingRequest1.numItineraries);
      assertFalse(routingRequest1.kissAndRide);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest1.arriveBy);
      assertEquals(0, routingRequest1.transferPenalty);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertFalse(routingRequest1.walkingBike);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest1.alightSlack);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertNotNull(routingRequest1);
      assertFalse(optimizeType1.equals((Object)optimizeType0));
      assertFalse(routingRequest1.equals((Object)routingRequest0));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(traverseModeSet0.getDriving());
      assertFalse(traverseModeSet0.getCustomMotorVehicle());
      assertFalse(traverseModeSet0.getBus());
      assertFalse(traverseModeSet0.getBicycle());
      assertFalse(traverseModeSet0.getTraininsh());
      assertEquals(0, traverseModeSet0.getMask());
      assertFalse(traverseModeSet0.getSubway());
      assertFalse(traverseModeSet0.getFunicular());
      assertFalse(traverseModeSet0.getCableCar());
      assertFalse(traverseModeSet0.isValid());
      assertFalse(traverseModeSet0.getRail());
      assertFalse(traverseModeSet0.getBusish());
      assertFalse(traverseModeSet0.getCar());
      assertFalse(traverseModeSet0.getFerry());
      assertFalse(traverseModeSet0.getTram());
      assertFalse(traverseModeSet0.getGondola());
      assertFalse(traverseModeSet0.getTrainish());
      assertFalse(traverseModeSet0.isTransit());
      assertFalse(traverseModeSet0.getWalk());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest1.transitAllowed());
      assertEquals(1, routingRequest1.getNumItineraries());
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      
      routingRequest0.bikeWalkingOptions = routingRequest1;
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(traverseModeSet0.getDriving());
      assertFalse(traverseModeSet0.getCustomMotorVehicle());
      assertFalse(traverseModeSet0.getBus());
      assertFalse(traverseModeSet0.getBicycle());
      assertFalse(traverseModeSet0.getTraininsh());
      assertEquals(0, traverseModeSet0.getMask());
      assertFalse(traverseModeSet0.getSubway());
      assertFalse(traverseModeSet0.getFunicular());
      assertFalse(traverseModeSet0.getCableCar());
      assertFalse(traverseModeSet0.isValid());
      assertFalse(traverseModeSet0.getRail());
      assertFalse(traverseModeSet0.getBusish());
      assertFalse(traverseModeSet0.getCar());
      assertFalse(traverseModeSet0.getFerry());
      assertFalse(traverseModeSet0.getTram());
      assertFalse(traverseModeSet0.getGondola());
      assertFalse(traverseModeSet0.getTrainish());
      assertFalse(traverseModeSet0.isTransit());
      assertFalse(traverseModeSet0.getWalk());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest1.transitAllowed());
      assertEquals(1, routingRequest1.getNumItineraries());
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.bikeWalkingOptions.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.bikeWalkingOptions.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.bikeWalkingOptions.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.bikeWalkingOptions.transitAllowed());
      assertEquals(1, routingRequest0.bikeWalkingOptions.getNumItineraries());
      assertFalse(routingRequest0.bikeWalkingOptions.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.bikeWalkingOptions.getSecondsSinceEpoch());
      assertFalse(routingRequest0.bikeWalkingOptions.intermediatesEffectivelyOrdered());
      
      RoutingRequest routingRequest2 = routingRequest0.clone();
      assertNotSame(routingRequest0, routingRequest1);
      assertNotSame(routingRequest0, routingRequest2);
      assertNotSame(routingRequest2, routingRequest1);
      assertNotSame(routingRequest2, routingRequest0);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(2.0, routingRequest2.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest2.maxWeight, 0.01);
      assertFalse(routingRequest2.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest2.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest2.bikeParkAndRide);
      assertFalse(routingRequest2.kissAndRide);
      assertEquals(3, routingRequest2.numItineraries);
      assertEquals(2.9, routingRequest2.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest2.preTransitOverageRate, 0.01);
      assertFalse(routingRequest2.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest2.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest2.transferPenalty);
      assertEquals(180, routingRequest2.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest2.walkReluctance, 0.01);
      assertFalse(routingRequest2.batch);
      assertEquals(1.7976931348623157E308, routingRequest2.maxWalkDistance, 0.01);
      assertEquals(300.0, routingRequest2.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest2.clampInitialWait);
      assertEquals(60.0, routingRequest2.softWalkPenalty, 0.01);
      assertFalse(routingRequest2.showIntermediateStops);
      assertEquals(0.0, routingRequest2.triangleSafetyFactor, 0.01);
      assertTrue(routingRequest2.softPreTransitLimiting);
      assertEquals(2.9, routingRequest2.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest2.softWalkOverageRate, 0.01);
      assertEquals(40.0, routingRequest2.carSpeed, 0.01);
      assertEquals(60, routingRequest2.bikeRentalPickupTime);
      assertEquals(90, routingRequest2.elevatorBoardCost);
      assertEquals(90, routingRequest2.elevatorBoardTime);
      assertFalse(routingRequest2.allowBikeRental);
      assertEquals(5.0, routingRequest2.bikeSpeed, 0.01);
      assertEquals(120, routingRequest2.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest2.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest2.reverseOptimizeOnTheFly);
      assertEquals(600, routingRequest2.walkBoardCost);
      assertFalse(routingRequest2.ignoreRealtimeUpdates);
      assertTrue(routingRequest2.driveOnRight);
      assertTrue(routingRequest2.softWalkLimiting);
      assertEquals(0, routingRequest2.transferSlack);
      assertEquals(1392409281L, routingRequest2.dateTime);
      assertFalse(routingRequest2.wheelchairAccessible);
      assertEquals(0, routingRequest2.alightSlack);
      assertFalse(routingRequest2.walkingBike);
      assertEquals(1.33, routingRequest2.walkSpeed, 0.01);
      assertFalse(routingRequest2.arriveBy);
      assertEquals(9223372036854775807L, routingRequest2.worstTime);
      assertEquals(0, routingRequest2.boardSlack);
      assertEquals(20, routingRequest2.elevatorHopTime);
      assertEquals(0, routingRequest2.bikeSwitchTime);
      assertEquals(30, routingRequest2.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest2.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest2.maxTransfers);
      assertFalse(routingRequest2.disableRemainingWeightHeuristic);
      assertEquals(1.0, routingRequest2.turnReluctance, 0.01);
      assertEquals(20, routingRequest2.elevatorHopCost);
      assertEquals(0, routingRequest2.bikeSwitchCost);
      assertEquals(30, routingRequest2.bikeRentalDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest2.maxPreTransitTime);
      assertFalse(routingRequest2.reverseOptimizing);
      assertEquals(300, routingRequest2.useUnpreferredRoutesPenalty);
      assertEquals(120, routingRequest2.carDropoffTime);
      assertEquals(1.0, routingRequest2.waitReluctance, 0.01);
      assertFalse(routingRequest2.parkAndRide);
      assertEquals(600, routingRequest2.bikeBoardCost);
      assertEquals(1.0, routingRequest2.heuristicWeight, 0.01);
      assertEquals(0.0833333333333, routingRequest2.maxSlope, 0.01);
      assertNotNull(routingRequest2);
      assertFalse(routingRequest0.equals((Object)routingRequest1));
      assertTrue(routingRequest2.equals((Object)routingRequest0));
      assertFalse(routingRequest2.equals((Object)routingRequest1));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(traverseModeSet0.getDriving());
      assertFalse(traverseModeSet0.getCustomMotorVehicle());
      assertFalse(traverseModeSet0.getBus());
      assertFalse(traverseModeSet0.getBicycle());
      assertFalse(traverseModeSet0.getTraininsh());
      assertEquals(0, traverseModeSet0.getMask());
      assertFalse(traverseModeSet0.getSubway());
      assertFalse(traverseModeSet0.getFunicular());
      assertFalse(traverseModeSet0.getCableCar());
      assertFalse(traverseModeSet0.isValid());
      assertFalse(traverseModeSet0.getRail());
      assertFalse(traverseModeSet0.getBusish());
      assertFalse(traverseModeSet0.getCar());
      assertFalse(traverseModeSet0.getFerry());
      assertFalse(traverseModeSet0.getTram());
      assertFalse(traverseModeSet0.getGondola());
      assertFalse(traverseModeSet0.getTrainish());
      assertFalse(traverseModeSet0.isTransit());
      assertFalse(traverseModeSet0.getWalk());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest2.getNumItineraries());
      assertFalse(routingRequest2.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest2.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest2.getSecondsSinceEpoch());
      assertFalse(routingRequest2.transitAllowed());
      assertEquals(600, routingRequest2.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest2.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest2.intermediatesEffectivelyOrdered());
      
      State state0 = new State(vertex0, routingRequest2);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(2.0, routingRequest2.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest2.maxWeight, 0.01);
      assertFalse(routingRequest2.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest2.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest2.bikeParkAndRide);
      assertFalse(routingRequest2.kissAndRide);
      assertEquals(3, routingRequest2.numItineraries);
      assertEquals(2.9, routingRequest2.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest2.preTransitOverageRate, 0.01);
      assertFalse(routingRequest2.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest2.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest2.transferPenalty);
      assertEquals(180, routingRequest2.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest2.walkReluctance, 0.01);
      assertFalse(routingRequest2.batch);
      assertEquals(1.7976931348623157E308, routingRequest2.maxWalkDistance, 0.01);
      assertEquals(300.0, routingRequest2.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest2.clampInitialWait);
      assertEquals(60.0, routingRequest2.softWalkPenalty, 0.01);
      assertFalse(routingRequest2.showIntermediateStops);
      assertEquals(0.0, routingRequest2.triangleSafetyFactor, 0.01);
      assertTrue(routingRequest2.softPreTransitLimiting);
      assertEquals(2.9, routingRequest2.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest2.softWalkOverageRate, 0.01);
      assertEquals(40.0, routingRequest2.carSpeed, 0.01);
      assertEquals(60, routingRequest2.bikeRentalPickupTime);
      assertEquals(90, routingRequest2.elevatorBoardCost);
      assertEquals(90, routingRequest2.elevatorBoardTime);
      assertFalse(routingRequest2.allowBikeRental);
      assertEquals(5.0, routingRequest2.bikeSpeed, 0.01);
      assertEquals(120, routingRequest2.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest2.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest2.reverseOptimizeOnTheFly);
      assertEquals(600, routingRequest2.walkBoardCost);
      assertFalse(routingRequest2.ignoreRealtimeUpdates);
      assertTrue(routingRequest2.driveOnRight);
      assertTrue(routingRequest2.softWalkLimiting);
      assertEquals(0, routingRequest2.transferSlack);
      assertEquals(1392409281L, routingRequest2.dateTime);
      assertFalse(routingRequest2.wheelchairAccessible);
      assertEquals(0, routingRequest2.alightSlack);
      assertFalse(routingRequest2.walkingBike);
      assertEquals(1.33, routingRequest2.walkSpeed, 0.01);
      assertFalse(routingRequest2.arriveBy);
      assertEquals(9223372036854775807L, routingRequest2.worstTime);
      assertEquals(0, routingRequest2.boardSlack);
      assertEquals(20, routingRequest2.elevatorHopTime);
      assertEquals(0, routingRequest2.bikeSwitchTime);
      assertEquals(30, routingRequest2.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest2.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest2.maxTransfers);
      assertFalse(routingRequest2.disableRemainingWeightHeuristic);
      assertEquals(1.0, routingRequest2.turnReluctance, 0.01);
      assertEquals(20, routingRequest2.elevatorHopCost);
      assertEquals(0, routingRequest2.bikeSwitchCost);
      assertEquals(30, routingRequest2.bikeRentalDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest2.maxPreTransitTime);
      assertFalse(routingRequest2.reverseOptimizing);
      assertEquals(300, routingRequest2.useUnpreferredRoutesPenalty);
      assertEquals(120, routingRequest2.carDropoffTime);
      assertEquals(1.0, routingRequest2.waitReluctance, 0.01);
      assertFalse(routingRequest2.parkAndRide);
      assertEquals(600, routingRequest2.bikeBoardCost);
      assertEquals(1.0, routingRequest2.heuristicWeight, 0.01);
      assertEquals(0.0833333333333, routingRequest2.maxSlope, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertNotNull(state0);
      assertFalse(routingRequest0.equals((Object)routingRequest1));
      assertTrue(routingRequest0.equals((Object)routingRequest2));
      assertTrue(routingRequest2.equals((Object)routingRequest0));
      assertFalse(routingRequest2.equals((Object)routingRequest1));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(traverseModeSet0.getDriving());
      assertFalse(traverseModeSet0.getCustomMotorVehicle());
      assertFalse(traverseModeSet0.getBus());
      assertFalse(traverseModeSet0.getBicycle());
      assertFalse(traverseModeSet0.getTraininsh());
      assertEquals(0, traverseModeSet0.getMask());
      assertFalse(traverseModeSet0.getSubway());
      assertFalse(traverseModeSet0.getFunicular());
      assertFalse(traverseModeSet0.getCableCar());
      assertFalse(traverseModeSet0.isValid());
      assertFalse(traverseModeSet0.getRail());
      assertFalse(traverseModeSet0.getBusish());
      assertFalse(traverseModeSet0.getCar());
      assertFalse(traverseModeSet0.getFerry());
      assertFalse(traverseModeSet0.getTram());
      assertFalse(traverseModeSet0.getGondola());
      assertFalse(traverseModeSet0.getTrainish());
      assertFalse(traverseModeSet0.isTransit());
      assertFalse(traverseModeSet0.getWalk());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest2.getNumItineraries());
      assertFalse(routingRequest2.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest2.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest2.getSecondsSinceEpoch());
      assertFalse(routingRequest2.transitAllowed());
      assertEquals(600, routingRequest2.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest2.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest2.intermediatesEffectivelyOrdered());
      assertFalse(state0.isOnboard());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.getReverseOptimizing());
      assertNull(state0.getNonTransitMode());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertFalse(state0.isCarParked());
      assertFalse(state0.isBikeRenting());
      assertTrue(state0.isFinal());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      
      boolean boolean0 = MultiShortestPathTree.dominates(state0, state0);
      assertNotSame(routingRequest0, routingRequest1);
      assertNotSame(routingRequest0, routingRequest2);
      assertNotSame(routingRequest2, routingRequest1);
      assertNotSame(routingRequest2, routingRequest0);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(2.0, routingRequest2.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest2.maxWeight, 0.01);
      assertFalse(routingRequest2.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest2.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest2.bikeParkAndRide);
      assertFalse(routingRequest2.kissAndRide);
      assertEquals(3, routingRequest2.numItineraries);
      assertEquals(2.9, routingRequest2.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest2.preTransitOverageRate, 0.01);
      assertFalse(routingRequest2.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest2.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest2.transferPenalty);
      assertEquals(180, routingRequest2.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest2.walkReluctance, 0.01);
      assertFalse(routingRequest2.batch);
      assertEquals(1.7976931348623157E308, routingRequest2.maxWalkDistance, 0.01);
      assertEquals(300.0, routingRequest2.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest2.clampInitialWait);
      assertEquals(60.0, routingRequest2.softWalkPenalty, 0.01);
      assertFalse(routingRequest2.showIntermediateStops);
      assertEquals(0.0, routingRequest2.triangleSafetyFactor, 0.01);
      assertTrue(routingRequest2.softPreTransitLimiting);
      assertEquals(2.9, routingRequest2.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest2.softWalkOverageRate, 0.01);
      assertEquals(40.0, routingRequest2.carSpeed, 0.01);
      assertEquals(60, routingRequest2.bikeRentalPickupTime);
      assertEquals(90, routingRequest2.elevatorBoardCost);
      assertEquals(90, routingRequest2.elevatorBoardTime);
      assertFalse(routingRequest2.allowBikeRental);
      assertEquals(5.0, routingRequest2.bikeSpeed, 0.01);
      assertEquals(120, routingRequest2.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest2.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest2.reverseOptimizeOnTheFly);
      assertEquals(600, routingRequest2.walkBoardCost);
      assertFalse(routingRequest2.ignoreRealtimeUpdates);
      assertTrue(routingRequest2.driveOnRight);
      assertTrue(routingRequest2.softWalkLimiting);
      assertEquals(0, routingRequest2.transferSlack);
      assertEquals(1392409281L, routingRequest2.dateTime);
      assertFalse(routingRequest2.wheelchairAccessible);
      assertEquals(0, routingRequest2.alightSlack);
      assertFalse(routingRequest2.walkingBike);
      assertEquals(1.33, routingRequest2.walkSpeed, 0.01);
      assertFalse(routingRequest2.arriveBy);
      assertEquals(9223372036854775807L, routingRequest2.worstTime);
      assertEquals(0, routingRequest2.boardSlack);
      assertEquals(20, routingRequest2.elevatorHopTime);
      assertEquals(0, routingRequest2.bikeSwitchTime);
      assertEquals(30, routingRequest2.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest2.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest2.maxTransfers);
      assertFalse(routingRequest2.disableRemainingWeightHeuristic);
      assertEquals(1.0, routingRequest2.turnReluctance, 0.01);
      assertEquals(20, routingRequest2.elevatorHopCost);
      assertEquals(0, routingRequest2.bikeSwitchCost);
      assertEquals(30, routingRequest2.bikeRentalDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest2.maxPreTransitTime);
      assertFalse(routingRequest2.reverseOptimizing);
      assertEquals(300, routingRequest2.useUnpreferredRoutesPenalty);
      assertEquals(120, routingRequest2.carDropoffTime);
      assertEquals(1.0, routingRequest2.waitReluctance, 0.01);
      assertFalse(routingRequest2.parkAndRide);
      assertEquals(600, routingRequest2.bikeBoardCost);
      assertEquals(1.0, routingRequest2.heuristicWeight, 0.01);
      assertEquals(0.0833333333333, routingRequest2.maxSlope, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertFalse(routingRequest0.equals((Object)routingRequest1));
      assertTrue(routingRequest0.equals((Object)routingRequest2));
      assertTrue(routingRequest2.equals((Object)routingRequest0));
      assertFalse(routingRequest2.equals((Object)routingRequest1));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(traverseModeSet0.getDriving());
      assertFalse(traverseModeSet0.getCustomMotorVehicle());
      assertFalse(traverseModeSet0.getBus());
      assertFalse(traverseModeSet0.getBicycle());
      assertFalse(traverseModeSet0.getTraininsh());
      assertEquals(0, traverseModeSet0.getMask());
      assertFalse(traverseModeSet0.getSubway());
      assertFalse(traverseModeSet0.getFunicular());
      assertFalse(traverseModeSet0.getCableCar());
      assertFalse(traverseModeSet0.isValid());
      assertFalse(traverseModeSet0.getRail());
      assertFalse(traverseModeSet0.getBusish());
      assertFalse(traverseModeSet0.getCar());
      assertFalse(traverseModeSet0.getFerry());
      assertFalse(traverseModeSet0.getTram());
      assertFalse(traverseModeSet0.getGondola());
      assertFalse(traverseModeSet0.getTrainish());
      assertFalse(traverseModeSet0.isTransit());
      assertFalse(traverseModeSet0.getWalk());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest2.getNumItineraries());
      assertFalse(routingRequest2.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest2.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest2.getSecondsSinceEpoch());
      assertFalse(routingRequest2.transitAllowed());
      assertEquals(600, routingRequest2.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest2.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest2.intermediatesEffectivelyOrdered());
      assertFalse(state0.isOnboard());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.getReverseOptimizing());
      assertNull(state0.getNonTransitMode());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertFalse(state0.isCarParked());
      assertFalse(state0.isBikeRenting());
      assertTrue(state0.isFinal());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertFalse(boolean0);
      
      RoutingRequest routingRequest3 = new RoutingRequest(routingRequest0.bikeWalkingOptions.modes);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest3.alightSlack);
      assertEquals(1.0, routingRequest3.heuristicWeight, 0.01);
      assertEquals(2, routingRequest3.maxTransfers);
      assertFalse(routingRequest3.reverseOptimizeOnTheFly);
      assertFalse(routingRequest3.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest3.bikeSwitchCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest3.wheelchairAccessible);
      assertEquals(0.2, routingRequest3.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest3.carDropoffTime);
      assertEquals(90, routingRequest3.elevatorBoardCost);
      assertEquals(0.0, routingRequest3.triangleTimeFactor, 0.01);
      assertEquals(40.0, routingRequest3.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest3.dateTime);
      assertEquals(1.7976931348623157E308, routingRequest3.maxWalkDistance, 0.01);
      assertEquals(5.0, routingRequest3.softWalkOverageRate, 0.01);
      assertFalse(routingRequest3.allowBikeRental);
      assertFalse(routingRequest3.showIntermediateStops);
      assertEquals(0, routingRequest3.bikeSwitchTime);
      assertTrue(routingRequest3.driveOnRight);
      assertTrue(routingRequest3.softPreTransitLimiting);
      assertEquals(3, routingRequest3.numItineraries);
      assertEquals(2.0, routingRequest3.walkReluctance, 0.01);
      assertFalse(routingRequest3.batch);
      assertEquals(180, routingRequest3.nonpreferredTransferPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest3.maxPreTransitTime);
      assertEquals(0, routingRequest3.transferPenalty);
      assertEquals(2.9, routingRequest3.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest3.elevatorHopCost);
      assertEquals(10.0, routingRequest3.preTransitOverageRate, 0.01);
      assertEquals(0.0833333333333, routingRequest3.maxSlope, 0.01);
      assertEquals(0L, routingRequest3.clampInitialWait);
      assertEquals(600, routingRequest3.bikeBoardCost);
      assertEquals(300.0, routingRequest3.preTransitPenalty, 0.01);
      assertFalse(routingRequest3.reverseOptimizing);
      assertEquals(20, routingRequest3.elevatorHopTime);
      assertEquals(2.0, routingRequest3.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest3.maxWeight, 0.01);
      assertFalse(routingRequest3.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest3.boardSlack);
      assertEquals(300, routingRequest3.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest3.bikeParkAndRide);
      assertEquals(5.0, routingRequest3.bikeSpeed, 0.01);
      assertEquals(2.9, routingRequest3.carAccelerationSpeed, 0.01);
      assertEquals(60.0, routingRequest3.softWalkPenalty, 0.01);
      assertEquals(120, routingRequest3.bikeRentalPickupCost);
      assertEquals(30, routingRequest3.bikeRentalDropoffTime);
      assertEquals(90, routingRequest3.elevatorBoardTime);
      assertEquals(60, routingRequest3.bikeRentalPickupTime);
      assertEquals(0.0, routingRequest3.triangleSafetyFactor, 0.01);
      assertEquals(300, routingRequest3.useUnpreferredRoutesPenalty);
      assertEquals(30, routingRequest3.bikeRentalDropoffCost);
      assertEquals(1.0, routingRequest3.turnReluctance, 0.01);
      assertFalse(routingRequest3.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest3.waitReluctance, 0.01);
      assertFalse(routingRequest3.parkAndRide);
      assertEquals(0, routingRequest3.transferSlack);
      assertEquals(600, routingRequest3.walkBoardCost);
      assertFalse(routingRequest3.walkingBike);
      assertEquals(1.33, routingRequest3.walkSpeed, 0.01);
      assertFalse(routingRequest3.arriveBy);
      assertEquals(9223372036854775807L, routingRequest3.worstTime);
      assertEquals(0.0, routingRequest3.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest3.disableRemainingWeightHeuristic);
      assertFalse(routingRequest3.kissAndRide);
      assertTrue(routingRequest3.softWalkLimiting);
      assertNotNull(routingRequest3);
      assertFalse(routingRequest0.equals((Object)routingRequest1));
      assertTrue(routingRequest0.equals((Object)routingRequest2));
      assertFalse(routingRequest3.equals((Object)routingRequest0));
      assertFalse(routingRequest3.equals((Object)routingRequest2));
      assertFalse(routingRequest3.equals((Object)routingRequest1));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(traverseModeSet0.getDriving());
      assertFalse(traverseModeSet0.getCustomMotorVehicle());
      assertFalse(traverseModeSet0.getBus());
      assertFalse(traverseModeSet0.getBicycle());
      assertFalse(traverseModeSet0.getTraininsh());
      assertEquals(0, traverseModeSet0.getMask());
      assertFalse(traverseModeSet0.getSubway());
      assertFalse(traverseModeSet0.getFunicular());
      assertFalse(traverseModeSet0.getCableCar());
      assertFalse(traverseModeSet0.isValid());
      assertFalse(traverseModeSet0.getRail());
      assertFalse(traverseModeSet0.getBusish());
      assertFalse(traverseModeSet0.getCar());
      assertFalse(traverseModeSet0.getFerry());
      assertFalse(traverseModeSet0.getTram());
      assertFalse(traverseModeSet0.getGondola());
      assertFalse(traverseModeSet0.getTrainish());
      assertFalse(traverseModeSet0.isTransit());
      assertFalse(traverseModeSet0.getWalk());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest3.getNumItineraries());
      assertFalse(routingRequest3.hasIntermediatePlaces());
      assertFalse(routingRequest3.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest3.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest3.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest3.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest3.getSecondsSinceEpoch());
      assertFalse(routingRequest3.transitAllowed());
      
      RoutingRequest routingRequest4 = routingRequest3.reversedClone();
      assertNotSame(routingRequest0, routingRequest3);
      assertNotSame(routingRequest0, routingRequest1);
      assertNotSame(routingRequest0, routingRequest4);
      assertNotSame(routingRequest0, routingRequest2);
      assertNotSame(routingRequest3, routingRequest0);
      assertNotSame(routingRequest3, routingRequest2);
      assertNotSame(routingRequest3, routingRequest1);
      assertNotSame(routingRequest3, routingRequest4);
      assertNotSame(routingRequest4, routingRequest1);
      assertNotSame(routingRequest4, routingRequest2);
      assertNotSame(routingRequest4, routingRequest3);
      assertNotSame(routingRequest4, routingRequest0);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest3.alightSlack);
      assertEquals(1.0, routingRequest3.heuristicWeight, 0.01);
      assertEquals(2, routingRequest3.maxTransfers);
      assertFalse(routingRequest3.reverseOptimizeOnTheFly);
      assertFalse(routingRequest3.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest3.bikeSwitchCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest3.wheelchairAccessible);
      assertEquals(0.2, routingRequest3.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest3.carDropoffTime);
      assertEquals(90, routingRequest3.elevatorBoardCost);
      assertEquals(0.0, routingRequest3.triangleTimeFactor, 0.01);
      assertEquals(40.0, routingRequest3.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest3.dateTime);
      assertEquals(1.7976931348623157E308, routingRequest3.maxWalkDistance, 0.01);
      assertEquals(5.0, routingRequest3.softWalkOverageRate, 0.01);
      assertFalse(routingRequest3.allowBikeRental);
      assertFalse(routingRequest3.showIntermediateStops);
      assertEquals(0, routingRequest3.bikeSwitchTime);
      assertTrue(routingRequest3.driveOnRight);
      assertTrue(routingRequest3.softPreTransitLimiting);
      assertEquals(3, routingRequest3.numItineraries);
      assertEquals(2.0, routingRequest3.walkReluctance, 0.01);
      assertFalse(routingRequest3.batch);
      assertEquals(180, routingRequest3.nonpreferredTransferPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest3.maxPreTransitTime);
      assertEquals(0, routingRequest3.transferPenalty);
      assertEquals(2.9, routingRequest3.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest3.elevatorHopCost);
      assertEquals(10.0, routingRequest3.preTransitOverageRate, 0.01);
      assertEquals(0.0833333333333, routingRequest3.maxSlope, 0.01);
      assertEquals(0L, routingRequest3.clampInitialWait);
      assertEquals(600, routingRequest3.bikeBoardCost);
      assertEquals(300.0, routingRequest3.preTransitPenalty, 0.01);
      assertFalse(routingRequest3.reverseOptimizing);
      assertEquals(20, routingRequest3.elevatorHopTime);
      assertEquals(2.0, routingRequest3.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest3.maxWeight, 0.01);
      assertFalse(routingRequest3.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest3.boardSlack);
      assertEquals(300, routingRequest3.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest3.bikeParkAndRide);
      assertEquals(5.0, routingRequest3.bikeSpeed, 0.01);
      assertEquals(2.9, routingRequest3.carAccelerationSpeed, 0.01);
      assertEquals(60.0, routingRequest3.softWalkPenalty, 0.01);
      assertEquals(120, routingRequest3.bikeRentalPickupCost);
      assertEquals(30, routingRequest3.bikeRentalDropoffTime);
      assertEquals(90, routingRequest3.elevatorBoardTime);
      assertEquals(60, routingRequest3.bikeRentalPickupTime);
      assertEquals(0.0, routingRequest3.triangleSafetyFactor, 0.01);
      assertEquals(300, routingRequest3.useUnpreferredRoutesPenalty);
      assertEquals(30, routingRequest3.bikeRentalDropoffCost);
      assertEquals(1.0, routingRequest3.turnReluctance, 0.01);
      assertFalse(routingRequest3.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest3.waitReluctance, 0.01);
      assertFalse(routingRequest3.parkAndRide);
      assertEquals(0, routingRequest3.transferSlack);
      assertEquals(600, routingRequest3.walkBoardCost);
      assertFalse(routingRequest3.walkingBike);
      assertEquals(1.33, routingRequest3.walkSpeed, 0.01);
      assertFalse(routingRequest3.arriveBy);
      assertEquals(9223372036854775807L, routingRequest3.worstTime);
      assertEquals(0.0, routingRequest3.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest3.disableRemainingWeightHeuristic);
      assertFalse(routingRequest3.kissAndRide);
      assertTrue(routingRequest3.softWalkLimiting);
      assertTrue(routingRequest4.softPreTransitLimiting);
      assertEquals(0.0, routingRequest4.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest4.heuristicWeight, 0.01);
      assertTrue(routingRequest4.reverseOptimizing);
      assertEquals(0.2, routingRequest4.waitAtBeginningFactor, 0.01);
      assertTrue(routingRequest4.softWalkLimiting);
      assertEquals(0.0, routingRequest4.triangleTimeFactor, 0.01);
      assertTrue(routingRequest4.driveOnRight);
      assertEquals(600, routingRequest4.walkBoardCost);
      assertEquals(5.0, routingRequest4.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest4.transferSlack);
      assertFalse(routingRequest4.intermediatePlacesOrdered);
      assertFalse(routingRequest4.allowBikeRental);
      assertEquals(90, routingRequest4.elevatorBoardCost);
      assertFalse(routingRequest4.kissAndRide);
      assertEquals(90, routingRequest4.elevatorBoardTime);
      assertEquals(0L, routingRequest4.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(40.0, routingRequest4.carSpeed, 0.01);
      assertFalse(routingRequest4.walkingBike);
      assertFalse(routingRequest4.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest4.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest4.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest4.alightSlack);
      assertFalse(routingRequest4.useBikeRentalAvailabilityInformation);
      assertEquals(0L, routingRequest4.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest4.maxSlope, 0.01);
      assertEquals(60, routingRequest4.bikeRentalPickupTime);
      assertEquals(300, routingRequest4.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest4.transferPenalty);
      assertFalse(routingRequest4.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest4.bikeBoardCost);
      assertFalse(routingRequest4.batch);
      assertEquals(20, routingRequest4.elevatorHopTime);
      assertEquals(300.0, routingRequest4.preTransitPenalty, 0.01);
      assertEquals(30, routingRequest4.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest4.maxPreTransitTime);
      assertTrue(routingRequest4.arriveBy);
      assertEquals(0, routingRequest4.boardSlack);
      assertEquals(120, routingRequest4.bikeRentalPickupCost);
      assertEquals(1.33, routingRequest4.walkSpeed, 0.01);
      assertEquals(60.0, routingRequest4.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest4.bikeSpeed, 0.01);
      assertEquals(1.0, routingRequest4.waitReluctance, 0.01);
      assertFalse(routingRequest4.parkAndRide);
      assertEquals(2.0, routingRequest4.stairsReluctance, 0.01);
      assertFalse(routingRequest4.showIntermediateStops);
      assertEquals(1.0, routingRequest4.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest4.dateTime);
      assertEquals(2.9, routingRequest4.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest4.carDropoffTime);
      assertEquals(180, routingRequest4.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest4.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest4.walkReluctance, 0.01);
      assertEquals(3, routingRequest4.numItineraries);
      assertFalse(routingRequest4.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest4.bikeSwitchTime);
      assertEquals(30, routingRequest4.bikeRentalDropoffTime);
      assertFalse(routingRequest4.wheelchairAccessible);
      assertEquals(0, routingRequest4.bikeSwitchCost);
      assertEquals(2.9, routingRequest4.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest4.maxWeight, 0.01);
      assertEquals(20, routingRequest4.elevatorHopCost);
      assertEquals(300, routingRequest4.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest4.bikeParkAndRide);
      assertEquals(2, routingRequest4.maxTransfers);
      assertNotNull(routingRequest4);
      assertFalse(routingRequest0.equals((Object)routingRequest3));
      assertFalse(routingRequest0.equals((Object)routingRequest1));
      assertTrue(routingRequest0.equals((Object)routingRequest2));
      assertFalse(routingRequest3.equals((Object)routingRequest0));
      assertFalse(routingRequest3.equals((Object)routingRequest2));
      assertFalse(routingRequest3.equals((Object)routingRequest1));
      assertFalse(routingRequest4.equals((Object)routingRequest1));
      assertFalse(routingRequest4.equals((Object)routingRequest2));
      assertFalse(routingRequest4.equals((Object)routingRequest3));
      assertFalse(routingRequest4.equals((Object)routingRequest0));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(traverseModeSet0.getDriving());
      assertFalse(traverseModeSet0.getCustomMotorVehicle());
      assertFalse(traverseModeSet0.getBus());
      assertFalse(traverseModeSet0.getBicycle());
      assertFalse(traverseModeSet0.getTraininsh());
      assertEquals(0, traverseModeSet0.getMask());
      assertFalse(traverseModeSet0.getSubway());
      assertFalse(traverseModeSet0.getFunicular());
      assertFalse(traverseModeSet0.getCableCar());
      assertFalse(traverseModeSet0.isValid());
      assertFalse(traverseModeSet0.getRail());
      assertFalse(traverseModeSet0.getBusish());
      assertFalse(traverseModeSet0.getCar());
      assertFalse(traverseModeSet0.getFerry());
      assertFalse(traverseModeSet0.getTram());
      assertFalse(traverseModeSet0.getGondola());
      assertFalse(traverseModeSet0.getTrainish());
      assertFalse(traverseModeSet0.isTransit());
      assertFalse(traverseModeSet0.getWalk());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest3.getNumItineraries());
      assertFalse(routingRequest3.hasIntermediatePlaces());
      assertFalse(routingRequest3.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest3.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest3.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest3.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest3.getSecondsSinceEpoch());
      assertFalse(routingRequest3.transitAllowed());
      assertFalse(routingRequest4.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest4.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest4.getBoardCostLowerBound());
      assertFalse(routingRequest4.transitAllowed());
      assertEquals(1392409281L, routingRequest4.getSecondsSinceEpoch());
      assertEquals(1, routingRequest4.getNumItineraries());
      assertEquals(1.33, routingRequest4.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest4.hasIntermediatePlaces());
      
      RoutingRequest routingRequest5 = routingRequest4.bikeWalkingOptions;
      assertNotSame(routingRequest5, routingRequest0);
      assertSame(routingRequest5, routingRequest4);
      assertNotSame(routingRequest5, routingRequest1);
      assertNotSame(routingRequest5, routingRequest2);
      assertNotSame(routingRequest5, routingRequest3);
      assertEquals(10.0, routingRequest5.preTransitOverageRate, 0.01);
      assertFalse(routingRequest5.batch);
      assertEquals(Integer.MAX_VALUE, routingRequest5.maxPreTransitTime);
      assertEquals(300, routingRequest5.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest5.bikeRentalPickupTime);
      assertEquals(0L, routingRequest5.clampInitialWait);
      assertEquals(120, routingRequest5.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest5.maxSlope, 0.01);
      assertEquals(0, routingRequest5.transferPenalty);
      assertEquals(600, routingRequest5.bikeBoardCost);
      assertEquals(2.0, routingRequest5.stairsReluctance, 0.01);
      assertEquals(300.0, routingRequest5.preTransitPenalty, 0.01);
      assertEquals(5.0, routingRequest5.bikeSpeed, 0.01);
      assertEquals(30, routingRequest5.bikeRentalDropoffCost);
      assertFalse(routingRequest5.bikeParkAndRide);
      assertEquals(20, routingRequest5.elevatorHopTime);
      assertFalse(routingRequest5.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest5.boardSlack);
      assertEquals(300, routingRequest5.otherThanPreferredRoutesPenalty);
      assertEquals(30, routingRequest5.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest5.triangleSafetyFactor, 0.01);
      assertEquals(20, routingRequest5.elevatorHopCost);
      assertEquals(1.7976931348623157E308, routingRequest5.maxWeight, 0.01);
      assertEquals(2.9, routingRequest5.carAccelerationSpeed, 0.01);
      assertEquals(1.0, routingRequest5.turnReluctance, 0.01);
      assertEquals(120, routingRequest5.carDropoffTime);
      assertEquals(1.33, routingRequest5.walkSpeed, 0.01);
      assertFalse(routingRequest5.parkAndRide);
      assertEquals(1.0, routingRequest5.waitReluctance, 0.01);
      assertEquals(0L, routingRequest5.worstTime);
      assertEquals(600, routingRequest5.walkBoardCost);
      assertTrue(routingRequest5.softWalkLimiting);
      assertFalse(routingRequest5.kissAndRide);
      assertEquals(0, routingRequest5.transferSlack);
      assertEquals(0.0, routingRequest5.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest5.intermediatePlacesOrdered);
      assertFalse(routingRequest5.disableRemainingWeightHeuristic);
      assertTrue(routingRequest5.reverseOptimizing);
      assertEquals(0, routingRequest5.alightSlack);
      assertEquals(0.2, routingRequest5.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest5.heuristicWeight, 0.01);
      assertFalse(routingRequest5.walkingBike);
      assertFalse(routingRequest5.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest5.bikeSwitchCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest5.ignoreRealtimeUpdates);
      assertEquals(2, routingRequest5.maxTransfers);
      assertFalse(routingRequest5.wheelchairAccessible);
      assertEquals(0.0, routingRequest5.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest5.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest5.elevatorBoardCost);
      assertEquals(5.0, routingRequest5.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest5.walkReluctance, 0.01);
      assertEquals(40.0, routingRequest5.carSpeed, 0.01);
      assertFalse(routingRequest5.showIntermediateStops);
      assertFalse(routingRequest5.allowBikeRental);
      assertEquals(0, routingRequest5.bikeSwitchTime);
      assertEquals(90, routingRequest5.elevatorBoardTime);
      assertEquals(1.7976931348623157E308, routingRequest5.maxWalkDistance, 0.01);
      assertEquals(60.0, routingRequest5.softWalkPenalty, 0.01);
      assertTrue(routingRequest5.driveOnRight);
      assertTrue(routingRequest5.arriveBy);
      assertEquals(3, routingRequest5.numItineraries);
      assertTrue(routingRequest5.softPreTransitLimiting);
      assertEquals(1392409281L, routingRequest5.dateTime);
      assertEquals(2.9, routingRequest5.carDecelerationSpeed, 0.01);
      assertNotNull(routingRequest5);
      assertFalse(routingRequest5.equals((Object)routingRequest0));
      assertFalse(routingRequest5.equals((Object)routingRequest1));
      assertFalse(routingRequest5.equals((Object)routingRequest2));
      assertFalse(routingRequest5.equals((Object)routingRequest3));
      assertEquals(1392409281L, routingRequest5.getSecondsSinceEpoch());
      assertFalse(routingRequest5.hasIntermediatePlaces());
      assertEquals(1, routingRequest5.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest5.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest5.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest5.transitAllowed());
      assertEquals(600, routingRequest5.getBoardCostLowerBound());
      assertFalse(routingRequest5.intermediatesEffectivelyOrdered());
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest5);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest3.alightSlack);
      assertEquals(1.0, routingRequest3.heuristicWeight, 0.01);
      assertEquals(2, routingRequest3.maxTransfers);
      assertFalse(routingRequest3.reverseOptimizeOnTheFly);
      assertFalse(routingRequest3.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest3.bikeSwitchCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest3.wheelchairAccessible);
      assertEquals(0.2, routingRequest3.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest3.carDropoffTime);
      assertEquals(90, routingRequest3.elevatorBoardCost);
      assertEquals(0.0, routingRequest3.triangleTimeFactor, 0.01);
      assertEquals(40.0, routingRequest3.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest3.dateTime);
      assertEquals(1.7976931348623157E308, routingRequest3.maxWalkDistance, 0.01);
      assertEquals(5.0, routingRequest3.softWalkOverageRate, 0.01);
      assertFalse(routingRequest3.allowBikeRental);
      assertFalse(routingRequest3.showIntermediateStops);
      assertEquals(0, routingRequest3.bikeSwitchTime);
      assertTrue(routingRequest3.driveOnRight);
      assertTrue(routingRequest3.softPreTransitLimiting);
      assertEquals(3, routingRequest3.numItineraries);
      assertEquals(2.0, routingRequest3.walkReluctance, 0.01);
      assertFalse(routingRequest3.batch);
      assertEquals(180, routingRequest3.nonpreferredTransferPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest3.maxPreTransitTime);
      assertEquals(0, routingRequest3.transferPenalty);
      assertEquals(2.9, routingRequest3.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest3.elevatorHopCost);
      assertEquals(10.0, routingRequest3.preTransitOverageRate, 0.01);
      assertEquals(0.0833333333333, routingRequest3.maxSlope, 0.01);
      assertEquals(0L, routingRequest3.clampInitialWait);
      assertEquals(600, routingRequest3.bikeBoardCost);
      assertEquals(300.0, routingRequest3.preTransitPenalty, 0.01);
      assertFalse(routingRequest3.reverseOptimizing);
      assertEquals(20, routingRequest3.elevatorHopTime);
      assertEquals(2.0, routingRequest3.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest3.maxWeight, 0.01);
      assertFalse(routingRequest3.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest3.boardSlack);
      assertEquals(300, routingRequest3.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest3.bikeParkAndRide);
      assertEquals(5.0, routingRequest3.bikeSpeed, 0.01);
      assertEquals(2.9, routingRequest3.carAccelerationSpeed, 0.01);
      assertEquals(60.0, routingRequest3.softWalkPenalty, 0.01);
      assertEquals(120, routingRequest3.bikeRentalPickupCost);
      assertEquals(30, routingRequest3.bikeRentalDropoffTime);
      assertEquals(90, routingRequest3.elevatorBoardTime);
      assertEquals(60, routingRequest3.bikeRentalPickupTime);
      assertEquals(0.0, routingRequest3.triangleSafetyFactor, 0.01);
      assertEquals(300, routingRequest3.useUnpreferredRoutesPenalty);
      assertEquals(30, routingRequest3.bikeRentalDropoffCost);
      assertEquals(1.0, routingRequest3.turnReluctance, 0.01);
      assertFalse(routingRequest3.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest3.waitReluctance, 0.01);
      assertFalse(routingRequest3.parkAndRide);
      assertEquals(0, routingRequest3.transferSlack);
      assertEquals(600, routingRequest3.walkBoardCost);
      assertFalse(routingRequest3.walkingBike);
      assertEquals(1.33, routingRequest3.walkSpeed, 0.01);
      assertFalse(routingRequest3.arriveBy);
      assertEquals(9223372036854775807L, routingRequest3.worstTime);
      assertEquals(0.0, routingRequest3.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest3.disableRemainingWeightHeuristic);
      assertFalse(routingRequest3.kissAndRide);
      assertTrue(routingRequest3.softWalkLimiting);
      assertTrue(routingRequest4.softPreTransitLimiting);
      assertEquals(0.0, routingRequest4.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest4.heuristicWeight, 0.01);
      assertTrue(routingRequest4.reverseOptimizing);
      assertEquals(0.2, routingRequest4.waitAtBeginningFactor, 0.01);
      assertTrue(routingRequest4.softWalkLimiting);
      assertEquals(0.0, routingRequest4.triangleTimeFactor, 0.01);
      assertTrue(routingRequest4.driveOnRight);
      assertEquals(600, routingRequest4.walkBoardCost);
      assertEquals(5.0, routingRequest4.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest4.transferSlack);
      assertFalse(routingRequest4.intermediatePlacesOrdered);
      assertFalse(routingRequest4.allowBikeRental);
      assertEquals(90, routingRequest4.elevatorBoardCost);
      assertFalse(routingRequest4.kissAndRide);
      assertEquals(90, routingRequest4.elevatorBoardTime);
      assertEquals(0L, routingRequest4.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(40.0, routingRequest4.carSpeed, 0.01);
      assertFalse(routingRequest4.walkingBike);
      assertFalse(routingRequest4.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest4.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest4.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest4.alightSlack);
      assertFalse(routingRequest4.useBikeRentalAvailabilityInformation);
      assertEquals(0L, routingRequest4.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest4.maxSlope, 0.01);
      assertEquals(60, routingRequest4.bikeRentalPickupTime);
      assertEquals(300, routingRequest4.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest4.transferPenalty);
      assertFalse(routingRequest4.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest4.bikeBoardCost);
      assertFalse(routingRequest4.batch);
      assertEquals(20, routingRequest4.elevatorHopTime);
      assertEquals(300.0, routingRequest4.preTransitPenalty, 0.01);
      assertEquals(30, routingRequest4.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest4.maxPreTransitTime);
      assertTrue(routingRequest4.arriveBy);
      assertEquals(0, routingRequest4.boardSlack);
      assertEquals(120, routingRequest4.bikeRentalPickupCost);
      assertEquals(1.33, routingRequest4.walkSpeed, 0.01);
      assertEquals(60.0, routingRequest4.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest4.bikeSpeed, 0.01);
      assertEquals(1.0, routingRequest4.waitReluctance, 0.01);
      assertFalse(routingRequest4.parkAndRide);
      assertEquals(2.0, routingRequest4.stairsReluctance, 0.01);
      assertFalse(routingRequest4.showIntermediateStops);
      assertEquals(1.0, routingRequest4.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest4.dateTime);
      assertEquals(2.9, routingRequest4.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest4.carDropoffTime);
      assertEquals(180, routingRequest4.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest4.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest4.walkReluctance, 0.01);
      assertEquals(3, routingRequest4.numItineraries);
      assertFalse(routingRequest4.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest4.bikeSwitchTime);
      assertEquals(30, routingRequest4.bikeRentalDropoffTime);
      assertFalse(routingRequest4.wheelchairAccessible);
      assertEquals(0, routingRequest4.bikeSwitchCost);
      assertEquals(2.9, routingRequest4.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest4.maxWeight, 0.01);
      assertEquals(20, routingRequest4.elevatorHopCost);
      assertEquals(300, routingRequest4.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest4.bikeParkAndRide);
      assertEquals(2, routingRequest4.maxTransfers);
      assertEquals(10.0, routingRequest5.preTransitOverageRate, 0.01);
      assertFalse(routingRequest5.batch);
      assertEquals(Integer.MAX_VALUE, routingRequest5.maxPreTransitTime);
      assertEquals(300, routingRequest5.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest5.bikeRentalPickupTime);
      assertEquals(0L, routingRequest5.clampInitialWait);
      assertEquals(120, routingRequest5.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest5.maxSlope, 0.01);
      assertEquals(0, routingRequest5.transferPenalty);
      assertEquals(600, routingRequest5.bikeBoardCost);
      assertEquals(2.0, routingRequest5.stairsReluctance, 0.01);
      assertEquals(300.0, routingRequest5.preTransitPenalty, 0.01);
      assertEquals(5.0, routingRequest5.bikeSpeed, 0.01);
      assertEquals(30, routingRequest5.bikeRentalDropoffCost);
      assertFalse(routingRequest5.bikeParkAndRide);
      assertEquals(20, routingRequest5.elevatorHopTime);
      assertFalse(routingRequest5.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest5.boardSlack);
      assertEquals(300, routingRequest5.otherThanPreferredRoutesPenalty);
      assertEquals(30, routingRequest5.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest5.triangleSafetyFactor, 0.01);
      assertEquals(20, routingRequest5.elevatorHopCost);
      assertEquals(1.7976931348623157E308, routingRequest5.maxWeight, 0.01);
      assertEquals(2.9, routingRequest5.carAccelerationSpeed, 0.01);
      assertEquals(1.0, routingRequest5.turnReluctance, 0.01);
      assertEquals(120, routingRequest5.carDropoffTime);
      assertEquals(1.33, routingRequest5.walkSpeed, 0.01);
      assertFalse(routingRequest5.parkAndRide);
      assertEquals(1.0, routingRequest5.waitReluctance, 0.01);
      assertEquals(0L, routingRequest5.worstTime);
      assertEquals(600, routingRequest5.walkBoardCost);
      assertTrue(routingRequest5.softWalkLimiting);
      assertFalse(routingRequest5.kissAndRide);
      assertEquals(0, routingRequest5.transferSlack);
      assertEquals(0.0, routingRequest5.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest5.intermediatePlacesOrdered);
      assertFalse(routingRequest5.disableRemainingWeightHeuristic);
      assertTrue(routingRequest5.reverseOptimizing);
      assertEquals(0, routingRequest5.alightSlack);
      assertEquals(0.2, routingRequest5.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest5.heuristicWeight, 0.01);
      assertFalse(routingRequest5.walkingBike);
      assertFalse(routingRequest5.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest5.bikeSwitchCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest5.ignoreRealtimeUpdates);
      assertEquals(2, routingRequest5.maxTransfers);
      assertFalse(routingRequest5.wheelchairAccessible);
      assertEquals(0.0, routingRequest5.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest5.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest5.elevatorBoardCost);
      assertEquals(5.0, routingRequest5.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest5.walkReluctance, 0.01);
      assertEquals(40.0, routingRequest5.carSpeed, 0.01);
      assertFalse(routingRequest5.showIntermediateStops);
      assertFalse(routingRequest5.allowBikeRental);
      assertEquals(0, routingRequest5.bikeSwitchTime);
      assertEquals(90, routingRequest5.elevatorBoardTime);
      assertEquals(1.7976931348623157E308, routingRequest5.maxWalkDistance, 0.01);
      assertEquals(60.0, routingRequest5.softWalkPenalty, 0.01);
      assertTrue(routingRequest5.driveOnRight);
      assertTrue(routingRequest5.arriveBy);
      assertEquals(3, routingRequest5.numItineraries);
      assertTrue(routingRequest5.softPreTransitLimiting);
      assertEquals(1392409281L, routingRequest5.dateTime);
      assertEquals(2.9, routingRequest5.carDecelerationSpeed, 0.01);
      assertNotNull(multiShortestPathTree0);
      assertFalse(routingRequest0.equals((Object)routingRequest3));
      assertFalse(routingRequest0.equals((Object)routingRequest1));
      assertFalse(routingRequest0.equals((Object)routingRequest4));
      assertTrue(routingRequest0.equals((Object)routingRequest2));
      assertFalse(routingRequest0.equals((Object)routingRequest5));
      assertFalse(routingRequest3.equals((Object)routingRequest5));
      assertFalse(routingRequest3.equals((Object)routingRequest0));
      assertFalse(routingRequest3.equals((Object)routingRequest2));
      assertFalse(routingRequest3.equals((Object)routingRequest1));
      assertFalse(routingRequest3.equals((Object)routingRequest4));
      assertFalse(routingRequest4.equals((Object)routingRequest1));
      assertFalse(routingRequest4.equals((Object)routingRequest2));
      assertFalse(routingRequest4.equals((Object)routingRequest3));
      assertFalse(routingRequest4.equals((Object)routingRequest0));
      assertFalse(routingRequest5.equals((Object)routingRequest0));
      assertFalse(routingRequest5.equals((Object)routingRequest1));
      assertFalse(routingRequest5.equals((Object)routingRequest2));
      assertFalse(routingRequest5.equals((Object)routingRequest3));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(traverseModeSet0.getDriving());
      assertFalse(traverseModeSet0.getCustomMotorVehicle());
      assertFalse(traverseModeSet0.getBus());
      assertFalse(traverseModeSet0.getBicycle());
      assertFalse(traverseModeSet0.getTraininsh());
      assertEquals(0, traverseModeSet0.getMask());
      assertFalse(traverseModeSet0.getSubway());
      assertFalse(traverseModeSet0.getFunicular());
      assertFalse(traverseModeSet0.getCableCar());
      assertFalse(traverseModeSet0.isValid());
      assertFalse(traverseModeSet0.getRail());
      assertFalse(traverseModeSet0.getBusish());
      assertFalse(traverseModeSet0.getCar());
      assertFalse(traverseModeSet0.getFerry());
      assertFalse(traverseModeSet0.getTram());
      assertFalse(traverseModeSet0.getGondola());
      assertFalse(traverseModeSet0.getTrainish());
      assertFalse(traverseModeSet0.isTransit());
      assertFalse(traverseModeSet0.getWalk());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest3.getNumItineraries());
      assertFalse(routingRequest3.hasIntermediatePlaces());
      assertFalse(routingRequest3.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest3.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest3.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest3.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest3.getSecondsSinceEpoch());
      assertFalse(routingRequest3.transitAllowed());
      assertFalse(routingRequest4.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest4.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest4.getBoardCostLowerBound());
      assertFalse(routingRequest4.transitAllowed());
      assertEquals(1392409281L, routingRequest4.getSecondsSinceEpoch());
      assertEquals(1, routingRequest4.getNumItineraries());
      assertEquals(1.33, routingRequest4.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest4.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest5.getSecondsSinceEpoch());
      assertFalse(routingRequest5.hasIntermediatePlaces());
      assertEquals(1, routingRequest5.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest5.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest5.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest5.transitAllowed());
      assertEquals(600, routingRequest5.getBoardCostLowerBound());
      assertFalse(routingRequest5.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      State state1 = multiShortestPathTree0.getState(vertex0);
      assertNotSame(routingRequest0, routingRequest3);
      assertNotSame(routingRequest0, routingRequest1);
      assertNotSame(routingRequest0, routingRequest4);
      assertNotSame(routingRequest0, routingRequest2);
      assertNotSame(routingRequest0, routingRequest5);
      assertNotSame(routingRequest3, routingRequest5);
      assertNotSame(routingRequest3, routingRequest0);
      assertNotSame(routingRequest3, routingRequest2);
      assertNotSame(routingRequest3, routingRequest1);
      assertNotSame(routingRequest3, routingRequest4);
      assertNotSame(routingRequest4, routingRequest1);
      assertNotSame(routingRequest4, routingRequest2);
      assertNotSame(routingRequest4, routingRequest3);
      assertSame(routingRequest4, routingRequest5);
      assertNotSame(routingRequest4, routingRequest0);
      assertNotSame(routingRequest5, routingRequest0);
      assertSame(routingRequest5, routingRequest4);
      assertNotSame(routingRequest5, routingRequest1);
      assertNotSame(routingRequest5, routingRequest2);
      assertNotSame(routingRequest5, routingRequest3);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest3.alightSlack);
      assertEquals(1.0, routingRequest3.heuristicWeight, 0.01);
      assertEquals(2, routingRequest3.maxTransfers);
      assertFalse(routingRequest3.reverseOptimizeOnTheFly);
      assertFalse(routingRequest3.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest3.bikeSwitchCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest3.wheelchairAccessible);
      assertEquals(0.2, routingRequest3.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest3.carDropoffTime);
      assertEquals(90, routingRequest3.elevatorBoardCost);
      assertEquals(0.0, routingRequest3.triangleTimeFactor, 0.01);
      assertEquals(40.0, routingRequest3.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest3.dateTime);
      assertEquals(1.7976931348623157E308, routingRequest3.maxWalkDistance, 0.01);
      assertEquals(5.0, routingRequest3.softWalkOverageRate, 0.01);
      assertFalse(routingRequest3.allowBikeRental);
      assertFalse(routingRequest3.showIntermediateStops);
      assertEquals(0, routingRequest3.bikeSwitchTime);
      assertTrue(routingRequest3.driveOnRight);
      assertTrue(routingRequest3.softPreTransitLimiting);
      assertEquals(3, routingRequest3.numItineraries);
      assertEquals(2.0, routingRequest3.walkReluctance, 0.01);
      assertFalse(routingRequest3.batch);
      assertEquals(180, routingRequest3.nonpreferredTransferPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest3.maxPreTransitTime);
      assertEquals(0, routingRequest3.transferPenalty);
      assertEquals(2.9, routingRequest3.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest3.elevatorHopCost);
      assertEquals(10.0, routingRequest3.preTransitOverageRate, 0.01);
      assertEquals(0.0833333333333, routingRequest3.maxSlope, 0.01);
      assertEquals(0L, routingRequest3.clampInitialWait);
      assertEquals(600, routingRequest3.bikeBoardCost);
      assertEquals(300.0, routingRequest3.preTransitPenalty, 0.01);
      assertFalse(routingRequest3.reverseOptimizing);
      assertEquals(20, routingRequest3.elevatorHopTime);
      assertEquals(2.0, routingRequest3.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest3.maxWeight, 0.01);
      assertFalse(routingRequest3.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest3.boardSlack);
      assertEquals(300, routingRequest3.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest3.bikeParkAndRide);
      assertEquals(5.0, routingRequest3.bikeSpeed, 0.01);
      assertEquals(2.9, routingRequest3.carAccelerationSpeed, 0.01);
      assertEquals(60.0, routingRequest3.softWalkPenalty, 0.01);
      assertEquals(120, routingRequest3.bikeRentalPickupCost);
      assertEquals(30, routingRequest3.bikeRentalDropoffTime);
      assertEquals(90, routingRequest3.elevatorBoardTime);
      assertEquals(60, routingRequest3.bikeRentalPickupTime);
      assertEquals(0.0, routingRequest3.triangleSafetyFactor, 0.01);
      assertEquals(300, routingRequest3.useUnpreferredRoutesPenalty);
      assertEquals(30, routingRequest3.bikeRentalDropoffCost);
      assertEquals(1.0, routingRequest3.turnReluctance, 0.01);
      assertFalse(routingRequest3.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest3.waitReluctance, 0.01);
      assertFalse(routingRequest3.parkAndRide);
      assertEquals(0, routingRequest3.transferSlack);
      assertEquals(600, routingRequest3.walkBoardCost);
      assertFalse(routingRequest3.walkingBike);
      assertEquals(1.33, routingRequest3.walkSpeed, 0.01);
      assertFalse(routingRequest3.arriveBy);
      assertEquals(9223372036854775807L, routingRequest3.worstTime);
      assertEquals(0.0, routingRequest3.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest3.disableRemainingWeightHeuristic);
      assertFalse(routingRequest3.kissAndRide);
      assertTrue(routingRequest3.softWalkLimiting);
      assertTrue(routingRequest4.softPreTransitLimiting);
      assertEquals(0.0, routingRequest4.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest4.heuristicWeight, 0.01);
      assertTrue(routingRequest4.reverseOptimizing);
      assertEquals(0.2, routingRequest4.waitAtBeginningFactor, 0.01);
      assertTrue(routingRequest4.softWalkLimiting);
      assertEquals(0.0, routingRequest4.triangleTimeFactor, 0.01);
      assertTrue(routingRequest4.driveOnRight);
      assertEquals(600, routingRequest4.walkBoardCost);
      assertEquals(5.0, routingRequest4.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest4.transferSlack);
      assertFalse(routingRequest4.intermediatePlacesOrdered);
      assertFalse(routingRequest4.allowBikeRental);
      assertEquals(90, routingRequest4.elevatorBoardCost);
      assertFalse(routingRequest4.kissAndRide);
      assertEquals(90, routingRequest4.elevatorBoardTime);
      assertEquals(0L, routingRequest4.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(40.0, routingRequest4.carSpeed, 0.01);
      assertFalse(routingRequest4.walkingBike);
      assertFalse(routingRequest4.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest4.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest4.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest4.alightSlack);
      assertFalse(routingRequest4.useBikeRentalAvailabilityInformation);
      assertEquals(0L, routingRequest4.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest4.maxSlope, 0.01);
      assertEquals(60, routingRequest4.bikeRentalPickupTime);
      assertEquals(300, routingRequest4.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest4.transferPenalty);
      assertFalse(routingRequest4.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest4.bikeBoardCost);
      assertFalse(routingRequest4.batch);
      assertEquals(20, routingRequest4.elevatorHopTime);
      assertEquals(300.0, routingRequest4.preTransitPenalty, 0.01);
      assertEquals(30, routingRequest4.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest4.maxPreTransitTime);
      assertTrue(routingRequest4.arriveBy);
      assertEquals(0, routingRequest4.boardSlack);
      assertEquals(120, routingRequest4.bikeRentalPickupCost);
      assertEquals(1.33, routingRequest4.walkSpeed, 0.01);
      assertEquals(60.0, routingRequest4.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest4.bikeSpeed, 0.01);
      assertEquals(1.0, routingRequest4.waitReluctance, 0.01);
      assertFalse(routingRequest4.parkAndRide);
      assertEquals(2.0, routingRequest4.stairsReluctance, 0.01);
      assertFalse(routingRequest4.showIntermediateStops);
      assertEquals(1.0, routingRequest4.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest4.dateTime);
      assertEquals(2.9, routingRequest4.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest4.carDropoffTime);
      assertEquals(180, routingRequest4.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest4.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest4.walkReluctance, 0.01);
      assertEquals(3, routingRequest4.numItineraries);
      assertFalse(routingRequest4.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest4.bikeSwitchTime);
      assertEquals(30, routingRequest4.bikeRentalDropoffTime);
      assertFalse(routingRequest4.wheelchairAccessible);
      assertEquals(0, routingRequest4.bikeSwitchCost);
      assertEquals(2.9, routingRequest4.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest4.maxWeight, 0.01);
      assertEquals(20, routingRequest4.elevatorHopCost);
      assertEquals(300, routingRequest4.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest4.bikeParkAndRide);
      assertEquals(2, routingRequest4.maxTransfers);
      assertEquals(10.0, routingRequest5.preTransitOverageRate, 0.01);
      assertFalse(routingRequest5.batch);
      assertEquals(Integer.MAX_VALUE, routingRequest5.maxPreTransitTime);
      assertEquals(300, routingRequest5.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest5.bikeRentalPickupTime);
      assertEquals(0L, routingRequest5.clampInitialWait);
      assertEquals(120, routingRequest5.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest5.maxSlope, 0.01);
      assertEquals(0, routingRequest5.transferPenalty);
      assertEquals(600, routingRequest5.bikeBoardCost);
      assertEquals(2.0, routingRequest5.stairsReluctance, 0.01);
      assertEquals(300.0, routingRequest5.preTransitPenalty, 0.01);
      assertEquals(5.0, routingRequest5.bikeSpeed, 0.01);
      assertEquals(30, routingRequest5.bikeRentalDropoffCost);
      assertFalse(routingRequest5.bikeParkAndRide);
      assertEquals(20, routingRequest5.elevatorHopTime);
      assertFalse(routingRequest5.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest5.boardSlack);
      assertEquals(300, routingRequest5.otherThanPreferredRoutesPenalty);
      assertEquals(30, routingRequest5.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest5.triangleSafetyFactor, 0.01);
      assertEquals(20, routingRequest5.elevatorHopCost);
      assertEquals(1.7976931348623157E308, routingRequest5.maxWeight, 0.01);
      assertEquals(2.9, routingRequest5.carAccelerationSpeed, 0.01);
      assertEquals(1.0, routingRequest5.turnReluctance, 0.01);
      assertEquals(120, routingRequest5.carDropoffTime);
      assertEquals(1.33, routingRequest5.walkSpeed, 0.01);
      assertFalse(routingRequest5.parkAndRide);
      assertEquals(1.0, routingRequest5.waitReluctance, 0.01);
      assertEquals(0L, routingRequest5.worstTime);
      assertEquals(600, routingRequest5.walkBoardCost);
      assertTrue(routingRequest5.softWalkLimiting);
      assertFalse(routingRequest5.kissAndRide);
      assertEquals(0, routingRequest5.transferSlack);
      assertEquals(0.0, routingRequest5.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest5.intermediatePlacesOrdered);
      assertFalse(routingRequest5.disableRemainingWeightHeuristic);
      assertTrue(routingRequest5.reverseOptimizing);
      assertEquals(0, routingRequest5.alightSlack);
      assertEquals(0.2, routingRequest5.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest5.heuristicWeight, 0.01);
      assertFalse(routingRequest5.walkingBike);
      assertFalse(routingRequest5.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest5.bikeSwitchCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest5.ignoreRealtimeUpdates);
      assertEquals(2, routingRequest5.maxTransfers);
      assertFalse(routingRequest5.wheelchairAccessible);
      assertEquals(0.0, routingRequest5.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest5.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest5.elevatorBoardCost);
      assertEquals(5.0, routingRequest5.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest5.walkReluctance, 0.01);
      assertEquals(40.0, routingRequest5.carSpeed, 0.01);
      assertFalse(routingRequest5.showIntermediateStops);
      assertFalse(routingRequest5.allowBikeRental);
      assertEquals(0, routingRequest5.bikeSwitchTime);
      assertEquals(90, routingRequest5.elevatorBoardTime);
      assertEquals(1.7976931348623157E308, routingRequest5.maxWalkDistance, 0.01);
      assertEquals(60.0, routingRequest5.softWalkPenalty, 0.01);
      assertTrue(routingRequest5.driveOnRight);
      assertTrue(routingRequest5.arriveBy);
      assertEquals(3, routingRequest5.numItineraries);
      assertTrue(routingRequest5.softPreTransitLimiting);
      assertEquals(1392409281L, routingRequest5.dateTime);
      assertEquals(2.9, routingRequest5.carDecelerationSpeed, 0.01);
      assertNull(state1);
      assertFalse(routingRequest0.equals((Object)routingRequest3));
      assertFalse(routingRequest0.equals((Object)routingRequest1));
      assertFalse(routingRequest0.equals((Object)routingRequest4));
      assertTrue(routingRequest0.equals((Object)routingRequest2));
      assertFalse(routingRequest0.equals((Object)routingRequest5));
      assertFalse(routingRequest3.equals((Object)routingRequest5));
      assertFalse(routingRequest3.equals((Object)routingRequest0));
      assertFalse(routingRequest3.equals((Object)routingRequest2));
      assertFalse(routingRequest3.equals((Object)routingRequest1));
      assertFalse(routingRequest3.equals((Object)routingRequest4));
      assertFalse(routingRequest4.equals((Object)routingRequest1));
      assertFalse(routingRequest4.equals((Object)routingRequest2));
      assertFalse(routingRequest4.equals((Object)routingRequest3));
      assertFalse(routingRequest4.equals((Object)routingRequest0));
      assertFalse(routingRequest5.equals((Object)routingRequest0));
      assertFalse(routingRequest5.equals((Object)routingRequest1));
      assertFalse(routingRequest5.equals((Object)routingRequest2));
      assertFalse(routingRequest5.equals((Object)routingRequest3));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(traverseModeSet0.getDriving());
      assertFalse(traverseModeSet0.getCustomMotorVehicle());
      assertFalse(traverseModeSet0.getBus());
      assertFalse(traverseModeSet0.getBicycle());
      assertFalse(traverseModeSet0.getTraininsh());
      assertEquals(0, traverseModeSet0.getMask());
      assertFalse(traverseModeSet0.getSubway());
      assertFalse(traverseModeSet0.getFunicular());
      assertFalse(traverseModeSet0.getCableCar());
      assertFalse(traverseModeSet0.isValid());
      assertFalse(traverseModeSet0.getRail());
      assertFalse(traverseModeSet0.getBusish());
      assertFalse(traverseModeSet0.getCar());
      assertFalse(traverseModeSet0.getFerry());
      assertFalse(traverseModeSet0.getTram());
      assertFalse(traverseModeSet0.getGondola());
      assertFalse(traverseModeSet0.getTrainish());
      assertFalse(traverseModeSet0.isTransit());
      assertFalse(traverseModeSet0.getWalk());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest3.getNumItineraries());
      assertFalse(routingRequest3.hasIntermediatePlaces());
      assertFalse(routingRequest3.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest3.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest3.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest3.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest3.getSecondsSinceEpoch());
      assertFalse(routingRequest3.transitAllowed());
      assertFalse(routingRequest4.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest4.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest4.getBoardCostLowerBound());
      assertFalse(routingRequest4.transitAllowed());
      assertEquals(1392409281L, routingRequest4.getSecondsSinceEpoch());
      assertEquals(1, routingRequest4.getNumItineraries());
      assertEquals(1.33, routingRequest4.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest4.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest5.getSecondsSinceEpoch());
      assertFalse(routingRequest5.hasIntermediatePlaces());
      assertEquals(1, routingRequest5.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest5.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest5.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest5.transitAllowed());
      assertEquals(600, routingRequest5.getBoardCostLowerBound());
      assertFalse(routingRequest5.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      String string0 = "3";
      TraverseMode traverseMode0 = TraverseMode.CAR;
      OptimizeType optimizeType0 = OptimizeType.FLAT;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0, optimizeType0);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertNotNull(routingRequest0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertNotNull(multiShortestPathTree0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      Graph graph0 = new Graph();
      assertNotNull(graph0);
      assertEquals(0, graph0.countVertices());
      
      double double0 = 3160.60905143;
      IntersectionVertex intersectionVertex0 = new IntersectionVertex(graph0, routingRequest0.routerId, double0, routingRequest0.carDropoffTime, string0);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertNotNull(intersectionVertex0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, graph0.countVertices());
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      
      boolean boolean0 = intersectionVertex0.edgeTypesValid();
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, graph0.countVertices());
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertTrue(boolean0);
      
      State state0 = new State(intersectionVertex0, multiShortestPathTree0.options);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertNotNull(state0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isCarParked());
      assertNull(state0.getBackMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(TraverseMode.CAR, state0.getNonTransitMode());
      assertNull(state0.getZone());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertTrue(state0.isFinal());
      assertFalse(state0.isEverBoarded());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isBikeRenting());
      assertFalse(state0.isOnboard());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      
      boolean boolean1 = multiShortestPathTree0.add(state0);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertTrue(boolean1 == boolean0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isCarParked());
      assertNull(state0.getBackMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(TraverseMode.CAR, state0.getNonTransitMode());
      assertNull(state0.getZone());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertTrue(state0.isFinal());
      assertFalse(state0.isEverBoarded());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isBikeRenting());
      assertFalse(state0.isOnboard());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertTrue(boolean1);
      
      Vertex vertex0 = null;
      State state1 = multiShortestPathTree0.getState(vertex0);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertNull(state1);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertNotNull(collection0);
      assertTrue(collection0.contains(state0));
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      String string0 = "3";
      TraverseMode traverseMode0 = TraverseMode.CAR;
      OptimizeType optimizeType0 = OptimizeType.FLAT;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0, optimizeType0);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertNotNull(routingRequest0);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertNotNull(multiShortestPathTree0);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      Graph graph0 = new Graph();
      assertNotNull(graph0);
      assertEquals(0, graph0.countVertices());
      
      double double0 = 3160.60905143;
      IntersectionVertex intersectionVertex0 = new IntersectionVertex(graph0, routingRequest0.routerId, double0, routingRequest0.carDropoffTime, string0);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertNotNull(intersectionVertex0);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, graph0.countVertices());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      
      State state0 = new State(intersectionVertex0, multiShortestPathTree0.options);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertNotNull(state0);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertFalse(state0.isBikeRenting());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertTrue(state0.isFinal());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertEquals(TraverseMode.CAR, state0.getNonTransitMode());
      assertFalse(state0.isEverBoarded());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      
      boolean boolean0 = multiShortestPathTree0.add(state0);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertFalse(state0.isBikeRenting());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertTrue(state0.isFinal());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertEquals(TraverseMode.CAR, state0.getNonTransitMode());
      assertFalse(state0.isEverBoarded());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertTrue(boolean0);
      
      String string1 = state0.toString();
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertFalse(state0.isBikeRenting());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertTrue(state0.isFinal());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertEquals(TraverseMode.CAR, state0.getNonTransitMode());
      assertFalse(state0.isEverBoarded());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals("<State Fri Feb 14 20:21:21 GMT 2014 [0.0] < lat,lng=120.0,3160.60905143>>", string1);
      
      boolean boolean1 = multiShortestPathTree0.add(state0);
      assertNotSame(string0, string1);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean1 == boolean0);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertFalse(state0.isBikeRenting());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertTrue(state0.isFinal());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertEquals(TraverseMode.CAR, state0.getNonTransitMode());
      assertFalse(state0.isEverBoarded());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertTrue(boolean1);
      
      Vertex vertex0 = null;
      State state1 = multiShortestPathTree0.getState(vertex0);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertNull(state1);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      int int0 = multiShortestPathTree0.getVertexCount();
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, int0);
      
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getState(intersectionVertex0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.core.State", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      String string0 = "3";
      TraverseMode traverseMode0 = TraverseMode.CAR;
      OptimizeType optimizeType0 = OptimizeType.FLAT;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0, optimizeType0);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertNotNull(routingRequest0);
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertNotNull(multiShortestPathTree0);
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      Graph graph0 = new Graph();
      assertNotNull(graph0);
      assertEquals(0, graph0.countVertices());
      
      double double0 = 3160.60905143;
      IntersectionVertex intersectionVertex0 = new IntersectionVertex(graph0, routingRequest0.routerId, double0, routingRequest0.carDropoffTime, string0);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertNotNull(intersectionVertex0);
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, graph0.countVertices());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      
      State state0 = new State(intersectionVertex0, multiShortestPathTree0.options);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertNotNull(state0);
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertTrue(state0.isFinal());
      assertFalse(state0.isCarParked());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.isEverBoarded());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertNull(state0.getZone());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(TraverseMode.CAR, state0.getNonTransitMode());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(1392409281L, state0.getTimeSeconds());
      
      boolean boolean0 = multiShortestPathTree0.add(state0);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertTrue(state0.isFinal());
      assertFalse(state0.isCarParked());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.isEverBoarded());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertNull(state0.getZone());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(TraverseMode.CAR, state0.getNonTransitMode());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertTrue(boolean0);
      
      Vertex vertex0 = null;
      State state1 = multiShortestPathTree0.getState(vertex0);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertNull(state1);
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      int int0 = multiShortestPathTree0.getVertexCount();
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, int0);
      
      List<State> list0 = multiShortestPathTree0.getStates(intersectionVertex0);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertNotNull(list0);
      assertTrue(list0.contains(state0));
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      System.setCurrentTimeMillis(routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      String string0 = "3";
      TraverseMode traverseMode0 = TraverseMode.CAR;
      OptimizeType optimizeType0 = OptimizeType.FLAT;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0, optimizeType0);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertNotNull(routingRequest0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertNotNull(multiShortestPathTree0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      Graph graph0 = new Graph();
      assertNotNull(graph0);
      assertEquals(0, graph0.countVertices());
      
      double double0 = 3160.60905143;
      ExitVertex exitVertex0 = new ExitVertex(graph0, routingRequest0.routerId, routingRequest0.otherThanPreferredRoutesPenalty, routingRequest0.walkReluctance);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(exitVertex0.trafficLight);
      assertFalse(exitVertex0.freeFlowing);
      assertNotNull(exitVertex0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, graph0.countVertices());
      assertEquals(300.0, exitVertex0.getX(), 0.01);
      assertEquals("", exitVertex0.getLabel());
      assertNull(exitVertex0.getExitName());
      assertEquals(0, exitVertex0.getDegreeOut());
      assertEquals(0, exitVertex0.getIndex());
      assertEquals(0, exitVertex0.getDegreeIn());
      assertEquals(300.0, exitVertex0.getLon(), 0.01);
      assertFalse(exitVertex0.inferredFreeFlowing());
      assertEquals(2.0, exitVertex0.getY(), 0.01);
      assertEquals(2.0, exitVertex0.getLat(), 0.01);
      assertEquals(1, exitVertex0.getMaxIndex());
      assertEquals("", exitVertex0.getName());
      
      State state0 = new State(exitVertex0, multiShortestPathTree0.options);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(exitVertex0.trafficLight);
      assertFalse(exitVertex0.freeFlowing);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertNotNull(state0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals(300.0, exitVertex0.getX(), 0.01);
      assertEquals("", exitVertex0.getLabel());
      assertNull(exitVertex0.getExitName());
      assertEquals(0, exitVertex0.getDegreeOut());
      assertEquals(0, exitVertex0.getIndex());
      assertEquals(0, exitVertex0.getDegreeIn());
      assertEquals(300.0, exitVertex0.getLon(), 0.01);
      assertFalse(exitVertex0.inferredFreeFlowing());
      assertEquals(2.0, exitVertex0.getY(), 0.01);
      assertEquals(2.0, exitVertex0.getLat(), 0.01);
      assertEquals(1, exitVertex0.getMaxIndex());
      assertEquals("", exitVertex0.getName());
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isBikeRenting());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isCarParked());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertEquals(TraverseMode.CAR, state0.getNonTransitMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertFalse(state0.isEverBoarded());
      assertEquals(0, state0.getNumBoardings());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertTrue(state0.isFinal());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      
      state0.dumpPath();
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(exitVertex0.trafficLight);
      assertFalse(exitVertex0.freeFlowing);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals(300.0, exitVertex0.getX(), 0.01);
      assertEquals("", exitVertex0.getLabel());
      assertNull(exitVertex0.getExitName());
      assertEquals(0, exitVertex0.getDegreeOut());
      assertEquals(0, exitVertex0.getIndex());
      assertEquals(0, exitVertex0.getDegreeIn());
      assertEquals(300.0, exitVertex0.getLon(), 0.01);
      assertFalse(exitVertex0.inferredFreeFlowing());
      assertEquals(2.0, exitVertex0.getY(), 0.01);
      assertEquals(2.0, exitVertex0.getLat(), 0.01);
      assertEquals(1, exitVertex0.getMaxIndex());
      assertEquals("", exitVertex0.getName());
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isBikeRenting());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isCarParked());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertEquals(TraverseMode.CAR, state0.getNonTransitMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertFalse(state0.isEverBoarded());
      assertEquals(0, state0.getNumBoardings());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertTrue(state0.isFinal());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      
      boolean boolean0 = multiShortestPathTree0.add(state0);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(exitVertex0.trafficLight);
      assertFalse(exitVertex0.freeFlowing);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals(300.0, exitVertex0.getX(), 0.01);
      assertEquals("", exitVertex0.getLabel());
      assertNull(exitVertex0.getExitName());
      assertEquals(0, exitVertex0.getDegreeOut());
      assertEquals(0, exitVertex0.getIndex());
      assertEquals(0, exitVertex0.getDegreeIn());
      assertEquals(300.0, exitVertex0.getLon(), 0.01);
      assertFalse(exitVertex0.inferredFreeFlowing());
      assertEquals(2.0, exitVertex0.getY(), 0.01);
      assertEquals(2.0, exitVertex0.getLat(), 0.01);
      assertEquals(1, exitVertex0.getMaxIndex());
      assertEquals("", exitVertex0.getName());
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isBikeRenting());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isCarParked());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertEquals(TraverseMode.CAR, state0.getNonTransitMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertFalse(state0.isEverBoarded());
      assertEquals(0, state0.getNumBoardings());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertTrue(state0.isFinal());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertTrue(boolean0);
      
      String string1 = state0.toString();
      assertNotSame(string1, string0);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(exitVertex0.trafficLight);
      assertFalse(exitVertex0.freeFlowing);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals(300.0, exitVertex0.getX(), 0.01);
      assertEquals("", exitVertex0.getLabel());
      assertNull(exitVertex0.getExitName());
      assertEquals(0, exitVertex0.getDegreeOut());
      assertEquals(0, exitVertex0.getIndex());
      assertEquals(0, exitVertex0.getDegreeIn());
      assertEquals(300.0, exitVertex0.getLon(), 0.01);
      assertFalse(exitVertex0.inferredFreeFlowing());
      assertEquals(2.0, exitVertex0.getY(), 0.01);
      assertEquals(2.0, exitVertex0.getLat(), 0.01);
      assertEquals(1, exitVertex0.getMaxIndex());
      assertEquals("", exitVertex0.getName());
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isBikeRenting());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isCarParked());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertEquals(TraverseMode.CAR, state0.getNonTransitMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertFalse(state0.isEverBoarded());
      assertEquals(0, state0.getNumBoardings());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertTrue(state0.isFinal());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals("<State Fri Feb 14 20:21:21 GMT 2014 [0.0] ExitVertex(< lat,lng=2.0,300.0>)>", string1);
      
      boolean boolean1 = multiShortestPathTree0.visit(state0);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(exitVertex0.trafficLight);
      assertFalse(exitVertex0.freeFlowing);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertTrue(boolean1 == boolean0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals(300.0, exitVertex0.getX(), 0.01);
      assertEquals("", exitVertex0.getLabel());
      assertNull(exitVertex0.getExitName());
      assertEquals(0, exitVertex0.getDegreeOut());
      assertEquals(0, exitVertex0.getIndex());
      assertEquals(0, exitVertex0.getDegreeIn());
      assertEquals(300.0, exitVertex0.getLon(), 0.01);
      assertFalse(exitVertex0.inferredFreeFlowing());
      assertEquals(2.0, exitVertex0.getY(), 0.01);
      assertEquals(2.0, exitVertex0.getLat(), 0.01);
      assertEquals(1, exitVertex0.getMaxIndex());
      assertEquals("", exitVertex0.getName());
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isBikeRenting());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isCarParked());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertEquals(TraverseMode.CAR, state0.getNonTransitMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertFalse(state0.isEverBoarded());
      assertEquals(0, state0.getNumBoardings());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertTrue(state0.isFinal());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertTrue(boolean1);
      
      Vertex vertex0 = null;
      State state1 = multiShortestPathTree0.getState(vertex0);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertNull(state1);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      int int0 = multiShortestPathTree0.getVertexCount();
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, int0);
      
      System.setCurrentTimeMillis(routingRequest0.numItineraries);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getState(exitVertex0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.core.State", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      String string0 = "3";
      TraverseMode traverseMode0 = TraverseMode.CAR;
      OptimizeType optimizeType0 = OptimizeType.FLAT;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0, optimizeType0);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.batch);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertNotNull(routingRequest0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.batch);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertNotNull(multiShortestPathTree0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      Graph graph0 = new Graph();
      assertNotNull(graph0);
      assertEquals(0, graph0.countVertices());
      
      double double0 = 3160.60905143;
      IntersectionVertex intersectionVertex0 = new IntersectionVertex(graph0, routingRequest0.routerId, double0, routingRequest0.carDropoffTime, string0);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.batch);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertNotNull(intersectionVertex0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, graph0.countVertices());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeIn());
      
      State state0 = new State(intersectionVertex0, multiShortestPathTree0.options);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.batch);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertNotNull(state0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertNull(state0.getZone());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(TraverseMode.CAR, state0.getNonTransitMode());
      assertFalse(state0.isBikeRenting());
      assertNull(state0.getBackMode());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertTrue(state0.isFinal());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isEverBoarded());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWeight(), 0.01);
      
      state0.weight = routingRequest0.carDecelerationSpeed;
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertNull(state0.getZone());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(2.9, state0.getWeight(), 0.01);
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(TraverseMode.CAR, state0.getNonTransitMode());
      assertFalse(state0.isBikeRenting());
      assertNull(state0.getBackMode());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertTrue(state0.isFinal());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isEverBoarded());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      
      boolean boolean0 = multiShortestPathTree0.add(state0);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.batch);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(2.9, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertNull(state0.getZone());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(2.9, state0.getWeight(), 0.01);
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(TraverseMode.CAR, state0.getNonTransitMode());
      assertFalse(state0.isBikeRenting());
      assertNull(state0.getBackMode());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertTrue(state0.isFinal());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isEverBoarded());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertTrue(boolean0);
      
      String string1 = state0.toString();
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.batch);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(2.9, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertNull(state0.getZone());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(2.9, state0.getWeight(), 0.01);
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(TraverseMode.CAR, state0.getNonTransitMode());
      assertFalse(state0.isBikeRenting());
      assertNull(state0.getBackMode());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertTrue(state0.isFinal());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isEverBoarded());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals("<State Fri Feb 14 20:21:21 GMT 2014 [2.9] < lat,lng=120.0,3160.60905143>>", string1);
      
      boolean boolean1 = multiShortestPathTree0.add(state0);
      assertNotSame(string0, string1);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.batch);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(2.9, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean1 == boolean0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertNull(state0.getZone());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(2.9, state0.getWeight(), 0.01);
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(TraverseMode.CAR, state0.getNonTransitMode());
      assertFalse(state0.isBikeRenting());
      assertNull(state0.getBackMode());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertTrue(state0.isFinal());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isEverBoarded());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(boolean1);
      
      Vertex vertex0 = null;
      State state1 = multiShortestPathTree0.getState(vertex0);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.batch);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertNull(state1);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getState(intersectionVertex0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.core.State", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      String string0 = "3";
      TraverseMode traverseMode0 = TraverseMode.BICYCLE;
      OptimizeType optimizeType0 = OptimizeType.FLAT;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0, optimizeType0);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertNotNull(routingRequest0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(5.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertNotNull(multiShortestPathTree0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(5.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      Graph graph0 = new Graph();
      assertNotNull(graph0);
      assertEquals(0, graph0.countVertices());
      
      IntersectionVertex intersectionVertex0 = new IntersectionVertex(graph0, routingRequest0.routerId, routingRequest0.useUnpreferredRoutesPenalty, routingRequest0.carDropoffTime, string0);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertNotNull(intersectionVertex0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(5.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, graph0.countVertices());
      assertEquals(300.0, intersectionVertex0.getX(), 0.01);
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(300.0, intersectionVertex0.getLon(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      
      State state0 = new State(intersectionVertex0, multiShortestPathTree0.options);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertNotNull(state0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(5.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals(300.0, intersectionVertex0.getX(), 0.01);
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(300.0, intersectionVertex0.getLon(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertNull(state0.getBackMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertTrue(state0.isFinal());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(TraverseMode.BICYCLE, state0.getNonTransitMode());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      
      state0.weight = routingRequest0.carDecelerationSpeed;
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(5.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals(300.0, intersectionVertex0.getX(), 0.01);
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(300.0, intersectionVertex0.getLon(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(2.9, state0.getWeight(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertNull(state0.getBackMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertTrue(state0.isFinal());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(TraverseMode.BICYCLE, state0.getNonTransitMode());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      
      boolean boolean0 = multiShortestPathTree0.add(state0);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(2.9, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(5.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals(300.0, intersectionVertex0.getX(), 0.01);
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(300.0, intersectionVertex0.getLon(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(2.9, state0.getWeight(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertNull(state0.getBackMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertTrue(state0.isFinal());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(TraverseMode.BICYCLE, state0.getNonTransitMode());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertTrue(boolean0);
      
      String string1 = state0.toString();
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(2.9, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(5.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals(300.0, intersectionVertex0.getX(), 0.01);
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(300.0, intersectionVertex0.getLon(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(2.9, state0.getWeight(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertNull(state0.getBackMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertTrue(state0.isFinal());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(TraverseMode.BICYCLE, state0.getNonTransitMode());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals("<State Fri Feb 14 20:21:21 GMT 2014 [2.9] < lat,lng=120.0,300.0>>", string1);
      
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertNotNull(collection0);
      assertTrue(collection0.contains(state0));
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(5.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      boolean boolean1 = MultiShortestPathTree.dominates(state0, state0);
      assertNotSame(string0, string1);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(2.9, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean1 == boolean0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(5.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals(300.0, intersectionVertex0.getX(), 0.01);
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(300.0, intersectionVertex0.getLon(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(2.9, state0.getWeight(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertNull(state0.getBackMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertTrue(state0.isFinal());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(TraverseMode.BICYCLE, state0.getNonTransitMode());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertTrue(boolean1);
      
      int int0 = (-911);
      routingRequest0.bikeBoardCost = int0;
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals((-911), routingRequest0.getBoardCostLowerBound());
      assertEquals(5.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      
      Collection<State> collection1 = multiShortestPathTree0.getAllStates();
      assertNotSame(collection1, collection0);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals((-911), routingRequest0.bikeBoardCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertNotNull(collection1);
      assertTrue(collection1.contains(state0));
      assertTrue(collection1.equals((Object)collection0));
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals((-911), routingRequest0.getBoardCostLowerBound());
      assertEquals(5.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      Vertex vertex0 = null;
      State state1 = multiShortestPathTree0.getState(vertex0);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals((-911), routingRequest0.bikeBoardCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertNull(state1);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals((-911), routingRequest0.getBoardCostLowerBound());
      assertEquals(5.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getState(intersectionVertex0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.core.State", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      String string0 = "3";
      TraverseMode traverseMode0 = TraverseMode.TRAM;
      OptimizeType optimizeType0 = OptimizeType.FLAT;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0, optimizeType0);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.batch);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertNotNull(routingRequest0);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.batch);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertNotNull(multiShortestPathTree0);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      Graph graph0 = new Graph();
      assertNotNull(graph0);
      assertEquals(0, graph0.countVertices());
      
      double double0 = 3160.60905143;
      IntersectionVertex intersectionVertex0 = new IntersectionVertex(graph0, routingRequest0.routerId, double0, routingRequest0.carDropoffTime, string0);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.batch);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertNotNull(intersectionVertex0);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, graph0.countVertices());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      
      String string1 = "";
      String string2 = " vertices)";
      routingRequest0.setRoutingContext(graph0, string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.batch);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, graph0.countVertices());
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0);
      
      State state0 = new State(intersectionVertex0, multiShortestPathTree0.options);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.batch);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertNotNull(state0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertNull(state0.getNonTransitMode());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertFalse(state0.isOnboard());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.getReverseOptimizing());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertTrue(state0.isFinal());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      
      boolean boolean1 = multiShortestPathTree0.add(state0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.batch);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean1 == boolean0);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertNull(state0.getNonTransitMode());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertFalse(state0.isOnboard());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.getReverseOptimizing());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertTrue(state0.isFinal());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertTrue(boolean1);
      
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.batch);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertNotNull(set0);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      
      String string3 = state0.toString();
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.batch);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertNull(state0.getNonTransitMode());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertFalse(state0.isOnboard());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.getReverseOptimizing());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertTrue(state0.isFinal());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals("<State Fri Feb 14 20:21:21 GMT 2014 [0.0] < lat,lng=120.0,3160.60905143>>", string3);
      
      boolean boolean2 = multiShortestPathTree0.add(state0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.batch);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertNull(state0.getNonTransitMode());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertFalse(state0.isOnboard());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.getReverseOptimizing());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertTrue(state0.isFinal());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertTrue(boolean2);
      
      State state1 = multiShortestPathTree0.getState(intersectionVertex0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertSame(state1, state0);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertEquals(0.0, state1.weight, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.batch);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertNotNull(state1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(state1.getReverseOptimizing());
      assertTrue(state1.isFinal());
      assertEquals(0, state1.getNumBoardings());
      assertFalse(state1.isEverBoarded());
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertEquals(1392409281L, state1.getTimeSeconds());
      assertNull(state1.getNonTransitMode());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertNull(state1.getBackMode());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertNull(state1.getZone());
      assertFalse(state1.isCarParked());
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertFalse(state1.isBikeRenting());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertEquals(0, state1.getPreTransitTime());
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertFalse(state1.isOnboard());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state1.getStartTimeSeconds());
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertEquals(1392409281000L, state1.getTimeInMillis());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      
      int int0 = multiShortestPathTree0.getVertexCount();
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.batch);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, int0);
      
      State state2 = multiShortestPathTree0.getState(intersectionVertex0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertSame(state2, state0);
      assertSame(state2, state1);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.batch);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0, state2.walkDistance, 0.01);
      assertEquals(0.0, state2.weight, 0.01);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertNotNull(state2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(state2.isFinal());
      assertEquals(0L, state2.getLastAlightedTimeSeconds());
      assertEquals(0.0, state2.getWalkAtLastTransit(), 0.01);
      assertNull(state2.getNonTransitMode());
      assertFalse(state2.isBikeRenting());
      assertEquals(0, state2.getPreTransitTime());
      assertEquals(1392409281L, state2.getTimeSeconds());
      assertEquals(0, state2.getNumBoardings());
      assertFalse(state2.getReverseOptimizing());
      assertEquals(0, state2.getAbsTimeDeltaSeconds());
      assertEquals(0L, state2.getElapsedTimeSeconds());
      assertEquals(0.0, state2.getWalkDistanceDelta(), 0.01);
      assertNull(state2.getZone());
      assertEquals(0.0, state2.getWalkSinceLastTransit(), 0.01);
      assertEquals(0.0, state2.getWalkDistance(), 0.01);
      assertFalse(state2.isOnboard());
      assertNull(state2.getBackMode());
      assertEquals(1392409281000L, state2.getTimeInMillis());
      assertEquals(0, state2.getPreTransitTimeDelta());
      assertEquals(0, state2.getTimeDeltaSeconds());
      assertEquals(0.0, state2.getWeight(), 0.01);
      assertFalse(state2.isBackWalkingBike());
      assertFalse(state2.isCarParked());
      assertFalse(state2.isEverBoarded());
      assertEquals(1392409281L, state2.getStartTimeSeconds());
      assertEquals(0.0, state2.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state2.getLastNextArrivalDelta());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      
      int int1 = 1205;
      SimpleEdge simpleEdge0 = new SimpleEdge(intersectionVertex0, intersectionVertex0, routingRequest0.maxWeight, int1);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.batch);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertNotNull(simpleEdge0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int1 == int0);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, graph0.countVertices());
      assertNull(simpleEdge0.getName());
      assertTrue(simpleEdge0.vertexTypesValid());
      assertEquals(5, simpleEdge0.getId());
      assertFalse(simpleEdge0.isPartial());
      assertEquals(0.0, simpleEdge0.getDistance(), 0.01);
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(1, intersectionVertex0.getDegreeOut());
      assertEquals(1, intersectionVertex0.getDegreeIn());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertTrue(intersectionVertex0.inferredFreeFlowing());
      
      State state3 = simpleEdge0.traverse(state1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertSame(state1, state0);
      assertSame(state1, state2);
      assertNotSame(state1, state3);
      assertNotSame(state3, state0);
      assertNotSame(state3, state2);
      assertNotSame(state3, state1);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertEquals(0.0, state1.weight, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.batch);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.7976931348623157E308, state3.weight, 0.01);
      assertEquals(0.0, state3.walkDistance, 0.01);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertNotNull(state3);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int1 == int0);
      assertFalse(state3.equals((Object)state0));
      assertFalse(state3.equals((Object)state2));
      assertFalse(state3.equals((Object)state1));
      assertFalse(state1.getReverseOptimizing());
      assertTrue(state1.isFinal());
      assertEquals(0, state1.getNumBoardings());
      assertFalse(state1.isEverBoarded());
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertEquals(1392409281L, state1.getTimeSeconds());
      assertNull(state1.getNonTransitMode());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertNull(state1.getBackMode());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertNull(state1.getZone());
      assertFalse(state1.isCarParked());
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertFalse(state1.isBikeRenting());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertEquals(0, state1.getPreTransitTime());
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertFalse(state1.isOnboard());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state1.getStartTimeSeconds());
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertEquals(1392409281000L, state1.getTimeInMillis());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertNull(simpleEdge0.getName());
      assertTrue(simpleEdge0.vertexTypesValid());
      assertEquals(5, simpleEdge0.getId());
      assertFalse(simpleEdge0.isPartial());
      assertEquals(0.0, simpleEdge0.getDistance(), 0.01);
      assertEquals(1205.0, state3.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1.7976931348623157E308, state3.getWeight(), 0.01);
      assertEquals(1.7976931348623157E308, state3.getWeightDelta(), 0.01);
      assertEquals(1392409281L, state3.getStartTimeSeconds());
      assertEquals(1205, state3.getTimeDeltaSeconds());
      assertFalse(state3.isCarParked());
      assertTrue(state3.isFinal());
      assertFalse(state3.isEverBoarded());
      assertEquals(0.0, state3.getWalkAtLastTransit(), 0.01);
      assertNull(state3.getNonTransitMode());
      assertFalse(state3.getReverseOptimizing());
      assertNull(state3.getBackMode());
      assertEquals(0.0, state3.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state3.getLastAlightedTimeSeconds());
      assertEquals(1392410486L, state3.getTimeSeconds());
      assertEquals(0.0, state3.getWalkSinceLastTransit(), 0.01);
      assertNull(state3.getZone());
      assertFalse(state3.isBackWalkingBike());
      assertFalse(state3.isBikeRenting());
      assertEquals(0, state3.getPreTransitTimeDelta());
      assertEquals(0, state3.getLastNextArrivalDelta());
      assertEquals(0, state3.getPreTransitTime());
      assertEquals(1205L, state3.getElapsedTimeSeconds());
      assertEquals(0, state3.getNumBoardings());
      assertEquals(1392410486000L, state3.getTimeInMillis());
      assertFalse(state3.isOnboard());
      assertEquals(1205, state3.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state3.getWalkDistance(), 0.01);
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(1, intersectionVertex0.getDegreeOut());
      assertEquals(1, intersectionVertex0.getDegreeIn());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertTrue(intersectionVertex0.inferredFreeFlowing());
      
      boolean boolean3 = MultiShortestPathTree.dominates(state1, state3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertSame(state1, state0);
      assertSame(state1, state2);
      assertNotSame(state1, state3);
      assertNotSame(state3, state0);
      assertNotSame(state3, state2);
      assertNotSame(state3, state1);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertEquals(0.0, state1.weight, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.batch);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.7976931348623157E308, state3.weight, 0.01);
      assertEquals(0.0, state3.walkDistance, 0.01);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(state1.equals((Object)state3));
      assertFalse(int1 == int0);
      assertFalse(state3.equals((Object)state0));
      assertFalse(state3.equals((Object)state2));
      assertFalse(state3.equals((Object)state1));
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(state1.getReverseOptimizing());
      assertTrue(state1.isFinal());
      assertEquals(0, state1.getNumBoardings());
      assertFalse(state1.isEverBoarded());
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertEquals(1392409281L, state1.getTimeSeconds());
      assertNull(state1.getNonTransitMode());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertNull(state1.getBackMode());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertNull(state1.getZone());
      assertFalse(state1.isCarParked());
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertFalse(state1.isBikeRenting());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertEquals(0, state1.getPreTransitTime());
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertFalse(state1.isOnboard());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state1.getStartTimeSeconds());
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertEquals(1392409281000L, state1.getTimeInMillis());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertNull(simpleEdge0.getName());
      assertTrue(simpleEdge0.vertexTypesValid());
      assertEquals(5, simpleEdge0.getId());
      assertFalse(simpleEdge0.isPartial());
      assertEquals(0.0, simpleEdge0.getDistance(), 0.01);
      assertEquals(1205.0, state3.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1.7976931348623157E308, state3.getWeight(), 0.01);
      assertEquals(1.7976931348623157E308, state3.getWeightDelta(), 0.01);
      assertEquals(1392409281L, state3.getStartTimeSeconds());
      assertEquals(1205, state3.getTimeDeltaSeconds());
      assertFalse(state3.isCarParked());
      assertTrue(state3.isFinal());
      assertFalse(state3.isEverBoarded());
      assertEquals(0.0, state3.getWalkAtLastTransit(), 0.01);
      assertNull(state3.getNonTransitMode());
      assertFalse(state3.getReverseOptimizing());
      assertNull(state3.getBackMode());
      assertEquals(0.0, state3.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state3.getLastAlightedTimeSeconds());
      assertEquals(1392410486L, state3.getTimeSeconds());
      assertEquals(0.0, state3.getWalkSinceLastTransit(), 0.01);
      assertNull(state3.getZone());
      assertFalse(state3.isBackWalkingBike());
      assertFalse(state3.isBikeRenting());
      assertEquals(0, state3.getPreTransitTimeDelta());
      assertEquals(0, state3.getLastNextArrivalDelta());
      assertEquals(0, state3.getPreTransitTime());
      assertEquals(1205L, state3.getElapsedTimeSeconds());
      assertEquals(0, state3.getNumBoardings());
      assertEquals(1392410486000L, state3.getTimeInMillis());
      assertFalse(state3.isOnboard());
      assertEquals(1205, state3.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state3.getWalkDistance(), 0.01);
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(1, intersectionVertex0.getDegreeOut());
      assertEquals(1, intersectionVertex0.getDegreeIn());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertTrue(intersectionVertex0.inferredFreeFlowing());
      assertTrue(boolean3);
      
      boolean boolean4 = multiShortestPathTree0.add(state0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(state0, state3);
      assertSame(state0, state2);
      assertSame(state0, state1);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.batch);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertFalse(state0.equals((Object)state3));
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(1, intersectionVertex0.getDegreeOut());
      assertEquals(1, intersectionVertex0.getDegreeIn());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertTrue(intersectionVertex0.inferredFreeFlowing());
      assertEquals(0, state0.getNumBoardings());
      assertNull(state0.getNonTransitMode());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertFalse(state0.isOnboard());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.getReverseOptimizing());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertTrue(state0.isFinal());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertTrue(boolean4);
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      String string0 = "3";
      TraverseMode traverseMode0 = TraverseMode.TRAM;
      OptimizeType optimizeType0 = OptimizeType.FLAT;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0, optimizeType0);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertNotNull(routingRequest0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertNotNull(multiShortestPathTree0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      Graph graph0 = new Graph();
      assertNotNull(graph0);
      assertEquals(0, graph0.countVertices());
      
      double double0 = 3160.60905143;
      IntersectionVertex intersectionVertex0 = new IntersectionVertex(graph0, routingRequest0.routerId, double0, routingRequest0.carDropoffTime, string0);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertNotNull(intersectionVertex0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1, graph0.countVertices());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      
      String string1 = "";
      String string2 = " vertices)";
      routingRequest0.setRoutingContext(graph0, string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1, graph0.countVertices());
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(boolean0);
      
      State state0 = new State(intersectionVertex0, multiShortestPathTree0.options);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertNotNull(state0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertFalse(state0.isCarParked());
      assertNull(state0.getBackMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertFalse(state0.isEverBoarded());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertTrue(state0.isFinal());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertNull(state0.getNonTransitMode());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertFalse(state0.isBikeRenting());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getNumBoardings());
      
      boolean boolean1 = multiShortestPathTree0.add(state0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(boolean1 == boolean0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertFalse(state0.isCarParked());
      assertNull(state0.getBackMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertFalse(state0.isEverBoarded());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertTrue(state0.isFinal());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertNull(state0.getNonTransitMode());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertFalse(state0.isBikeRenting());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getNumBoardings());
      assertTrue(boolean1);
      
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertNotNull(set0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      
      double double1 = 1.05;
      state0.walkDistance = double1;
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertNull(state0.getZone());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertFalse(state0.isCarParked());
      assertNull(state0.getBackMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertFalse(state0.isEverBoarded());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(1.05, state0.getWalkDistance(), 0.01);
      assertTrue(state0.isFinal());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertNull(state0.getNonTransitMode());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertFalse(state0.isBikeRenting());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(1.05, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      
      String string3 = state0.toString();
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(1.05, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertNotNull(string3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotEquals(double0, double1, 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertNull(state0.getZone());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertFalse(state0.isCarParked());
      assertNull(state0.getBackMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertFalse(state0.isEverBoarded());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(1.05, state0.getWalkDistance(), 0.01);
      assertTrue(state0.isFinal());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertNull(state0.getNonTransitMode());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertFalse(state0.isBikeRenting());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(1.05, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertEquals("<State Fri Feb 14 20:21:21 GMT 2014 [0.0] < lat,lng=120.0,3160.60905143>>", string3);
      
      boolean boolean2 = multiShortestPathTree0.add(state0);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(1.05, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotEquals(double0, double1, 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertNull(state0.getZone());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertFalse(state0.isCarParked());
      assertNull(state0.getBackMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertFalse(state0.isEverBoarded());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(1.05, state0.getWalkDistance(), 0.01);
      assertTrue(state0.isFinal());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertNull(state0.getNonTransitMode());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertFalse(state0.isBikeRenting());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(1.05, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertTrue(boolean2);
      
      State state1 = multiShortestPathTree0.getState(intersectionVertex0);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(state1, state0);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, state1.weight, 0.01);
      assertEquals(1.05, state1.walkDistance, 0.01);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertNotNull(state1);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotEquals(double0, double1, 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertTrue(state1.isFinal());
      assertEquals(1.05, state1.getWalkDistance(), 0.01);
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertFalse(state1.isCarParked());
      assertEquals(1.05, state1.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertNull(state1.getNonTransitMode());
      assertEquals(0, state1.getNumBoardings());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state1.getPreTransitTime());
      assertEquals(1392409281L, state1.getTimeSeconds());
      assertFalse(state1.isBikeRenting());
      assertFalse(state1.getReverseOptimizing());
      assertNull(state1.getBackMode());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertFalse(state1.isOnboard());
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertNull(state1.getZone());
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertFalse(state1.isEverBoarded());
      assertEquals(1392409281000L, state1.getTimeInMillis());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state1.getStartTimeSeconds());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      
      int int0 = multiShortestPathTree0.getVertexCount();
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, int0);
      
      State state2 = multiShortestPathTree0.getState(intersectionVertex0);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(state2, state0);
      assertSame(state2, state1);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.05, state2.walkDistance, 0.01);
      assertEquals(0.0, state2.weight, 0.01);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertNotNull(state2);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotEquals(double0, double1, 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals(0L, state2.getLastAlightedTimeSeconds());
      assertTrue(state2.isFinal());
      assertEquals(0.0, state2.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state2.getStartTimeSeconds());
      assertFalse(state2.getReverseOptimizing());
      assertEquals(1.05, state2.getWalkDistance(), 0.01);
      assertEquals(0, state2.getPreTransitTime());
      assertFalse(state2.isBikeRenting());
      assertNull(state2.getNonTransitMode());
      assertEquals(1392409281000L, state2.getTimeInMillis());
      assertEquals(0, state2.getNumBoardings());
      assertEquals(1.05, state2.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state2.getAbsTimeDeltaSeconds());
      assertEquals(0L, state2.getElapsedTimeSeconds());
      assertNull(state2.getZone());
      assertEquals(1392409281L, state2.getTimeSeconds());
      assertNull(state2.getBackMode());
      assertFalse(state2.isOnboard());
      assertEquals(0.0, state2.getWalkDistanceDelta(), 0.01);
      assertFalse(state2.isEverBoarded());
      assertEquals(0.0, state2.getWeight(), 0.01);
      assertEquals(0.0, state2.getWalkAtLastTransit(), 0.01);
      assertFalse(state2.isBackWalkingBike());
      assertEquals(0, state2.getTimeDeltaSeconds());
      assertEquals(0, state2.getLastNextArrivalDelta());
      assertFalse(state2.isCarParked());
      assertEquals(0, state2.getPreTransitTimeDelta());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      
      State state3 = multiShortestPathTree0.getState(intersectionVertex0);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(state3, state2);
      assertSame(state3, state0);
      assertSame(state3, state1);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.05, state3.walkDistance, 0.01);
      assertEquals(0.0, state3.weight, 0.01);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertNotNull(state3);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotEquals(double0, double1, 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertNull(state3.getZone());
      assertEquals(0, state3.getAbsTimeDeltaSeconds());
      assertFalse(state3.isOnboard());
      assertEquals(0.0, state3.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state3.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281000L, state3.getTimeInMillis());
      assertNull(state3.getBackMode());
      assertEquals(0, state3.getNumBoardings());
      assertNull(state3.getNonTransitMode());
      assertEquals(0, state3.getPreTransitTime());
      assertEquals(0L, state3.getElapsedTimeSeconds());
      assertFalse(state3.isBikeRenting());
      assertTrue(state3.isFinal());
      assertEquals(1.05, state3.getWalkSinceLastTransit(), 0.01);
      assertFalse(state3.getReverseOptimizing());
      assertEquals(0L, state3.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state3.getTimeSeconds());
      assertEquals(1.05, state3.getWalkDistance(), 0.01);
      assertEquals(0, state3.getTimeDeltaSeconds());
      assertFalse(state3.isCarParked());
      assertEquals(0.0, state3.getWeight(), 0.01);
      assertFalse(state3.isEverBoarded());
      assertEquals(1392409281L, state3.getStartTimeSeconds());
      assertEquals(0, state3.getPreTransitTimeDelta());
      assertFalse(state3.isBackWalkingBike());
      assertEquals(0.0, state3.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state3.getLastNextArrivalDelta());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(0, intersectionVertex0.getDegreeIn());
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      String string0 = "3";
      TraverseMode traverseMode0 = TraverseMode.CAR;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      OptimizeType optimizeType0 = OptimizeType.FLAT;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0, optimizeType0);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.batch);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertNotNull(routingRequest0);
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.batch);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertNotNull(multiShortestPathTree0);
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      Graph graph0 = new Graph();
      assertNotNull(graph0);
      assertEquals(0, graph0.countVertices());
      
      double double0 = 3160.60905143;
      IntersectionVertex intersectionVertex0 = new IntersectionVertex(graph0, string0, routingRequest0.maxSlope, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.batch);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertNotNull(intersectionVertex0);
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, graph0.countVertices());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals("3", intersectionVertex0.getName());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(0.0833333333333, intersectionVertex0.getLon(), 0.01);
      assertEquals(300.0, intersectionVertex0.getY(), 0.01);
      assertEquals(300.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals("3", intersectionVertex0.getLabel());
      assertEquals(0.0833333333333, intersectionVertex0.getX(), 0.01);
      
      State state0 = new State(intersectionVertex0, multiShortestPathTree0.options);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.batch);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertNotNull(state0);
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals("3", intersectionVertex0.getName());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(0.0833333333333, intersectionVertex0.getLon(), 0.01);
      assertEquals(300.0, intersectionVertex0.getY(), 0.01);
      assertEquals(300.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals("3", intersectionVertex0.getLabel());
      assertEquals(0.0833333333333, intersectionVertex0.getX(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertTrue(state0.isFinal());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertNull(state0.getZone());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(TraverseMode.CAR, state0.getNonTransitMode());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertNull(state0.getBackMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertFalse(state0.isOnboard());
      assertFalse(state0.isEverBoarded());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(1392409281000L, state0.getTimeInMillis());
      
      state0.weight = routingRequest0.carDecelerationSpeed;
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals("3", intersectionVertex0.getName());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(0.0833333333333, intersectionVertex0.getLon(), 0.01);
      assertEquals(300.0, intersectionVertex0.getY(), 0.01);
      assertEquals(300.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals("3", intersectionVertex0.getLabel());
      assertEquals(0.0833333333333, intersectionVertex0.getX(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertTrue(state0.isFinal());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertNull(state0.getZone());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(TraverseMode.CAR, state0.getNonTransitMode());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertNull(state0.getBackMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertFalse(state0.isOnboard());
      assertFalse(state0.isEverBoarded());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(2.9, state0.getWeight(), 0.01);
      assertEquals(1392409281000L, state0.getTimeInMillis());
      
      boolean boolean1 = multiShortestPathTree0.add(state0);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.batch);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(2.9, state0.weight, 0.01);
      assertFalse(boolean1 == boolean0);
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals("3", intersectionVertex0.getName());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(0.0833333333333, intersectionVertex0.getLon(), 0.01);
      assertEquals(300.0, intersectionVertex0.getY(), 0.01);
      assertEquals(300.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals("3", intersectionVertex0.getLabel());
      assertEquals(0.0833333333333, intersectionVertex0.getX(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertTrue(state0.isFinal());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertNull(state0.getZone());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(TraverseMode.CAR, state0.getNonTransitMode());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertNull(state0.getBackMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertFalse(state0.isOnboard());
      assertFalse(state0.isEverBoarded());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(2.9, state0.getWeight(), 0.01);
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertTrue(boolean1);
      
      double double1 = (-2091.7488704311554);
      state0.weight = double1;
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals("3", intersectionVertex0.getName());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(0.0833333333333, intersectionVertex0.getLon(), 0.01);
      assertEquals(300.0, intersectionVertex0.getY(), 0.01);
      assertEquals(300.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals("3", intersectionVertex0.getLabel());
      assertEquals(0.0833333333333, intersectionVertex0.getX(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertTrue(state0.isFinal());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertNull(state0.getZone());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(TraverseMode.CAR, state0.getNonTransitMode());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertNull(state0.getBackMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertFalse(state0.isOnboard());
      assertFalse(state0.isEverBoarded());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals((-2091.7488704311554), state0.getWeight(), 0.01);
      
      String string1 = state0.toString();
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.batch);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals((-2091.7488704311554), state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals("3", intersectionVertex0.getName());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(0.0833333333333, intersectionVertex0.getLon(), 0.01);
      assertEquals(300.0, intersectionVertex0.getY(), 0.01);
      assertEquals(300.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals("3", intersectionVertex0.getLabel());
      assertEquals(0.0833333333333, intersectionVertex0.getX(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertTrue(state0.isFinal());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertNull(state0.getZone());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(TraverseMode.CAR, state0.getNonTransitMode());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertNull(state0.getBackMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertFalse(state0.isOnboard());
      assertFalse(state0.isEverBoarded());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals((-2091.7488704311554), state0.getWeight(), 0.01);
      assertEquals("<State Fri Feb 14 20:21:21 GMT 2014 [-2091.7488704311554] <3 lat,lng=300.0,0.0833333333333>>", string1);
      
      boolean boolean2 = multiShortestPathTree0.add(state0);
      assertNotSame(string0, string1);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.batch);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals((-2091.7488704311554), state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(string0.equals((Object)string1));
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals("3", intersectionVertex0.getName());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(0.0833333333333, intersectionVertex0.getLon(), 0.01);
      assertEquals(300.0, intersectionVertex0.getY(), 0.01);
      assertEquals(300.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals("3", intersectionVertex0.getLabel());
      assertEquals(0.0833333333333, intersectionVertex0.getX(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertTrue(state0.isFinal());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertNull(state0.getZone());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(TraverseMode.CAR, state0.getNonTransitMode());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertNull(state0.getBackMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertFalse(state0.isOnboard());
      assertFalse(state0.isEverBoarded());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals((-2091.7488704311554), state0.getWeight(), 0.01);
      assertFalse(boolean2);
      
      Vertex vertex0 = null;
      State state1 = multiShortestPathTree0.getState(vertex0);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.batch);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertNull(state1);
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      State state2 = new State(vertex0, multiShortestPathTree0.options);
      assertEquals(0.0, state2.weight, 0.01);
      assertEquals(0.0, state2.walkDistance, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.batch);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertNotNull(state2);
      assertFalse(state2.equals((Object)state0));
      assertTrue(state2.isFinal());
      assertEquals(0L, state2.getLastAlightedTimeSeconds());
      assertEquals(0, state2.getTimeDeltaSeconds());
      assertEquals(0, state2.getNumBoardings());
      assertEquals(0.0, state2.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281L, state2.getTimeSeconds());
      assertEquals(0, state2.getPreTransitTime());
      assertFalse(state2.isBikeRenting());
      assertEquals(TraverseMode.CAR, state2.getNonTransitMode());
      assertNull(state2.getBackMode());
      assertFalse(state2.getReverseOptimizing());
      assertEquals(0.0, state2.getWalkDistance(), 0.01);
      assertEquals(0, state2.getAbsTimeDeltaSeconds());
      assertFalse(state2.isOnboard());
      assertEquals(0L, state2.getElapsedTimeSeconds());
      assertEquals(0.0, state2.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state2.getWalkSinceLastTransit(), 0.01);
      assertNull(state2.getZone());
      assertEquals(0.0, state2.getWeight(), 0.01);
      assertEquals(1392409281000L, state2.getTimeInMillis());
      assertFalse(state2.isEverBoarded());
      assertFalse(state2.isCarParked());
      assertEquals(0, state2.getPreTransitTimeDelta());
      assertEquals(0.0, state2.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state2.isBackWalkingBike());
      assertEquals(0, state2.getLastNextArrivalDelta());
      assertEquals(1392409281L, state2.getStartTimeSeconds());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      String string0 = "3";
      TraverseMode traverseMode0 = TraverseMode.BICYCLE;
      OptimizeType optimizeType0 = OptimizeType.FLAT;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0, optimizeType0);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.batch);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertNotNull(routingRequest0);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(5.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.batch);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertNotNull(multiShortestPathTree0);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(5.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      Graph graph0 = new Graph();
      assertNotNull(graph0);
      assertEquals(0, graph0.countVertices());
      
      IntersectionVertex intersectionVertex0 = new IntersectionVertex(graph0, routingRequest0.routerId, routingRequest0.useUnpreferredRoutesPenalty, routingRequest0.carDropoffTime, string0);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.batch);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertNotNull(intersectionVertex0);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(5.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, graph0.countVertices());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(300.0, intersectionVertex0.getX(), 0.01);
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(300.0, intersectionVertex0.getLon(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      
      State state0 = new State(intersectionVertex0, multiShortestPathTree0.options);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.batch);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertNotNull(state0);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(5.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(300.0, intersectionVertex0.getX(), 0.01);
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(300.0, intersectionVertex0.getLon(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertNull(state0.getBackMode());
      assertFalse(state0.isCarParked());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(TraverseMode.BICYCLE, state0.getNonTransitMode());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertFalse(state0.isEverBoarded());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertFalse(state0.isOnboard());
      assertTrue(state0.isFinal());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      
      state0.weight = routingRequest0.carDecelerationSpeed;
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(5.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(300.0, intersectionVertex0.getX(), 0.01);
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(300.0, intersectionVertex0.getLon(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertNull(state0.getBackMode());
      assertFalse(state0.isCarParked());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(TraverseMode.BICYCLE, state0.getNonTransitMode());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertFalse(state0.isEverBoarded());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(2.9, state0.getWeight(), 0.01);
      assertFalse(state0.isOnboard());
      assertTrue(state0.isFinal());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      
      boolean boolean0 = multiShortestPathTree0.add(state0);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.batch);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertEquals(2.9, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(5.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(300.0, intersectionVertex0.getX(), 0.01);
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(300.0, intersectionVertex0.getLon(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertNull(state0.getBackMode());
      assertFalse(state0.isCarParked());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(TraverseMode.BICYCLE, state0.getNonTransitMode());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertFalse(state0.isEverBoarded());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(2.9, state0.getWeight(), 0.01);
      assertFalse(state0.isOnboard());
      assertTrue(state0.isFinal());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertTrue(boolean0);
      
      String string1 = state0.toString();
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.batch);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertEquals(2.9, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(5.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(300.0, intersectionVertex0.getX(), 0.01);
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(300.0, intersectionVertex0.getLon(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertNull(state0.getBackMode());
      assertFalse(state0.isCarParked());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(TraverseMode.BICYCLE, state0.getNonTransitMode());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertFalse(state0.isEverBoarded());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(2.9, state0.getWeight(), 0.01);
      assertFalse(state0.isOnboard());
      assertTrue(state0.isFinal());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals("<State Fri Feb 14 20:21:21 GMT 2014 [2.9] < lat,lng=120.0,300.0>>", string1);
      
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.batch);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertNotNull(collection0);
      assertTrue(collection0.contains(state0));
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(5.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      boolean boolean1 = MultiShortestPathTree.dominates(state0, state0);
      assertNotSame(string0, string1);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.batch);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertEquals(2.9, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean1 == boolean0);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(5.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(300.0, intersectionVertex0.getX(), 0.01);
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(300.0, intersectionVertex0.getLon(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertNull(state0.getBackMode());
      assertFalse(state0.isCarParked());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(TraverseMode.BICYCLE, state0.getNonTransitMode());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertFalse(state0.isEverBoarded());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(2.9, state0.getWeight(), 0.01);
      assertFalse(state0.isOnboard());
      assertTrue(state0.isFinal());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertTrue(boolean1);
      
      int int0 = (-911);
      routingRequest0.bikeBoardCost = int0;
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals((-911), routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(5.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      
      Vertex vertex0 = null;
      State state1 = multiShortestPathTree0.getState(vertex0);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.batch);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals((-911), routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertNull(state1);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals((-911), routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(5.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      routingRequest0.setDummyRoutingContext(graph0);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.batch);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals((-911), routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals((-911), routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(5.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, graph0.countVertices());
      
      State state2 = multiShortestPathTree0.getState(intersectionVertex0);
      assertNotSame(string0, string1);
      assertSame(state2, state0);
      assertEquals(2.9, state2.weight, 0.01);
      assertEquals(0.0, state2.walkDistance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.batch);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals((-911), routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertNotNull(state2);
      assertFalse(string0.equals((Object)string1));
      assertEquals(0.0, state2.getWalkDistance(), 0.01);
      assertEquals(2.9, state2.getWeight(), 0.01);
      assertFalse(state2.isOnboard());
      assertEquals(0L, state2.getElapsedTimeSeconds());
      assertEquals(0.0, state2.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state2.getWalkSinceLastTransit(), 0.01);
      assertNull(state2.getZone());
      assertNull(state2.getBackMode());
      assertEquals(1392409281L, state2.getTimeSeconds());
      assertFalse(state2.isEverBoarded());
      assertEquals(0, state2.getPreTransitTimeDelta());
      assertEquals(TraverseMode.BICYCLE, state2.getNonTransitMode());
      assertEquals(0, state2.getLastNextArrivalDelta());
      assertFalse(state2.isCarParked());
      assertEquals(0.0, state2.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state2.isBackWalkingBike());
      assertEquals(0L, state2.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state2.getStartTimeSeconds());
      assertEquals(0, state2.getTimeDeltaSeconds());
      assertEquals(0.0, state2.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281000L, state2.getTimeInMillis());
      assertEquals(0, state2.getPreTransitTime());
      assertFalse(state2.isBikeRenting());
      assertEquals(0, state2.getNumBoardings());
      assertFalse(state2.getReverseOptimizing());
      assertEquals(0, state2.getAbsTimeDeltaSeconds());
      assertTrue(state2.isFinal());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals((-911), routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(5.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(300.0, intersectionVertex0.getX(), 0.01);
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(300.0, intersectionVertex0.getLon(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      
      Collection<State> collection1 = multiShortestPathTree0.getAllStates();
      assertNotSame(collection1, collection0);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.batch);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals((-911), routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertNotNull(collection1);
      assertTrue(collection1.contains(state2));
      assertTrue(collection1.equals((Object)collection0));
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals((-911), routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(5.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      String string2 = multiShortestPathTree0.toString();
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.batch);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals((-911), routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals((-911), routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(5.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals("MultiSPT(1 vertices)", string2);
      
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.batch);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals((-911), routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertNotNull(set0);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals((-911), routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(5.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      String string0 = "3";
      TraverseMode traverseMode0 = TraverseMode.BICYCLE;
      OptimizeType optimizeType0 = OptimizeType.FLAT;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0, optimizeType0);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertNotNull(routingRequest0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(5.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertNotNull(multiShortestPathTree0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(5.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      Graph graph0 = new Graph();
      assertNotNull(graph0);
      assertEquals(0, graph0.countVertices());
      
      IntersectionVertex intersectionVertex0 = new IntersectionVertex(graph0, routingRequest0.routerId, routingRequest0.useUnpreferredRoutesPenalty, routingRequest0.carDropoffTime, string0);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertNotNull(intersectionVertex0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(5.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, graph0.countVertices());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(300.0, intersectionVertex0.getLon(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(300.0, intersectionVertex0.getX(), 0.01);
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      
      State state0 = new State(intersectionVertex0, multiShortestPathTree0.options);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertNotNull(state0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(5.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(300.0, intersectionVertex0.getLon(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(300.0, intersectionVertex0.getX(), 0.01);
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(TraverseMode.BICYCLE, state0.getNonTransitMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertTrue(state0.isFinal());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isCarParked());
      assertFalse(state0.isOnboard());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBackWalkingBike());
      
      state0.weight = routingRequest0.carDecelerationSpeed;
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(5.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(300.0, intersectionVertex0.getLon(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(300.0, intersectionVertex0.getX(), 0.01);
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(TraverseMode.BICYCLE, state0.getNonTransitMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(2.9, state0.getWeight(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertTrue(state0.isFinal());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isCarParked());
      assertFalse(state0.isOnboard());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBackWalkingBike());
      
      boolean boolean0 = multiShortestPathTree0.add(state0);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(2.9, state0.weight, 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(5.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(300.0, intersectionVertex0.getLon(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(300.0, intersectionVertex0.getX(), 0.01);
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(TraverseMode.BICYCLE, state0.getNonTransitMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(2.9, state0.getWeight(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertTrue(state0.isFinal());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isCarParked());
      assertFalse(state0.isOnboard());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBackWalkingBike());
      assertTrue(boolean0);
      
      String string1 = state0.toString();
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(2.9, state0.weight, 0.01);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(5.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(300.0, intersectionVertex0.getLon(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(300.0, intersectionVertex0.getX(), 0.01);
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(TraverseMode.BICYCLE, state0.getNonTransitMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(2.9, state0.getWeight(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertTrue(state0.isFinal());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isCarParked());
      assertFalse(state0.isOnboard());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBackWalkingBike());
      assertEquals("<State Fri Feb 14 20:21:21 GMT 2014 [2.9] < lat,lng=120.0,300.0>>", string1);
      
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertNotNull(collection0);
      assertTrue(collection0.contains(state0));
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(5.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      State state1 = null;
      // Undeclared exception!
      try { 
        MultiShortestPathTree.dominates(state1, state0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      String string0 = "3";
      TraverseMode traverseMode0 = TraverseMode.TRAM;
      OptimizeType optimizeType0 = OptimizeType.FLAT;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0, optimizeType0);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertNotNull(routingRequest0);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertNotNull(multiShortestPathTree0);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      Graph graph0 = new Graph();
      assertNotNull(graph0);
      assertEquals(0, graph0.countVertices());
      
      double double0 = 3160.60905143;
      IntersectionVertex intersectionVertex0 = new IntersectionVertex(graph0, routingRequest0.routerId, double0, routingRequest0.carDropoffTime, string0);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertNotNull(intersectionVertex0);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, graph0.countVertices());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      
      String string1 = "";
      String string2 = " vertices)";
      routingRequest0.setRoutingContext(graph0, string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, graph0.countVertices());
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(boolean0);
      
      State state0 = new State(intersectionVertex0, multiShortestPathTree0.options);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertNotNull(state0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertNull(state0.getZone());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertFalse(state0.isCarParked());
      assertFalse(state0.isEverBoarded());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertNull(state0.getNonTransitMode());
      assertEquals(0, state0.getNumBoardings());
      assertNull(state0.getBackMode());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertTrue(state0.isFinal());
      
      boolean boolean1 = multiShortestPathTree0.add(state0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(boolean1 == boolean0);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertNull(state0.getZone());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertFalse(state0.isCarParked());
      assertFalse(state0.isEverBoarded());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertNull(state0.getNonTransitMode());
      assertEquals(0, state0.getNumBoardings());
      assertNull(state0.getBackMode());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertTrue(state0.isFinal());
      assertTrue(boolean1);
      
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertNotNull(set0);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      
      String string3 = state0.toString();
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertNull(state0.getZone());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertFalse(state0.isCarParked());
      assertFalse(state0.isEverBoarded());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertNull(state0.getNonTransitMode());
      assertEquals(0, state0.getNumBoardings());
      assertNull(state0.getBackMode());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertTrue(state0.isFinal());
      assertEquals("<State Fri Feb 14 20:21:21 GMT 2014 [0.0] < lat,lng=120.0,3160.60905143>>", string3);
      
      State state1 = state0.reverse();
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(state1, state0);
      assertNotSame(state0, state1);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertEquals(0.0, state1.weight, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertNotNull(state1);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(state1.equals((Object)state0));
      assertFalse(state1.isOnboard());
      assertNull(state1.getBackMode());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0, state1.getPreTransitTime());
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertEquals(0, state1.getNumBoardings());
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertEquals(1392409281000L, state1.getTimeInMillis());
      assertEquals(1392409281L, state1.getStartTimeSeconds());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertFalse(state1.isCarParked());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertFalse(state1.isBikeRenting());
      assertTrue(state1.isFinal());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state1.isEverBoarded());
      assertNull(state1.getNonTransitMode());
      assertTrue(state1.getReverseOptimizing());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertNull(state1.getZone());
      assertEquals(1392409281L, state1.getTimeSeconds());
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertNull(state0.getZone());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertFalse(state0.isCarParked());
      assertFalse(state0.isEverBoarded());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertNull(state0.getNonTransitMode());
      assertEquals(0, state0.getNumBoardings());
      assertNull(state0.getBackMode());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertTrue(state0.isFinal());
      
      boolean boolean2 = multiShortestPathTree0.add(state0);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(state0, state1);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(state0.equals((Object)state1));
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertNull(state0.getZone());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertFalse(state0.isCarParked());
      assertFalse(state0.isEverBoarded());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertNull(state0.getNonTransitMode());
      assertEquals(0, state0.getNumBoardings());
      assertNull(state0.getBackMode());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertTrue(state0.isFinal());
      assertTrue(boolean2);
      
      State state2 = multiShortestPathTree0.getState(intersectionVertex0);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(state2, state0);
      assertNotSame(state2, state1);
      assertEquals(0.0, state2.weight, 0.01);
      assertEquals(0.0, state2.walkDistance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertNotNull(state2);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(state2.equals((Object)state1));
      assertEquals(0, state2.getLastNextArrivalDelta());
      assertEquals(0, state2.getAbsTimeDeltaSeconds());
      assertFalse(state2.isBackWalkingBike());
      assertNull(state2.getZone());
      assertEquals(0.0, state2.getWalkSinceLastTransit(), 0.01);
      assertEquals(1392409281000L, state2.getTimeInMillis());
      assertEquals(0.0, state2.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state2.getWalkDistance(), 0.01);
      assertFalse(state2.isOnboard());
      assertEquals(0.0, state2.getWalkAtLastTransit(), 0.01);
      assertFalse(state2.isCarParked());
      assertEquals(0, state2.getTimeDeltaSeconds());
      assertEquals(0, state2.getPreTransitTimeDelta());
      assertEquals(1392409281L, state2.getStartTimeSeconds());
      assertEquals(0.0, state2.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state2.isEverBoarded());
      assertFalse(state2.getReverseOptimizing());
      assertEquals(0.0, state2.getWeight(), 0.01);
      assertEquals(1392409281L, state2.getTimeSeconds());
      assertEquals(0L, state2.getLastAlightedTimeSeconds());
      assertNull(state2.getBackMode());
      assertEquals(0, state2.getNumBoardings());
      assertNull(state2.getNonTransitMode());
      assertEquals(0L, state2.getElapsedTimeSeconds());
      assertEquals(0, state2.getPreTransitTime());
      assertTrue(state2.isFinal());
      assertFalse(state2.isBikeRenting());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      
      int int0 = multiShortestPathTree0.getVertexCount();
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, int0);
      
      State state3 = multiShortestPathTree0.getState(intersectionVertex0);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(state3, state1);
      assertSame(state3, state2);
      assertSame(state3, state0);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, state3.walkDistance, 0.01);
      assertEquals(0.0, state3.weight, 0.01);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertNotNull(state3);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(state3.equals((Object)state1));
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(0, state3.getPreTransitTime());
      assertEquals(1392409281000L, state3.getTimeInMillis());
      assertFalse(state3.isBikeRenting());
      assertEquals(0, state3.getPreTransitTimeDelta());
      assertEquals(0.0, state3.getWalkSinceLastTransit(), 0.01);
      assertNull(state3.getZone());
      assertEquals(0, state3.getTimeDeltaSeconds());
      assertEquals(0.0, state3.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state3.getLastAlightedTimeSeconds());
      assertEquals(0L, state3.getElapsedTimeSeconds());
      assertEquals(0.0, state3.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state3.getAbsTimeDeltaSeconds());
      assertTrue(state3.isFinal());
      assertFalse(state3.isEverBoarded());
      assertEquals(0, state3.getNumBoardings());
      assertFalse(state3.getReverseOptimizing());
      assertNull(state3.getNonTransitMode());
      assertEquals(0.0, state3.getWeight(), 0.01);
      assertNull(state3.getBackMode());
      assertEquals(1392409281L, state3.getTimeSeconds());
      assertEquals(0.0, state3.getWalkDistance(), 0.01);
      assertFalse(state3.isOnboard());
      assertFalse(state3.isCarParked());
      assertEquals(0, state3.getLastNextArrivalDelta());
      assertFalse(state3.isBackWalkingBike());
      assertEquals(1392409281L, state3.getStartTimeSeconds());
      assertEquals(0.0, state3.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1, graph0.countVertices());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      
      int int1 = 1205;
      SimpleEdge simpleEdge0 = new SimpleEdge(intersectionVertex0, intersectionVertex0, routingRequest0.maxWeight, int1);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertNotNull(simpleEdge0);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(int1 == int0);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, graph0.countVertices());
      assertTrue(simpleEdge0.vertexTypesValid());
      assertFalse(simpleEdge0.isPartial());
      assertNull(simpleEdge0.getName());
      assertEquals(0.0, simpleEdge0.getDistance(), 0.01);
      assertEquals(6, simpleEdge0.getId());
      assertEquals("", intersectionVertex0.getLabel());
      assertTrue(intersectionVertex0.inferredFreeFlowing());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(1, intersectionVertex0.getDegreeOut());
      assertEquals(1, intersectionVertex0.getDegreeIn());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(0, intersectionVertex0.getIndex());
      
      State state4 = simpleEdge0.traverse(state2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(state2, state0);
      assertNotSame(state2, state4);
      assertSame(state2, state3);
      assertNotSame(state2, state1);
      assertNotSame(state4, state2);
      assertNotSame(state4, state3);
      assertNotSame(state4, state1);
      assertNotSame(state4, state0);
      assertEquals(0.0, state2.weight, 0.01);
      assertEquals(0.0, state2.walkDistance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(1.7976931348623157E308, state4.weight, 0.01);
      assertEquals(0.0, state4.walkDistance, 0.01);
      assertNotNull(state4);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(state2.equals((Object)state1));
      assertFalse(int1 == int0);
      assertFalse(state4.equals((Object)state2));
      assertFalse(state4.equals((Object)state3));
      assertFalse(state4.equals((Object)state1));
      assertFalse(state4.equals((Object)state0));
      assertEquals(0, state2.getLastNextArrivalDelta());
      assertEquals(0, state2.getAbsTimeDeltaSeconds());
      assertFalse(state2.isBackWalkingBike());
      assertNull(state2.getZone());
      assertEquals(0.0, state2.getWalkSinceLastTransit(), 0.01);
      assertEquals(1392409281000L, state2.getTimeInMillis());
      assertEquals(0.0, state2.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state2.getWalkDistance(), 0.01);
      assertFalse(state2.isOnboard());
      assertEquals(0.0, state2.getWalkAtLastTransit(), 0.01);
      assertFalse(state2.isCarParked());
      assertEquals(0, state2.getTimeDeltaSeconds());
      assertEquals(0, state2.getPreTransitTimeDelta());
      assertEquals(1392409281L, state2.getStartTimeSeconds());
      assertEquals(0.0, state2.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state2.isEverBoarded());
      assertFalse(state2.getReverseOptimizing());
      assertEquals(0.0, state2.getWeight(), 0.01);
      assertEquals(1392409281L, state2.getTimeSeconds());
      assertEquals(0L, state2.getLastAlightedTimeSeconds());
      assertNull(state2.getBackMode());
      assertEquals(0, state2.getNumBoardings());
      assertNull(state2.getNonTransitMode());
      assertEquals(0L, state2.getElapsedTimeSeconds());
      assertEquals(0, state2.getPreTransitTime());
      assertTrue(state2.isFinal());
      assertFalse(state2.isBikeRenting());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertTrue(simpleEdge0.vertexTypesValid());
      assertFalse(simpleEdge0.isPartial());
      assertNull(simpleEdge0.getName());
      assertEquals(0.0, simpleEdge0.getDistance(), 0.01);
      assertEquals(6, simpleEdge0.getId());
      assertEquals("", intersectionVertex0.getLabel());
      assertTrue(intersectionVertex0.inferredFreeFlowing());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(1, intersectionVertex0.getDegreeOut());
      assertEquals(1, intersectionVertex0.getDegreeIn());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(0.0, state4.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state4.getLastNextArrivalDelta());
      assertEquals(1392410486L, state4.getTimeSeconds());
      assertEquals(0.0, state4.getWalkSinceLastTransit(), 0.01);
      assertNull(state4.getZone());
      assertEquals(0, state4.getNumBoardings());
      assertEquals(0.0, state4.getWalkAtLastTransit(), 0.01);
      assertNull(state4.getNonTransitMode());
      assertFalse(state4.isBikeRenting());
      assertNull(state4.getBackMode());
      assertEquals(0, state4.getPreTransitTime());
      assertFalse(state4.getReverseOptimizing());
      assertEquals(1205, state4.getTimeDeltaSeconds());
      assertEquals(1.7976931348623157E308, state4.getWeight(), 0.01);
      assertEquals(1205.0, state4.getOptimizedElapsedTimeSeconds(), 0.01);
      assertTrue(state4.isFinal());
      assertEquals(0L, state4.getLastAlightedTimeSeconds());
      assertEquals(1205L, state4.getElapsedTimeSeconds());
      assertEquals(1392410486000L, state4.getTimeInMillis());
      assertFalse(state4.isCarParked());
      assertEquals(0, state4.getPreTransitTimeDelta());
      assertFalse(state4.isEverBoarded());
      assertFalse(state4.isOnboard());
      assertEquals(1392409281L, state4.getStartTimeSeconds());
      assertEquals(1205, state4.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state4.getWalkDistance(), 0.01);
      assertFalse(state4.isBackWalkingBike());
      assertEquals(1.7976931348623157E308, state4.getWeightDelta(), 0.01);
      
      boolean boolean3 = MultiShortestPathTree.dominates(state2, state4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(state2, state0);
      assertNotSame(state2, state4);
      assertSame(state2, state3);
      assertNotSame(state2, state1);
      assertNotSame(state4, state2);
      assertNotSame(state4, state3);
      assertNotSame(state4, state1);
      assertNotSame(state4, state0);
      assertEquals(0.0, state2.weight, 0.01);
      assertEquals(0.0, state2.walkDistance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(1.7976931348623157E308, state4.weight, 0.01);
      assertEquals(0.0, state4.walkDistance, 0.01);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(state2.equals((Object)state4));
      assertFalse(state2.equals((Object)state1));
      assertFalse(int1 == int0);
      assertFalse(state4.equals((Object)state2));
      assertFalse(state4.equals((Object)state3));
      assertFalse(state4.equals((Object)state1));
      assertFalse(state4.equals((Object)state0));
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertEquals(0, state2.getLastNextArrivalDelta());
      assertEquals(0, state2.getAbsTimeDeltaSeconds());
      assertFalse(state2.isBackWalkingBike());
      assertNull(state2.getZone());
      assertEquals(0.0, state2.getWalkSinceLastTransit(), 0.01);
      assertEquals(1392409281000L, state2.getTimeInMillis());
      assertEquals(0.0, state2.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state2.getWalkDistance(), 0.01);
      assertFalse(state2.isOnboard());
      assertEquals(0.0, state2.getWalkAtLastTransit(), 0.01);
      assertFalse(state2.isCarParked());
      assertEquals(0, state2.getTimeDeltaSeconds());
      assertEquals(0, state2.getPreTransitTimeDelta());
      assertEquals(1392409281L, state2.getStartTimeSeconds());
      assertEquals(0.0, state2.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state2.isEverBoarded());
      assertFalse(state2.getReverseOptimizing());
      assertEquals(0.0, state2.getWeight(), 0.01);
      assertEquals(1392409281L, state2.getTimeSeconds());
      assertEquals(0L, state2.getLastAlightedTimeSeconds());
      assertNull(state2.getBackMode());
      assertEquals(0, state2.getNumBoardings());
      assertNull(state2.getNonTransitMode());
      assertEquals(0L, state2.getElapsedTimeSeconds());
      assertEquals(0, state2.getPreTransitTime());
      assertTrue(state2.isFinal());
      assertFalse(state2.isBikeRenting());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertTrue(simpleEdge0.vertexTypesValid());
      assertFalse(simpleEdge0.isPartial());
      assertNull(simpleEdge0.getName());
      assertEquals(0.0, simpleEdge0.getDistance(), 0.01);
      assertEquals(6, simpleEdge0.getId());
      assertEquals("", intersectionVertex0.getLabel());
      assertTrue(intersectionVertex0.inferredFreeFlowing());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(1, intersectionVertex0.getDegreeOut());
      assertEquals(1, intersectionVertex0.getDegreeIn());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(0.0, state4.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state4.getLastNextArrivalDelta());
      assertEquals(1392410486L, state4.getTimeSeconds());
      assertEquals(0.0, state4.getWalkSinceLastTransit(), 0.01);
      assertNull(state4.getZone());
      assertEquals(0, state4.getNumBoardings());
      assertEquals(0.0, state4.getWalkAtLastTransit(), 0.01);
      assertNull(state4.getNonTransitMode());
      assertFalse(state4.isBikeRenting());
      assertNull(state4.getBackMode());
      assertEquals(0, state4.getPreTransitTime());
      assertFalse(state4.getReverseOptimizing());
      assertEquals(1205, state4.getTimeDeltaSeconds());
      assertEquals(1.7976931348623157E308, state4.getWeight(), 0.01);
      assertEquals(1205.0, state4.getOptimizedElapsedTimeSeconds(), 0.01);
      assertTrue(state4.isFinal());
      assertEquals(0L, state4.getLastAlightedTimeSeconds());
      assertEquals(1205L, state4.getElapsedTimeSeconds());
      assertEquals(1392410486000L, state4.getTimeInMillis());
      assertFalse(state4.isCarParked());
      assertEquals(0, state4.getPreTransitTimeDelta());
      assertFalse(state4.isEverBoarded());
      assertFalse(state4.isOnboard());
      assertEquals(1392409281L, state4.getStartTimeSeconds());
      assertEquals(1205, state4.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state4.getWalkDistance(), 0.01);
      assertFalse(state4.isBackWalkingBike());
      assertEquals(1.7976931348623157E308, state4.getWeightDelta(), 0.01);
      assertTrue(boolean3);
      
      boolean boolean4 = multiShortestPathTree0.add(state0);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(state0, state4);
      assertSame(state0, state2);
      assertNotSame(state0, state1);
      assertSame(state0, state3);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertFalse(state0.equals((Object)state4));
      assertFalse(state0.equals((Object)state1));
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("", intersectionVertex0.getLabel());
      assertTrue(intersectionVertex0.inferredFreeFlowing());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(1, intersectionVertex0.getDegreeOut());
      assertEquals(1, intersectionVertex0.getDegreeIn());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(0, intersectionVertex0.getIndex());
      assertNull(state0.getZone());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertFalse(state0.isCarParked());
      assertFalse(state0.isEverBoarded());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertNull(state0.getNonTransitMode());
      assertEquals(0, state0.getNumBoardings());
      assertNull(state0.getBackMode());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertTrue(state0.isFinal());
      assertTrue(boolean4);
      
      boolean boolean5 = multiShortestPathTree0.visit(state4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(state2, state0);
      assertNotSame(state2, state4);
      assertSame(state2, state3);
      assertNotSame(state2, state1);
      assertNotSame(state4, state2);
      assertNotSame(state4, state3);
      assertNotSame(state4, state1);
      assertNotSame(state4, state0);
      assertEquals(0.0, state2.weight, 0.01);
      assertEquals(0.0, state2.walkDistance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(1.7976931348623157E308, state4.weight, 0.01);
      assertEquals(0.0, state4.walkDistance, 0.01);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(state2.equals((Object)state4));
      assertFalse(state2.equals((Object)state1));
      assertFalse(int1 == int0);
      assertFalse(state4.equals((Object)state2));
      assertFalse(state4.equals((Object)state3));
      assertFalse(state4.equals((Object)state1));
      assertFalse(state4.equals((Object)state0));
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean3);
      assertEquals(0, state2.getLastNextArrivalDelta());
      assertEquals(0, state2.getAbsTimeDeltaSeconds());
      assertFalse(state2.isBackWalkingBike());
      assertNull(state2.getZone());
      assertEquals(0.0, state2.getWalkSinceLastTransit(), 0.01);
      assertEquals(1392409281000L, state2.getTimeInMillis());
      assertEquals(0.0, state2.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state2.getWalkDistance(), 0.01);
      assertFalse(state2.isOnboard());
      assertEquals(0.0, state2.getWalkAtLastTransit(), 0.01);
      assertFalse(state2.isCarParked());
      assertEquals(0, state2.getTimeDeltaSeconds());
      assertEquals(0, state2.getPreTransitTimeDelta());
      assertEquals(1392409281L, state2.getStartTimeSeconds());
      assertEquals(0.0, state2.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state2.isEverBoarded());
      assertFalse(state2.getReverseOptimizing());
      assertEquals(0.0, state2.getWeight(), 0.01);
      assertEquals(1392409281L, state2.getTimeSeconds());
      assertEquals(0L, state2.getLastAlightedTimeSeconds());
      assertNull(state2.getBackMode());
      assertEquals(0, state2.getNumBoardings());
      assertNull(state2.getNonTransitMode());
      assertEquals(0L, state2.getElapsedTimeSeconds());
      assertEquals(0, state2.getPreTransitTime());
      assertTrue(state2.isFinal());
      assertFalse(state2.isBikeRenting());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertTrue(simpleEdge0.vertexTypesValid());
      assertFalse(simpleEdge0.isPartial());
      assertNull(simpleEdge0.getName());
      assertEquals(0.0, simpleEdge0.getDistance(), 0.01);
      assertEquals(6, simpleEdge0.getId());
      assertEquals("", intersectionVertex0.getLabel());
      assertTrue(intersectionVertex0.inferredFreeFlowing());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(1, intersectionVertex0.getDegreeOut());
      assertEquals(1, intersectionVertex0.getDegreeIn());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(0.0, state4.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state4.getLastNextArrivalDelta());
      assertEquals(1392410486L, state4.getTimeSeconds());
      assertEquals(0.0, state4.getWalkSinceLastTransit(), 0.01);
      assertNull(state4.getZone());
      assertEquals(0, state4.getNumBoardings());
      assertEquals(0.0, state4.getWalkAtLastTransit(), 0.01);
      assertNull(state4.getNonTransitMode());
      assertFalse(state4.isBikeRenting());
      assertNull(state4.getBackMode());
      assertEquals(0, state4.getPreTransitTime());
      assertFalse(state4.getReverseOptimizing());
      assertEquals(1205, state4.getTimeDeltaSeconds());
      assertEquals(1.7976931348623157E308, state4.getWeight(), 0.01);
      assertEquals(1205.0, state4.getOptimizedElapsedTimeSeconds(), 0.01);
      assertTrue(state4.isFinal());
      assertEquals(0L, state4.getLastAlightedTimeSeconds());
      assertEquals(1205L, state4.getElapsedTimeSeconds());
      assertEquals(1392410486000L, state4.getTimeInMillis());
      assertFalse(state4.isCarParked());
      assertEquals(0, state4.getPreTransitTimeDelta());
      assertFalse(state4.isEverBoarded());
      assertFalse(state4.isOnboard());
      assertEquals(1392409281L, state4.getStartTimeSeconds());
      assertEquals(1205, state4.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state4.getWalkDistance(), 0.01);
      assertFalse(state4.isBackWalkingBike());
      assertEquals(1.7976931348623157E308, state4.getWeightDelta(), 0.01);
      assertFalse(boolean5);
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      String string0 = "3";
      TraverseMode traverseMode0 = TraverseMode.TRAM;
      OptimizeType optimizeType0 = OptimizeType.FLAT;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0, optimizeType0);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.batch);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertNotNull(routingRequest0);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.batch);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertNotNull(multiShortestPathTree0);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      Graph graph0 = new Graph();
      assertNotNull(graph0);
      assertEquals(0, graph0.countVertices());
      
      double double0 = 3160.60905143;
      IntersectionVertex intersectionVertex0 = new IntersectionVertex(graph0, routingRequest0.routerId, double0, routingRequest0.carDropoffTime, string0);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.batch);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertNotNull(intersectionVertex0);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, graph0.countVertices());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals("", intersectionVertex0.getLabel());
      
      String string1 = "";
      String string2 = " vertices)";
      routingRequest0.setRoutingContext(graph0, string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.batch);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, graph0.countVertices());
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(boolean0);
      
      State state0 = new State(intersectionVertex0, multiShortestPathTree0.options);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.batch);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertNotNull(state0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertTrue(state0.isFinal());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertNull(state0.getNonTransitMode());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      
      boolean boolean1 = multiShortestPathTree0.add(state0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.batch);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(boolean1 == boolean0);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertTrue(state0.isFinal());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertNull(state0.getNonTransitMode());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertTrue(boolean1);
      
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.batch);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertNotNull(set0);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      
      String string3 = state0.toString();
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.batch);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertTrue(state0.isFinal());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertNull(state0.getNonTransitMode());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals("<State Fri Feb 14 20:21:21 GMT 2014 [0.0] < lat,lng=120.0,3160.60905143>>", string3);
      
      State state1 = state0.reverse();
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(state1, state0);
      assertNotSame(state0, state1);
      assertEquals(0.0, state1.weight, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.batch);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertNotNull(state1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(state1.equals((Object)state0));
      assertEquals(0, state1.getNumBoardings());
      assertEquals(1392409281L, state1.getTimeSeconds());
      assertNull(state1.getNonTransitMode());
      assertFalse(state1.isOnboard());
      assertNull(state1.getBackMode());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertTrue(state1.isFinal());
      assertFalse(state1.isBikeRenting());
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertEquals(0, state1.getPreTransitTime());
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281000L, state1.getTimeInMillis());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertTrue(state1.getReverseOptimizing());
      assertNull(state1.getZone());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(1392409281L, state1.getStartTimeSeconds());
      assertFalse(state1.isEverBoarded());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state1.isCarParked());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertTrue(state0.isFinal());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertNull(state0.getNonTransitMode());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      
      boolean boolean2 = multiShortestPathTree0.add(state0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(state0, state1);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.batch);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(state0.equals((Object)state1));
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertTrue(state0.isFinal());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertNull(state0.getNonTransitMode());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertTrue(boolean2);
      
      State state2 = multiShortestPathTree0.getState(intersectionVertex0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(state2, state1);
      assertSame(state2, state0);
      assertEquals(0.0, state2.walkDistance, 0.01);
      assertEquals(0.0, state2.weight, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.batch);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertNotNull(state2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(state2.equals((Object)state1));
      assertEquals(0.0, state2.getWalkDistance(), 0.01);
      assertFalse(state2.isOnboard());
      assertEquals(0L, state2.getElapsedTimeSeconds());
      assertEquals(0.0, state2.getWalkDistanceDelta(), 0.01);
      assertNull(state2.getBackMode());
      assertEquals(1392409281L, state2.getTimeSeconds());
      assertNull(state2.getNonTransitMode());
      assertEquals(0.0, state2.getWeight(), 0.01);
      assertFalse(state2.isEverBoarded());
      assertFalse(state2.isBackWalkingBike());
      assertEquals(0, state2.getLastNextArrivalDelta());
      assertEquals(0.0, state2.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state2.getWalkSinceLastTransit(), 0.01);
      assertFalse(state2.isCarParked());
      assertNull(state2.getZone());
      assertEquals(0, state2.getTimeDeltaSeconds());
      assertEquals(0, state2.getPreTransitTimeDelta());
      assertEquals(0L, state2.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state2.getStartTimeSeconds());
      assertTrue(state2.isFinal());
      assertEquals(0.0, state2.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state2.getReverseOptimizing());
      assertEquals(0, state2.getPreTransitTime());
      assertFalse(state2.isBikeRenting());
      assertEquals(1392409281000L, state2.getTimeInMillis());
      assertEquals(0, state2.getAbsTimeDeltaSeconds());
      assertEquals(0, state2.getNumBoardings());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals("", intersectionVertex0.getLabel());
      
      int int0 = multiShortestPathTree0.getVertexCount();
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.batch);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, int0);
      
      State state3 = multiShortestPathTree0.getState(intersectionVertex0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertSame(state3, state2);
      assertSame(state3, state0);
      assertNotSame(state3, state1);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.batch);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0.0, state3.weight, 0.01);
      assertEquals(0.0, state3.walkDistance, 0.01);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertNotNull(state3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(state3.equals((Object)state1));
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(0, state3.getTimeDeltaSeconds());
      assertFalse(state3.isCarParked());
      assertEquals(0, state3.getPreTransitTimeDelta());
      assertEquals(1392409281L, state3.getStartTimeSeconds());
      assertEquals(0.0, state3.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state3.getPreTransitTime());
      assertFalse(state3.isBikeRenting());
      assertEquals(0, state3.getAbsTimeDeltaSeconds());
      assertFalse(state3.isBackWalkingBike());
      assertTrue(state3.isFinal());
      assertEquals(0, state3.getLastNextArrivalDelta());
      assertEquals(0.0, state3.getWalkDistance(), 0.01);
      assertFalse(state3.isOnboard());
      assertEquals(1392409281000L, state3.getTimeInMillis());
      assertEquals(1392409281L, state3.getTimeSeconds());
      assertEquals(0.0, state3.getWeight(), 0.01);
      assertEquals(0, state3.getNumBoardings());
      assertNull(state3.getNonTransitMode());
      assertFalse(state3.isEverBoarded());
      assertEquals(0L, state3.getElapsedTimeSeconds());
      assertNull(state3.getZone());
      assertEquals(0.0, state3.getWalkSinceLastTransit(), 0.01);
      assertFalse(state3.getReverseOptimizing());
      assertEquals(0L, state3.getLastAlightedTimeSeconds());
      assertEquals(0.0, state3.getWalkDistanceDelta(), 0.01);
      assertNull(state3.getBackMode());
      assertEquals(0.0, state3.getWalkAtLastTransit(), 0.01);
      assertEquals(1, graph0.countVertices());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals("", intersectionVertex0.getLabel());
      
      int int1 = 1205;
      SimpleEdge simpleEdge0 = new SimpleEdge(intersectionVertex0, intersectionVertex0, routingRequest0.maxWeight, int1);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.batch);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertNotNull(simpleEdge0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(int1 == int0);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, graph0.countVertices());
      assertFalse(simpleEdge0.isPartial());
      assertEquals(0.0, simpleEdge0.getDistance(), 0.01);
      assertNull(simpleEdge0.getName());
      assertEquals(7, simpleEdge0.getId());
      assertTrue(simpleEdge0.vertexTypesValid());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertTrue(intersectionVertex0.inferredFreeFlowing());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(1, intersectionVertex0.getDegreeIn());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(1, intersectionVertex0.getDegreeOut());
      
      State state4 = simpleEdge0.traverse(state2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertSame(state2, state3);
      assertNotSame(state2, state1);
      assertNotSame(state2, state4);
      assertSame(state2, state0);
      assertNotSame(state4, state1);
      assertNotSame(state4, state3);
      assertNotSame(state4, state2);
      assertNotSame(state4, state0);
      assertEquals(0.0, state2.walkDistance, 0.01);
      assertEquals(0.0, state2.weight, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.batch);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertEquals(1.7976931348623157E308, state4.weight, 0.01);
      assertEquals(0.0, state4.walkDistance, 0.01);
      assertNotNull(state4);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(state2.equals((Object)state1));
      assertFalse(int1 == int0);
      assertFalse(state4.equals((Object)state1));
      assertFalse(state4.equals((Object)state3));
      assertFalse(state4.equals((Object)state2));
      assertFalse(state4.equals((Object)state0));
      assertEquals(0.0, state2.getWalkDistance(), 0.01);
      assertFalse(state2.isOnboard());
      assertEquals(0L, state2.getElapsedTimeSeconds());
      assertEquals(0.0, state2.getWalkDistanceDelta(), 0.01);
      assertNull(state2.getBackMode());
      assertEquals(1392409281L, state2.getTimeSeconds());
      assertNull(state2.getNonTransitMode());
      assertEquals(0.0, state2.getWeight(), 0.01);
      assertFalse(state2.isEverBoarded());
      assertFalse(state2.isBackWalkingBike());
      assertEquals(0, state2.getLastNextArrivalDelta());
      assertEquals(0.0, state2.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state2.getWalkSinceLastTransit(), 0.01);
      assertFalse(state2.isCarParked());
      assertNull(state2.getZone());
      assertEquals(0, state2.getTimeDeltaSeconds());
      assertEquals(0, state2.getPreTransitTimeDelta());
      assertEquals(0L, state2.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state2.getStartTimeSeconds());
      assertTrue(state2.isFinal());
      assertEquals(0.0, state2.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state2.getReverseOptimizing());
      assertEquals(0, state2.getPreTransitTime());
      assertFalse(state2.isBikeRenting());
      assertEquals(1392409281000L, state2.getTimeInMillis());
      assertEquals(0, state2.getAbsTimeDeltaSeconds());
      assertEquals(0, state2.getNumBoardings());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertFalse(simpleEdge0.isPartial());
      assertEquals(0.0, simpleEdge0.getDistance(), 0.01);
      assertNull(simpleEdge0.getName());
      assertEquals(7, simpleEdge0.getId());
      assertTrue(simpleEdge0.vertexTypesValid());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertTrue(intersectionVertex0.inferredFreeFlowing());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(1, intersectionVertex0.getDegreeIn());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(1, intersectionVertex0.getDegreeOut());
      assertEquals(0.0, state4.getWalkSinceLastTransit(), 0.01);
      assertNull(state4.getZone());
      assertFalse(state4.isBackWalkingBike());
      assertEquals(1392410486L, state4.getTimeSeconds());
      assertEquals(0, state4.getLastNextArrivalDelta());
      assertFalse(state4.isBikeRenting());
      assertEquals(0, state4.getPreTransitTimeDelta());
      assertEquals(0, state4.getPreTransitTime());
      assertEquals(1392410486000L, state4.getTimeInMillis());
      assertEquals(1205L, state4.getElapsedTimeSeconds());
      assertEquals(0, state4.getNumBoardings());
      assertFalse(state4.isOnboard());
      assertEquals(1205, state4.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state4.getWalkDistance(), 0.01);
      assertEquals(1205.0, state4.getOptimizedElapsedTimeSeconds(), 0.01);
      assertTrue(state4.isFinal());
      assertEquals(1.7976931348623157E308, state4.getWeight(), 0.01);
      assertEquals(1.7976931348623157E308, state4.getWeightDelta(), 0.01);
      assertEquals(1392409281L, state4.getStartTimeSeconds());
      assertEquals(1205, state4.getTimeDeltaSeconds());
      assertFalse(state4.isCarParked());
      assertFalse(state4.isEverBoarded());
      assertNull(state4.getNonTransitMode());
      assertEquals(0.0, state4.getWalkAtLastTransit(), 0.01);
      assertFalse(state4.getReverseOptimizing());
      assertEquals(0L, state4.getLastAlightedTimeSeconds());
      assertNull(state4.getBackMode());
      assertEquals(0.0, state4.getWalkDistanceDelta(), 0.01);
      
      double double1 = (-413.82415965173124);
      state4.weight = double1;
      assertEquals(0.0, state2.getWalkDistance(), 0.01);
      assertFalse(state2.isOnboard());
      assertEquals(0L, state2.getElapsedTimeSeconds());
      assertEquals(0.0, state2.getWalkDistanceDelta(), 0.01);
      assertNull(state2.getBackMode());
      assertEquals(1392409281L, state2.getTimeSeconds());
      assertNull(state2.getNonTransitMode());
      assertEquals(0.0, state2.getWeight(), 0.01);
      assertFalse(state2.isEverBoarded());
      assertFalse(state2.isBackWalkingBike());
      assertEquals(0, state2.getLastNextArrivalDelta());
      assertEquals(0.0, state2.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state2.getWalkSinceLastTransit(), 0.01);
      assertFalse(state2.isCarParked());
      assertNull(state2.getZone());
      assertEquals(0, state2.getTimeDeltaSeconds());
      assertEquals(0, state2.getPreTransitTimeDelta());
      assertEquals(0L, state2.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state2.getStartTimeSeconds());
      assertTrue(state2.isFinal());
      assertEquals(0.0, state2.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state2.getReverseOptimizing());
      assertEquals(0, state2.getPreTransitTime());
      assertFalse(state2.isBikeRenting());
      assertEquals(1392409281000L, state2.getTimeInMillis());
      assertEquals(0, state2.getAbsTimeDeltaSeconds());
      assertEquals(0, state2.getNumBoardings());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertFalse(simpleEdge0.isPartial());
      assertEquals(0.0, simpleEdge0.getDistance(), 0.01);
      assertNull(simpleEdge0.getName());
      assertEquals(7, simpleEdge0.getId());
      assertTrue(simpleEdge0.vertexTypesValid());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertTrue(intersectionVertex0.inferredFreeFlowing());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(1, intersectionVertex0.getDegreeIn());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(1, intersectionVertex0.getDegreeOut());
      assertEquals((-413.82415965173124), state4.getWeight(), 0.01);
      assertEquals(0.0, state4.getWalkSinceLastTransit(), 0.01);
      assertNull(state4.getZone());
      assertEquals((-413.82415965173124), state4.getWeightDelta(), 0.01);
      assertFalse(state4.isBackWalkingBike());
      assertEquals(1392410486L, state4.getTimeSeconds());
      assertEquals(0, state4.getLastNextArrivalDelta());
      assertFalse(state4.isBikeRenting());
      assertEquals(0, state4.getPreTransitTimeDelta());
      assertEquals(0, state4.getPreTransitTime());
      assertEquals(1392410486000L, state4.getTimeInMillis());
      assertEquals(1205L, state4.getElapsedTimeSeconds());
      assertEquals(0, state4.getNumBoardings());
      assertFalse(state4.isOnboard());
      assertEquals(1205, state4.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state4.getWalkDistance(), 0.01);
      assertEquals(1205.0, state4.getOptimizedElapsedTimeSeconds(), 0.01);
      assertTrue(state4.isFinal());
      assertEquals(1392409281L, state4.getStartTimeSeconds());
      assertEquals(1205, state4.getTimeDeltaSeconds());
      assertFalse(state4.isCarParked());
      assertFalse(state4.isEverBoarded());
      assertNull(state4.getNonTransitMode());
      assertEquals(0.0, state4.getWalkAtLastTransit(), 0.01);
      assertFalse(state4.getReverseOptimizing());
      assertEquals(0L, state4.getLastAlightedTimeSeconds());
      assertNull(state4.getBackMode());
      assertEquals(0.0, state4.getWalkDistanceDelta(), 0.01);
      
      boolean boolean3 = MultiShortestPathTree.dominates(state2, state4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertSame(state2, state3);
      assertNotSame(state2, state1);
      assertNotSame(state2, state4);
      assertSame(state2, state0);
      assertNotSame(state4, state1);
      assertNotSame(state4, state3);
      assertNotSame(state4, state2);
      assertNotSame(state4, state0);
      assertEquals(0.0, state2.walkDistance, 0.01);
      assertEquals(0.0, state2.weight, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.batch);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertEquals((-413.82415965173124), state4.weight, 0.01);
      assertEquals(0.0, state4.walkDistance, 0.01);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertNotEquals(double0, double1, 0.01);
      assertFalse(state2.equals((Object)state1));
      assertFalse(state2.equals((Object)state4));
      assertFalse(int1 == int0);
      assertFalse(state4.equals((Object)state1));
      assertFalse(state4.equals((Object)state3));
      assertFalse(state4.equals((Object)state2));
      assertFalse(state4.equals((Object)state0));
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertEquals(0.0, state2.getWalkDistance(), 0.01);
      assertFalse(state2.isOnboard());
      assertEquals(0L, state2.getElapsedTimeSeconds());
      assertEquals(0.0, state2.getWalkDistanceDelta(), 0.01);
      assertNull(state2.getBackMode());
      assertEquals(1392409281L, state2.getTimeSeconds());
      assertNull(state2.getNonTransitMode());
      assertEquals(0.0, state2.getWeight(), 0.01);
      assertFalse(state2.isEverBoarded());
      assertFalse(state2.isBackWalkingBike());
      assertEquals(0, state2.getLastNextArrivalDelta());
      assertEquals(0.0, state2.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state2.getWalkSinceLastTransit(), 0.01);
      assertFalse(state2.isCarParked());
      assertNull(state2.getZone());
      assertEquals(0, state2.getTimeDeltaSeconds());
      assertEquals(0, state2.getPreTransitTimeDelta());
      assertEquals(0L, state2.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state2.getStartTimeSeconds());
      assertTrue(state2.isFinal());
      assertEquals(0.0, state2.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state2.getReverseOptimizing());
      assertEquals(0, state2.getPreTransitTime());
      assertFalse(state2.isBikeRenting());
      assertEquals(1392409281000L, state2.getTimeInMillis());
      assertEquals(0, state2.getAbsTimeDeltaSeconds());
      assertEquals(0, state2.getNumBoardings());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertFalse(simpleEdge0.isPartial());
      assertEquals(0.0, simpleEdge0.getDistance(), 0.01);
      assertNull(simpleEdge0.getName());
      assertEquals(7, simpleEdge0.getId());
      assertTrue(simpleEdge0.vertexTypesValid());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertTrue(intersectionVertex0.inferredFreeFlowing());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(1, intersectionVertex0.getDegreeIn());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(1, intersectionVertex0.getDegreeOut());
      assertEquals((-413.82415965173124), state4.getWeight(), 0.01);
      assertEquals(0.0, state4.getWalkSinceLastTransit(), 0.01);
      assertNull(state4.getZone());
      assertEquals((-413.82415965173124), state4.getWeightDelta(), 0.01);
      assertFalse(state4.isBackWalkingBike());
      assertEquals(1392410486L, state4.getTimeSeconds());
      assertEquals(0, state4.getLastNextArrivalDelta());
      assertFalse(state4.isBikeRenting());
      assertEquals(0, state4.getPreTransitTimeDelta());
      assertEquals(0, state4.getPreTransitTime());
      assertEquals(1392410486000L, state4.getTimeInMillis());
      assertEquals(1205L, state4.getElapsedTimeSeconds());
      assertEquals(0, state4.getNumBoardings());
      assertFalse(state4.isOnboard());
      assertEquals(1205, state4.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state4.getWalkDistance(), 0.01);
      assertEquals(1205.0, state4.getOptimizedElapsedTimeSeconds(), 0.01);
      assertTrue(state4.isFinal());
      assertEquals(1392409281L, state4.getStartTimeSeconds());
      assertEquals(1205, state4.getTimeDeltaSeconds());
      assertFalse(state4.isCarParked());
      assertFalse(state4.isEverBoarded());
      assertNull(state4.getNonTransitMode());
      assertEquals(0.0, state4.getWalkAtLastTransit(), 0.01);
      assertFalse(state4.getReverseOptimizing());
      assertEquals(0L, state4.getLastAlightedTimeSeconds());
      assertNull(state4.getBackMode());
      assertEquals(0.0, state4.getWalkDistanceDelta(), 0.01);
      assertFalse(boolean3);
      
      boolean boolean4 = multiShortestPathTree0.add(state0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertSame(state0, state3);
      assertNotSame(state0, state4);
      assertSame(state0, state2);
      assertNotSame(state0, state1);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.batch);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertNotEquals(double0, double1, 0.01);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(state0.equals((Object)state4));
      assertFalse(state0.equals((Object)state1));
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertTrue(intersectionVertex0.inferredFreeFlowing());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(1, intersectionVertex0.getDegreeIn());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(1, intersectionVertex0.getDegreeOut());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertTrue(state0.isFinal());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertNull(state0.getNonTransitMode());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertTrue(boolean4);
      
      boolean boolean5 = multiShortestPathTree0.visit(state4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertSame(state2, state3);
      assertNotSame(state2, state1);
      assertNotSame(state2, state4);
      assertSame(state2, state0);
      assertNotSame(state4, state1);
      assertNotSame(state4, state3);
      assertNotSame(state4, state2);
      assertNotSame(state4, state0);
      assertEquals(0.0, state2.walkDistance, 0.01);
      assertEquals(0.0, state2.weight, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.batch);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertEquals((-413.82415965173124), state4.weight, 0.01);
      assertEquals(0.0, state4.walkDistance, 0.01);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertNotEquals(double0, double1, 0.01);
      assertFalse(state2.equals((Object)state1));
      assertFalse(state2.equals((Object)state4));
      assertFalse(int1 == int0);
      assertFalse(state4.equals((Object)state1));
      assertFalse(state4.equals((Object)state3));
      assertFalse(state4.equals((Object)state2));
      assertFalse(state4.equals((Object)state0));
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean1);
      assertEquals(0.0, state2.getWalkDistance(), 0.01);
      assertFalse(state2.isOnboard());
      assertEquals(0L, state2.getElapsedTimeSeconds());
      assertEquals(0.0, state2.getWalkDistanceDelta(), 0.01);
      assertNull(state2.getBackMode());
      assertEquals(1392409281L, state2.getTimeSeconds());
      assertNull(state2.getNonTransitMode());
      assertEquals(0.0, state2.getWeight(), 0.01);
      assertFalse(state2.isEverBoarded());
      assertFalse(state2.isBackWalkingBike());
      assertEquals(0, state2.getLastNextArrivalDelta());
      assertEquals(0.0, state2.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state2.getWalkSinceLastTransit(), 0.01);
      assertFalse(state2.isCarParked());
      assertNull(state2.getZone());
      assertEquals(0, state2.getTimeDeltaSeconds());
      assertEquals(0, state2.getPreTransitTimeDelta());
      assertEquals(0L, state2.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state2.getStartTimeSeconds());
      assertTrue(state2.isFinal());
      assertEquals(0.0, state2.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state2.getReverseOptimizing());
      assertEquals(0, state2.getPreTransitTime());
      assertFalse(state2.isBikeRenting());
      assertEquals(1392409281000L, state2.getTimeInMillis());
      assertEquals(0, state2.getAbsTimeDeltaSeconds());
      assertEquals(0, state2.getNumBoardings());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertFalse(simpleEdge0.isPartial());
      assertEquals(0.0, simpleEdge0.getDistance(), 0.01);
      assertNull(simpleEdge0.getName());
      assertEquals(7, simpleEdge0.getId());
      assertTrue(simpleEdge0.vertexTypesValid());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertTrue(intersectionVertex0.inferredFreeFlowing());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(1, intersectionVertex0.getDegreeIn());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(1, intersectionVertex0.getDegreeOut());
      assertEquals((-413.82415965173124), state4.getWeight(), 0.01);
      assertEquals(0.0, state4.getWalkSinceLastTransit(), 0.01);
      assertNull(state4.getZone());
      assertEquals((-413.82415965173124), state4.getWeightDelta(), 0.01);
      assertFalse(state4.isBackWalkingBike());
      assertEquals(1392410486L, state4.getTimeSeconds());
      assertEquals(0, state4.getLastNextArrivalDelta());
      assertFalse(state4.isBikeRenting());
      assertEquals(0, state4.getPreTransitTimeDelta());
      assertEquals(0, state4.getPreTransitTime());
      assertEquals(1392410486000L, state4.getTimeInMillis());
      assertEquals(1205L, state4.getElapsedTimeSeconds());
      assertEquals(0, state4.getNumBoardings());
      assertFalse(state4.isOnboard());
      assertEquals(1205, state4.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state4.getWalkDistance(), 0.01);
      assertEquals(1205.0, state4.getOptimizedElapsedTimeSeconds(), 0.01);
      assertTrue(state4.isFinal());
      assertEquals(1392409281L, state4.getStartTimeSeconds());
      assertEquals(1205, state4.getTimeDeltaSeconds());
      assertFalse(state4.isCarParked());
      assertFalse(state4.isEverBoarded());
      assertNull(state4.getNonTransitMode());
      assertEquals(0.0, state4.getWalkAtLastTransit(), 0.01);
      assertFalse(state4.getReverseOptimizing());
      assertEquals(0L, state4.getLastAlightedTimeSeconds());
      assertNull(state4.getBackMode());
      assertEquals(0.0, state4.getWalkDistanceDelta(), 0.01);
      assertFalse(boolean5);
      
      boolean boolean6 = multiShortestPathTree0.add(state2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertSame(state2, state3);
      assertNotSame(state2, state1);
      assertNotSame(state2, state4);
      assertSame(state2, state0);
      assertEquals(0.0, state2.walkDistance, 0.01);
      assertEquals(0.0, state2.weight, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.batch);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(state2.equals((Object)state1));
      assertFalse(state2.equals((Object)state4));
      assertNotEquals(double0, double1, 0.01);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean4);
      assertFalse(boolean6 == boolean5);
      assertTrue(boolean6 == boolean1);
      assertFalse(boolean6 == boolean0);
      assertFalse(boolean6 == boolean3);
      assertEquals(0.0, state2.getWalkDistance(), 0.01);
      assertFalse(state2.isOnboard());
      assertEquals(0L, state2.getElapsedTimeSeconds());
      assertEquals(0.0, state2.getWalkDistanceDelta(), 0.01);
      assertNull(state2.getBackMode());
      assertEquals(1392409281L, state2.getTimeSeconds());
      assertNull(state2.getNonTransitMode());
      assertEquals(0.0, state2.getWeight(), 0.01);
      assertFalse(state2.isEverBoarded());
      assertFalse(state2.isBackWalkingBike());
      assertEquals(0, state2.getLastNextArrivalDelta());
      assertEquals(0.0, state2.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state2.getWalkSinceLastTransit(), 0.01);
      assertFalse(state2.isCarParked());
      assertNull(state2.getZone());
      assertEquals(0, state2.getTimeDeltaSeconds());
      assertEquals(0, state2.getPreTransitTimeDelta());
      assertEquals(0L, state2.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state2.getStartTimeSeconds());
      assertTrue(state2.isFinal());
      assertEquals(0.0, state2.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state2.getReverseOptimizing());
      assertEquals(0, state2.getPreTransitTime());
      assertFalse(state2.isBikeRenting());
      assertEquals(1392409281000L, state2.getTimeInMillis());
      assertEquals(0, state2.getAbsTimeDeltaSeconds());
      assertEquals(0, state2.getNumBoardings());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertTrue(intersectionVertex0.inferredFreeFlowing());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(1, intersectionVertex0.getDegreeIn());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(1, intersectionVertex0.getDegreeOut());
      assertTrue(boolean6);
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      String string0 = "3";
      TraverseMode traverseMode0 = TraverseMode.TRAM;
      OptimizeType optimizeType0 = OptimizeType.FLAT;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0, optimizeType0);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertNotNull(routingRequest0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertNotNull(multiShortestPathTree0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      Graph graph0 = new Graph();
      assertNotNull(graph0);
      assertEquals(0, graph0.countVertices());
      
      double double0 = 3160.60905143;
      IntersectionVertex intersectionVertex0 = new IntersectionVertex(graph0, routingRequest0.routerId, double0, routingRequest0.carDropoffTime, string0);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertNotNull(intersectionVertex0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, graph0.countVertices());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      
      String string1 = " vertices)";
      routingRequest0.setRoutingContext(graph0, routingRequest0.routerId, string1);
      assertNotSame(string1, string0);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, graph0.countVertices());
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      routingRequest0.kissAndRide = boolean0;
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      
      boolean boolean1 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      State state0 = new State(intersectionVertex0, multiShortestPathTree0.options);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.kissAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertNotNull(state0);
      assertFalse(string0.equals((Object)string1));
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertFalse(state0.isFinal());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(TraverseMode.CAR, state0.getNonTransitMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isBikeRenting());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isEverBoarded());
      
      boolean boolean2 = multiShortestPathTree0.add(state0);
      assertNotSame(string0, string1);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.kissAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertFalse(state0.isFinal());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(TraverseMode.CAR, state0.getNonTransitMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isBikeRenting());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isEverBoarded());
      assertTrue(boolean2);
      
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.kissAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertNotNull(set0);
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      String string2 = state0.toString();
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.kissAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertFalse(state0.isFinal());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(TraverseMode.CAR, state0.getNonTransitMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isBikeRenting());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isEverBoarded());
      assertEquals("<State Fri Feb 14 20:21:21 GMT 2014 [0.0] < lat,lng=120.0,3160.60905143>>", string2);
      
      State state1 = state0.reverse();
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(state1, state0);
      assertNotSame(state0, state1);
      assertEquals(0.0, state1.weight, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.kissAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertNotNull(state1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(state1.equals((Object)state0));
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertNull(state1.getBackMode());
      assertFalse(state1.isOnboard());
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertFalse(state1.isEverBoarded());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertEquals(1392409281L, state1.getTimeSeconds());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertFalse(state1.isCarParked());
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertNull(state1.getZone());
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertTrue(state1.getReverseOptimizing());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state1.getStartTimeSeconds());
      assertTrue(state1.isFinal());
      assertEquals(TraverseMode.WALK, state1.getNonTransitMode());
      assertEquals(1392409281000L, state1.getTimeInMillis());
      assertFalse(state1.isBikeRenting());
      assertEquals(0, state1.getPreTransitTime());
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertEquals(0, state1.getNumBoardings());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertFalse(state0.isFinal());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(TraverseMode.CAR, state0.getNonTransitMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isBikeRenting());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isEverBoarded());
      
      boolean boolean3 = multiShortestPathTree0.add(state0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(state0, state1);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.kissAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(state0.equals((Object)state1));
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertFalse(state0.isFinal());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(TraverseMode.CAR, state0.getNonTransitMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isBikeRenting());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isEverBoarded());
      assertTrue(boolean3);
      
      State state2 = multiShortestPathTree0.getState(intersectionVertex0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.kissAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertNull(state2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      
      int int0 = multiShortestPathTree0.getVertexCount();
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.kissAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, int0);
      
      State state3 = multiShortestPathTree0.getState(intersectionVertex0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.kissAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertNull(state3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      
      int int1 = 1205;
      SimpleEdge simpleEdge0 = new SimpleEdge(intersectionVertex0, intersectionVertex0, routingRequest0.maxWeight, int1);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.kissAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertNotNull(simpleEdge0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(int1 == int0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, graph0.countVertices());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertEquals(1, intersectionVertex0.getDegreeIn());
      assertEquals(1, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertTrue(intersectionVertex0.inferredFreeFlowing());
      assertEquals(0.0, simpleEdge0.getDistance(), 0.01);
      assertNull(simpleEdge0.getName());
      assertEquals(8, simpleEdge0.getId());
      assertFalse(simpleEdge0.isPartial());
      assertTrue(simpleEdge0.vertexTypesValid());
      
      // Undeclared exception!
      try { 
        simpleEdge0.traverse(state2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.edgetype.SimpleEdge", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      String string0 = "3";
      TraverseMode traverseMode0 = TraverseMode.TRAM;
      OptimizeType optimizeType0 = OptimizeType.FLAT;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0, optimizeType0);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertNotNull(routingRequest0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertNotNull(multiShortestPathTree0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      Graph graph0 = new Graph();
      assertNotNull(graph0);
      assertEquals(0, graph0.countVertices());
      
      double double0 = 3160.60905143;
      IntersectionVertex intersectionVertex0 = new IntersectionVertex(graph0, routingRequest0.routerId, double0, routingRequest0.carDropoffTime, string0);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertNotNull(intersectionVertex0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, graph0.countVertices());
      assertEquals("3", intersectionVertex0.getName());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      
      String string1 = "";
      String string2 = " vertices)";
      routingRequest0.setRoutingContext(graph0, string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, graph0.countVertices());
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(boolean0);
      
      State state0 = new State(intersectionVertex0, multiShortestPathTree0.options);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertNotNull(state0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("3", intersectionVertex0.getName());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertNull(state0.getZone());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.getReverseOptimizing());
      assertNull(state0.getNonTransitMode());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertTrue(state0.isFinal());
      
      boolean boolean1 = multiShortestPathTree0.add(state0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(boolean1 == boolean0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("3", intersectionVertex0.getName());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertNull(state0.getZone());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.getReverseOptimizing());
      assertNull(state0.getNonTransitMode());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertTrue(state0.isFinal());
      assertTrue(boolean1);
      
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertNotNull(set0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      
      String string3 = state0.toString();
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("3", intersectionVertex0.getName());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertNull(state0.getZone());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.getReverseOptimizing());
      assertNull(state0.getNonTransitMode());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertTrue(state0.isFinal());
      assertEquals("<State Fri Feb 14 20:21:21 GMT 2014 [0.0] < lat,lng=120.0,3160.60905143>>", string3);
      
      boolean boolean2 = multiShortestPathTree0.add(state0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("3", intersectionVertex0.getName());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertNull(state0.getZone());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.getReverseOptimizing());
      assertNull(state0.getNonTransitMode());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertTrue(state0.isFinal());
      assertTrue(boolean2);
      
      State state1 = multiShortestPathTree0.getState(intersectionVertex0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(state1, state0);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertEquals(0.0, state1.weight, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertNotNull(state1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state1.getStartTimeSeconds());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281000L, state1.getTimeInMillis());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertNull(state1.getZone());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertFalse(state1.isEverBoarded());
      assertFalse(state1.isCarParked());
      assertNull(state1.getBackMode());
      assertNull(state1.getNonTransitMode());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(1392409281L, state1.getTimeSeconds());
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertFalse(state1.isOnboard());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertFalse(state1.getReverseOptimizing());
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertTrue(state1.isFinal());
      assertEquals(0, state1.getNumBoardings());
      assertFalse(state1.isBikeRenting());
      assertEquals(0, state1.getPreTransitTime());
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("3", intersectionVertex0.getName());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      
      int int0 = multiShortestPathTree0.getVertexCount();
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, int0);
      
      State state2 = multiShortestPathTree0.getState(intersectionVertex0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(state2, state1);
      assertSame(state2, state0);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0, state2.weight, 0.01);
      assertEquals(0.0, state2.walkDistance, 0.01);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertNotNull(state2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(0.0, state2.getWalkDistance(), 0.01);
      assertEquals(0L, state2.getElapsedTimeSeconds());
      assertEquals(0, state2.getLastNextArrivalDelta());
      assertFalse(state2.isOnboard());
      assertEquals(0.0, state2.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state2.getAbsTimeDeltaSeconds());
      assertFalse(state2.isBackWalkingBike());
      assertEquals(0, state2.getNumBoardings());
      assertEquals(0.0, state2.getWeight(), 0.01);
      assertEquals(1392409281000L, state2.getTimeInMillis());
      assertFalse(state2.isBikeRenting());
      assertEquals(0, state2.getPreTransitTime());
      assertTrue(state2.isFinal());
      assertEquals(0L, state2.getLastAlightedTimeSeconds());
      assertFalse(state2.getReverseOptimizing());
      assertEquals(1392409281L, state2.getStartTimeSeconds());
      assertEquals(0.0, state2.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state2.getWalkAtLastTransit(), 0.01);
      assertNull(state2.getNonTransitMode());
      assertEquals(0, state2.getPreTransitTimeDelta());
      assertFalse(state2.isCarParked());
      assertNull(state2.getBackMode());
      assertEquals(1392409281L, state2.getTimeSeconds());
      assertFalse(state2.isEverBoarded());
      assertEquals(0.0, state2.getWalkSinceLastTransit(), 0.01);
      assertNull(state2.getZone());
      assertEquals(0, state2.getTimeDeltaSeconds());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("3", intersectionVertex0.getName());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      
      int int1 = 1205;
      SimpleEdge simpleEdge0 = new SimpleEdge(intersectionVertex0, intersectionVertex0, routingRequest0.maxWeight, int1);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertNotNull(simpleEdge0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(int1 == int0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, graph0.countVertices());
      assertEquals(9, simpleEdge0.getId());
      assertTrue(simpleEdge0.vertexTypesValid());
      assertFalse(simpleEdge0.isPartial());
      assertEquals(0.0, simpleEdge0.getDistance(), 0.01);
      assertNull(simpleEdge0.getName());
      assertTrue(intersectionVertex0.inferredFreeFlowing());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertEquals(1, intersectionVertex0.getDegreeIn());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(1, intersectionVertex0.getDegreeOut());
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      
      State state3 = simpleEdge0.traverse(state1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(state1, state2);
      assertSame(state1, state0);
      assertNotSame(state1, state3);
      assertNotSame(state3, state0);
      assertNotSame(state3, state2);
      assertNotSame(state3, state1);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertEquals(0.0, state1.weight, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.7976931348623157E308, state3.weight, 0.01);
      assertEquals(0.0, state3.walkDistance, 0.01);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertNotNull(state3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(int1 == int0);
      assertFalse(state3.equals((Object)state0));
      assertFalse(state3.equals((Object)state2));
      assertFalse(state3.equals((Object)state1));
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state1.getStartTimeSeconds());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281000L, state1.getTimeInMillis());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertNull(state1.getZone());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertFalse(state1.isEverBoarded());
      assertFalse(state1.isCarParked());
      assertNull(state1.getBackMode());
      assertNull(state1.getNonTransitMode());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(1392409281L, state1.getTimeSeconds());
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertFalse(state1.isOnboard());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertFalse(state1.getReverseOptimizing());
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertTrue(state1.isFinal());
      assertEquals(0, state1.getNumBoardings());
      assertFalse(state1.isBikeRenting());
      assertEquals(0, state1.getPreTransitTime());
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals(9, simpleEdge0.getId());
      assertTrue(simpleEdge0.vertexTypesValid());
      assertFalse(simpleEdge0.isPartial());
      assertEquals(0.0, simpleEdge0.getDistance(), 0.01);
      assertNull(simpleEdge0.getName());
      assertFalse(state3.isBackWalkingBike());
      assertEquals(0, state3.getLastNextArrivalDelta());
      assertEquals(1392410486L, state3.getTimeSeconds());
      assertNull(state3.getZone());
      assertEquals(0.0, state3.getWalkSinceLastTransit(), 0.01);
      assertFalse(state3.isBikeRenting());
      assertEquals(1392410486000L, state3.getTimeInMillis());
      assertEquals(0, state3.getPreTransitTime());
      assertFalse(state3.isCarParked());
      assertEquals(0, state3.getPreTransitTimeDelta());
      assertEquals(0.0, state3.getWalkAtLastTransit(), 0.01);
      assertNull(state3.getNonTransitMode());
      assertEquals(0L, state3.getLastAlightedTimeSeconds());
      assertNull(state3.getBackMode());
      assertEquals(0.0, state3.getWalkDistanceDelta(), 0.01);
      assertFalse(state3.getReverseOptimizing());
      assertEquals(1205, state3.getTimeDeltaSeconds());
      assertEquals(1.7976931348623157E308, state3.getWeightDelta(), 0.01);
      assertTrue(state3.isFinal());
      assertEquals(1.7976931348623157E308, state3.getWeight(), 0.01);
      assertEquals(0, state3.getNumBoardings());
      assertFalse(state3.isEverBoarded());
      assertEquals(1392409281L, state3.getStartTimeSeconds());
      assertEquals(1205L, state3.getElapsedTimeSeconds());
      assertEquals(1205.0, state3.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1205, state3.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state3.getWalkDistance(), 0.01);
      assertFalse(state3.isOnboard());
      assertTrue(intersectionVertex0.inferredFreeFlowing());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertEquals(1, intersectionVertex0.getDegreeIn());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(1, intersectionVertex0.getDegreeOut());
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      
      boolean boolean3 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      boolean boolean4 = multiShortestPathTree0.add(state0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(state0, state1);
      assertNotSame(state0, state3);
      assertSame(state0, state2);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertFalse(state0.equals((Object)state3));
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertTrue(intersectionVertex0.inferredFreeFlowing());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertEquals(1, intersectionVertex0.getDegreeIn());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(1, intersectionVertex0.getDegreeOut());
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertNull(state0.getZone());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.getReverseOptimizing());
      assertNull(state0.getNonTransitMode());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertTrue(state0.isFinal());
      assertTrue(boolean4);
      
      boolean boolean5 = multiShortestPathTree0.add(state3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(state1, state2);
      assertSame(state1, state0);
      assertNotSame(state1, state3);
      assertNotSame(state3, state0);
      assertNotSame(state3, state2);
      assertNotSame(state3, state1);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertEquals(0.0, state1.weight, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.7976931348623157E308, state3.weight, 0.01);
      assertEquals(0.0, state3.walkDistance, 0.01);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(state1.equals((Object)state3));
      assertFalse(int1 == int0);
      assertFalse(state3.equals((Object)state0));
      assertFalse(state3.equals((Object)state2));
      assertFalse(state3.equals((Object)state1));
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean0);
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state1.getStartTimeSeconds());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281000L, state1.getTimeInMillis());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertNull(state1.getZone());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertFalse(state1.isEverBoarded());
      assertFalse(state1.isCarParked());
      assertNull(state1.getBackMode());
      assertNull(state1.getNonTransitMode());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(1392409281L, state1.getTimeSeconds());
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertFalse(state1.isOnboard());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertFalse(state1.getReverseOptimizing());
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertTrue(state1.isFinal());
      assertEquals(0, state1.getNumBoardings());
      assertFalse(state1.isBikeRenting());
      assertEquals(0, state1.getPreTransitTime());
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals(9, simpleEdge0.getId());
      assertTrue(simpleEdge0.vertexTypesValid());
      assertFalse(simpleEdge0.isPartial());
      assertEquals(0.0, simpleEdge0.getDistance(), 0.01);
      assertNull(simpleEdge0.getName());
      assertFalse(state3.isBackWalkingBike());
      assertEquals(0, state3.getLastNextArrivalDelta());
      assertEquals(1392410486L, state3.getTimeSeconds());
      assertNull(state3.getZone());
      assertEquals(0.0, state3.getWalkSinceLastTransit(), 0.01);
      assertFalse(state3.isBikeRenting());
      assertEquals(1392410486000L, state3.getTimeInMillis());
      assertEquals(0, state3.getPreTransitTime());
      assertFalse(state3.isCarParked());
      assertEquals(0, state3.getPreTransitTimeDelta());
      assertEquals(0.0, state3.getWalkAtLastTransit(), 0.01);
      assertNull(state3.getNonTransitMode());
      assertEquals(0L, state3.getLastAlightedTimeSeconds());
      assertNull(state3.getBackMode());
      assertEquals(0.0, state3.getWalkDistanceDelta(), 0.01);
      assertFalse(state3.getReverseOptimizing());
      assertEquals(1205, state3.getTimeDeltaSeconds());
      assertEquals(1.7976931348623157E308, state3.getWeightDelta(), 0.01);
      assertTrue(state3.isFinal());
      assertEquals(1.7976931348623157E308, state3.getWeight(), 0.01);
      assertEquals(0, state3.getNumBoardings());
      assertFalse(state3.isEverBoarded());
      assertEquals(1392409281L, state3.getStartTimeSeconds());
      assertEquals(1205L, state3.getElapsedTimeSeconds());
      assertEquals(1205.0, state3.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1205, state3.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state3.getWalkDistance(), 0.01);
      assertFalse(state3.isOnboard());
      assertTrue(intersectionVertex0.inferredFreeFlowing());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertEquals(1, intersectionVertex0.getDegreeIn());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(1, intersectionVertex0.getDegreeOut());
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertFalse(boolean5);
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      String string0 = "3";
      TraverseMode traverseMode0 = TraverseMode.TRAM;
      OptimizeType optimizeType0 = OptimizeType.FLAT;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0, optimizeType0);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertNotNull(routingRequest0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertNotNull(multiShortestPathTree0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      Graph graph0 = new Graph();
      assertNotNull(graph0);
      assertEquals(0, graph0.countVertices());
      
      double double0 = 3160.60905143;
      IntersectionVertex intersectionVertex0 = new IntersectionVertex(graph0, routingRequest0.routerId, double0, routingRequest0.carDropoffTime, string0);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertNotNull(intersectionVertex0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, graph0.countVertices());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeIn());
      
      String string1 = " vertices)";
      routingRequest0.setRoutingContext(graph0, routingRequest0.routerId, string1);
      assertNotSame(string1, string0);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(string1.equals((Object)string0));
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, graph0.countVertices());
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0);
      
      State state0 = new State(intersectionVertex0, multiShortestPathTree0.options);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertNotNull(state0);
      assertFalse(string0.equals((Object)string1));
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertFalse(state0.isEverBoarded());
      assertTrue(state0.isFinal());
      assertEquals(0, state0.getNumBoardings());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertNull(state0.getNonTransitMode());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isCarParked());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      
      boolean boolean1 = multiShortestPathTree0.add(state0);
      assertNotSame(string0, string1);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean1 == boolean0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertFalse(state0.isEverBoarded());
      assertTrue(state0.isFinal());
      assertEquals(0, state0.getNumBoardings());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertNull(state0.getNonTransitMode());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isCarParked());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertTrue(boolean1);
      
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertNotNull(set0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      
      String string2 = state0.toString();
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertFalse(state0.isEverBoarded());
      assertTrue(state0.isFinal());
      assertEquals(0, state0.getNumBoardings());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertNull(state0.getNonTransitMode());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isCarParked());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals("<State Fri Feb 14 20:21:21 GMT 2014 [0.0] < lat,lng=120.0,3160.60905143>>", string2);
      
      State state1 = state0.reverse();
      assertNotSame(state1, state0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(state0, state1);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertEquals(0.0, state1.weight, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertNotNull(state1);
      assertFalse(state1.equals((Object)state0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(state1.isCarParked());
      assertEquals(1392409281L, state1.getStartTimeSeconds());
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281000L, state1.getTimeInMillis());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertTrue(state1.getReverseOptimizing());
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertNull(state1.getZone());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertFalse(state1.isEverBoarded());
      assertNull(state1.getBackMode());
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertNull(state1.getNonTransitMode());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(1392409281L, state1.getTimeSeconds());
      assertFalse(state1.isOnboard());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertTrue(state1.isFinal());
      assertEquals(0, state1.getNumBoardings());
      assertEquals(0, state1.getPreTransitTime());
      assertFalse(state1.isBikeRenting());
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertFalse(state0.isEverBoarded());
      assertTrue(state0.isFinal());
      assertEquals(0, state0.getNumBoardings());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertNull(state0.getNonTransitMode());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isCarParked());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      
      boolean boolean2 = multiShortestPathTree0.add(state0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(state0, state1);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(state0.equals((Object)state1));
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertFalse(state0.isEverBoarded());
      assertTrue(state0.isFinal());
      assertEquals(0, state0.getNumBoardings());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertNull(state0.getNonTransitMode());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isCarParked());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertTrue(boolean2);
      
      State state2 = new State(routingRequest0);
      assertEquals(0.0, state2.walkDistance, 0.01);
      assertEquals(0.0, state2.weight, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertNotNull(state2);
      assertFalse(state2.equals((Object)state0));
      assertFalse(state2.equals((Object)state1));
      assertEquals(0, state2.getLastNextArrivalDelta());
      assertFalse(state2.isBackWalkingBike());
      assertEquals(0.0, state2.getWalkSinceLastTransit(), 0.01);
      assertNull(state2.getZone());
      assertEquals(0.0, state2.getWalkDistanceDelta(), 0.01);
      assertEquals(1392409281000L, state2.getTimeInMillis());
      assertEquals(0.0, state2.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state2.getWalkDistance(), 0.01);
      assertFalse(state2.isOnboard());
      assertFalse(state2.isCarParked());
      assertEquals(0.0, state2.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state2.getStartTimeSeconds());
      assertEquals(0, state2.getTimeDeltaSeconds());
      assertEquals(0, state2.getPreTransitTimeDelta());
      assertFalse(state2.isEverBoarded());
      assertFalse(state2.getReverseOptimizing());
      assertNull(state2.getNonTransitMode());
      assertEquals(0.0, state2.getWeight(), 0.01);
      assertEquals(0L, state2.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state2.getTimeSeconds());
      assertNull(state2.getBackMode());
      assertFalse(state2.isBikeRenting());
      assertEquals(0L, state2.getElapsedTimeSeconds());
      assertTrue(state2.isFinal());
      assertEquals(0, state2.getNumBoardings());
      assertEquals(0, state2.getPreTransitTime());
      assertEquals(0, state2.getAbsTimeDeltaSeconds());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      
      int int0 = multiShortestPathTree0.getVertexCount();
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, int0);
      
      State state3 = multiShortestPathTree0.getState(intersectionVertex0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(state3, state0);
      assertNotSame(state3, state1);
      assertNotSame(state3, state2);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(0.0, state3.walkDistance, 0.01);
      assertEquals(0.0, state3.weight, 0.01);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertNotNull(state3);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(state3.equals((Object)state1));
      assertFalse(state3.equals((Object)state2));
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0.0, state3.getWalkDistance(), 0.01);
      assertNull(state3.getBackMode());
      assertFalse(state3.isOnboard());
      assertEquals(0L, state3.getElapsedTimeSeconds());
      assertEquals(0.0, state3.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state3.getNumBoardings());
      assertEquals(1392409281L, state3.getTimeSeconds());
      assertEquals(0.0, state3.getWalkSinceLastTransit(), 0.01);
      assertNull(state3.getZone());
      assertFalse(state3.getReverseOptimizing());
      assertEquals(0, state3.getPreTransitTime());
      assertFalse(state3.isBikeRenting());
      assertEquals(0, state3.getAbsTimeDeltaSeconds());
      assertTrue(state3.isFinal());
      assertNull(state3.getNonTransitMode());
      assertEquals(0.0, state3.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0L, state3.getLastAlightedTimeSeconds());
      assertFalse(state3.isCarParked());
      assertEquals(0.0, state3.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281000L, state3.getTimeInMillis());
      assertEquals(0, state3.getTimeDeltaSeconds());
      assertFalse(state3.isBackWalkingBike());
      assertEquals(0, state3.getLastNextArrivalDelta());
      assertFalse(state3.isEverBoarded());
      assertEquals(0, state3.getPreTransitTimeDelta());
      assertEquals(0.0, state3.getWeight(), 0.01);
      assertEquals(1392409281L, state3.getStartTimeSeconds());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeIn());
      
      int int1 = 1205;
      SimpleEdge simpleEdge0 = new SimpleEdge(intersectionVertex0, intersectionVertex0, routingRequest0.maxWeight, int1);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertNotNull(simpleEdge0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int1 == int0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, graph0.countVertices());
      assertEquals(10, simpleEdge0.getId());
      assertFalse(simpleEdge0.isPartial());
      assertNull(simpleEdge0.getName());
      assertEquals(0.0, simpleEdge0.getDistance(), 0.01);
      assertTrue(simpleEdge0.vertexTypesValid());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertTrue(intersectionVertex0.inferredFreeFlowing());
      assertEquals(1, intersectionVertex0.getDegreeIn());
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(1, intersectionVertex0.getDegreeOut());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      
      State state4 = simpleEdge0.traverse(state2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(state2, state3);
      assertNotSame(state2, state0);
      assertNotSame(state2, state4);
      assertNotSame(state2, state1);
      assertNotSame(state4, state0);
      assertNotSame(state4, state2);
      assertNotSame(state4, state1);
      assertNotSame(state4, state3);
      assertEquals(0.0, state2.walkDistance, 0.01);
      assertEquals(0.0, state2.weight, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(0.0, state4.walkDistance, 0.01);
      assertEquals(1.7976931348623157E308, state4.weight, 0.01);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertNotNull(state4);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(state2.equals((Object)state3));
      assertFalse(state2.equals((Object)state0));
      assertFalse(state2.equals((Object)state1));
      assertFalse(int1 == int0);
      assertFalse(state4.equals((Object)state0));
      assertFalse(state4.equals((Object)state2));
      assertFalse(state4.equals((Object)state1));
      assertFalse(state4.equals((Object)state3));
      assertEquals(0, state2.getLastNextArrivalDelta());
      assertFalse(state2.isBackWalkingBike());
      assertEquals(0.0, state2.getWalkSinceLastTransit(), 0.01);
      assertNull(state2.getZone());
      assertEquals(0.0, state2.getWalkDistanceDelta(), 0.01);
      assertEquals(1392409281000L, state2.getTimeInMillis());
      assertEquals(0.0, state2.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state2.getWalkDistance(), 0.01);
      assertFalse(state2.isOnboard());
      assertFalse(state2.isCarParked());
      assertEquals(0.0, state2.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state2.getStartTimeSeconds());
      assertEquals(0, state2.getTimeDeltaSeconds());
      assertEquals(0, state2.getPreTransitTimeDelta());
      assertFalse(state2.isEverBoarded());
      assertFalse(state2.getReverseOptimizing());
      assertNull(state2.getNonTransitMode());
      assertEquals(0.0, state2.getWeight(), 0.01);
      assertEquals(0L, state2.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state2.getTimeSeconds());
      assertNull(state2.getBackMode());
      assertFalse(state2.isBikeRenting());
      assertEquals(0L, state2.getElapsedTimeSeconds());
      assertTrue(state2.isFinal());
      assertEquals(0, state2.getNumBoardings());
      assertEquals(0, state2.getPreTransitTime());
      assertEquals(0, state2.getAbsTimeDeltaSeconds());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, graph0.countVertices());
      assertEquals(10, simpleEdge0.getId());
      assertFalse(simpleEdge0.isPartial());
      assertNull(simpleEdge0.getName());
      assertEquals(0.0, simpleEdge0.getDistance(), 0.01);
      assertTrue(simpleEdge0.vertexTypesValid());
      assertEquals(1205, state4.getAbsTimeDeltaSeconds());
      assertEquals(1392409281L, state4.getStartTimeSeconds());
      assertEquals(1.7976931348623157E308, state4.getWeight(), 0.01);
      assertEquals(1205.0, state4.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1.7976931348623157E308, state4.getWeightDelta(), 0.01);
      assertEquals(0.0, state4.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state4.getLastAlightedTimeSeconds());
      assertEquals(0, state4.getPreTransitTime());
      assertEquals(0, state4.getNumBoardings());
      assertFalse(state4.getReverseOptimizing());
      assertNull(state4.getNonTransitMode());
      assertEquals(1392410486L, state4.getTimeSeconds());
      assertEquals(1205, state4.getTimeDeltaSeconds());
      assertTrue(state4.isFinal());
      assertFalse(state4.isBikeRenting());
      assertEquals(0.0, state4.getWalkDistance(), 0.01);
      assertEquals(0.0, state4.getWalkDistanceDelta(), 0.01);
      assertNull(state4.getZone());
      assertFalse(state4.isOnboard());
      assertNull(state4.getBackMode());
      assertEquals(1392410486000L, state4.getTimeInMillis());
      assertEquals(1205L, state4.getElapsedTimeSeconds());
      assertEquals(0.0, state4.getWalkSinceLastTransit(), 0.01);
      assertFalse(state4.isCarParked());
      assertEquals(0, state4.getLastNextArrivalDelta());
      assertFalse(state4.isBackWalkingBike());
      assertEquals(0, state4.getPreTransitTimeDelta());
      assertFalse(state4.isEverBoarded());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertTrue(intersectionVertex0.inferredFreeFlowing());
      assertEquals(1, intersectionVertex0.getDegreeIn());
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(1, intersectionVertex0.getDegreeOut());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      
      double double1 = (-413.82415965173124);
      state4.weight = double1;
      assertEquals(0, state2.getLastNextArrivalDelta());
      assertFalse(state2.isBackWalkingBike());
      assertEquals(0.0, state2.getWalkSinceLastTransit(), 0.01);
      assertNull(state2.getZone());
      assertEquals(0.0, state2.getWalkDistanceDelta(), 0.01);
      assertEquals(1392409281000L, state2.getTimeInMillis());
      assertEquals(0.0, state2.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state2.getWalkDistance(), 0.01);
      assertFalse(state2.isOnboard());
      assertFalse(state2.isCarParked());
      assertEquals(0.0, state2.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state2.getStartTimeSeconds());
      assertEquals(0, state2.getTimeDeltaSeconds());
      assertEquals(0, state2.getPreTransitTimeDelta());
      assertFalse(state2.isEverBoarded());
      assertFalse(state2.getReverseOptimizing());
      assertNull(state2.getNonTransitMode());
      assertEquals(0.0, state2.getWeight(), 0.01);
      assertEquals(0L, state2.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state2.getTimeSeconds());
      assertNull(state2.getBackMode());
      assertFalse(state2.isBikeRenting());
      assertEquals(0L, state2.getElapsedTimeSeconds());
      assertTrue(state2.isFinal());
      assertEquals(0, state2.getNumBoardings());
      assertEquals(0, state2.getPreTransitTime());
      assertEquals(0, state2.getAbsTimeDeltaSeconds());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, graph0.countVertices());
      assertEquals(10, simpleEdge0.getId());
      assertFalse(simpleEdge0.isPartial());
      assertNull(simpleEdge0.getName());
      assertEquals(0.0, simpleEdge0.getDistance(), 0.01);
      assertTrue(simpleEdge0.vertexTypesValid());
      assertEquals(1205, state4.getAbsTimeDeltaSeconds());
      assertEquals(1392409281L, state4.getStartTimeSeconds());
      assertEquals(1205.0, state4.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state4.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state4.getLastAlightedTimeSeconds());
      assertEquals(0, state4.getPreTransitTime());
      assertEquals(0, state4.getNumBoardings());
      assertFalse(state4.getReverseOptimizing());
      assertNull(state4.getNonTransitMode());
      assertEquals(1392410486L, state4.getTimeSeconds());
      assertEquals(1205, state4.getTimeDeltaSeconds());
      assertTrue(state4.isFinal());
      assertFalse(state4.isBikeRenting());
      assertEquals(0.0, state4.getWalkDistance(), 0.01);
      assertEquals(0.0, state4.getWalkDistanceDelta(), 0.01);
      assertEquals((-413.82415965173124), state4.getWeight(), 0.01);
      assertNull(state4.getZone());
      assertEquals((-413.82415965173124), state4.getWeightDelta(), 0.01);
      assertFalse(state4.isOnboard());
      assertNull(state4.getBackMode());
      assertEquals(1392410486000L, state4.getTimeInMillis());
      assertEquals(1205L, state4.getElapsedTimeSeconds());
      assertEquals(0.0, state4.getWalkSinceLastTransit(), 0.01);
      assertFalse(state4.isCarParked());
      assertEquals(0, state4.getLastNextArrivalDelta());
      assertFalse(state4.isBackWalkingBike());
      assertEquals(0, state4.getPreTransitTimeDelta());
      assertFalse(state4.isEverBoarded());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertTrue(intersectionVertex0.inferredFreeFlowing());
      assertEquals(1, intersectionVertex0.getDegreeIn());
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(1, intersectionVertex0.getDegreeOut());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      
      boolean boolean3 = MultiShortestPathTree.dominates(state2, state4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(state2, state3);
      assertNotSame(state2, state0);
      assertNotSame(state2, state4);
      assertNotSame(state2, state1);
      assertNotSame(state4, state0);
      assertNotSame(state4, state2);
      assertNotSame(state4, state1);
      assertNotSame(state4, state3);
      assertEquals(0.0, state2.walkDistance, 0.01);
      assertEquals(0.0, state2.weight, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(0.0, state4.walkDistance, 0.01);
      assertEquals((-413.82415965173124), state4.weight, 0.01);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(state2.equals((Object)state3));
      assertFalse(state2.equals((Object)state0));
      assertFalse(state2.equals((Object)state4));
      assertFalse(state2.equals((Object)state1));
      assertFalse(int1 == int0);
      assertNotEquals(double0, double1, 0.01);
      assertFalse(state4.equals((Object)state0));
      assertFalse(state4.equals((Object)state2));
      assertFalse(state4.equals((Object)state1));
      assertFalse(state4.equals((Object)state3));
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertEquals(0, state2.getLastNextArrivalDelta());
      assertFalse(state2.isBackWalkingBike());
      assertEquals(0.0, state2.getWalkSinceLastTransit(), 0.01);
      assertNull(state2.getZone());
      assertEquals(0.0, state2.getWalkDistanceDelta(), 0.01);
      assertEquals(1392409281000L, state2.getTimeInMillis());
      assertEquals(0.0, state2.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state2.getWalkDistance(), 0.01);
      assertFalse(state2.isOnboard());
      assertFalse(state2.isCarParked());
      assertEquals(0.0, state2.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state2.getStartTimeSeconds());
      assertEquals(0, state2.getTimeDeltaSeconds());
      assertEquals(0, state2.getPreTransitTimeDelta());
      assertFalse(state2.isEverBoarded());
      assertFalse(state2.getReverseOptimizing());
      assertNull(state2.getNonTransitMode());
      assertEquals(0.0, state2.getWeight(), 0.01);
      assertEquals(0L, state2.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state2.getTimeSeconds());
      assertNull(state2.getBackMode());
      assertFalse(state2.isBikeRenting());
      assertEquals(0L, state2.getElapsedTimeSeconds());
      assertTrue(state2.isFinal());
      assertEquals(0, state2.getNumBoardings());
      assertEquals(0, state2.getPreTransitTime());
      assertEquals(0, state2.getAbsTimeDeltaSeconds());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, graph0.countVertices());
      assertEquals(10, simpleEdge0.getId());
      assertFalse(simpleEdge0.isPartial());
      assertNull(simpleEdge0.getName());
      assertEquals(0.0, simpleEdge0.getDistance(), 0.01);
      assertTrue(simpleEdge0.vertexTypesValid());
      assertEquals(1205, state4.getAbsTimeDeltaSeconds());
      assertEquals(1392409281L, state4.getStartTimeSeconds());
      assertEquals(1205.0, state4.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state4.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state4.getLastAlightedTimeSeconds());
      assertEquals(0, state4.getPreTransitTime());
      assertEquals(0, state4.getNumBoardings());
      assertFalse(state4.getReverseOptimizing());
      assertNull(state4.getNonTransitMode());
      assertEquals(1392410486L, state4.getTimeSeconds());
      assertEquals(1205, state4.getTimeDeltaSeconds());
      assertTrue(state4.isFinal());
      assertFalse(state4.isBikeRenting());
      assertEquals(0.0, state4.getWalkDistance(), 0.01);
      assertEquals(0.0, state4.getWalkDistanceDelta(), 0.01);
      assertEquals((-413.82415965173124), state4.getWeight(), 0.01);
      assertNull(state4.getZone());
      assertEquals((-413.82415965173124), state4.getWeightDelta(), 0.01);
      assertFalse(state4.isOnboard());
      assertNull(state4.getBackMode());
      assertEquals(1392410486000L, state4.getTimeInMillis());
      assertEquals(1205L, state4.getElapsedTimeSeconds());
      assertEquals(0.0, state4.getWalkSinceLastTransit(), 0.01);
      assertFalse(state4.isCarParked());
      assertEquals(0, state4.getLastNextArrivalDelta());
      assertFalse(state4.isBackWalkingBike());
      assertEquals(0, state4.getPreTransitTimeDelta());
      assertFalse(state4.isEverBoarded());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertTrue(intersectionVertex0.inferredFreeFlowing());
      assertEquals(1, intersectionVertex0.getDegreeIn());
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(1, intersectionVertex0.getDegreeOut());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertFalse(boolean3);
      
      boolean boolean4 = multiShortestPathTree0.add(state0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(state0, state1);
      assertNotSame(state0, state2);
      assertSame(state0, state3);
      assertNotSame(state0, state4);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotEquals(double0, double1, 0.01);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertFalse(state0.equals((Object)state1));
      assertFalse(state0.equals((Object)state2));
      assertFalse(state0.equals((Object)state4));
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertTrue(intersectionVertex0.inferredFreeFlowing());
      assertEquals(1, intersectionVertex0.getDegreeIn());
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(1, intersectionVertex0.getDegreeOut());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertFalse(state0.isEverBoarded());
      assertTrue(state0.isFinal());
      assertEquals(0, state0.getNumBoardings());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertNull(state0.getNonTransitMode());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isCarParked());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertTrue(boolean4);
      
      boolean boolean5 = multiShortestPathTree0.visit(state4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(state2, state3);
      assertNotSame(state2, state0);
      assertNotSame(state2, state4);
      assertNotSame(state2, state1);
      assertNotSame(state4, state0);
      assertNotSame(state4, state2);
      assertNotSame(state4, state1);
      assertNotSame(state4, state3);
      assertEquals(0.0, state2.walkDistance, 0.01);
      assertEquals(0.0, state2.weight, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(0.0, state4.walkDistance, 0.01);
      assertEquals((-413.82415965173124), state4.weight, 0.01);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotEquals(double0, double1, 0.01);
      assertFalse(state2.equals((Object)state3));
      assertFalse(state2.equals((Object)state0));
      assertFalse(state2.equals((Object)state4));
      assertFalse(state2.equals((Object)state1));
      assertFalse(int1 == int0);
      assertFalse(state4.equals((Object)state0));
      assertFalse(state4.equals((Object)state2));
      assertFalse(state4.equals((Object)state1));
      assertFalse(state4.equals((Object)state3));
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean2);
      assertEquals(0, state2.getLastNextArrivalDelta());
      assertFalse(state2.isBackWalkingBike());
      assertEquals(0.0, state2.getWalkSinceLastTransit(), 0.01);
      assertNull(state2.getZone());
      assertEquals(0.0, state2.getWalkDistanceDelta(), 0.01);
      assertEquals(1392409281000L, state2.getTimeInMillis());
      assertEquals(0.0, state2.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state2.getWalkDistance(), 0.01);
      assertFalse(state2.isOnboard());
      assertFalse(state2.isCarParked());
      assertEquals(0.0, state2.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state2.getStartTimeSeconds());
      assertEquals(0, state2.getTimeDeltaSeconds());
      assertEquals(0, state2.getPreTransitTimeDelta());
      assertFalse(state2.isEverBoarded());
      assertFalse(state2.getReverseOptimizing());
      assertNull(state2.getNonTransitMode());
      assertEquals(0.0, state2.getWeight(), 0.01);
      assertEquals(0L, state2.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state2.getTimeSeconds());
      assertNull(state2.getBackMode());
      assertFalse(state2.isBikeRenting());
      assertEquals(0L, state2.getElapsedTimeSeconds());
      assertTrue(state2.isFinal());
      assertEquals(0, state2.getNumBoardings());
      assertEquals(0, state2.getPreTransitTime());
      assertEquals(0, state2.getAbsTimeDeltaSeconds());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals(10, simpleEdge0.getId());
      assertFalse(simpleEdge0.isPartial());
      assertNull(simpleEdge0.getName());
      assertEquals(0.0, simpleEdge0.getDistance(), 0.01);
      assertTrue(simpleEdge0.vertexTypesValid());
      assertEquals(1205, state4.getAbsTimeDeltaSeconds());
      assertEquals(1392409281L, state4.getStartTimeSeconds());
      assertEquals(1205.0, state4.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state4.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state4.getLastAlightedTimeSeconds());
      assertEquals(0, state4.getPreTransitTime());
      assertEquals(0, state4.getNumBoardings());
      assertFalse(state4.getReverseOptimizing());
      assertNull(state4.getNonTransitMode());
      assertEquals(1392410486L, state4.getTimeSeconds());
      assertEquals(1205, state4.getTimeDeltaSeconds());
      assertTrue(state4.isFinal());
      assertFalse(state4.isBikeRenting());
      assertEquals(0.0, state4.getWalkDistance(), 0.01);
      assertEquals(0.0, state4.getWalkDistanceDelta(), 0.01);
      assertEquals((-413.82415965173124), state4.getWeight(), 0.01);
      assertNull(state4.getZone());
      assertEquals((-413.82415965173124), state4.getWeightDelta(), 0.01);
      assertFalse(state4.isOnboard());
      assertNull(state4.getBackMode());
      assertEquals(1392410486000L, state4.getTimeInMillis());
      assertEquals(1205L, state4.getElapsedTimeSeconds());
      assertEquals(0.0, state4.getWalkSinceLastTransit(), 0.01);
      assertFalse(state4.isCarParked());
      assertEquals(0, state4.getLastNextArrivalDelta());
      assertFalse(state4.isBackWalkingBike());
      assertEquals(0, state4.getPreTransitTimeDelta());
      assertFalse(state4.isEverBoarded());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertTrue(intersectionVertex0.inferredFreeFlowing());
      assertEquals(1, intersectionVertex0.getDegreeIn());
      assertEquals(3160.60905143, intersectionVertex0.getLon(), 0.01);
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(1, intersectionVertex0.getDegreeOut());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals(3160.60905143, intersectionVertex0.getX(), 0.01);
      assertFalse(boolean5);
      
      boolean boolean6 = multiShortestPathTree0.add(state2);
      assertNotSame(state2, state3);
      assertNotSame(state2, state0);
      assertNotSame(state2, state4);
      assertNotSame(state2, state1);
      assertEquals(0.0, state2.walkDistance, 0.01);
      assertEquals(0.0, state2.weight, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(state2.equals((Object)state3));
      assertFalse(state2.equals((Object)state0));
      assertFalse(state2.equals((Object)state4));
      assertFalse(state2.equals((Object)state1));
      assertFalse(boolean6 == boolean3);
      assertTrue(boolean6 == boolean4);
      assertFalse(boolean6 == boolean5);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean1);
      assertFalse(boolean6 == boolean0);
      assertEquals(0, state2.getLastNextArrivalDelta());
      assertFalse(state2.isBackWalkingBike());
      assertEquals(0.0, state2.getWalkSinceLastTransit(), 0.01);
      assertNull(state2.getZone());
      assertEquals(0.0, state2.getWalkDistanceDelta(), 0.01);
      assertEquals(1392409281000L, state2.getTimeInMillis());
      assertEquals(0.0, state2.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state2.getWalkDistance(), 0.01);
      assertFalse(state2.isOnboard());
      assertFalse(state2.isCarParked());
      assertEquals(0.0, state2.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state2.getStartTimeSeconds());
      assertEquals(0, state2.getTimeDeltaSeconds());
      assertEquals(0, state2.getPreTransitTimeDelta());
      assertFalse(state2.isEverBoarded());
      assertFalse(state2.getReverseOptimizing());
      assertNull(state2.getNonTransitMode());
      assertEquals(0.0, state2.getWeight(), 0.01);
      assertEquals(0L, state2.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state2.getTimeSeconds());
      assertNull(state2.getBackMode());
      assertFalse(state2.isBikeRenting());
      assertEquals(0L, state2.getElapsedTimeSeconds());
      assertTrue(state2.isFinal());
      assertEquals(0, state2.getNumBoardings());
      assertEquals(0, state2.getPreTransitTime());
      assertEquals(0, state2.getAbsTimeDeltaSeconds());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertTrue(boolean6);
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      String string0 = "3";
      TraverseMode traverseMode0 = TraverseMode.TRAM;
      OptimizeType optimizeType0 = OptimizeType.FLAT;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0, optimizeType0);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.batch);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertNotNull(routingRequest0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.batch);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertNotNull(multiShortestPathTree0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      Graph graph0 = new Graph();
      assertNotNull(graph0);
      assertEquals(0, graph0.countVertices());
      
      IntersectionVertex intersectionVertex0 = new IntersectionVertex(graph0, routingRequest0.routerId, routingRequest0.carDecelerationSpeed, routingRequest0.carDropoffTime, string0);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.batch);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertNotNull(intersectionVertex0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, graph0.countVertices());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      
      String string1 = " vertices)";
      routingRequest0.setRoutingContext(graph0, routingRequest0.routerId, string1);
      assertNotSame(string1, string0);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.batch);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(string1.equals((Object)string0));
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, graph0.countVertices());
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0);
      
      State state0 = new State(intersectionVertex0, multiShortestPathTree0.options);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.batch);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertNotNull(state0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isCarParked());
      assertNull(state0.getBackMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertNull(state0.getZone());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertTrue(state0.isFinal());
      assertFalse(state0.isEverBoarded());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertNull(state0.getNonTransitMode());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isBikeRenting());
      assertFalse(state0.isOnboard());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      
      boolean boolean1 = multiShortestPathTree0.add(state0);
      assertNotSame(string0, string1);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.batch);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean1 == boolean0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isCarParked());
      assertNull(state0.getBackMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertNull(state0.getZone());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertTrue(state0.isFinal());
      assertFalse(state0.isEverBoarded());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertNull(state0.getNonTransitMode());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isBikeRenting());
      assertFalse(state0.isOnboard());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertTrue(boolean1);
      
      String string2 = multiShortestPathTree0.toString();
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.batch);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals("MultiSPT(1 vertices)", string2);
      
      State state1 = state0.reverse();
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(state0, state1);
      assertNotSame(state1, state0);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.batch);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state1.weight, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertNotNull(state1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(state1.equals((Object)state0));
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isCarParked());
      assertNull(state0.getBackMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertNull(state0.getZone());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertTrue(state0.isFinal());
      assertFalse(state0.isEverBoarded());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertNull(state0.getNonTransitMode());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isBikeRenting());
      assertFalse(state0.isOnboard());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertTrue(state1.isFinal());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertTrue(state1.getReverseOptimizing());
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertEquals(0, state1.getNumBoardings());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertFalse(state1.isBikeRenting());
      assertNull(state1.getBackMode());
      assertEquals(0, state1.getPreTransitTime());
      assertEquals(1392409281L, state1.getTimeSeconds());
      assertNull(state1.getNonTransitMode());
      assertNull(state1.getZone());
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertFalse(state1.isCarParked());
      assertEquals(1392409281000L, state1.getTimeInMillis());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertFalse(state1.isEverBoarded());
      assertEquals(1392409281L, state1.getStartTimeSeconds());
      assertFalse(state1.isOnboard());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state1.getWeight(), 0.01);
      
      boolean boolean2 = multiShortestPathTree0.add(state0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(state0, state1);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.batch);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(state0.equals((Object)state1));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals("3", intersectionVertex0.getName());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isCarParked());
      assertNull(state0.getBackMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertNull(state0.getZone());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertTrue(state0.isFinal());
      assertFalse(state0.isEverBoarded());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertNull(state0.getNonTransitMode());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isBikeRenting());
      assertFalse(state0.isOnboard());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertTrue(boolean2);
      
      int int0 = new Integer(routingRequest0.elevatorHopCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.batch);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(20, int0);
      
      State state2 = new State(multiShortestPathTree0.options);
      assertEquals(0.0, state2.weight, 0.01);
      assertEquals(0.0, state2.walkDistance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.batch);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertNotNull(state2);
      assertFalse(state2.equals((Object)state0));
      assertFalse(state2.equals((Object)state1));
      assertTrue(state2.isFinal());
      assertEquals(1392409281L, state2.getStartTimeSeconds());
      assertEquals(0.0, state2.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state2.isCarParked());
      assertFalse(state2.isEverBoarded());
      assertEquals(0.0, state2.getWalkAtLastTransit(), 0.01);
      assertNull(state2.getNonTransitMode());
      assertEquals(0, state2.getPreTransitTimeDelta());
      assertEquals(0, state2.getTimeDeltaSeconds());
      assertFalse(state2.getReverseOptimizing());
      assertEquals(0L, state2.getLastAlightedTimeSeconds());
      assertNull(state2.getBackMode());
      assertEquals(0.0, state2.getWalkDistanceDelta(), 0.01);
      assertEquals(1392409281L, state2.getTimeSeconds());
      assertEquals(0.0, state2.getWalkSinceLastTransit(), 0.01);
      assertNull(state2.getZone());
      assertFalse(state2.isBackWalkingBike());
      assertEquals(0, state2.getLastNextArrivalDelta());
      assertFalse(state2.isBikeRenting());
      assertEquals(0L, state2.getElapsedTimeSeconds());
      assertEquals(0, state2.getPreTransitTime());
      assertEquals(0, state2.getAbsTimeDeltaSeconds());
      assertEquals(1392409281000L, state2.getTimeInMillis());
      assertEquals(0, state2.getNumBoardings());
      assertEquals(0.0, state2.getWeight(), 0.01);
      assertEquals(0.0, state2.getWalkDistance(), 0.01);
      assertFalse(state2.isOnboard());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      int int1 = 1205;
      SimpleEdge simpleEdge0 = new SimpleEdge(intersectionVertex0, intersectionVertex0, routingRequest0.maxWeight, int1);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.batch);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertNotNull(simpleEdge0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int1 == int0);
      assertFalse(simpleEdge0.isPartial());
      assertEquals(0.0, simpleEdge0.getDistance(), 0.01);
      assertNull(simpleEdge0.getName());
      assertTrue(simpleEdge0.vertexTypesValid());
      assertEquals(11, simpleEdge0.getId());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, graph0.countVertices());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      assertEquals(1, intersectionVertex0.getDegreeIn());
      assertEquals("3", intersectionVertex0.getName());
      assertTrue(intersectionVertex0.inferredFreeFlowing());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(1, intersectionVertex0.getDegreeOut());
      
      State state3 = simpleEdge0.traverse(state1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(state3, state2);
      assertNotSame(state3, state0);
      assertNotSame(state3, state1);
      assertNotSame(state0, state3);
      assertNotSame(state0, state2);
      assertNotSame(state0, state1);
      assertNotSame(state1, state3);
      assertNotSame(state1, state2);
      assertNotSame(state1, state0);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.batch);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.0, state3.walkDistance, 0.01);
      assertEquals(1.7976931348623157E308, state3.weight, 0.01);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state1.weight, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertNotNull(state3);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int1 == int0);
      assertFalse(state3.equals((Object)state2));
      assertFalse(state3.equals((Object)state0));
      assertFalse(state3.equals((Object)state1));
      assertFalse(state0.equals((Object)state2));
      assertFalse(state0.equals((Object)state1));
      assertFalse(state1.equals((Object)state2));
      assertFalse(state1.equals((Object)state0));
      assertFalse(simpleEdge0.isPartial());
      assertEquals(0.0, simpleEdge0.getDistance(), 0.01);
      assertNull(simpleEdge0.getName());
      assertTrue(simpleEdge0.vertexTypesValid());
      assertEquals(11, simpleEdge0.getId());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, state3.getPreTransitTimeDelta());
      assertEquals(0.0, state3.getWalkAtLastTransit(), 0.01);
      assertFalse(state3.isBikeRenting());
      assertEquals(1205L, state3.getElapsedTimeSeconds());
      assertEquals(1392408076000L, state3.getTimeInMillis());
      assertEquals(0, state3.getPreTransitTime());
      assertFalse(state3.isCarParked());
      assertFalse(state3.isBackWalkingBike());
      assertEquals(0, state3.getLastNextArrivalDelta());
      assertEquals(1392408076L, state3.getTimeSeconds());
      assertEquals(1392409281L, state3.getStartTimeSeconds());
      assertEquals(1.7976931348623157E308, state3.getWeight(), 0.01);
      assertTrue(state3.getReverseOptimizing());
      assertEquals(0L, state3.getLastAlightedTimeSeconds());
      assertEquals(0.0, state3.getWalkDistanceDelta(), 0.01);
      assertNull(state3.getBackMode());
      assertEquals(0.0, state3.getWalkSinceLastTransit(), 0.01);
      assertNull(state3.getZone());
      assertNull(state3.getNonTransitMode());
      assertEquals(0, state3.getNumBoardings());
      assertFalse(state3.isEverBoarded());
      assertEquals(1.7976931348623157E308, state3.getWeightDelta(), 0.01);
      assertTrue(state3.isFinal());
      assertEquals(1205.0, state3.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1205, state3.getAbsTimeDeltaSeconds());
      assertFalse(state3.isOnboard());
      assertEquals((-1205), state3.getTimeDeltaSeconds());
      assertEquals(0.0, state3.getWalkDistance(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      assertEquals(1, intersectionVertex0.getDegreeIn());
      assertEquals("3", intersectionVertex0.getName());
      assertTrue(intersectionVertex0.inferredFreeFlowing());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(1, intersectionVertex0.getDegreeOut());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isCarParked());
      assertNull(state0.getBackMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertNull(state0.getZone());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertTrue(state0.isFinal());
      assertFalse(state0.isEverBoarded());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertNull(state0.getNonTransitMode());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isBikeRenting());
      assertFalse(state0.isOnboard());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertTrue(state1.isFinal());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertTrue(state1.getReverseOptimizing());
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertEquals(0, state1.getNumBoardings());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertFalse(state1.isBikeRenting());
      assertNull(state1.getBackMode());
      assertEquals(0, state1.getPreTransitTime());
      assertEquals(1392409281L, state1.getTimeSeconds());
      assertNull(state1.getNonTransitMode());
      assertNull(state1.getZone());
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertFalse(state1.isCarParked());
      assertEquals(1392409281000L, state1.getTimeInMillis());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertFalse(state1.isEverBoarded());
      assertEquals(1392409281L, state1.getStartTimeSeconds());
      assertFalse(state1.isOnboard());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state1.getWeight(), 0.01);
      
      double double0 = (-413.82415965173124);
      state3.weight = double0;
      assertFalse(simpleEdge0.isPartial());
      assertEquals(0.0, simpleEdge0.getDistance(), 0.01);
      assertNull(simpleEdge0.getName());
      assertTrue(simpleEdge0.vertexTypesValid());
      assertEquals(11, simpleEdge0.getId());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, state3.getPreTransitTimeDelta());
      assertEquals(0.0, state3.getWalkAtLastTransit(), 0.01);
      assertFalse(state3.isBikeRenting());
      assertEquals(1205L, state3.getElapsedTimeSeconds());
      assertEquals(1392408076000L, state3.getTimeInMillis());
      assertEquals(0, state3.getPreTransitTime());
      assertFalse(state3.isCarParked());
      assertFalse(state3.isBackWalkingBike());
      assertEquals(0, state3.getLastNextArrivalDelta());
      assertEquals(1392408076L, state3.getTimeSeconds());
      assertEquals(1392409281L, state3.getStartTimeSeconds());
      assertTrue(state3.getReverseOptimizing());
      assertEquals(0L, state3.getLastAlightedTimeSeconds());
      assertEquals(0.0, state3.getWalkDistanceDelta(), 0.01);
      assertNull(state3.getBackMode());
      assertEquals(0.0, state3.getWalkSinceLastTransit(), 0.01);
      assertNull(state3.getZone());
      assertNull(state3.getNonTransitMode());
      assertEquals(0, state3.getNumBoardings());
      assertFalse(state3.isEverBoarded());
      assertTrue(state3.isFinal());
      assertEquals(1205.0, state3.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals((-413.82415965173124), state3.getWeight(), 0.01);
      assertEquals(1205, state3.getAbsTimeDeltaSeconds());
      assertFalse(state3.isOnboard());
      assertEquals((-1205), state3.getTimeDeltaSeconds());
      assertEquals(0.0, state3.getWalkDistance(), 0.01);
      assertEquals((-413.82415965173124), state3.getWeightDelta(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      assertEquals(1, intersectionVertex0.getDegreeIn());
      assertEquals("3", intersectionVertex0.getName());
      assertTrue(intersectionVertex0.inferredFreeFlowing());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(1, intersectionVertex0.getDegreeOut());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isCarParked());
      assertNull(state0.getBackMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertNull(state0.getZone());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertTrue(state0.isFinal());
      assertFalse(state0.isEverBoarded());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertNull(state0.getNonTransitMode());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isBikeRenting());
      assertFalse(state0.isOnboard());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertTrue(state1.isFinal());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertTrue(state1.getReverseOptimizing());
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertEquals(0, state1.getNumBoardings());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertFalse(state1.isBikeRenting());
      assertNull(state1.getBackMode());
      assertEquals(0, state1.getPreTransitTime());
      assertEquals(1392409281L, state1.getTimeSeconds());
      assertNull(state1.getNonTransitMode());
      assertNull(state1.getZone());
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertFalse(state1.isCarParked());
      assertEquals(1392409281000L, state1.getTimeInMillis());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertFalse(state1.isEverBoarded());
      assertEquals(1392409281L, state1.getStartTimeSeconds());
      assertFalse(state1.isOnboard());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state1.getWeight(), 0.01);
      
      boolean boolean3 = multiShortestPathTree0.add(state1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(state0, state3);
      assertNotSame(state0, state2);
      assertNotSame(state0, state1);
      assertNotSame(state1, state3);
      assertNotSame(state1, state2);
      assertNotSame(state1, state0);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.batch);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state1.weight, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(state0.equals((Object)state3));
      assertFalse(state0.equals((Object)state2));
      assertFalse(state0.equals((Object)state1));
      assertFalse(state1.equals((Object)state3));
      assertFalse(state1.equals((Object)state2));
      assertFalse(state1.equals((Object)state0));
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      assertEquals(1, intersectionVertex0.getDegreeIn());
      assertEquals("3", intersectionVertex0.getName());
      assertTrue(intersectionVertex0.inferredFreeFlowing());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(1, intersectionVertex0.getDegreeOut());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isCarParked());
      assertNull(state0.getBackMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertNull(state0.getZone());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertTrue(state0.isFinal());
      assertFalse(state0.isEverBoarded());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertNull(state0.getNonTransitMode());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isBikeRenting());
      assertFalse(state0.isOnboard());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertTrue(state1.isFinal());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertTrue(state1.getReverseOptimizing());
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertEquals(0, state1.getNumBoardings());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertFalse(state1.isBikeRenting());
      assertNull(state1.getBackMode());
      assertEquals(0, state1.getPreTransitTime());
      assertEquals(1392409281L, state1.getTimeSeconds());
      assertNull(state1.getNonTransitMode());
      assertNull(state1.getZone());
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertFalse(state1.isCarParked());
      assertEquals(1392409281000L, state1.getTimeInMillis());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertFalse(state1.isEverBoarded());
      assertEquals(1392409281L, state1.getStartTimeSeconds());
      assertFalse(state1.isOnboard());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertTrue(boolean3);
      
      boolean boolean4 = multiShortestPathTree0.add(state0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(state0, state3);
      assertNotSame(state0, state2);
      assertNotSame(state0, state1);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.batch);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertFalse(state0.equals((Object)state3));
      assertFalse(state0.equals((Object)state2));
      assertFalse(state0.equals((Object)state1));
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      assertEquals(1, intersectionVertex0.getDegreeIn());
      assertEquals("3", intersectionVertex0.getName());
      assertTrue(intersectionVertex0.inferredFreeFlowing());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(1, intersectionVertex0.getDegreeOut());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isCarParked());
      assertNull(state0.getBackMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertNull(state0.getZone());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertTrue(state0.isFinal());
      assertFalse(state0.isEverBoarded());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertNull(state0.getNonTransitMode());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isBikeRenting());
      assertFalse(state0.isOnboard());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertTrue(boolean4);
      
      boolean boolean5 = multiShortestPathTree0.visit(state3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(state3, state2);
      assertNotSame(state3, state0);
      assertNotSame(state3, state1);
      assertNotSame(state0, state3);
      assertNotSame(state0, state2);
      assertNotSame(state0, state1);
      assertNotSame(state1, state3);
      assertNotSame(state1, state2);
      assertNotSame(state1, state0);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.batch);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals((-413.82415965173124), state3.weight, 0.01);
      assertEquals(0.0, state3.walkDistance, 0.01);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state1.weight, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(state0.equals((Object)state3));
      assertFalse(state0.equals((Object)state2));
      assertFalse(state0.equals((Object)state1));
      assertFalse(state1.equals((Object)state3));
      assertFalse(state1.equals((Object)state2));
      assertFalse(state1.equals((Object)state0));
      assertFalse(int1 == int0);
      assertFalse(state3.equals((Object)state2));
      assertFalse(state3.equals((Object)state0));
      assertFalse(state3.equals((Object)state1));
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean2);
      assertFalse(simpleEdge0.isPartial());
      assertEquals(0.0, simpleEdge0.getDistance(), 0.01);
      assertNull(simpleEdge0.getName());
      assertTrue(simpleEdge0.vertexTypesValid());
      assertEquals(11, simpleEdge0.getId());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, state3.getPreTransitTimeDelta());
      assertEquals(0.0, state3.getWalkAtLastTransit(), 0.01);
      assertFalse(state3.isBikeRenting());
      assertEquals(1205L, state3.getElapsedTimeSeconds());
      assertEquals(1392408076000L, state3.getTimeInMillis());
      assertEquals(0, state3.getPreTransitTime());
      assertFalse(state3.isCarParked());
      assertFalse(state3.isBackWalkingBike());
      assertEquals(0, state3.getLastNextArrivalDelta());
      assertEquals(1392408076L, state3.getTimeSeconds());
      assertEquals(1392409281L, state3.getStartTimeSeconds());
      assertTrue(state3.getReverseOptimizing());
      assertEquals(0L, state3.getLastAlightedTimeSeconds());
      assertEquals(0.0, state3.getWalkDistanceDelta(), 0.01);
      assertNull(state3.getBackMode());
      assertEquals(0.0, state3.getWalkSinceLastTransit(), 0.01);
      assertNull(state3.getZone());
      assertNull(state3.getNonTransitMode());
      assertEquals(0, state3.getNumBoardings());
      assertFalse(state3.isEverBoarded());
      assertTrue(state3.isFinal());
      assertEquals(1205.0, state3.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals((-413.82415965173124), state3.getWeight(), 0.01);
      assertEquals(1205, state3.getAbsTimeDeltaSeconds());
      assertFalse(state3.isOnboard());
      assertEquals((-1205), state3.getTimeDeltaSeconds());
      assertEquals(0.0, state3.getWalkDistance(), 0.01);
      assertEquals((-413.82415965173124), state3.getWeightDelta(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      assertEquals(1, intersectionVertex0.getDegreeIn());
      assertEquals("3", intersectionVertex0.getName());
      assertTrue(intersectionVertex0.inferredFreeFlowing());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(1, intersectionVertex0.getDegreeOut());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isCarParked());
      assertNull(state0.getBackMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertNull(state0.getZone());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertTrue(state0.isFinal());
      assertFalse(state0.isEverBoarded());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertNull(state0.getNonTransitMode());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isBikeRenting());
      assertFalse(state0.isOnboard());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertTrue(state1.isFinal());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertTrue(state1.getReverseOptimizing());
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertEquals(0, state1.getNumBoardings());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertFalse(state1.isBikeRenting());
      assertNull(state1.getBackMode());
      assertEquals(0, state1.getPreTransitTime());
      assertEquals(1392409281L, state1.getTimeSeconds());
      assertNull(state1.getNonTransitMode());
      assertNull(state1.getZone());
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertFalse(state1.isCarParked());
      assertEquals(1392409281000L, state1.getTimeInMillis());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertFalse(state1.isEverBoarded());
      assertEquals(1392409281L, state1.getStartTimeSeconds());
      assertFalse(state1.isOnboard());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertFalse(boolean5);
      
      boolean boolean6 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean6 == boolean4);
      assertFalse(boolean6 == boolean0);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean1);
      assertFalse(boolean6 == boolean5);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6);
      
      String string3 = multiShortestPathTree0.toString();
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.batch);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals("MultiSPT(1 vertices)", string3);
      
      State state4 = multiShortestPathTree0.getState(intersectionVertex0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertSame(state4, state0);
      assertNotSame(state4, state1);
      assertNotSame(state4, state2);
      assertNotSame(state4, state3);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.batch);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(0.0, state4.walkDistance, 0.01);
      assertEquals(0.0, state4.weight, 0.01);
      assertNotNull(state4);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(state4.equals((Object)state1));
      assertFalse(state4.equals((Object)state2));
      assertFalse(state4.equals((Object)state3));
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      assertEquals(1, intersectionVertex0.getDegreeIn());
      assertEquals("3", intersectionVertex0.getName());
      assertTrue(intersectionVertex0.inferredFreeFlowing());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(1, intersectionVertex0.getDegreeOut());
      assertEquals(1392409281000L, state4.getTimeInMillis());
      assertFalse(state4.isBikeRenting());
      assertEquals(0.0, state4.getWalkAtLastTransit(), 0.01);
      assertFalse(state4.isBackWalkingBike());
      assertEquals(0, state4.getTimeDeltaSeconds());
      assertEquals(0L, state4.getLastAlightedTimeSeconds());
      assertEquals(0.0, state4.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state4.getElapsedTimeSeconds());
      assertTrue(state4.isFinal());
      assertEquals(0, state4.getPreTransitTime());
      assertEquals(0, state4.getAbsTimeDeltaSeconds());
      assertNull(state4.getNonTransitMode());
      assertEquals(0, state4.getNumBoardings());
      assertEquals(0.0, state4.getWeight(), 0.01);
      assertFalse(state4.getReverseOptimizing());
      assertFalse(state4.isOnboard());
      assertEquals(1392409281L, state4.getTimeSeconds());
      assertNull(state4.getBackMode());
      assertEquals(0.0, state4.getWalkDistance(), 0.01);
      assertEquals(0.0, state4.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state4.getStartTimeSeconds());
      assertNull(state4.getZone());
      assertFalse(state4.isCarParked());
      assertEquals(0, state4.getLastNextArrivalDelta());
      assertEquals(0.0, state4.getWalkSinceLastTransit(), 0.01);
      assertFalse(state4.isEverBoarded());
      assertEquals(0, state4.getPreTransitTimeDelta());
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      String string0 = "68e=`J";
      TraverseMode traverseMode0 = TraverseMode.TRAM;
      OptimizeType optimizeType0 = OptimizeType.FLAT;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0, optimizeType0);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertNotNull(routingRequest0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertNotNull(multiShortestPathTree0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      Graph graph0 = new Graph();
      assertNotNull(graph0);
      assertEquals(0, graph0.countVertices());
      
      IntersectionVertex intersectionVertex0 = new IntersectionVertex(graph0, routingRequest0.routerId, routingRequest0.carDecelerationSpeed, routingRequest0.carDropoffTime, string0);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertNotNull(intersectionVertex0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, graph0.countVertices());
      assertEquals("68e=`J", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeIn());
      
      String string1 = " vertices)";
      routingRequest0.setRoutingContext(graph0, routingRequest0.routerId, string1);
      assertNotSame(string1, string0);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(string1.equals((Object)string0));
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, graph0.countVertices());
      
      State state0 = new State(intersectionVertex0, multiShortestPathTree0.options);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertNotNull(state0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("68e=`J", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertNull(state0.getZone());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.isEverBoarded());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertNull(state0.getNonTransitMode());
      assertTrue(state0.isFinal());
      
      boolean boolean0 = multiShortestPathTree0.add(state0);
      assertNotSame(string0, string1);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertFalse(string0.equals((Object)string1));
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("68e=`J", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertNull(state0.getZone());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.isEverBoarded());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertNull(state0.getNonTransitMode());
      assertTrue(state0.isFinal());
      assertTrue(boolean0);
      
      boolean boolean1 = multiShortestPathTree0.add(state0);
      assertNotSame(string0, string1);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean1 == boolean0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("68e=`J", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertNull(state0.getZone());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.isEverBoarded());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertNull(state0.getNonTransitMode());
      assertTrue(state0.isFinal());
      assertTrue(boolean1);
      
      State state1 = multiShortestPathTree0.getState(intersectionVertex0);
      assertNotSame(string0, string1);
      assertSame(state1, state0);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(0.0, state1.weight, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertNotNull(state1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("68e=`J", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertNull(state1.getZone());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertFalse(state1.getReverseOptimizing());
      assertNull(state1.getNonTransitMode());
      assertNull(state1.getBackMode());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281L, state1.getTimeSeconds());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state1.getStartTimeSeconds());
      assertFalse(state1.isCarParked());
      assertFalse(state1.isEverBoarded());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertTrue(state1.isFinal());
      assertFalse(state1.isBikeRenting());
      assertEquals(1392409281000L, state1.getTimeInMillis());
      assertEquals(0, state1.getPreTransitTime());
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertEquals(0, state1.getNumBoardings());
      assertFalse(state1.isOnboard());
      
      int int0 = 1205;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      SimpleEdge simpleEdge0 = new SimpleEdge(intersectionVertex0, intersectionVertex0, routingRequest0.maxWeight, int0);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertNotNull(simpleEdge0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, graph0.countVertices());
      assertEquals("68e=`J", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(1, intersectionVertex0.getDegreeOut());
      assertTrue(intersectionVertex0.inferredFreeFlowing());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(1, intersectionVertex0.getDegreeIn());
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertNull(simpleEdge0.getName());
      assertEquals(0.0, simpleEdge0.getDistance(), 0.01);
      assertTrue(simpleEdge0.vertexTypesValid());
      assertEquals(12, simpleEdge0.getId());
      assertFalse(simpleEdge0.isPartial());
      
      State state2 = simpleEdge0.traverse(state0);
      assertNotSame(state2, state1);
      assertNotSame(state2, state0);
      assertNotSame(string0, string1);
      assertNotSame(state0, state2);
      assertSame(state0, state1);
      assertEquals(0.0, state2.walkDistance, 0.01);
      assertEquals(1.7976931348623157E308, state2.weight, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertNotNull(state2);
      assertFalse(state2.equals((Object)state1));
      assertFalse(state2.equals((Object)state0));
      assertFalse(string0.equals((Object)string1));
      assertEquals(0L, state2.getLastAlightedTimeSeconds());
      assertFalse(state2.isCarParked());
      assertEquals(0, state2.getPreTransitTimeDelta());
      assertTrue(state2.isFinal());
      assertFalse(state2.isBikeRenting());
      assertEquals(1392410486000L, state2.getTimeInMillis());
      assertEquals(1205.0, state2.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1205, state2.getAbsTimeDeltaSeconds());
      assertEquals(1392409281L, state2.getStartTimeSeconds());
      assertEquals(1205L, state2.getElapsedTimeSeconds());
      assertEquals(1.7976931348623157E308, state2.getWeightDelta(), 0.01);
      assertEquals(1392410486L, state2.getTimeSeconds());
      assertEquals(1205, state2.getTimeDeltaSeconds());
      assertEquals(0, state2.getPreTransitTime());
      assertEquals(0, state2.getNumBoardings());
      assertEquals(0.0, state2.getWalkDistance(), 0.01);
      assertNull(state2.getBackMode());
      assertFalse(state2.isOnboard());
      assertEquals(0.0, state2.getWalkDistanceDelta(), 0.01);
      assertNull(state2.getNonTransitMode());
      assertFalse(state2.isBackWalkingBike());
      assertEquals(0, state2.getLastNextArrivalDelta());
      assertFalse(state2.getReverseOptimizing());
      assertFalse(state2.isEverBoarded());
      assertEquals(1.7976931348623157E308, state2.getWeight(), 0.01);
      assertEquals(0.0, state2.getWalkAtLastTransit(), 0.01);
      assertNull(state2.getZone());
      assertEquals(0.0, state2.getWalkSinceLastTransit(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("68e=`J", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(1, intersectionVertex0.getDegreeOut());
      assertTrue(intersectionVertex0.inferredFreeFlowing());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(1, intersectionVertex0.getDegreeIn());
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertNull(state0.getZone());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.isEverBoarded());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertNull(state0.getNonTransitMode());
      assertTrue(state0.isFinal());
      assertNull(simpleEdge0.getName());
      assertEquals(0.0, simpleEdge0.getDistance(), 0.01);
      assertTrue(simpleEdge0.vertexTypesValid());
      assertEquals(12, simpleEdge0.getId());
      assertFalse(simpleEdge0.isPartial());
      
      double double0 = (-413.82415965173124);
      state2.weight = double0;
      assertEquals(0L, state2.getLastAlightedTimeSeconds());
      assertFalse(state2.isCarParked());
      assertEquals(0, state2.getPreTransitTimeDelta());
      assertTrue(state2.isFinal());
      assertFalse(state2.isBikeRenting());
      assertEquals(1392410486000L, state2.getTimeInMillis());
      assertEquals(1205.0, state2.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1205, state2.getAbsTimeDeltaSeconds());
      assertEquals(1392409281L, state2.getStartTimeSeconds());
      assertEquals(1205L, state2.getElapsedTimeSeconds());
      assertEquals(1392410486L, state2.getTimeSeconds());
      assertEquals(1205, state2.getTimeDeltaSeconds());
      assertEquals(0, state2.getPreTransitTime());
      assertEquals(0, state2.getNumBoardings());
      assertEquals((-413.82415965173124), state2.getWeightDelta(), 0.01);
      assertEquals(0.0, state2.getWalkDistance(), 0.01);
      assertNull(state2.getBackMode());
      assertFalse(state2.isOnboard());
      assertEquals(0.0, state2.getWalkDistanceDelta(), 0.01);
      assertEquals((-413.82415965173124), state2.getWeight(), 0.01);
      assertNull(state2.getNonTransitMode());
      assertFalse(state2.isBackWalkingBike());
      assertEquals(0, state2.getLastNextArrivalDelta());
      assertFalse(state2.getReverseOptimizing());
      assertFalse(state2.isEverBoarded());
      assertEquals(0.0, state2.getWalkAtLastTransit(), 0.01);
      assertNull(state2.getZone());
      assertEquals(0.0, state2.getWalkSinceLastTransit(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("68e=`J", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(1, intersectionVertex0.getDegreeOut());
      assertTrue(intersectionVertex0.inferredFreeFlowing());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(1, intersectionVertex0.getDegreeIn());
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertNull(state0.getZone());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.isEverBoarded());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertNull(state0.getNonTransitMode());
      assertTrue(state0.isFinal());
      assertNull(simpleEdge0.getName());
      assertEquals(0.0, simpleEdge0.getDistance(), 0.01);
      assertTrue(simpleEdge0.vertexTypesValid());
      assertEquals(12, simpleEdge0.getId());
      assertFalse(simpleEdge0.isPartial());
      
      boolean boolean2 = MultiShortestPathTree.dominates(state0, state2);
      assertNotSame(state2, state1);
      assertNotSame(state2, state0);
      assertNotSame(string0, string1);
      assertNotSame(state0, state2);
      assertSame(state0, state1);
      assertEquals((-413.82415965173124), state2.weight, 0.01);
      assertEquals(0.0, state2.walkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertFalse(state2.equals((Object)state1));
      assertFalse(state2.equals((Object)state0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(state0.equals((Object)state2));
      assertEquals(0L, state2.getLastAlightedTimeSeconds());
      assertFalse(state2.isCarParked());
      assertEquals(0, state2.getPreTransitTimeDelta());
      assertTrue(state2.isFinal());
      assertFalse(state2.isBikeRenting());
      assertEquals(1392410486000L, state2.getTimeInMillis());
      assertEquals(1205.0, state2.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1205, state2.getAbsTimeDeltaSeconds());
      assertEquals(1392409281L, state2.getStartTimeSeconds());
      assertEquals(1205L, state2.getElapsedTimeSeconds());
      assertEquals(1392410486L, state2.getTimeSeconds());
      assertEquals(1205, state2.getTimeDeltaSeconds());
      assertEquals(0, state2.getPreTransitTime());
      assertEquals(0, state2.getNumBoardings());
      assertEquals((-413.82415965173124), state2.getWeightDelta(), 0.01);
      assertEquals(0.0, state2.getWalkDistance(), 0.01);
      assertNull(state2.getBackMode());
      assertFalse(state2.isOnboard());
      assertEquals(0.0, state2.getWalkDistanceDelta(), 0.01);
      assertEquals((-413.82415965173124), state2.getWeight(), 0.01);
      assertNull(state2.getNonTransitMode());
      assertFalse(state2.isBackWalkingBike());
      assertEquals(0, state2.getLastNextArrivalDelta());
      assertFalse(state2.getReverseOptimizing());
      assertFalse(state2.isEverBoarded());
      assertEquals(0.0, state2.getWalkAtLastTransit(), 0.01);
      assertNull(state2.getZone());
      assertEquals(0.0, state2.getWalkSinceLastTransit(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("68e=`J", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(1, intersectionVertex0.getDegreeOut());
      assertTrue(intersectionVertex0.inferredFreeFlowing());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(1, intersectionVertex0.getDegreeIn());
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertNull(state0.getZone());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.isEverBoarded());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertNull(state0.getNonTransitMode());
      assertTrue(state0.isFinal());
      assertNull(simpleEdge0.getName());
      assertEquals(0.0, simpleEdge0.getDistance(), 0.01);
      assertTrue(simpleEdge0.vertexTypesValid());
      assertEquals(12, simpleEdge0.getId());
      assertFalse(simpleEdge0.isPartial());
      assertFalse(boolean2);
      
      boolean boolean3 = multiShortestPathTree0.visit(state2);
      assertNotSame(state2, state1);
      assertNotSame(state2, state0);
      assertNotSame(string0, string1);
      assertNotSame(state0, state2);
      assertSame(state0, state1);
      assertEquals((-413.82415965173124), state2.weight, 0.01);
      assertEquals(0.0, state2.walkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertFalse(state2.equals((Object)state1));
      assertFalse(state2.equals((Object)state0));
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(state0.equals((Object)state2));
      assertEquals(0L, state2.getLastAlightedTimeSeconds());
      assertFalse(state2.isCarParked());
      assertEquals(0, state2.getPreTransitTimeDelta());
      assertTrue(state2.isFinal());
      assertFalse(state2.isBikeRenting());
      assertEquals(1392410486000L, state2.getTimeInMillis());
      assertEquals(1205.0, state2.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1205, state2.getAbsTimeDeltaSeconds());
      assertEquals(1392409281L, state2.getStartTimeSeconds());
      assertEquals(1205L, state2.getElapsedTimeSeconds());
      assertEquals(1392410486L, state2.getTimeSeconds());
      assertEquals(1205, state2.getTimeDeltaSeconds());
      assertEquals(0, state2.getPreTransitTime());
      assertEquals(0, state2.getNumBoardings());
      assertEquals((-413.82415965173124), state2.getWeightDelta(), 0.01);
      assertEquals(0.0, state2.getWalkDistance(), 0.01);
      assertNull(state2.getBackMode());
      assertFalse(state2.isOnboard());
      assertEquals(0.0, state2.getWalkDistanceDelta(), 0.01);
      assertEquals((-413.82415965173124), state2.getWeight(), 0.01);
      assertNull(state2.getNonTransitMode());
      assertFalse(state2.isBackWalkingBike());
      assertEquals(0, state2.getLastNextArrivalDelta());
      assertFalse(state2.getReverseOptimizing());
      assertFalse(state2.isEverBoarded());
      assertEquals(0.0, state2.getWalkAtLastTransit(), 0.01);
      assertNull(state2.getZone());
      assertEquals(0.0, state2.getWalkSinceLastTransit(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("68e=`J", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(1, intersectionVertex0.getDegreeOut());
      assertTrue(intersectionVertex0.inferredFreeFlowing());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(1, intersectionVertex0.getDegreeIn());
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertNull(state0.getZone());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.isEverBoarded());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertNull(state0.getNonTransitMode());
      assertTrue(state0.isFinal());
      assertNull(simpleEdge0.getName());
      assertEquals(0.0, simpleEdge0.getDistance(), 0.01);
      assertTrue(simpleEdge0.vertexTypesValid());
      assertEquals(12, simpleEdge0.getId());
      assertFalse(simpleEdge0.isPartial());
      assertFalse(boolean3);
      
      StreetTraversalPermission streetTraversalPermission0 = StreetTraversalPermission.ALL;
      ElevatorHopEdge elevatorHopEdge0 = new ElevatorHopEdge(intersectionVertex0, intersectionVertex0, streetTraversalPermission0);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertTrue(elevatorHopEdge0.wheelchairAccessible);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertNotNull(elevatorHopEdge0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, graph0.countVertices());
      assertTrue(elevatorHopEdge0.vertexTypesValid());
      assertEquals(13, elevatorHopEdge0.getId());
      assertNull(elevatorHopEdge0.getName());
      assertEquals(0.0, elevatorHopEdge0.getDistance(), 0.01);
      assertFalse(elevatorHopEdge0.isPartial());
      assertEquals("68e=`J", intersectionVertex0.getName());
      assertEquals(2, intersectionVertex0.getDegreeIn());
      assertEquals(2, intersectionVertex0.getDegreeOut());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(0, intersectionVertex0.getIndex());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      
      State state3 = elevatorHopEdge0.traverse(state0);
      assertNotSame(string0, string1);
      assertNotSame(state3, state0);
      assertNotSame(state3, state1);
      assertNotSame(state3, state2);
      assertNotSame(state0, state3);
      assertNotSame(state0, state2);
      assertSame(state0, state1);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertTrue(elevatorHopEdge0.wheelchairAccessible);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(20.0, state3.weight, 0.01);
      assertEquals(0.0, state3.walkDistance, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertNotNull(state3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(state3.equals((Object)state0));
      assertFalse(state3.equals((Object)state1));
      assertFalse(state3.equals((Object)state2));
      assertFalse(state0.equals((Object)state2));
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertTrue(elevatorHopEdge0.vertexTypesValid());
      assertEquals(13, elevatorHopEdge0.getId());
      assertNull(elevatorHopEdge0.getName());
      assertEquals(0.0, elevatorHopEdge0.getDistance(), 0.01);
      assertFalse(elevatorHopEdge0.isPartial());
      assertEquals("68e=`J", intersectionVertex0.getName());
      assertEquals(2, intersectionVertex0.getDegreeIn());
      assertEquals(2, intersectionVertex0.getDegreeOut());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(0, intersectionVertex0.getIndex());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertEquals(TraverseMode.WALK, state3.getBackMode());
      assertTrue(state3.isFinal());
      assertEquals(20, state3.getAbsTimeDeltaSeconds());
      assertEquals(1392409281L, state3.getStartTimeSeconds());
      assertEquals(20.0, state3.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state3.getReverseOptimizing());
      assertEquals(0L, state3.getLastAlightedTimeSeconds());
      assertFalse(state3.isBikeRenting());
      assertNull(state3.getNonTransitMode());
      assertEquals(0, state3.getNumBoardings());
      assertEquals(1392409301L, state3.getTimeSeconds());
      assertEquals(20, state3.getTimeDeltaSeconds());
      assertEquals(0, state3.getPreTransitTime());
      assertEquals(0.0, state3.getWalkDistance(), 0.01);
      assertEquals(20.0, state3.getWeightDelta(), 0.01);
      assertNull(state3.getZone());
      assertEquals(20.0, state3.getWeight(), 0.01);
      assertFalse(state3.isOnboard());
      assertEquals(0.0, state3.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state3.getWalkAtLastTransit(), 0.01);
      assertEquals(20L, state3.getElapsedTimeSeconds());
      assertFalse(state3.isCarParked());
      assertEquals(0, state3.getLastNextArrivalDelta());
      assertEquals(0.0, state3.getWalkSinceLastTransit(), 0.01);
      assertEquals(1392409301000L, state3.getTimeInMillis());
      assertFalse(state3.isBackWalkingBike());
      assertFalse(state3.isEverBoarded());
      assertEquals(0, state3.getPreTransitTimeDelta());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertNull(state0.getZone());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.isEverBoarded());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertNull(state0.getNonTransitMode());
      assertTrue(state0.isFinal());
      
      boolean boolean4 = MultiShortestPathTree.dominates(state2, state3);
      assertNotSame(string0, string1);
      assertNotSame(state0, state3);
      assertNotSame(state0, state2);
      assertSame(state0, state1);
      assertNotSame(state2, state1);
      assertNotSame(state2, state3);
      assertNotSame(state2, state0);
      assertNotSame(state3, state0);
      assertNotSame(state3, state1);
      assertNotSame(state3, state2);
      assertEquals((-413.82415965173124), state2.weight, 0.01);
      assertEquals(0.0, state2.walkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertTrue(elevatorHopEdge0.wheelchairAccessible);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(20.0, state3.weight, 0.01);
      assertEquals(0.0, state3.walkDistance, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertFalse(string0.equals((Object)string1));
      assertFalse(state0.equals((Object)state3));
      assertFalse(state0.equals((Object)state2));
      assertFalse(state2.equals((Object)state1));
      assertFalse(state2.equals((Object)state3));
      assertFalse(state2.equals((Object)state0));
      assertFalse(state3.equals((Object)state0));
      assertFalse(state3.equals((Object)state1));
      assertFalse(state3.equals((Object)state2));
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertEquals(0L, state2.getLastAlightedTimeSeconds());
      assertFalse(state2.isCarParked());
      assertEquals(0, state2.getPreTransitTimeDelta());
      assertTrue(state2.isFinal());
      assertFalse(state2.isBikeRenting());
      assertEquals(1392410486000L, state2.getTimeInMillis());
      assertEquals(1205.0, state2.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1205, state2.getAbsTimeDeltaSeconds());
      assertEquals(1392409281L, state2.getStartTimeSeconds());
      assertEquals(1205L, state2.getElapsedTimeSeconds());
      assertEquals(1392410486L, state2.getTimeSeconds());
      assertEquals(1205, state2.getTimeDeltaSeconds());
      assertEquals(0, state2.getPreTransitTime());
      assertEquals(0, state2.getNumBoardings());
      assertEquals((-413.82415965173124), state2.getWeightDelta(), 0.01);
      assertEquals(0.0, state2.getWalkDistance(), 0.01);
      assertNull(state2.getBackMode());
      assertFalse(state2.isOnboard());
      assertEquals(0.0, state2.getWalkDistanceDelta(), 0.01);
      assertEquals((-413.82415965173124), state2.getWeight(), 0.01);
      assertNull(state2.getNonTransitMode());
      assertFalse(state2.isBackWalkingBike());
      assertEquals(0, state2.getLastNextArrivalDelta());
      assertFalse(state2.getReverseOptimizing());
      assertFalse(state2.isEverBoarded());
      assertEquals(0.0, state2.getWalkAtLastTransit(), 0.01);
      assertNull(state2.getZone());
      assertEquals(0.0, state2.getWalkSinceLastTransit(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertTrue(elevatorHopEdge0.vertexTypesValid());
      assertEquals(13, elevatorHopEdge0.getId());
      assertNull(elevatorHopEdge0.getName());
      assertEquals(0.0, elevatorHopEdge0.getDistance(), 0.01);
      assertFalse(elevatorHopEdge0.isPartial());
      assertEquals("68e=`J", intersectionVertex0.getName());
      assertEquals(2, intersectionVertex0.getDegreeIn());
      assertEquals(2, intersectionVertex0.getDegreeOut());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(0, intersectionVertex0.getIndex());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertEquals(TraverseMode.WALK, state3.getBackMode());
      assertTrue(state3.isFinal());
      assertEquals(20, state3.getAbsTimeDeltaSeconds());
      assertEquals(1392409281L, state3.getStartTimeSeconds());
      assertEquals(20.0, state3.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state3.getReverseOptimizing());
      assertEquals(0L, state3.getLastAlightedTimeSeconds());
      assertFalse(state3.isBikeRenting());
      assertNull(state3.getNonTransitMode());
      assertEquals(0, state3.getNumBoardings());
      assertEquals(1392409301L, state3.getTimeSeconds());
      assertEquals(20, state3.getTimeDeltaSeconds());
      assertEquals(0, state3.getPreTransitTime());
      assertEquals(0.0, state3.getWalkDistance(), 0.01);
      assertEquals(20.0, state3.getWeightDelta(), 0.01);
      assertNull(state3.getZone());
      assertEquals(20.0, state3.getWeight(), 0.01);
      assertFalse(state3.isOnboard());
      assertEquals(0.0, state3.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state3.getWalkAtLastTransit(), 0.01);
      assertEquals(20L, state3.getElapsedTimeSeconds());
      assertFalse(state3.isCarParked());
      assertEquals(0, state3.getLastNextArrivalDelta());
      assertEquals(0.0, state3.getWalkSinceLastTransit(), 0.01);
      assertEquals(1392409301000L, state3.getTimeInMillis());
      assertFalse(state3.isBackWalkingBike());
      assertFalse(state3.isEverBoarded());
      assertEquals(0, state3.getPreTransitTimeDelta());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertNull(state0.getZone());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.isEverBoarded());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertNull(state0.getNonTransitMode());
      assertTrue(state0.isFinal());
      assertNull(simpleEdge0.getName());
      assertEquals(0.0, simpleEdge0.getDistance(), 0.01);
      assertTrue(simpleEdge0.vertexTypesValid());
      assertEquals(12, simpleEdge0.getId());
      assertFalse(simpleEdge0.isPartial());
      assertFalse(boolean4);
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      String string0 = "";
      TraverseMode traverseMode0 = TraverseMode.TRAM;
      OptimizeType optimizeType0 = OptimizeType.FLAT;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0, optimizeType0);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.batch);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertNotNull(routingRequest0);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.batch);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertNotNull(multiShortestPathTree0);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      Graph graph0 = new Graph();
      assertNotNull(graph0);
      assertEquals(0, graph0.countVertices());
      
      ExitVertex exitVertex0 = new ExitVertex(graph0, string0, routingRequest0.maxTransfers, routingRequest0.alightSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.batch);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(exitVertex0.trafficLight);
      assertFalse(exitVertex0.freeFlowing);
      assertNotNull(exitVertex0);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, graph0.countVertices());
      assertNull(exitVertex0.getExitName());
      assertEquals(1, exitVertex0.getMaxIndex());
      assertFalse(exitVertex0.inferredFreeFlowing());
      assertEquals(2.0, exitVertex0.getLon(), 0.01);
      assertEquals("", exitVertex0.getName());
      assertEquals(0.0, exitVertex0.getY(), 0.01);
      assertEquals(0, exitVertex0.getDegreeIn());
      assertEquals(0.0, exitVertex0.getLat(), 0.01);
      assertEquals(0, exitVertex0.getDegreeOut());
      assertEquals(0, exitVertex0.getIndex());
      assertEquals("", exitVertex0.getLabel());
      assertEquals(2.0, exitVertex0.getX(), 0.01);
      
      String string1 = "";
      routingRequest0.setRoutingContext(graph0, string1, routingRequest0.routerId);
      assertSame(string1, string0);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.batch);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, graph0.countVertices());
      
      State state0 = new State(exitVertex0, multiShortestPathTree0.options);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.batch);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(exitVertex0.trafficLight);
      assertFalse(exitVertex0.freeFlowing);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertNotNull(state0);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertNull(exitVertex0.getExitName());
      assertEquals(1, exitVertex0.getMaxIndex());
      assertFalse(exitVertex0.inferredFreeFlowing());
      assertEquals(2.0, exitVertex0.getLon(), 0.01);
      assertEquals("", exitVertex0.getName());
      assertEquals(0.0, exitVertex0.getY(), 0.01);
      assertEquals(0, exitVertex0.getDegreeIn());
      assertEquals(0.0, exitVertex0.getLat(), 0.01);
      assertEquals(0, exitVertex0.getDegreeOut());
      assertEquals(0, exitVertex0.getIndex());
      assertEquals("", exitVertex0.getLabel());
      assertEquals(2.0, exitVertex0.getX(), 0.01);
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertNull(state0.getNonTransitMode());
      assertFalse(state0.getReverseOptimizing());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertTrue(state0.isFinal());
      assertFalse(state0.isBikeRenting());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isEverBoarded());
      
      double double0 = (-414.2113485592108);
      state0.weight = double0;
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertNull(exitVertex0.getExitName());
      assertEquals(1, exitVertex0.getMaxIndex());
      assertFalse(exitVertex0.inferredFreeFlowing());
      assertEquals(2.0, exitVertex0.getLon(), 0.01);
      assertEquals("", exitVertex0.getName());
      assertEquals(0.0, exitVertex0.getY(), 0.01);
      assertEquals(0, exitVertex0.getDegreeIn());
      assertEquals(0.0, exitVertex0.getLat(), 0.01);
      assertEquals(0, exitVertex0.getDegreeOut());
      assertEquals(0, exitVertex0.getIndex());
      assertEquals("", exitVertex0.getLabel());
      assertEquals(2.0, exitVertex0.getX(), 0.01);
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0, state0.getNumBoardings());
      assertNull(state0.getNonTransitMode());
      assertFalse(state0.getReverseOptimizing());
      assertFalse(state0.isOnboard());
      assertEquals((-414.2113485592108), state0.getWeight(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertTrue(state0.isFinal());
      assertFalse(state0.isBikeRenting());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isEverBoarded());
      
      boolean boolean0 = multiShortestPathTree0.add(state0);
      assertSame(string0, string1);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.batch);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(exitVertex0.trafficLight);
      assertFalse(exitVertex0.freeFlowing);
      assertEquals((-414.2113485592108), state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertNull(exitVertex0.getExitName());
      assertEquals(1, exitVertex0.getMaxIndex());
      assertFalse(exitVertex0.inferredFreeFlowing());
      assertEquals(2.0, exitVertex0.getLon(), 0.01);
      assertEquals("", exitVertex0.getName());
      assertEquals(0.0, exitVertex0.getY(), 0.01);
      assertEquals(0, exitVertex0.getDegreeIn());
      assertEquals(0.0, exitVertex0.getLat(), 0.01);
      assertEquals(0, exitVertex0.getDegreeOut());
      assertEquals(0, exitVertex0.getIndex());
      assertEquals("", exitVertex0.getLabel());
      assertEquals(2.0, exitVertex0.getX(), 0.01);
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0, state0.getNumBoardings());
      assertNull(state0.getNonTransitMode());
      assertFalse(state0.getReverseOptimizing());
      assertFalse(state0.isOnboard());
      assertEquals((-414.2113485592108), state0.getWeight(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertTrue(state0.isFinal());
      assertFalse(state0.isBikeRenting());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isEverBoarded());
      assertTrue(boolean0);
      
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.batch);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertNotNull(set0);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      
      boolean boolean1 = multiShortestPathTree0.add(state0);
      assertSame(string0, string1);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.batch);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(exitVertex0.trafficLight);
      assertFalse(exitVertex0.freeFlowing);
      assertEquals((-414.2113485592108), state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertFalse(boolean1 == boolean0);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertNull(exitVertex0.getExitName());
      assertEquals(1, exitVertex0.getMaxIndex());
      assertFalse(exitVertex0.inferredFreeFlowing());
      assertEquals(2.0, exitVertex0.getLon(), 0.01);
      assertEquals("", exitVertex0.getName());
      assertEquals(0.0, exitVertex0.getY(), 0.01);
      assertEquals(0, exitVertex0.getDegreeIn());
      assertEquals(0.0, exitVertex0.getLat(), 0.01);
      assertEquals(0, exitVertex0.getDegreeOut());
      assertEquals(0, exitVertex0.getIndex());
      assertEquals("", exitVertex0.getLabel());
      assertEquals(2.0, exitVertex0.getX(), 0.01);
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0, state0.getNumBoardings());
      assertNull(state0.getNonTransitMode());
      assertFalse(state0.getReverseOptimizing());
      assertFalse(state0.isOnboard());
      assertEquals((-414.2113485592108), state0.getWeight(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertTrue(state0.isFinal());
      assertFalse(state0.isBikeRenting());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isEverBoarded());
      assertFalse(boolean1);
      
      State state1 = multiShortestPathTree0.getState(exitVertex0);
      assertSame(string0, string1);
      assertSame(state1, state0);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.batch);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(exitVertex0.trafficLight);
      assertFalse(exitVertex0.freeFlowing);
      assertEquals((-414.2113485592108), state1.weight, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertNotNull(state1);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertNull(exitVertex0.getExitName());
      assertEquals(1, exitVertex0.getMaxIndex());
      assertFalse(exitVertex0.inferredFreeFlowing());
      assertEquals(2.0, exitVertex0.getLon(), 0.01);
      assertEquals("", exitVertex0.getName());
      assertEquals(0.0, exitVertex0.getY(), 0.01);
      assertEquals(0, exitVertex0.getDegreeIn());
      assertEquals(0.0, exitVertex0.getLat(), 0.01);
      assertEquals(0, exitVertex0.getDegreeOut());
      assertEquals(0, exitVertex0.getIndex());
      assertEquals("", exitVertex0.getLabel());
      assertEquals(2.0, exitVertex0.getX(), 0.01);
      assertTrue(state1.isFinal());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state1.getStartTimeSeconds());
      assertFalse(state1.getReverseOptimizing());
      assertNull(state1.getNonTransitMode());
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertFalse(state1.isCarParked());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertNull(state1.getBackMode());
      assertEquals(1392409281L, state1.getTimeSeconds());
      assertFalse(state1.isEverBoarded());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertNull(state1.getZone());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertFalse(state1.isOnboard());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertEquals((-414.2113485592108), state1.getWeight(), 0.01);
      assertEquals(1392409281000L, state1.getTimeInMillis());
      assertFalse(state1.isBikeRenting());
      assertEquals(0, state1.getPreTransitTime());
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertEquals(0, state1.getNumBoardings());
      
      int int0 = multiShortestPathTree0.getVertexCount();
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.batch);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, int0);
      
      int int1 = 1205;
      SimpleEdge simpleEdge0 = new SimpleEdge(exitVertex0, exitVertex0, routingRequest0.maxWeight, int1);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.batch);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(exitVertex0.trafficLight);
      assertFalse(exitVertex0.freeFlowing);
      assertNotNull(simpleEdge0);
      assertFalse(int1 == int0);
      assertNull(simpleEdge0.getName());
      assertTrue(simpleEdge0.vertexTypesValid());
      assertEquals(14, simpleEdge0.getId());
      assertFalse(simpleEdge0.isPartial());
      assertEquals(0.0, simpleEdge0.getDistance(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, graph0.countVertices());
      assertNull(exitVertex0.getExitName());
      assertEquals(1, exitVertex0.getMaxIndex());
      assertTrue(exitVertex0.inferredFreeFlowing());
      assertEquals(2.0, exitVertex0.getLon(), 0.01);
      assertEquals("", exitVertex0.getName());
      assertEquals(0.0, exitVertex0.getY(), 0.01);
      assertEquals(0.0, exitVertex0.getLat(), 0.01);
      assertEquals(1, exitVertex0.getDegreeIn());
      assertEquals(0, exitVertex0.getIndex());
      assertEquals(1, exitVertex0.getDegreeOut());
      assertEquals("", exitVertex0.getLabel());
      assertEquals(2.0, exitVertex0.getX(), 0.01);
      
      State state2 = simpleEdge0.traverse(state1);
      assertSame(string0, string1);
      assertNotSame(state2, state1);
      assertNotSame(state2, state0);
      assertNotSame(state1, state2);
      assertSame(state1, state0);
      assertEquals(1.7976931348623157E308, state2.weight, 0.01);
      assertEquals(0.0, state2.walkDistance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.batch);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(exitVertex0.trafficLight);
      assertFalse(exitVertex0.freeFlowing);
      assertEquals((-414.2113485592108), state1.weight, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertNotNull(state2);
      assertFalse(int1 == int0);
      assertFalse(state2.equals((Object)state1));
      assertFalse(state2.equals((Object)state0));
      assertNull(simpleEdge0.getName());
      assertTrue(simpleEdge0.vertexTypesValid());
      assertEquals(14, simpleEdge0.getId());
      assertFalse(simpleEdge0.isPartial());
      assertEquals(0.0, simpleEdge0.getDistance(), 0.01);
      assertFalse(state2.isCarParked());
      assertEquals(1392409281L, state2.getStartTimeSeconds());
      assertEquals(1392410486000L, state2.getTimeInMillis());
      assertEquals(0.0, state2.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state2.getLastAlightedTimeSeconds());
      assertEquals(1205L, state2.getElapsedTimeSeconds());
      assertEquals(1205, state2.getAbsTimeDeltaSeconds());
      assertEquals(1205.0, state2.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state2.getLastNextArrivalDelta());
      assertEquals(0.0, state2.getWalkSinceLastTransit(), 0.01);
      assertEquals(1.7976931348623157E308, state2.getWeightDelta(), 0.01);
      assertNull(state2.getZone());
      assertFalse(state2.isBackWalkingBike());
      assertFalse(state2.isEverBoarded());
      assertEquals(0, state2.getPreTransitTimeDelta());
      assertEquals(1.7976931348623157E308, state2.getWeight(), 0.01);
      assertNull(state2.getBackMode());
      assertEquals(0.0, state2.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state2.getWalkDistance(), 0.01);
      assertFalse(state2.isOnboard());
      assertFalse(state2.getReverseOptimizing());
      assertNull(state2.getNonTransitMode());
      assertTrue(state2.isFinal());
      assertEquals(1205, state2.getTimeDeltaSeconds());
      assertFalse(state2.isBikeRenting());
      assertEquals(0, state2.getPreTransitTime());
      assertEquals(0, state2.getNumBoardings());
      assertEquals(1392410486L, state2.getTimeSeconds());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertNull(exitVertex0.getExitName());
      assertEquals(1, exitVertex0.getMaxIndex());
      assertTrue(exitVertex0.inferredFreeFlowing());
      assertEquals(2.0, exitVertex0.getLon(), 0.01);
      assertEquals("", exitVertex0.getName());
      assertEquals(0.0, exitVertex0.getY(), 0.01);
      assertEquals(0.0, exitVertex0.getLat(), 0.01);
      assertEquals(1, exitVertex0.getDegreeIn());
      assertEquals(0, exitVertex0.getIndex());
      assertEquals(1, exitVertex0.getDegreeOut());
      assertEquals("", exitVertex0.getLabel());
      assertEquals(2.0, exitVertex0.getX(), 0.01);
      assertTrue(state1.isFinal());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state1.getStartTimeSeconds());
      assertFalse(state1.getReverseOptimizing());
      assertNull(state1.getNonTransitMode());
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertFalse(state1.isCarParked());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertNull(state1.getBackMode());
      assertEquals(1392409281L, state1.getTimeSeconds());
      assertFalse(state1.isEverBoarded());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertNull(state1.getZone());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertFalse(state1.isOnboard());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertEquals((-414.2113485592108), state1.getWeight(), 0.01);
      assertEquals(1392409281000L, state1.getTimeInMillis());
      assertFalse(state1.isBikeRenting());
      assertEquals(0, state1.getPreTransitTime());
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertEquals(0, state1.getNumBoardings());
      
      boolean boolean2 = multiShortestPathTree0.add(state2);
      assertSame(string0, string1);
      assertNotSame(state2, state1);
      assertNotSame(state2, state0);
      assertNotSame(state1, state2);
      assertSame(state1, state0);
      assertEquals(1.7976931348623157E308, state2.weight, 0.01);
      assertEquals(0.0, state2.walkDistance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.batch);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(exitVertex0.trafficLight);
      assertFalse(exitVertex0.freeFlowing);
      assertEquals((-414.2113485592108), state1.weight, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertFalse(int1 == int0);
      assertFalse(state2.equals((Object)state1));
      assertFalse(state2.equals((Object)state0));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(state1.equals((Object)state2));
      assertNull(simpleEdge0.getName());
      assertTrue(simpleEdge0.vertexTypesValid());
      assertEquals(14, simpleEdge0.getId());
      assertFalse(simpleEdge0.isPartial());
      assertEquals(0.0, simpleEdge0.getDistance(), 0.01);
      assertFalse(state2.isCarParked());
      assertEquals(1392409281L, state2.getStartTimeSeconds());
      assertEquals(1392410486000L, state2.getTimeInMillis());
      assertEquals(0.0, state2.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state2.getLastAlightedTimeSeconds());
      assertEquals(1205L, state2.getElapsedTimeSeconds());
      assertEquals(1205, state2.getAbsTimeDeltaSeconds());
      assertEquals(1205.0, state2.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state2.getLastNextArrivalDelta());
      assertEquals(0.0, state2.getWalkSinceLastTransit(), 0.01);
      assertEquals(1.7976931348623157E308, state2.getWeightDelta(), 0.01);
      assertNull(state2.getZone());
      assertFalse(state2.isBackWalkingBike());
      assertFalse(state2.isEverBoarded());
      assertEquals(0, state2.getPreTransitTimeDelta());
      assertEquals(1.7976931348623157E308, state2.getWeight(), 0.01);
      assertNull(state2.getBackMode());
      assertEquals(0.0, state2.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state2.getWalkDistance(), 0.01);
      assertFalse(state2.isOnboard());
      assertFalse(state2.getReverseOptimizing());
      assertNull(state2.getNonTransitMode());
      assertTrue(state2.isFinal());
      assertEquals(1205, state2.getTimeDeltaSeconds());
      assertFalse(state2.isBikeRenting());
      assertEquals(0, state2.getPreTransitTime());
      assertEquals(0, state2.getNumBoardings());
      assertEquals(1392410486L, state2.getTimeSeconds());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertNull(exitVertex0.getExitName());
      assertEquals(1, exitVertex0.getMaxIndex());
      assertTrue(exitVertex0.inferredFreeFlowing());
      assertEquals(2.0, exitVertex0.getLon(), 0.01);
      assertEquals("", exitVertex0.getName());
      assertEquals(0.0, exitVertex0.getY(), 0.01);
      assertEquals(0.0, exitVertex0.getLat(), 0.01);
      assertEquals(1, exitVertex0.getDegreeIn());
      assertEquals(0, exitVertex0.getIndex());
      assertEquals(1, exitVertex0.getDegreeOut());
      assertEquals("", exitVertex0.getLabel());
      assertEquals(2.0, exitVertex0.getX(), 0.01);
      assertTrue(state1.isFinal());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state1.getStartTimeSeconds());
      assertFalse(state1.getReverseOptimizing());
      assertNull(state1.getNonTransitMode());
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertFalse(state1.isCarParked());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertNull(state1.getBackMode());
      assertEquals(1392409281L, state1.getTimeSeconds());
      assertFalse(state1.isEverBoarded());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertNull(state1.getZone());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertFalse(state1.isOnboard());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertEquals((-414.2113485592108), state1.getWeight(), 0.01);
      assertEquals(1392409281000L, state1.getTimeInMillis());
      assertFalse(state1.isBikeRenting());
      assertEquals(0, state1.getPreTransitTime());
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertEquals(0, state1.getNumBoardings());
      assertFalse(boolean2);
      
      boolean boolean3 = MultiShortestPathTree.dominates(state2, state2);
      assertSame(string0, string1);
      assertNotSame(state2, state1);
      assertNotSame(state2, state0);
      assertNotSame(state1, state2);
      assertSame(state1, state0);
      assertEquals(1.7976931348623157E308, state2.weight, 0.01);
      assertEquals(0.0, state2.walkDistance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.batch);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(exitVertex0.trafficLight);
      assertFalse(exitVertex0.freeFlowing);
      assertEquals((-414.2113485592108), state1.weight, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertFalse(int1 == int0);
      assertFalse(state2.equals((Object)state1));
      assertFalse(state2.equals((Object)state0));
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(state1.equals((Object)state2));
      assertNull(simpleEdge0.getName());
      assertTrue(simpleEdge0.vertexTypesValid());
      assertEquals(14, simpleEdge0.getId());
      assertFalse(simpleEdge0.isPartial());
      assertEquals(0.0, simpleEdge0.getDistance(), 0.01);
      assertFalse(state2.isCarParked());
      assertEquals(1392409281L, state2.getStartTimeSeconds());
      assertEquals(1392410486000L, state2.getTimeInMillis());
      assertEquals(0.0, state2.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state2.getLastAlightedTimeSeconds());
      assertEquals(1205L, state2.getElapsedTimeSeconds());
      assertEquals(1205, state2.getAbsTimeDeltaSeconds());
      assertEquals(1205.0, state2.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state2.getLastNextArrivalDelta());
      assertEquals(0.0, state2.getWalkSinceLastTransit(), 0.01);
      assertEquals(1.7976931348623157E308, state2.getWeightDelta(), 0.01);
      assertNull(state2.getZone());
      assertFalse(state2.isBackWalkingBike());
      assertFalse(state2.isEverBoarded());
      assertEquals(0, state2.getPreTransitTimeDelta());
      assertEquals(1.7976931348623157E308, state2.getWeight(), 0.01);
      assertNull(state2.getBackMode());
      assertEquals(0.0, state2.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state2.getWalkDistance(), 0.01);
      assertFalse(state2.isOnboard());
      assertFalse(state2.getReverseOptimizing());
      assertNull(state2.getNonTransitMode());
      assertTrue(state2.isFinal());
      assertEquals(1205, state2.getTimeDeltaSeconds());
      assertFalse(state2.isBikeRenting());
      assertEquals(0, state2.getPreTransitTime());
      assertEquals(0, state2.getNumBoardings());
      assertEquals(1392410486L, state2.getTimeSeconds());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertNull(exitVertex0.getExitName());
      assertEquals(1, exitVertex0.getMaxIndex());
      assertTrue(exitVertex0.inferredFreeFlowing());
      assertEquals(2.0, exitVertex0.getLon(), 0.01);
      assertEquals("", exitVertex0.getName());
      assertEquals(0.0, exitVertex0.getY(), 0.01);
      assertEquals(0.0, exitVertex0.getLat(), 0.01);
      assertEquals(1, exitVertex0.getDegreeIn());
      assertEquals(0, exitVertex0.getIndex());
      assertEquals(1, exitVertex0.getDegreeOut());
      assertEquals("", exitVertex0.getLabel());
      assertEquals(2.0, exitVertex0.getX(), 0.01);
      assertTrue(state1.isFinal());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state1.getStartTimeSeconds());
      assertFalse(state1.getReverseOptimizing());
      assertNull(state1.getNonTransitMode());
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertFalse(state1.isCarParked());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertNull(state1.getBackMode());
      assertEquals(1392409281L, state1.getTimeSeconds());
      assertFalse(state1.isEverBoarded());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertNull(state1.getZone());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertFalse(state1.isOnboard());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertEquals((-414.2113485592108), state1.getWeight(), 0.01);
      assertEquals(1392409281000L, state1.getTimeInMillis());
      assertFalse(state1.isBikeRenting());
      assertEquals(0, state1.getPreTransitTime());
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertEquals(0, state1.getNumBoardings());
      assertTrue(boolean3);
      
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.batch);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertNotNull(collection0);
      assertFalse(collection0.contains(state2));
      assertTrue(collection0.contains(state1));
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      String string0 = "68e=`J";
      TraverseMode traverseMode0 = TraverseMode.TRAM;
      OptimizeType optimizeType0 = OptimizeType.FLAT;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0, optimizeType0);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertNotNull(routingRequest0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertNotNull(multiShortestPathTree0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      Graph graph0 = new Graph();
      assertNotNull(graph0);
      assertEquals(0, graph0.countVertices());
      
      IntersectionVertex intersectionVertex0 = new IntersectionVertex(graph0, routingRequest0.routerId, routingRequest0.carDecelerationSpeed, routingRequest0.carDropoffTime, string0);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertNotNull(intersectionVertex0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, graph0.countVertices());
      assertEquals("68e=`J", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      
      routingRequest0.setRoutingContext(graph0, routingRequest0.routerId, string0);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, graph0.countVertices());
      
      State state0 = new State(intersectionVertex0, multiShortestPathTree0.options);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertNotNull(state0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("68e=`J", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isBikeRenting());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertTrue(state0.isFinal());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertNull(state0.getNonTransitMode());
      assertFalse(state0.isEverBoarded());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      
      boolean boolean0 = multiShortestPathTree0.add(state0);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("68e=`J", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isBikeRenting());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertTrue(state0.isFinal());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertNull(state0.getNonTransitMode());
      assertFalse(state0.isEverBoarded());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertTrue(boolean0);
      
      double double0 = (-427.67491499774206);
      state0.walkDistance = double0;
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("68e=`J", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals((-427.67491499774206), state0.getWalkSinceLastTransit(), 0.01);
      assertEquals((-427.67491499774206), state0.getWalkDistance(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isBikeRenting());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertTrue(state0.isFinal());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertNull(state0.getZone());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertNull(state0.getNonTransitMode());
      assertFalse(state0.isEverBoarded());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.isOnboard());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      
      boolean boolean1 = multiShortestPathTree0.add(state0);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals((-427.67491499774206), state0.walkDistance, 0.01);
      assertTrue(boolean1 == boolean0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("68e=`J", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals((-427.67491499774206), state0.getWalkSinceLastTransit(), 0.01);
      assertEquals((-427.67491499774206), state0.getWalkDistance(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isBikeRenting());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertTrue(state0.isFinal());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertNull(state0.getZone());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertNull(state0.getNonTransitMode());
      assertFalse(state0.isEverBoarded());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.isOnboard());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertTrue(boolean1);
      
      State state1 = multiShortestPathTree0.getState(intersectionVertex0);
      assertSame(state1, state0);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals((-427.67491499774206), state1.walkDistance, 0.01);
      assertEquals(0.0, state1.weight, 0.01);
      assertNotNull(state1);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("68e=`J", intersectionVertex0.getName());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertEquals((-427.67491499774206), state1.getWalkSinceLastTransit(), 0.01);
      assertEquals(1392409281L, state1.getStartTimeSeconds());
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertTrue(state1.isFinal());
      assertFalse(state1.isBikeRenting());
      assertFalse(state1.isCarParked());
      assertEquals(0, state1.getPreTransitTime());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertEquals((-427.67491499774206), state1.getWalkDistance(), 0.01);
      assertFalse(state1.isEverBoarded());
      assertEquals(1392409281000L, state1.getTimeInMillis());
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertFalse(state1.isOnboard());
      assertEquals(0, state1.getNumBoardings());
      assertNull(state1.getZone());
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertFalse(state1.getReverseOptimizing());
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertEquals(1392409281L, state1.getTimeSeconds());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertNull(state1.getNonTransitMode());
      assertNull(state1.getBackMode());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      
      SimpleEdge simpleEdge0 = new SimpleEdge(intersectionVertex0, intersectionVertex0, routingRequest0.maxWeight, routingRequest0.elevatorBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertNotNull(simpleEdge0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, graph0.countVertices());
      assertEquals("68e=`J", intersectionVertex0.getName());
      assertEquals(1, intersectionVertex0.getDegreeIn());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(1, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertTrue(intersectionVertex0.inferredFreeFlowing());
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertNull(simpleEdge0.getName());
      assertFalse(simpleEdge0.isPartial());
      assertEquals(0.0, simpleEdge0.getDistance(), 0.01);
      assertTrue(simpleEdge0.vertexTypesValid());
      assertEquals(15, simpleEdge0.getId());
      
      State state2 = simpleEdge0.traverse(state0);
      assertNotSame(state0, state2);
      assertSame(state0, state1);
      assertNotSame(state2, state1);
      assertNotSame(state2, state0);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals((-427.67491499774206), state0.walkDistance, 0.01);
      assertEquals(1.7976931348623157E308, state2.weight, 0.01);
      assertEquals((-427.67491499774206), state2.walkDistance, 0.01);
      assertNotNull(state2);
      assertFalse(state2.equals((Object)state1));
      assertFalse(state2.equals((Object)state0));
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("68e=`J", intersectionVertex0.getName());
      assertEquals(1, intersectionVertex0.getDegreeIn());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(1, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertTrue(intersectionVertex0.inferredFreeFlowing());
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals((-427.67491499774206), state0.getWalkSinceLastTransit(), 0.01);
      assertEquals((-427.67491499774206), state0.getWalkDistance(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isBikeRenting());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertTrue(state0.isFinal());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertNull(state0.getZone());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertNull(state0.getNonTransitMode());
      assertFalse(state0.isEverBoarded());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.isOnboard());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertNull(simpleEdge0.getName());
      assertFalse(simpleEdge0.isPartial());
      assertEquals(0.0, simpleEdge0.getDistance(), 0.01);
      assertTrue(simpleEdge0.vertexTypesValid());
      assertEquals(15, simpleEdge0.getId());
      assertEquals(1392409371000L, state2.getTimeInMillis());
      assertFalse(state2.isBackWalkingBike());
      assertEquals(1392409371L, state2.getTimeSeconds());
      assertNull(state2.getZone());
      assertEquals(0.0, state2.getWalkAtLastTransit(), 0.01);
      assertFalse(state2.isOnboard());
      assertEquals(0.0, state2.getWalkDistanceDelta(), 0.01);
      assertEquals(90L, state2.getElapsedTimeSeconds());
      assertEquals(1392409281L, state2.getStartTimeSeconds());
      assertEquals(0, state2.getPreTransitTimeDelta());
      assertEquals(90, state2.getAbsTimeDeltaSeconds());
      assertEquals((-427.67491499774206), state2.getWalkDistance(), 0.01);
      assertEquals(1.7976931348623157E308, state2.getWeight(), 0.01);
      assertEquals(90.0, state2.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state2.getLastNextArrivalDelta());
      assertFalse(state2.isCarParked());
      assertFalse(state2.isEverBoarded());
      assertFalse(state2.getReverseOptimizing());
      assertEquals(1.7976931348623157E308, state2.getWeightDelta(), 0.01);
      assertNull(state2.getNonTransitMode());
      assertEquals(0L, state2.getLastAlightedTimeSeconds());
      assertNull(state2.getBackMode());
      assertEquals((-427.67491499774206), state2.getWalkSinceLastTransit(), 0.01);
      assertTrue(state2.isFinal());
      assertEquals(0, state2.getNumBoardings());
      assertEquals(90, state2.getTimeDeltaSeconds());
      assertFalse(state2.isBikeRenting());
      assertEquals(0, state2.getPreTransitTime());
      
      double double1 = (-413.82415965173124);
      state2.weight = double1;
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("68e=`J", intersectionVertex0.getName());
      assertEquals(1, intersectionVertex0.getDegreeIn());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(1, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertTrue(intersectionVertex0.inferredFreeFlowing());
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals((-427.67491499774206), state0.getWalkSinceLastTransit(), 0.01);
      assertEquals((-427.67491499774206), state0.getWalkDistance(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isBikeRenting());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertTrue(state0.isFinal());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertNull(state0.getZone());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertNull(state0.getNonTransitMode());
      assertFalse(state0.isEverBoarded());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.isOnboard());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertNull(simpleEdge0.getName());
      assertFalse(simpleEdge0.isPartial());
      assertEquals(0.0, simpleEdge0.getDistance(), 0.01);
      assertTrue(simpleEdge0.vertexTypesValid());
      assertEquals(15, simpleEdge0.getId());
      assertEquals(1392409371000L, state2.getTimeInMillis());
      assertFalse(state2.isBackWalkingBike());
      assertEquals(1392409371L, state2.getTimeSeconds());
      assertEquals((-413.82415965173124), state2.getWeightDelta(), 0.01);
      assertNull(state2.getZone());
      assertEquals(0.0, state2.getWalkAtLastTransit(), 0.01);
      assertEquals((-413.82415965173124), state2.getWeight(), 0.01);
      assertFalse(state2.isOnboard());
      assertEquals(0.0, state2.getWalkDistanceDelta(), 0.01);
      assertEquals(90L, state2.getElapsedTimeSeconds());
      assertEquals(1392409281L, state2.getStartTimeSeconds());
      assertEquals(0, state2.getPreTransitTimeDelta());
      assertEquals(90, state2.getAbsTimeDeltaSeconds());
      assertEquals((-427.67491499774206), state2.getWalkDistance(), 0.01);
      assertEquals(90.0, state2.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state2.getLastNextArrivalDelta());
      assertFalse(state2.isCarParked());
      assertFalse(state2.isEverBoarded());
      assertFalse(state2.getReverseOptimizing());
      assertNull(state2.getNonTransitMode());
      assertEquals(0L, state2.getLastAlightedTimeSeconds());
      assertNull(state2.getBackMode());
      assertEquals((-427.67491499774206), state2.getWalkSinceLastTransit(), 0.01);
      assertTrue(state2.isFinal());
      assertEquals(0, state2.getNumBoardings());
      assertEquals(90, state2.getTimeDeltaSeconds());
      assertFalse(state2.isBikeRenting());
      assertEquals(0, state2.getPreTransitTime());
      
      boolean boolean2 = MultiShortestPathTree.dominates(state0, state2);
      assertNotSame(state0, state2);
      assertSame(state0, state1);
      assertNotSame(state2, state1);
      assertNotSame(state2, state0);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals((-427.67491499774206), state0.walkDistance, 0.01);
      assertEquals((-427.67491499774206), state2.walkDistance, 0.01);
      assertEquals((-413.82415965173124), state2.weight, 0.01);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(state0.equals((Object)state2));
      assertFalse(state2.equals((Object)state1));
      assertFalse(state2.equals((Object)state0));
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("68e=`J", intersectionVertex0.getName());
      assertEquals(1, intersectionVertex0.getDegreeIn());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(1, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertTrue(intersectionVertex0.inferredFreeFlowing());
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals((-427.67491499774206), state0.getWalkSinceLastTransit(), 0.01);
      assertEquals((-427.67491499774206), state0.getWalkDistance(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isBikeRenting());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertTrue(state0.isFinal());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertNull(state0.getZone());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertNull(state0.getNonTransitMode());
      assertFalse(state0.isEverBoarded());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.isOnboard());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertNull(simpleEdge0.getName());
      assertFalse(simpleEdge0.isPartial());
      assertEquals(0.0, simpleEdge0.getDistance(), 0.01);
      assertTrue(simpleEdge0.vertexTypesValid());
      assertEquals(15, simpleEdge0.getId());
      assertEquals(1392409371000L, state2.getTimeInMillis());
      assertFalse(state2.isBackWalkingBike());
      assertEquals(1392409371L, state2.getTimeSeconds());
      assertEquals((-413.82415965173124), state2.getWeightDelta(), 0.01);
      assertNull(state2.getZone());
      assertEquals(0.0, state2.getWalkAtLastTransit(), 0.01);
      assertEquals((-413.82415965173124), state2.getWeight(), 0.01);
      assertFalse(state2.isOnboard());
      assertEquals(0.0, state2.getWalkDistanceDelta(), 0.01);
      assertEquals(90L, state2.getElapsedTimeSeconds());
      assertEquals(1392409281L, state2.getStartTimeSeconds());
      assertEquals(0, state2.getPreTransitTimeDelta());
      assertEquals(90, state2.getAbsTimeDeltaSeconds());
      assertEquals((-427.67491499774206), state2.getWalkDistance(), 0.01);
      assertEquals(90.0, state2.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state2.getLastNextArrivalDelta());
      assertFalse(state2.isCarParked());
      assertFalse(state2.isEverBoarded());
      assertFalse(state2.getReverseOptimizing());
      assertNull(state2.getNonTransitMode());
      assertEquals(0L, state2.getLastAlightedTimeSeconds());
      assertNull(state2.getBackMode());
      assertEquals((-427.67491499774206), state2.getWalkSinceLastTransit(), 0.01);
      assertTrue(state2.isFinal());
      assertEquals(0, state2.getNumBoardings());
      assertEquals(90, state2.getTimeDeltaSeconds());
      assertFalse(state2.isBikeRenting());
      assertEquals(0, state2.getPreTransitTime());
      assertFalse(boolean2);
      
      boolean boolean3 = multiShortestPathTree0.visit(state2);
      assertNotSame(state0, state2);
      assertSame(state0, state1);
      assertNotSame(state2, state1);
      assertNotSame(state2, state0);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals((-427.67491499774206), state0.walkDistance, 0.01);
      assertEquals((-427.67491499774206), state2.walkDistance, 0.01);
      assertEquals((-413.82415965173124), state2.weight, 0.01);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(state0.equals((Object)state2));
      assertFalse(state2.equals((Object)state1));
      assertFalse(state2.equals((Object)state0));
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals("68e=`J", intersectionVertex0.getName());
      assertEquals(1, intersectionVertex0.getDegreeIn());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(1, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertTrue(intersectionVertex0.inferredFreeFlowing());
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals((-427.67491499774206), state0.getWalkSinceLastTransit(), 0.01);
      assertEquals((-427.67491499774206), state0.getWalkDistance(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isBikeRenting());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertTrue(state0.isFinal());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertNull(state0.getZone());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertNull(state0.getNonTransitMode());
      assertFalse(state0.isEverBoarded());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.isOnboard());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertNull(simpleEdge0.getName());
      assertFalse(simpleEdge0.isPartial());
      assertEquals(0.0, simpleEdge0.getDistance(), 0.01);
      assertTrue(simpleEdge0.vertexTypesValid());
      assertEquals(15, simpleEdge0.getId());
      assertEquals(1392409371000L, state2.getTimeInMillis());
      assertFalse(state2.isBackWalkingBike());
      assertEquals(1392409371L, state2.getTimeSeconds());
      assertEquals((-413.82415965173124), state2.getWeightDelta(), 0.01);
      assertNull(state2.getZone());
      assertEquals(0.0, state2.getWalkAtLastTransit(), 0.01);
      assertEquals((-413.82415965173124), state2.getWeight(), 0.01);
      assertFalse(state2.isOnboard());
      assertEquals(0.0, state2.getWalkDistanceDelta(), 0.01);
      assertEquals(90L, state2.getElapsedTimeSeconds());
      assertEquals(1392409281L, state2.getStartTimeSeconds());
      assertEquals(0, state2.getPreTransitTimeDelta());
      assertEquals(90, state2.getAbsTimeDeltaSeconds());
      assertEquals((-427.67491499774206), state2.getWalkDistance(), 0.01);
      assertEquals(90.0, state2.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state2.getLastNextArrivalDelta());
      assertFalse(state2.isCarParked());
      assertFalse(state2.isEverBoarded());
      assertFalse(state2.getReverseOptimizing());
      assertNull(state2.getNonTransitMode());
      assertEquals(0L, state2.getLastAlightedTimeSeconds());
      assertNull(state2.getBackMode());
      assertEquals((-427.67491499774206), state2.getWalkSinceLastTransit(), 0.01);
      assertTrue(state2.isFinal());
      assertEquals(0, state2.getNumBoardings());
      assertEquals(90, state2.getTimeDeltaSeconds());
      assertFalse(state2.isBikeRenting());
      assertEquals(0, state2.getPreTransitTime());
      assertFalse(boolean3);
      
      StreetTraversalPermission streetTraversalPermission0 = StreetTraversalPermission.ALL;
      ElevatorHopEdge elevatorHopEdge0 = new ElevatorHopEdge(intersectionVertex0, intersectionVertex0, streetTraversalPermission0);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertTrue(elevatorHopEdge0.wheelchairAccessible);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertNotNull(elevatorHopEdge0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertNull(elevatorHopEdge0.getName());
      assertEquals(0.0, elevatorHopEdge0.getDistance(), 0.01);
      assertTrue(elevatorHopEdge0.vertexTypesValid());
      assertEquals(16, elevatorHopEdge0.getId());
      assertFalse(elevatorHopEdge0.isPartial());
      assertEquals(1, graph0.countVertices());
      assertEquals(2, intersectionVertex0.getDegreeIn());
      assertEquals("68e=`J", intersectionVertex0.getName());
      assertEquals(2, intersectionVertex0.getDegreeOut());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      
      State state3 = elevatorHopEdge0.traverse(state0);
      assertNotSame(state3, state1);
      assertNotSame(state3, state2);
      assertNotSame(state3, state0);
      assertNotSame(state0, state3);
      assertNotSame(state0, state2);
      assertSame(state0, state1);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertTrue(elevatorHopEdge0.wheelchairAccessible);
      assertEquals((-427.67491499774206), state3.walkDistance, 0.01);
      assertEquals(20.0, state3.weight, 0.01);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals((-427.67491499774206), state0.walkDistance, 0.01);
      assertNotNull(state3);
      assertFalse(state3.equals((Object)state1));
      assertFalse(state3.equals((Object)state2));
      assertFalse(state3.equals((Object)state0));
      assertFalse(state0.equals((Object)state2));
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertNull(elevatorHopEdge0.getName());
      assertEquals(0.0, elevatorHopEdge0.getDistance(), 0.01);
      assertTrue(elevatorHopEdge0.vertexTypesValid());
      assertEquals(16, elevatorHopEdge0.getId());
      assertFalse(elevatorHopEdge0.isPartial());
      assertEquals(1, graph0.countVertices());
      assertEquals(1392409301L, state3.getTimeSeconds());
      assertEquals(0, state3.getLastNextArrivalDelta());
      assertNull(state3.getZone());
      assertEquals(20.0, state3.getWeightDelta(), 0.01);
      assertFalse(state3.isBackWalkingBike());
      assertFalse(state3.isOnboard());
      assertEquals(0.0, state3.getWalkDistanceDelta(), 0.01);
      assertEquals(20L, state3.getElapsedTimeSeconds());
      assertFalse(state3.isCarParked());
      assertEquals(0.0, state3.getWalkAtLastTransit(), 0.01);
      assertEquals((-427.67491499774206), state3.getWalkDistance(), 0.01);
      assertFalse(state3.isEverBoarded());
      assertEquals(0, state3.getPreTransitTimeDelta());
      assertEquals(1392409301000L, state3.getTimeInMillis());
      assertEquals(20.0, state3.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(20, state3.getTimeDeltaSeconds());
      assertTrue(state3.isFinal());
      assertEquals(TraverseMode.WALK, state3.getBackMode());
      assertEquals(0L, state3.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state3.getStartTimeSeconds());
      assertEquals(20, state3.getAbsTimeDeltaSeconds());
      assertFalse(state3.getReverseOptimizing());
      assertNull(state3.getNonTransitMode());
      assertEquals((-427.67491499774206), state3.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state3.getPreTransitTime());
      assertFalse(state3.isBikeRenting());
      assertEquals(20.0, state3.getWeight(), 0.01);
      assertEquals(0, state3.getNumBoardings());
      assertEquals(2, intersectionVertex0.getDegreeIn());
      assertEquals("68e=`J", intersectionVertex0.getName());
      assertEquals(2, intersectionVertex0.getDegreeOut());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals((-427.67491499774206), state0.getWalkSinceLastTransit(), 0.01);
      assertEquals((-427.67491499774206), state0.getWalkDistance(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isBikeRenting());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertTrue(state0.isFinal());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertNull(state0.getZone());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertNull(state0.getNonTransitMode());
      assertFalse(state0.isEverBoarded());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.isOnboard());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      
      boolean boolean4 = MultiShortestPathTree.dominates(state2, state3);
      assertNotSame(state0, state3);
      assertNotSame(state0, state2);
      assertSame(state0, state1);
      assertNotSame(state2, state1);
      assertNotSame(state2, state0);
      assertNotSame(state2, state3);
      assertNotSame(state3, state1);
      assertNotSame(state3, state2);
      assertNotSame(state3, state0);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertTrue(elevatorHopEdge0.wheelchairAccessible);
      assertEquals((-427.67491499774206), state3.walkDistance, 0.01);
      assertEquals(20.0, state3.weight, 0.01);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals((-427.67491499774206), state0.walkDistance, 0.01);
      assertEquals((-427.67491499774206), state2.walkDistance, 0.01);
      assertEquals((-413.82415965173124), state2.weight, 0.01);
      assertFalse(state0.equals((Object)state3));
      assertFalse(state0.equals((Object)state2));
      assertFalse(state2.equals((Object)state1));
      assertFalse(state2.equals((Object)state0));
      assertFalse(state2.equals((Object)state3));
      assertFalse(state3.equals((Object)state1));
      assertFalse(state3.equals((Object)state2));
      assertFalse(state3.equals((Object)state0));
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertNull(elevatorHopEdge0.getName());
      assertEquals(0.0, elevatorHopEdge0.getDistance(), 0.01);
      assertTrue(elevatorHopEdge0.vertexTypesValid());
      assertEquals(16, elevatorHopEdge0.getId());
      assertFalse(elevatorHopEdge0.isPartial());
      assertEquals(1, graph0.countVertices());
      assertEquals(1392409301L, state3.getTimeSeconds());
      assertEquals(0, state3.getLastNextArrivalDelta());
      assertNull(state3.getZone());
      assertEquals(20.0, state3.getWeightDelta(), 0.01);
      assertFalse(state3.isBackWalkingBike());
      assertFalse(state3.isOnboard());
      assertEquals(0.0, state3.getWalkDistanceDelta(), 0.01);
      assertEquals(20L, state3.getElapsedTimeSeconds());
      assertFalse(state3.isCarParked());
      assertEquals(0.0, state3.getWalkAtLastTransit(), 0.01);
      assertEquals((-427.67491499774206), state3.getWalkDistance(), 0.01);
      assertFalse(state3.isEverBoarded());
      assertEquals(0, state3.getPreTransitTimeDelta());
      assertEquals(1392409301000L, state3.getTimeInMillis());
      assertEquals(20.0, state3.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(20, state3.getTimeDeltaSeconds());
      assertTrue(state3.isFinal());
      assertEquals(TraverseMode.WALK, state3.getBackMode());
      assertEquals(0L, state3.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state3.getStartTimeSeconds());
      assertEquals(20, state3.getAbsTimeDeltaSeconds());
      assertFalse(state3.getReverseOptimizing());
      assertNull(state3.getNonTransitMode());
      assertEquals((-427.67491499774206), state3.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state3.getPreTransitTime());
      assertFalse(state3.isBikeRenting());
      assertEquals(20.0, state3.getWeight(), 0.01);
      assertEquals(0, state3.getNumBoardings());
      assertEquals(2, intersectionVertex0.getDegreeIn());
      assertEquals("68e=`J", intersectionVertex0.getName());
      assertEquals(2, intersectionVertex0.getDegreeOut());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals((-427.67491499774206), state0.getWalkSinceLastTransit(), 0.01);
      assertEquals((-427.67491499774206), state0.getWalkDistance(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isBikeRenting());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertTrue(state0.isFinal());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertNull(state0.getZone());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertNull(state0.getNonTransitMode());
      assertFalse(state0.isEverBoarded());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.isOnboard());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertNull(simpleEdge0.getName());
      assertFalse(simpleEdge0.isPartial());
      assertEquals(0.0, simpleEdge0.getDistance(), 0.01);
      assertTrue(simpleEdge0.vertexTypesValid());
      assertEquals(15, simpleEdge0.getId());
      assertEquals(1392409371000L, state2.getTimeInMillis());
      assertFalse(state2.isBackWalkingBike());
      assertEquals(1392409371L, state2.getTimeSeconds());
      assertEquals((-413.82415965173124), state2.getWeightDelta(), 0.01);
      assertNull(state2.getZone());
      assertEquals(0.0, state2.getWalkAtLastTransit(), 0.01);
      assertEquals((-413.82415965173124), state2.getWeight(), 0.01);
      assertFalse(state2.isOnboard());
      assertEquals(0.0, state2.getWalkDistanceDelta(), 0.01);
      assertEquals(90L, state2.getElapsedTimeSeconds());
      assertEquals(1392409281L, state2.getStartTimeSeconds());
      assertEquals(0, state2.getPreTransitTimeDelta());
      assertEquals(90, state2.getAbsTimeDeltaSeconds());
      assertEquals((-427.67491499774206), state2.getWalkDistance(), 0.01);
      assertEquals(90.0, state2.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state2.getLastNextArrivalDelta());
      assertFalse(state2.isCarParked());
      assertFalse(state2.isEverBoarded());
      assertFalse(state2.getReverseOptimizing());
      assertNull(state2.getNonTransitMode());
      assertEquals(0L, state2.getLastAlightedTimeSeconds());
      assertNull(state2.getBackMode());
      assertEquals((-427.67491499774206), state2.getWalkSinceLastTransit(), 0.01);
      assertTrue(state2.isFinal());
      assertEquals(0, state2.getNumBoardings());
      assertEquals(90, state2.getTimeDeltaSeconds());
      assertFalse(state2.isBikeRenting());
      assertEquals(0, state2.getPreTransitTime());
      assertFalse(boolean4);
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      String string0 = "68e=`J";
      TraverseMode traverseMode0 = TraverseMode.TRAM;
      OptimizeType optimizeType0 = OptimizeType.FLAT;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0, optimizeType0);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertNotNull(routingRequest0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertNotNull(multiShortestPathTree0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      Graph graph0 = new Graph();
      assertNotNull(graph0);
      assertEquals(0, graph0.countVertices());
      
      IntersectionVertex intersectionVertex0 = new IntersectionVertex(graph0, routingRequest0.routerId, routingRequest0.carDecelerationSpeed, routingRequest0.carDropoffTime, string0);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertNotNull(intersectionVertex0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, graph0.countVertices());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals("68e=`J", intersectionVertex0.getName());
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      
      routingRequest0.setRoutingContext(graph0, routingRequest0.routerId, string0);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, graph0.countVertices());
      
      State state0 = new State(intersectionVertex0, multiShortestPathTree0.options);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertNotNull(state0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals("68e=`J", intersectionVertex0.getName());
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertFalse(state0.getReverseOptimizing());
      assertTrue(state0.isFinal());
      assertFalse(state0.isEverBoarded());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isCarParked());
      assertNull(state0.getBackMode());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getNonTransitMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isBikeRenting());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isOnboard());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      
      boolean boolean0 = multiShortestPathTree0.add(state0);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals("68e=`J", intersectionVertex0.getName());
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertFalse(state0.getReverseOptimizing());
      assertTrue(state0.isFinal());
      assertFalse(state0.isEverBoarded());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isCarParked());
      assertNull(state0.getBackMode());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getNonTransitMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isBikeRenting());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isOnboard());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertTrue(boolean0);
      
      boolean boolean1 = multiShortestPathTree0.add(state0);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertTrue(boolean1 == boolean0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals("68e=`J", intersectionVertex0.getName());
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertFalse(state0.getReverseOptimizing());
      assertTrue(state0.isFinal());
      assertFalse(state0.isEverBoarded());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isCarParked());
      assertNull(state0.getBackMode());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getNonTransitMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isBikeRenting());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isOnboard());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertTrue(boolean1);
      
      State state1 = multiShortestPathTree0.getState(intersectionVertex0);
      assertSame(state1, state0);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertEquals(0.0, state1.weight, 0.01);
      assertNotNull(state1);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals("68e=`J", intersectionVertex0.getName());
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state1.getStartTimeSeconds());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertTrue(state1.isFinal());
      assertFalse(state1.isBikeRenting());
      assertEquals(0, state1.getPreTransitTime());
      assertFalse(state1.isCarParked());
      assertFalse(state1.getReverseOptimizing());
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertEquals(1392409281L, state1.getTimeSeconds());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertNull(state1.getNonTransitMode());
      assertNull(state1.getBackMode());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertFalse(state1.isOnboard());
      assertEquals(0, state1.getNumBoardings());
      assertNull(state1.getZone());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertFalse(state1.isEverBoarded());
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals(1392409281000L, state1.getTimeInMillis());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      
      SimpleEdge simpleEdge0 = new SimpleEdge(intersectionVertex0, intersectionVertex0, routingRequest0.maxWeight, routingRequest0.elevatorBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertNotNull(simpleEdge0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, graph0.countVertices());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertTrue(intersectionVertex0.inferredFreeFlowing());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(1, intersectionVertex0.getDegreeOut());
      assertEquals(1, intersectionVertex0.getDegreeIn());
      assertEquals("68e=`J", intersectionVertex0.getName());
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertNull(simpleEdge0.getName());
      assertEquals(0.0, simpleEdge0.getDistance(), 0.01);
      assertTrue(simpleEdge0.vertexTypesValid());
      assertFalse(simpleEdge0.isPartial());
      assertEquals(17, simpleEdge0.getId());
      
      State state2 = simpleEdge0.traverse(state0);
      assertSame(state0, state1);
      assertNotSame(state0, state2);
      assertNotSame(state2, state0);
      assertNotSame(state2, state1);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state2.walkDistance, 0.01);
      assertEquals(1.7976931348623157E308, state2.weight, 0.01);
      assertNotNull(state2);
      assertFalse(state2.equals((Object)state0));
      assertFalse(state2.equals((Object)state1));
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertTrue(intersectionVertex0.inferredFreeFlowing());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(1, intersectionVertex0.getDegreeOut());
      assertEquals(1, intersectionVertex0.getDegreeIn());
      assertEquals("68e=`J", intersectionVertex0.getName());
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertTrue(state0.isFinal());
      assertFalse(state0.isEverBoarded());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isCarParked());
      assertNull(state0.getBackMode());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getNonTransitMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isBikeRenting());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isOnboard());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertNull(simpleEdge0.getName());
      assertEquals(0.0, simpleEdge0.getDistance(), 0.01);
      assertTrue(simpleEdge0.vertexTypesValid());
      assertFalse(simpleEdge0.isPartial());
      assertEquals(17, simpleEdge0.getId());
      assertFalse(state2.getReverseOptimizing());
      assertEquals(1.7976931348623157E308, state2.getWeightDelta(), 0.01);
      assertFalse(state2.isEverBoarded());
      assertEquals(90, state2.getTimeDeltaSeconds());
      assertNull(state2.getNonTransitMode());
      assertTrue(state2.isFinal());
      assertEquals(90L, state2.getElapsedTimeSeconds());
      assertEquals(1392409281L, state2.getStartTimeSeconds());
      assertEquals(90, state2.getAbsTimeDeltaSeconds());
      assertFalse(state2.isCarParked());
      assertNull(state2.getBackMode());
      assertEquals(0, state2.getPreTransitTimeDelta());
      assertEquals(90.0, state2.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state2.getWalkDistanceDelta(), 0.01);
      assertEquals(1.7976931348623157E308, state2.getWeight(), 0.01);
      assertEquals(0L, state2.getLastAlightedTimeSeconds());
      assertEquals(0.0, state2.getWalkAtLastTransit(), 0.01);
      assertNull(state2.getZone());
      assertEquals(0.0, state2.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state2.getLastNextArrivalDelta());
      assertEquals(1392409371000L, state2.getTimeInMillis());
      assertFalse(state2.isBikeRenting());
      assertEquals(0, state2.getPreTransitTime());
      assertFalse(state2.isBackWalkingBike());
      assertFalse(state2.isOnboard());
      assertEquals(0, state2.getNumBoardings());
      assertEquals(0.0, state2.getWalkDistance(), 0.01);
      assertEquals(1392409371L, state2.getTimeSeconds());
      
      double double0 = (-413.82415965173124);
      state2.weight = double0;
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertTrue(intersectionVertex0.inferredFreeFlowing());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(1, intersectionVertex0.getDegreeOut());
      assertEquals(1, intersectionVertex0.getDegreeIn());
      assertEquals("68e=`J", intersectionVertex0.getName());
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertTrue(state0.isFinal());
      assertFalse(state0.isEverBoarded());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isCarParked());
      assertNull(state0.getBackMode());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getNonTransitMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isBikeRenting());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isOnboard());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertNull(simpleEdge0.getName());
      assertEquals(0.0, simpleEdge0.getDistance(), 0.01);
      assertTrue(simpleEdge0.vertexTypesValid());
      assertFalse(simpleEdge0.isPartial());
      assertEquals(17, simpleEdge0.getId());
      assertFalse(state2.getReverseOptimizing());
      assertFalse(state2.isEverBoarded());
      assertEquals(90, state2.getTimeDeltaSeconds());
      assertNull(state2.getNonTransitMode());
      assertTrue(state2.isFinal());
      assertEquals(90L, state2.getElapsedTimeSeconds());
      assertEquals(1392409281L, state2.getStartTimeSeconds());
      assertEquals(90, state2.getAbsTimeDeltaSeconds());
      assertFalse(state2.isCarParked());
      assertNull(state2.getBackMode());
      assertEquals(0, state2.getPreTransitTimeDelta());
      assertEquals(90.0, state2.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state2.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state2.getLastAlightedTimeSeconds());
      assertEquals(0.0, state2.getWalkAtLastTransit(), 0.01);
      assertNull(state2.getZone());
      assertEquals((-413.82415965173124), state2.getWeightDelta(), 0.01);
      assertEquals(0.0, state2.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state2.getLastNextArrivalDelta());
      assertEquals(1392409371000L, state2.getTimeInMillis());
      assertFalse(state2.isBikeRenting());
      assertEquals(0, state2.getPreTransitTime());
      assertEquals((-413.82415965173124), state2.getWeight(), 0.01);
      assertFalse(state2.isBackWalkingBike());
      assertFalse(state2.isOnboard());
      assertEquals(0, state2.getNumBoardings());
      assertEquals(0.0, state2.getWalkDistance(), 0.01);
      assertEquals(1392409371L, state2.getTimeSeconds());
      
      boolean boolean2 = MultiShortestPathTree.dominates(state0, state2);
      assertSame(state0, state1);
      assertNotSame(state0, state2);
      assertNotSame(state2, state0);
      assertNotSame(state2, state1);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals((-413.82415965173124), state2.weight, 0.01);
      assertEquals(0.0, state2.walkDistance, 0.01);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(state0.equals((Object)state2));
      assertFalse(state2.equals((Object)state0));
      assertFalse(state2.equals((Object)state1));
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertTrue(intersectionVertex0.inferredFreeFlowing());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(1, intersectionVertex0.getDegreeOut());
      assertEquals(1, intersectionVertex0.getDegreeIn());
      assertEquals("68e=`J", intersectionVertex0.getName());
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertTrue(state0.isFinal());
      assertFalse(state0.isEverBoarded());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isCarParked());
      assertNull(state0.getBackMode());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getNonTransitMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isBikeRenting());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isOnboard());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertNull(simpleEdge0.getName());
      assertEquals(0.0, simpleEdge0.getDistance(), 0.01);
      assertTrue(simpleEdge0.vertexTypesValid());
      assertFalse(simpleEdge0.isPartial());
      assertEquals(17, simpleEdge0.getId());
      assertFalse(state2.getReverseOptimizing());
      assertFalse(state2.isEverBoarded());
      assertEquals(90, state2.getTimeDeltaSeconds());
      assertNull(state2.getNonTransitMode());
      assertTrue(state2.isFinal());
      assertEquals(90L, state2.getElapsedTimeSeconds());
      assertEquals(1392409281L, state2.getStartTimeSeconds());
      assertEquals(90, state2.getAbsTimeDeltaSeconds());
      assertFalse(state2.isCarParked());
      assertNull(state2.getBackMode());
      assertEquals(0, state2.getPreTransitTimeDelta());
      assertEquals(90.0, state2.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state2.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state2.getLastAlightedTimeSeconds());
      assertEquals(0.0, state2.getWalkAtLastTransit(), 0.01);
      assertNull(state2.getZone());
      assertEquals((-413.82415965173124), state2.getWeightDelta(), 0.01);
      assertEquals(0.0, state2.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state2.getLastNextArrivalDelta());
      assertEquals(1392409371000L, state2.getTimeInMillis());
      assertFalse(state2.isBikeRenting());
      assertEquals(0, state2.getPreTransitTime());
      assertEquals((-413.82415965173124), state2.getWeight(), 0.01);
      assertFalse(state2.isBackWalkingBike());
      assertFalse(state2.isOnboard());
      assertEquals(0, state2.getNumBoardings());
      assertEquals(0.0, state2.getWalkDistance(), 0.01);
      assertEquals(1392409371L, state2.getTimeSeconds());
      assertFalse(boolean2);
      
      boolean boolean3 = multiShortestPathTree0.visit(state2);
      assertSame(state0, state1);
      assertNotSame(state0, state2);
      assertNotSame(state2, state0);
      assertNotSame(state2, state1);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals((-413.82415965173124), state2.weight, 0.01);
      assertEquals(0.0, state2.walkDistance, 0.01);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(state0.equals((Object)state2));
      assertFalse(state2.equals((Object)state0));
      assertFalse(state2.equals((Object)state1));
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertTrue(intersectionVertex0.inferredFreeFlowing());
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(1, intersectionVertex0.getDegreeOut());
      assertEquals(1, intersectionVertex0.getDegreeIn());
      assertEquals("68e=`J", intersectionVertex0.getName());
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertTrue(state0.isFinal());
      assertFalse(state0.isEverBoarded());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isCarParked());
      assertNull(state0.getBackMode());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getNonTransitMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isBikeRenting());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isOnboard());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertNull(simpleEdge0.getName());
      assertEquals(0.0, simpleEdge0.getDistance(), 0.01);
      assertTrue(simpleEdge0.vertexTypesValid());
      assertFalse(simpleEdge0.isPartial());
      assertEquals(17, simpleEdge0.getId());
      assertFalse(state2.getReverseOptimizing());
      assertFalse(state2.isEverBoarded());
      assertEquals(90, state2.getTimeDeltaSeconds());
      assertNull(state2.getNonTransitMode());
      assertTrue(state2.isFinal());
      assertEquals(90L, state2.getElapsedTimeSeconds());
      assertEquals(1392409281L, state2.getStartTimeSeconds());
      assertEquals(90, state2.getAbsTimeDeltaSeconds());
      assertFalse(state2.isCarParked());
      assertNull(state2.getBackMode());
      assertEquals(0, state2.getPreTransitTimeDelta());
      assertEquals(90.0, state2.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state2.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state2.getLastAlightedTimeSeconds());
      assertEquals(0.0, state2.getWalkAtLastTransit(), 0.01);
      assertNull(state2.getZone());
      assertEquals((-413.82415965173124), state2.getWeightDelta(), 0.01);
      assertEquals(0.0, state2.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state2.getLastNextArrivalDelta());
      assertEquals(1392409371000L, state2.getTimeInMillis());
      assertFalse(state2.isBikeRenting());
      assertEquals(0, state2.getPreTransitTime());
      assertEquals((-413.82415965173124), state2.getWeight(), 0.01);
      assertFalse(state2.isBackWalkingBike());
      assertFalse(state2.isOnboard());
      assertEquals(0, state2.getNumBoardings());
      assertEquals(0.0, state2.getWalkDistance(), 0.01);
      assertEquals(1392409371L, state2.getTimeSeconds());
      assertFalse(boolean3);
      
      StreetTraversalPermission streetTraversalPermission0 = StreetTraversalPermission.ALL;
      ElevatorHopEdge elevatorHopEdge0 = new ElevatorHopEdge(intersectionVertex0, intersectionVertex0, streetTraversalPermission0);
      assertTrue(elevatorHopEdge0.wheelchairAccessible);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertNotNull(elevatorHopEdge0);
      assertEquals(0.0, elevatorHopEdge0.getDistance(), 0.01);
      assertNull(elevatorHopEdge0.getName());
      assertEquals(18, elevatorHopEdge0.getId());
      assertTrue(elevatorHopEdge0.vertexTypesValid());
      assertFalse(elevatorHopEdge0.isPartial());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, graph0.countVertices());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(2, intersectionVertex0.getDegreeOut());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals("68e=`J", intersectionVertex0.getName());
      assertEquals(2, intersectionVertex0.getDegreeIn());
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      
      State state3 = elevatorHopEdge0.traverse(state0);
      assertNotSame(state3, state0);
      assertNotSame(state3, state1);
      assertNotSame(state3, state2);
      assertNotSame(state0, state3);
      assertSame(state0, state1);
      assertNotSame(state0, state2);
      assertTrue(elevatorHopEdge0.wheelchairAccessible);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, state3.walkDistance, 0.01);
      assertEquals(20.0, state3.weight, 0.01);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertNotNull(state3);
      assertFalse(state3.equals((Object)state0));
      assertFalse(state3.equals((Object)state1));
      assertFalse(state3.equals((Object)state2));
      assertFalse(state0.equals((Object)state2));
      assertEquals(0.0, elevatorHopEdge0.getDistance(), 0.01);
      assertNull(elevatorHopEdge0.getName());
      assertEquals(18, elevatorHopEdge0.getId());
      assertTrue(elevatorHopEdge0.vertexTypesValid());
      assertFalse(elevatorHopEdge0.isPartial());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(state3.getReverseOptimizing());
      assertFalse(state3.isEverBoarded());
      assertEquals(20, state3.getTimeDeltaSeconds());
      assertNull(state3.getNonTransitMode());
      assertEquals(TraverseMode.WALK, state3.getBackMode());
      assertEquals(20.0, state3.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(20, state3.getAbsTimeDeltaSeconds());
      assertFalse(state3.isOnboard());
      assertEquals(20.0, state3.getWeight(), 0.01);
      assertEquals(20.0, state3.getWeightDelta(), 0.01);
      assertEquals(0, state3.getNumBoardings());
      assertTrue(state3.isFinal());
      assertFalse(state3.isBikeRenting());
      assertEquals(1392409301L, state3.getTimeSeconds());
      assertEquals(0, state3.getPreTransitTime());
      assertEquals(0, state3.getLastNextArrivalDelta());
      assertFalse(state3.isBackWalkingBike());
      assertEquals(20L, state3.getElapsedTimeSeconds());
      assertEquals(0.0, state3.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state3.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state3.getWalkDistance(), 0.01);
      assertEquals(0L, state3.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state3.getStartTimeSeconds());
      assertNull(state3.getZone());
      assertEquals(0.0, state3.getWalkSinceLastTransit(), 0.01);
      assertFalse(state3.isCarParked());
      assertEquals(1392409301000L, state3.getTimeInMillis());
      assertEquals(0, state3.getPreTransitTimeDelta());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(2, intersectionVertex0.getDegreeOut());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals("68e=`J", intersectionVertex0.getName());
      assertEquals(2, intersectionVertex0.getDegreeIn());
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertFalse(state0.getReverseOptimizing());
      assertTrue(state0.isFinal());
      assertFalse(state0.isEverBoarded());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isCarParked());
      assertNull(state0.getBackMode());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getNonTransitMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isBikeRenting());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isOnboard());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      
      boolean boolean4 = MultiShortestPathTree.dominates(state2, state3);
      assertNotSame(state0, state3);
      assertSame(state0, state1);
      assertNotSame(state0, state2);
      assertNotSame(state2, state3);
      assertNotSame(state2, state0);
      assertNotSame(state2, state1);
      assertNotSame(state3, state0);
      assertNotSame(state3, state1);
      assertNotSame(state3, state2);
      assertTrue(elevatorHopEdge0.wheelchairAccessible);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, state3.walkDistance, 0.01);
      assertEquals(20.0, state3.weight, 0.01);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals((-413.82415965173124), state2.weight, 0.01);
      assertEquals(0.0, state2.walkDistance, 0.01);
      assertFalse(state0.equals((Object)state3));
      assertFalse(state0.equals((Object)state2));
      assertFalse(state2.equals((Object)state3));
      assertFalse(state2.equals((Object)state0));
      assertFalse(state2.equals((Object)state1));
      assertFalse(state3.equals((Object)state0));
      assertFalse(state3.equals((Object)state1));
      assertFalse(state3.equals((Object)state2));
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertEquals(0.0, elevatorHopEdge0.getDistance(), 0.01);
      assertNull(elevatorHopEdge0.getName());
      assertEquals(18, elevatorHopEdge0.getId());
      assertTrue(elevatorHopEdge0.vertexTypesValid());
      assertFalse(elevatorHopEdge0.isPartial());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(state3.getReverseOptimizing());
      assertFalse(state3.isEverBoarded());
      assertEquals(20, state3.getTimeDeltaSeconds());
      assertNull(state3.getNonTransitMode());
      assertEquals(TraverseMode.WALK, state3.getBackMode());
      assertEquals(20.0, state3.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(20, state3.getAbsTimeDeltaSeconds());
      assertFalse(state3.isOnboard());
      assertEquals(20.0, state3.getWeight(), 0.01);
      assertEquals(20.0, state3.getWeightDelta(), 0.01);
      assertEquals(0, state3.getNumBoardings());
      assertTrue(state3.isFinal());
      assertFalse(state3.isBikeRenting());
      assertEquals(1392409301L, state3.getTimeSeconds());
      assertEquals(0, state3.getPreTransitTime());
      assertEquals(0, state3.getLastNextArrivalDelta());
      assertFalse(state3.isBackWalkingBike());
      assertEquals(20L, state3.getElapsedTimeSeconds());
      assertEquals(0.0, state3.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state3.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state3.getWalkDistance(), 0.01);
      assertEquals(0L, state3.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state3.getStartTimeSeconds());
      assertNull(state3.getZone());
      assertEquals(0.0, state3.getWalkSinceLastTransit(), 0.01);
      assertFalse(state3.isCarParked());
      assertEquals(1392409301000L, state3.getTimeInMillis());
      assertEquals(0, state3.getPreTransitTimeDelta());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(2, intersectionVertex0.getDegreeOut());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals("68e=`J", intersectionVertex0.getName());
      assertEquals(2, intersectionVertex0.getDegreeIn());
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertFalse(state0.getReverseOptimizing());
      assertTrue(state0.isFinal());
      assertFalse(state0.isEverBoarded());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isCarParked());
      assertNull(state0.getBackMode());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getNonTransitMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isBikeRenting());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isOnboard());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertNull(simpleEdge0.getName());
      assertEquals(0.0, simpleEdge0.getDistance(), 0.01);
      assertTrue(simpleEdge0.vertexTypesValid());
      assertFalse(simpleEdge0.isPartial());
      assertEquals(17, simpleEdge0.getId());
      assertFalse(state2.getReverseOptimizing());
      assertFalse(state2.isEverBoarded());
      assertEquals(90, state2.getTimeDeltaSeconds());
      assertNull(state2.getNonTransitMode());
      assertTrue(state2.isFinal());
      assertEquals(90L, state2.getElapsedTimeSeconds());
      assertEquals(1392409281L, state2.getStartTimeSeconds());
      assertEquals(90, state2.getAbsTimeDeltaSeconds());
      assertFalse(state2.isCarParked());
      assertNull(state2.getBackMode());
      assertEquals(0, state2.getPreTransitTimeDelta());
      assertEquals(90.0, state2.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state2.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state2.getLastAlightedTimeSeconds());
      assertEquals(0.0, state2.getWalkAtLastTransit(), 0.01);
      assertNull(state2.getZone());
      assertEquals((-413.82415965173124), state2.getWeightDelta(), 0.01);
      assertEquals(0.0, state2.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state2.getLastNextArrivalDelta());
      assertEquals(1392409371000L, state2.getTimeInMillis());
      assertFalse(state2.isBikeRenting());
      assertEquals(0, state2.getPreTransitTime());
      assertEquals((-413.82415965173124), state2.getWeight(), 0.01);
      assertFalse(state2.isBackWalkingBike());
      assertFalse(state2.isOnboard());
      assertEquals(0, state2.getNumBoardings());
      assertEquals(0.0, state2.getWalkDistance(), 0.01);
      assertEquals(1392409371L, state2.getTimeSeconds());
      assertFalse(boolean4);
      
      boolean boolean5 = multiShortestPathTree0.add(state2);
      assertNotSame(state0, state3);
      assertSame(state0, state1);
      assertNotSame(state0, state2);
      assertNotSame(state2, state3);
      assertNotSame(state2, state0);
      assertNotSame(state2, state1);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals((-413.82415965173124), state2.weight, 0.01);
      assertEquals(0.0, state2.walkDistance, 0.01);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean2);
      assertFalse(state0.equals((Object)state3));
      assertFalse(state0.equals((Object)state2));
      assertFalse(state2.equals((Object)state3));
      assertFalse(state2.equals((Object)state0));
      assertFalse(state2.equals((Object)state1));
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(2, intersectionVertex0.getDegreeOut());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals("68e=`J", intersectionVertex0.getName());
      assertEquals(2, intersectionVertex0.getDegreeIn());
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertFalse(state0.getReverseOptimizing());
      assertTrue(state0.isFinal());
      assertFalse(state0.isEverBoarded());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isCarParked());
      assertNull(state0.getBackMode());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getNonTransitMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isBikeRenting());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isOnboard());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertNull(simpleEdge0.getName());
      assertEquals(0.0, simpleEdge0.getDistance(), 0.01);
      assertTrue(simpleEdge0.vertexTypesValid());
      assertFalse(simpleEdge0.isPartial());
      assertEquals(17, simpleEdge0.getId());
      assertFalse(state2.getReverseOptimizing());
      assertFalse(state2.isEverBoarded());
      assertEquals(90, state2.getTimeDeltaSeconds());
      assertNull(state2.getNonTransitMode());
      assertTrue(state2.isFinal());
      assertEquals(90L, state2.getElapsedTimeSeconds());
      assertEquals(1392409281L, state2.getStartTimeSeconds());
      assertEquals(90, state2.getAbsTimeDeltaSeconds());
      assertFalse(state2.isCarParked());
      assertNull(state2.getBackMode());
      assertEquals(0, state2.getPreTransitTimeDelta());
      assertEquals(90.0, state2.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state2.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state2.getLastAlightedTimeSeconds());
      assertEquals(0.0, state2.getWalkAtLastTransit(), 0.01);
      assertNull(state2.getZone());
      assertEquals((-413.82415965173124), state2.getWeightDelta(), 0.01);
      assertEquals(0.0, state2.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state2.getLastNextArrivalDelta());
      assertEquals(1392409371000L, state2.getTimeInMillis());
      assertFalse(state2.isBikeRenting());
      assertEquals(0, state2.getPreTransitTime());
      assertEquals((-413.82415965173124), state2.getWeight(), 0.01);
      assertFalse(state2.isBackWalkingBike());
      assertFalse(state2.isOnboard());
      assertEquals(0, state2.getNumBoardings());
      assertEquals(0.0, state2.getWalkDistance(), 0.01);
      assertEquals(1392409371L, state2.getTimeSeconds());
      assertTrue(boolean5);
      
      State state4 = multiShortestPathTree0.getState(intersectionVertex0);
      assertNotSame(state4, state3);
      assertNotSame(state4, state1);
      assertSame(state4, state2);
      assertNotSame(state4, state0);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(intersectionVertex0.freeFlowing);
      assertFalse(intersectionVertex0.trafficLight);
      assertEquals((-413.82415965173124), state4.weight, 0.01);
      assertEquals(0.0, state4.walkDistance, 0.01);
      assertNotNull(state4);
      assertFalse(state4.equals((Object)state3));
      assertFalse(state4.equals((Object)state1));
      assertFalse(state4.equals((Object)state0));
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(2, intersectionVertex0.getDegreeOut());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals("68e=`J", intersectionVertex0.getName());
      assertEquals(2, intersectionVertex0.getDegreeIn());
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(90, state4.getAbsTimeDeltaSeconds());
      assertFalse(state4.isEverBoarded());
      assertTrue(state4.isFinal());
      assertEquals(0, state4.getNumBoardings());
      assertFalse(state4.isCarParked());
      assertEquals(90, state4.getTimeDeltaSeconds());
      assertEquals(0.0, state4.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state4.getLastAlightedTimeSeconds());
      assertNull(state4.getNonTransitMode());
      assertFalse(state4.getReverseOptimizing());
      assertEquals(1392409371000L, state4.getTimeInMillis());
      assertNull(state4.getBackMode());
      assertEquals(0.0, state4.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state4.getWalkSinceLastTransit(), 0.01);
      assertNull(state4.getZone());
      assertEquals(0, state4.getLastNextArrivalDelta());
      assertFalse(state4.isBackWalkingBike());
      assertEquals((-413.82415965173124), state4.getWeight(), 0.01);
      assertEquals((-413.82415965173124), state4.getWeightDelta(), 0.01);
      assertEquals(1392409371L, state4.getTimeSeconds());
      assertEquals(0, state4.getPreTransitTime());
      assertFalse(state4.isBikeRenting());
      assertEquals(0, state4.getPreTransitTimeDelta());
      assertEquals(90.0, state4.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(90L, state4.getElapsedTimeSeconds());
      assertEquals(1392409281L, state4.getStartTimeSeconds());
      assertEquals(0.0, state4.getWalkDistance(), 0.01);
      assertFalse(state4.isOnboard());
      
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertNotNull(set0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      String string0 = "68e=`J";
      TraverseMode traverseMode0 = TraverseMode.TRAM;
      OptimizeType optimizeType0 = OptimizeType.SAFE;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0, optimizeType0);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertNotNull(routingRequest0);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertNotNull(multiShortestPathTree0);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      Graph graph0 = new Graph();
      assertNotNull(graph0);
      assertEquals(0, graph0.countVertices());
      
      IntersectionVertex intersectionVertex0 = new IntersectionVertex(graph0, routingRequest0.routerId, routingRequest0.carDecelerationSpeed, routingRequest0.carDropoffTime, string0);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertNotNull(intersectionVertex0);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, graph0.countVertices());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals("68e=`J", intersectionVertex0.getName());
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      
      routingRequest0.setRoutingContext(graph0, routingRequest0.routerId, string0);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, graph0.countVertices());
      
      State state0 = new State(intersectionVertex0, multiShortestPathTree0.options);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertNotNull(state0);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals("68e=`J", intersectionVertex0.getName());
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertFalse(state0.isEverBoarded());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.getReverseOptimizing());
      assertNull(state0.getNonTransitMode());
      assertTrue(state0.isFinal());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertNull(state0.getZone());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      
      boolean boolean0 = multiShortestPathTree0.add(state0);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals("68e=`J", intersectionVertex0.getName());
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertFalse(state0.isEverBoarded());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.getReverseOptimizing());
      assertNull(state0.getNonTransitMode());
      assertTrue(state0.isFinal());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertNull(state0.getZone());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertTrue(boolean0);
      
      SimpleEdge simpleEdge0 = new SimpleEdge(intersectionVertex0, intersectionVertex0, routingRequest0.maxWeight, routingRequest0.elevatorBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertNotNull(simpleEdge0);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, graph0.countVertices());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(1, intersectionVertex0.getDegreeOut());
      assertEquals(1, intersectionVertex0.getDegreeIn());
      assertEquals("68e=`J", intersectionVertex0.getName());
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertTrue(intersectionVertex0.inferredFreeFlowing());
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      assertEquals(19, simpleEdge0.getId());
      assertNull(simpleEdge0.getName());
      assertTrue(simpleEdge0.vertexTypesValid());
      assertFalse(simpleEdge0.isPartial());
      assertEquals(0.0, simpleEdge0.getDistance(), 0.01);
      
      State state1 = simpleEdge0.traverse(state0);
      assertNotSame(state0, state1);
      assertNotSame(state1, state0);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(1.7976931348623157E308, state1.weight, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertNotNull(state1);
      assertFalse(state1.equals((Object)state0));
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(1, intersectionVertex0.getDegreeOut());
      assertEquals(1, intersectionVertex0.getDegreeIn());
      assertEquals("68e=`J", intersectionVertex0.getName());
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertTrue(intersectionVertex0.inferredFreeFlowing());
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertFalse(state0.isEverBoarded());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.getReverseOptimizing());
      assertNull(state0.getNonTransitMode());
      assertTrue(state0.isFinal());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertNull(state0.getZone());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(19, simpleEdge0.getId());
      assertNull(simpleEdge0.getName());
      assertTrue(simpleEdge0.vertexTypesValid());
      assertFalse(simpleEdge0.isPartial());
      assertEquals(0.0, simpleEdge0.getDistance(), 0.01);
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals(1392409371L, state1.getTimeSeconds());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertNull(state1.getZone());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertNull(state1.getNonTransitMode());
      assertEquals(0, state1.getNumBoardings());
      assertEquals(90, state1.getTimeDeltaSeconds());
      assertEquals(0, state1.getPreTransitTime());
      assertFalse(state1.isBikeRenting());
      assertFalse(state1.getReverseOptimizing());
      assertEquals(1392409371000L, state1.getTimeInMillis());
      assertNull(state1.getBackMode());
      assertEquals(1.7976931348623157E308, state1.getWeight(), 0.01);
      assertEquals(90, state1.getAbsTimeDeltaSeconds());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertTrue(state1.isFinal());
      assertFalse(state1.isCarParked());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertEquals(90.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state1.isEverBoarded());
      assertEquals(90L, state1.getElapsedTimeSeconds());
      assertFalse(state1.isBackWalkingBike());
      assertFalse(state1.isOnboard());
      assertEquals(1392409281L, state1.getStartTimeSeconds());
      assertEquals(1.7976931348623157E308, state1.getWeightDelta(), 0.01);
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      
      double double0 = (-413.82415965173124);
      state1.weight = double0;
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(1, intersectionVertex0.getDegreeOut());
      assertEquals(1, intersectionVertex0.getDegreeIn());
      assertEquals("68e=`J", intersectionVertex0.getName());
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertTrue(intersectionVertex0.inferredFreeFlowing());
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertFalse(state0.isEverBoarded());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.getReverseOptimizing());
      assertNull(state0.getNonTransitMode());
      assertTrue(state0.isFinal());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertNull(state0.getZone());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(19, simpleEdge0.getId());
      assertNull(simpleEdge0.getName());
      assertTrue(simpleEdge0.vertexTypesValid());
      assertFalse(simpleEdge0.isPartial());
      assertEquals(0.0, simpleEdge0.getDistance(), 0.01);
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals((-413.82415965173124), state1.getWeightDelta(), 0.01);
      assertEquals(1392409371L, state1.getTimeSeconds());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertNull(state1.getZone());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertNull(state1.getNonTransitMode());
      assertEquals(0, state1.getNumBoardings());
      assertEquals(90, state1.getTimeDeltaSeconds());
      assertEquals(0, state1.getPreTransitTime());
      assertFalse(state1.isBikeRenting());
      assertFalse(state1.getReverseOptimizing());
      assertEquals(1392409371000L, state1.getTimeInMillis());
      assertNull(state1.getBackMode());
      assertEquals(90, state1.getAbsTimeDeltaSeconds());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertTrue(state1.isFinal());
      assertFalse(state1.isCarParked());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertEquals(90.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state1.isEverBoarded());
      assertEquals(90L, state1.getElapsedTimeSeconds());
      assertFalse(state1.isBackWalkingBike());
      assertFalse(state1.isOnboard());
      assertEquals(1392409281L, state1.getStartTimeSeconds());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertEquals((-413.82415965173124), state1.getWeight(), 0.01);
      
      boolean boolean1 = multiShortestPathTree0.visit(state1);
      assertNotSame(state0, state1);
      assertNotSame(state1, state0);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertEquals((-413.82415965173124), state1.weight, 0.01);
      assertFalse(state0.equals((Object)state1));
      assertFalse(state1.equals((Object)state0));
      assertFalse(boolean1 == boolean0);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(1, intersectionVertex0.getDegreeOut());
      assertEquals(1, intersectionVertex0.getDegreeIn());
      assertEquals("68e=`J", intersectionVertex0.getName());
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertTrue(intersectionVertex0.inferredFreeFlowing());
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertFalse(state0.isEverBoarded());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.getReverseOptimizing());
      assertNull(state0.getNonTransitMode());
      assertTrue(state0.isFinal());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertNull(state0.getZone());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(19, simpleEdge0.getId());
      assertNull(simpleEdge0.getName());
      assertTrue(simpleEdge0.vertexTypesValid());
      assertFalse(simpleEdge0.isPartial());
      assertEquals(0.0, simpleEdge0.getDistance(), 0.01);
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals((-413.82415965173124), state1.getWeightDelta(), 0.01);
      assertEquals(1392409371L, state1.getTimeSeconds());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertNull(state1.getZone());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertNull(state1.getNonTransitMode());
      assertEquals(0, state1.getNumBoardings());
      assertEquals(90, state1.getTimeDeltaSeconds());
      assertEquals(0, state1.getPreTransitTime());
      assertFalse(state1.isBikeRenting());
      assertFalse(state1.getReverseOptimizing());
      assertEquals(1392409371000L, state1.getTimeInMillis());
      assertNull(state1.getBackMode());
      assertEquals(90, state1.getAbsTimeDeltaSeconds());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertTrue(state1.isFinal());
      assertFalse(state1.isCarParked());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertEquals(90.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state1.isEverBoarded());
      assertEquals(90L, state1.getElapsedTimeSeconds());
      assertFalse(state1.isBackWalkingBike());
      assertFalse(state1.isOnboard());
      assertEquals(1392409281L, state1.getStartTimeSeconds());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertEquals((-413.82415965173124), state1.getWeight(), 0.01);
      assertFalse(boolean1);
      
      StreetTraversalPermission streetTraversalPermission0 = StreetTraversalPermission.ALL;
      state1.walkDistance = routingRequest0.waitReluctance;
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(1, intersectionVertex0.getDegreeOut());
      assertEquals(1, intersectionVertex0.getDegreeIn());
      assertEquals("68e=`J", intersectionVertex0.getName());
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertTrue(intersectionVertex0.inferredFreeFlowing());
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertFalse(state0.isEverBoarded());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.getReverseOptimizing());
      assertNull(state0.getNonTransitMode());
      assertTrue(state0.isFinal());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertNull(state0.getZone());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(19, simpleEdge0.getId());
      assertNull(simpleEdge0.getName());
      assertTrue(simpleEdge0.vertexTypesValid());
      assertFalse(simpleEdge0.isPartial());
      assertEquals(0.0, simpleEdge0.getDistance(), 0.01);
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals((-413.82415965173124), state1.getWeightDelta(), 0.01);
      assertEquals(1392409371L, state1.getTimeSeconds());
      assertEquals(1.0, state1.getWalkDistance(), 0.01);
      assertNull(state1.getZone());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertNull(state1.getNonTransitMode());
      assertEquals(0, state1.getNumBoardings());
      assertEquals(90, state1.getTimeDeltaSeconds());
      assertEquals(0, state1.getPreTransitTime());
      assertFalse(state1.isBikeRenting());
      assertFalse(state1.getReverseOptimizing());
      assertEquals(1392409371000L, state1.getTimeInMillis());
      assertNull(state1.getBackMode());
      assertEquals(90, state1.getAbsTimeDeltaSeconds());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertTrue(state1.isFinal());
      assertFalse(state1.isCarParked());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertEquals(1.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(90.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state1.isEverBoarded());
      assertEquals(90L, state1.getElapsedTimeSeconds());
      assertFalse(state1.isBackWalkingBike());
      assertFalse(state1.isOnboard());
      assertEquals(1392409281L, state1.getStartTimeSeconds());
      assertEquals(1.0, state1.getWalkSinceLastTransit(), 0.01);
      assertEquals((-413.82415965173124), state1.getWeight(), 0.01);
      
      ElevatorHopEdge elevatorHopEdge0 = new ElevatorHopEdge(intersectionVertex0, intersectionVertex0, streetTraversalPermission0);
      assertTrue(elevatorHopEdge0.wheelchairAccessible);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertNotNull(elevatorHopEdge0);
      assertTrue(elevatorHopEdge0.vertexTypesValid());
      assertEquals(20, elevatorHopEdge0.getId());
      assertEquals(0.0, elevatorHopEdge0.getDistance(), 0.01);
      assertNull(elevatorHopEdge0.getName());
      assertFalse(elevatorHopEdge0.isPartial());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, graph0.countVertices());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(2, intersectionVertex0.getDegreeIn());
      assertEquals("68e=`J", intersectionVertex0.getName());
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(2, intersectionVertex0.getDegreeOut());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      
      State state2 = elevatorHopEdge0.traverse(state0);
      assertNotSame(state2, state0);
      assertNotSame(state2, state1);
      assertNotSame(state0, state1);
      assertNotSame(state0, state2);
      assertTrue(elevatorHopEdge0.wheelchairAccessible);
      assertEquals(20.0, state2.weight, 0.01);
      assertEquals(0.0, state2.walkDistance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertNotNull(state2);
      assertFalse(state2.equals((Object)state0));
      assertFalse(state2.equals((Object)state1));
      assertFalse(state0.equals((Object)state1));
      assertTrue(elevatorHopEdge0.vertexTypesValid());
      assertEquals(20, elevatorHopEdge0.getId());
      assertEquals(0.0, elevatorHopEdge0.getDistance(), 0.01);
      assertNull(elevatorHopEdge0.getName());
      assertFalse(elevatorHopEdge0.isPartial());
      assertEquals(0.0, state2.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state2.getWalkDistance(), 0.01);
      assertEquals(20.0, state2.getWeight(), 0.01);
      assertEquals(20.0, state2.getWeightDelta(), 0.01);
      assertEquals(0, state2.getLastNextArrivalDelta());
      assertEquals(0.0, state2.getWalkSinceLastTransit(), 0.01);
      assertNull(state2.getZone());
      assertEquals(1392409301000L, state2.getTimeInMillis());
      assertEquals(0, state2.getNumBoardings());
      assertEquals(1392409301L, state2.getTimeSeconds());
      assertFalse(state2.isBikeRenting());
      assertEquals(0, state2.getPreTransitTime());
      assertEquals(0.0, state2.getWalkAtLastTransit(), 0.01);
      assertEquals(20, state2.getTimeDeltaSeconds());
      assertFalse(state2.getReverseOptimizing());
      assertNull(state2.getNonTransitMode());
      assertEquals(TraverseMode.WALK, state2.getBackMode());
      assertEquals(0L, state2.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state2.getStartTimeSeconds());
      assertTrue(state2.isFinal());
      assertFalse(state2.isCarParked());
      assertFalse(state2.isEverBoarded());
      assertEquals(0, state2.getPreTransitTimeDelta());
      assertFalse(state2.isBackWalkingBike());
      assertEquals(20.0, state2.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state2.isOnboard());
      assertEquals(20L, state2.getElapsedTimeSeconds());
      assertEquals(20, state2.getAbsTimeDeltaSeconds());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(2, intersectionVertex0.getDegreeIn());
      assertEquals("68e=`J", intersectionVertex0.getName());
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(2, intersectionVertex0.getDegreeOut());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertFalse(state0.isEverBoarded());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.getReverseOptimizing());
      assertNull(state0.getNonTransitMode());
      assertTrue(state0.isFinal());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertNull(state0.getZone());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      
      boolean boolean2 = MultiShortestPathTree.dominates(state1, state2);
      assertNotSame(state0, state1);
      assertNotSame(state0, state2);
      assertNotSame(state1, state2);
      assertNotSame(state1, state0);
      assertNotSame(state2, state0);
      assertNotSame(state2, state1);
      assertTrue(elevatorHopEdge0.wheelchairAccessible);
      assertEquals(20.0, state2.weight, 0.01);
      assertEquals(0.0, state2.walkDistance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(1.0, state1.walkDistance, 0.01);
      assertEquals((-413.82415965173124), state1.weight, 0.01);
      assertFalse(state0.equals((Object)state1));
      assertFalse(state0.equals((Object)state2));
      assertFalse(state1.equals((Object)state2));
      assertFalse(state1.equals((Object)state0));
      assertFalse(state2.equals((Object)state0));
      assertFalse(state2.equals((Object)state1));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(elevatorHopEdge0.vertexTypesValid());
      assertEquals(20, elevatorHopEdge0.getId());
      assertEquals(0.0, elevatorHopEdge0.getDistance(), 0.01);
      assertNull(elevatorHopEdge0.getName());
      assertFalse(elevatorHopEdge0.isPartial());
      assertEquals(0.0, state2.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state2.getWalkDistance(), 0.01);
      assertEquals(20.0, state2.getWeight(), 0.01);
      assertEquals(20.0, state2.getWeightDelta(), 0.01);
      assertEquals(0, state2.getLastNextArrivalDelta());
      assertEquals(0.0, state2.getWalkSinceLastTransit(), 0.01);
      assertNull(state2.getZone());
      assertEquals(1392409301000L, state2.getTimeInMillis());
      assertEquals(0, state2.getNumBoardings());
      assertEquals(1392409301L, state2.getTimeSeconds());
      assertFalse(state2.isBikeRenting());
      assertEquals(0, state2.getPreTransitTime());
      assertEquals(0.0, state2.getWalkAtLastTransit(), 0.01);
      assertEquals(20, state2.getTimeDeltaSeconds());
      assertFalse(state2.getReverseOptimizing());
      assertNull(state2.getNonTransitMode());
      assertEquals(TraverseMode.WALK, state2.getBackMode());
      assertEquals(0L, state2.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state2.getStartTimeSeconds());
      assertTrue(state2.isFinal());
      assertFalse(state2.isCarParked());
      assertFalse(state2.isEverBoarded());
      assertEquals(0, state2.getPreTransitTimeDelta());
      assertFalse(state2.isBackWalkingBike());
      assertEquals(20.0, state2.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state2.isOnboard());
      assertEquals(20L, state2.getElapsedTimeSeconds());
      assertEquals(20, state2.getAbsTimeDeltaSeconds());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(2, intersectionVertex0.getDegreeIn());
      assertEquals("68e=`J", intersectionVertex0.getName());
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(2, intersectionVertex0.getDegreeOut());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertFalse(state0.isEverBoarded());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.getReverseOptimizing());
      assertNull(state0.getNonTransitMode());
      assertTrue(state0.isFinal());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertNull(state0.getZone());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(19, simpleEdge0.getId());
      assertNull(simpleEdge0.getName());
      assertTrue(simpleEdge0.vertexTypesValid());
      assertFalse(simpleEdge0.isPartial());
      assertEquals(0.0, simpleEdge0.getDistance(), 0.01);
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals((-413.82415965173124), state1.getWeightDelta(), 0.01);
      assertEquals(1392409371L, state1.getTimeSeconds());
      assertEquals(1.0, state1.getWalkDistance(), 0.01);
      assertNull(state1.getZone());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertNull(state1.getNonTransitMode());
      assertEquals(0, state1.getNumBoardings());
      assertEquals(90, state1.getTimeDeltaSeconds());
      assertEquals(0, state1.getPreTransitTime());
      assertFalse(state1.isBikeRenting());
      assertFalse(state1.getReverseOptimizing());
      assertEquals(1392409371000L, state1.getTimeInMillis());
      assertNull(state1.getBackMode());
      assertEquals(90, state1.getAbsTimeDeltaSeconds());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertTrue(state1.isFinal());
      assertFalse(state1.isCarParked());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertEquals(1.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(90.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state1.isEverBoarded());
      assertEquals(90L, state1.getElapsedTimeSeconds());
      assertFalse(state1.isBackWalkingBike());
      assertFalse(state1.isOnboard());
      assertEquals(1392409281L, state1.getStartTimeSeconds());
      assertEquals(1.0, state1.getWalkSinceLastTransit(), 0.01);
      assertEquals((-413.82415965173124), state1.getWeight(), 0.01);
      assertFalse(boolean2);
      
      boolean boolean3 = multiShortestPathTree0.add(state1);
      assertNotSame(state0, state1);
      assertNotSame(state0, state2);
      assertNotSame(state1, state2);
      assertNotSame(state1, state0);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(1.0, state1.walkDistance, 0.01);
      assertEquals((-413.82415965173124), state1.weight, 0.01);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(state0.equals((Object)state1));
      assertFalse(state0.equals((Object)state2));
      assertFalse(state1.equals((Object)state2));
      assertFalse(state1.equals((Object)state0));
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(2, intersectionVertex0.getDegreeIn());
      assertEquals("68e=`J", intersectionVertex0.getName());
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(2, intersectionVertex0.getDegreeOut());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertFalse(state0.isEverBoarded());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.getReverseOptimizing());
      assertNull(state0.getNonTransitMode());
      assertTrue(state0.isFinal());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertNull(state0.getZone());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(19, simpleEdge0.getId());
      assertNull(simpleEdge0.getName());
      assertTrue(simpleEdge0.vertexTypesValid());
      assertFalse(simpleEdge0.isPartial());
      assertEquals(0.0, simpleEdge0.getDistance(), 0.01);
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals((-413.82415965173124), state1.getWeightDelta(), 0.01);
      assertEquals(1392409371L, state1.getTimeSeconds());
      assertEquals(1.0, state1.getWalkDistance(), 0.01);
      assertNull(state1.getZone());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertNull(state1.getNonTransitMode());
      assertEquals(0, state1.getNumBoardings());
      assertEquals(90, state1.getTimeDeltaSeconds());
      assertEquals(0, state1.getPreTransitTime());
      assertFalse(state1.isBikeRenting());
      assertFalse(state1.getReverseOptimizing());
      assertEquals(1392409371000L, state1.getTimeInMillis());
      assertNull(state1.getBackMode());
      assertEquals(90, state1.getAbsTimeDeltaSeconds());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertTrue(state1.isFinal());
      assertFalse(state1.isCarParked());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertEquals(1.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(90.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state1.isEverBoarded());
      assertEquals(90L, state1.getElapsedTimeSeconds());
      assertFalse(state1.isBackWalkingBike());
      assertFalse(state1.isOnboard());
      assertEquals(1392409281L, state1.getStartTimeSeconds());
      assertEquals(1.0, state1.getWalkSinceLastTransit(), 0.01);
      assertEquals((-413.82415965173124), state1.getWeight(), 0.01);
      assertTrue(boolean3);
      
      State state3 = multiShortestPathTree0.getState(intersectionVertex0);
      assertNotSame(state3, state2);
      assertSame(state3, state1);
      assertNotSame(state3, state0);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals((-413.82415965173124), state3.weight, 0.01);
      assertEquals(1.0, state3.walkDistance, 0.01);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertNotNull(state3);
      assertFalse(state3.equals((Object)state2));
      assertFalse(state3.equals((Object)state0));
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertTrue(state3.isFinal());
      assertEquals(0L, state3.getLastAlightedTimeSeconds());
      assertEquals(90, state3.getTimeDeltaSeconds());
      assertEquals(0, state3.getNumBoardings());
      assertEquals(0.0, state3.getWalkAtLastTransit(), 0.01);
      assertFalse(state3.isBikeRenting());
      assertEquals(0, state3.getPreTransitTime());
      assertNull(state3.getBackMode());
      assertFalse(state3.getReverseOptimizing());
      assertNull(state3.getNonTransitMode());
      assertEquals(0, state3.getLastNextArrivalDelta());
      assertEquals(1392409371000L, state3.getTimeInMillis());
      assertEquals(1392409371L, state3.getTimeSeconds());
      assertEquals(1.0, state3.getWalkDistance(), 0.01);
      assertEquals((-413.82415965173124), state3.getWeightDelta(), 0.01);
      assertNull(state3.getZone());
      assertEquals(1.0, state3.getWalkSinceLastTransit(), 0.01);
      assertEquals(90.0, state3.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state3.getPreTransitTimeDelta());
      assertFalse(state3.isCarParked());
      assertFalse(state3.isOnboard());
      assertEquals(1.0, state3.getWalkDistanceDelta(), 0.01);
      assertFalse(state3.isEverBoarded());
      assertEquals(1392409281L, state3.getStartTimeSeconds());
      assertEquals(90L, state3.getElapsedTimeSeconds());
      assertFalse(state3.isBackWalkingBike());
      assertEquals(90, state3.getAbsTimeDeltaSeconds());
      assertEquals((-413.82415965173124), state3.getWeight(), 0.01);
      assertEquals(1, graph0.countVertices());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(2, intersectionVertex0.getDegreeIn());
      assertEquals("68e=`J", intersectionVertex0.getName());
      assertEquals(2.9, intersectionVertex0.getLon(), 0.01);
      assertEquals(120.0, intersectionVertex0.getY(), 0.01);
      assertEquals(2, intersectionVertex0.getDegreeOut());
      assertEquals(120.0, intersectionVertex0.getLat(), 0.01);
      assertEquals(2.9, intersectionVertex0.getX(), 0.01);
      
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertNotNull(set0);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      
      System.setCurrentTimeMillis(routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
  }
}
