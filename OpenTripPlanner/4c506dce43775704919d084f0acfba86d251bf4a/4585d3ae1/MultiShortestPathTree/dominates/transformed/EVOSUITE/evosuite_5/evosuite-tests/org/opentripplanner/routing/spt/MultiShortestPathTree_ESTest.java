/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 04 17:35:59 GMT 2021
 */

package org.opentripplanner.routing.spt;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.vividsolutions.jts.geom.GeometryFactory;
import com.vividsolutions.jts.geom.LineString;
import java.io.File;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.net.URI;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.TreeMap;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.onebusaway.gtfs.impl.GtfsRelationalDaoImpl;
import org.onebusaway.gtfs.model.Route;
import org.onebusaway.gtfs.model.StopTime;
import org.onebusaway.gtfs.model.Trip;
import org.opentripplanner.common.geometry.PackedCoordinateSequence;
import org.opentripplanner.graph_builder.annotation.StopUnlinked;
import org.opentripplanner.model.StopPattern;
import org.opentripplanner.routing.bike_rental.BikeRentalStation;
import org.opentripplanner.routing.core.OptimizeType;
import org.opentripplanner.routing.core.RoutingRequest;
import org.opentripplanner.routing.core.State;
import org.opentripplanner.routing.core.TraverseMode;
import org.opentripplanner.routing.core.TraverseModeSet;
import org.opentripplanner.routing.edgetype.ElevatorHopEdge;
import org.opentripplanner.routing.edgetype.FreeEdge;
import org.opentripplanner.routing.edgetype.PartialStreetEdge;
import org.opentripplanner.routing.edgetype.SimpleEdge;
import org.opentripplanner.routing.edgetype.StreetBikeRentalLink;
import org.opentripplanner.routing.edgetype.StreetTraversalPermission;
import org.opentripplanner.routing.edgetype.StreetWithElevationEdge;
import org.opentripplanner.routing.edgetype.TransitBoardAlight;
import org.opentripplanner.routing.edgetype.TripPattern;
import org.opentripplanner.routing.graph.Graph;
import org.opentripplanner.routing.graph.GraphIndex;
import org.opentripplanner.routing.graph.Vertex;
import org.opentripplanner.routing.spt.GraphPath;
import org.opentripplanner.routing.spt.MultiShortestPathTree;
import org.opentripplanner.routing.vertextype.BikeRentalStationVertex;
import org.opentripplanner.routing.vertextype.ElevatorOffboardVertex;
import org.opentripplanner.routing.vertextype.ElevatorOnboardVertex;
import org.opentripplanner.routing.vertextype.ExitVertex;
import org.opentripplanner.routing.vertextype.IntersectionVertex;
import org.opentripplanner.routing.vertextype.OnboardDepartVertex;
import org.opentripplanner.routing.vertextype.PatternArriveVertex;
import org.opentripplanner.routing.vertextype.PatternDepartVertex;
import org.opentripplanner.routing.vertextype.PatternStopVertex;
import org.opentripplanner.routing.vertextype.StreetVertex;
import org.opentripplanner.routing.vertextype.TransitStop;
import org.opentripplanner.routing.vertextype.TransitStopDepart;
import org.opentripplanner.routing.vertextype.TransitStopStreetVertex;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MultiShortestPathTree_ESTest extends MultiShortestPathTree_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertNotNull(multiShortestPathTree0);
      
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getVertexCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      RoutingRequest routingRequest0 = new RoutingRequest();
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertNotNull(routingRequest0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertNotNull(multiShortestPathTree0);
      
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertNotNull(set0);
      
      Vertex vertex0 = null;
      List<GraphPath> list0 = multiShortestPathTree0.getPaths(vertex0, routingRequest0.walkingBike);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertNotNull(list0);
      
      State state0 = new State(vertex0, routingRequest0);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isEverBoarded());
      assertTrue(state0.isFinal());
      assertFalse(state0.isCarParked());
      assertNull(state0.getBackMode());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertNotNull(state0);
      
      State state1 = multiShortestPathTree0.getState(vertex0);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertNull(state1);
      
      state0.weight = (double) multiShortestPathTree0.TIME_DIFF_MARGIN;
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(30.0, state0.getWeight(), 0.01);
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isEverBoarded());
      assertTrue(state0.isFinal());
      assertFalse(state0.isCarParked());
      assertNull(state0.getBackMode());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      
      boolean boolean0 = multiShortestPathTree0.add(state0);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(30.0, state0.getWeight(), 0.01);
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isEverBoarded());
      assertTrue(state0.isFinal());
      assertFalse(state0.isCarParked());
      assertNull(state0.getBackMode());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(30.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertTrue(boolean0);
      
      State state2 = new State(vertex0, routingRequest0);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0, state2.getLastNextArrivalDelta());
      assertFalse(state2.isBackWalkingBike());
      assertEquals(0, state2.getAbsTimeDeltaSeconds());
      assertEquals(0L, state2.getElapsedTimeSeconds());
      assertEquals(1392409281000L, state2.getTimeInMillis());
      assertEquals(0, state2.getPreTransitTime());
      assertEquals(0, state2.getPreTransitTimeDelta());
      assertEquals(0, state2.getTimeDeltaSeconds());
      assertNull(state2.getZone());
      assertEquals(0.0, state2.getWalkSinceLastTransit(), 0.01);
      assertNull(state2.getBackMode());
      assertEquals(1392409281L, state2.getTimeSeconds());
      assertEquals(0.0, state2.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state2.getLastAlightedTimeSeconds());
      assertFalse(state2.isBikeRenting());
      assertEquals(0.0, state2.getWalkDistanceDelta(), 0.01);
      assertFalse(state2.getReverseOptimizing());
      assertTrue(state2.isFinal());
      assertFalse(state2.isEverBoarded());
      assertEquals(TraverseMode.WALK, state2.getNonTransitMode());
      assertEquals(0, state2.getNumBoardings());
      assertFalse(state2.isCarParked());
      assertFalse(state2.isOnboard());
      assertEquals(0.0, state2.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state2.getWeight(), 0.01);
      assertEquals(1392409281L, state2.getStartTimeSeconds());
      assertEquals(0.0, state2.getWalkDistance(), 0.01);
      assertFalse(state2.equals((Object)state0));
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, state2.weight, 0.01);
      assertEquals(0.0, state2.walkDistance, 0.01);
      assertNotNull(state2);
      
      state2.weight = routingRequest0.preTransitOverageRate;
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0, state2.getLastNextArrivalDelta());
      assertFalse(state2.isBackWalkingBike());
      assertEquals(0, state2.getAbsTimeDeltaSeconds());
      assertEquals(0L, state2.getElapsedTimeSeconds());
      assertEquals(1392409281000L, state2.getTimeInMillis());
      assertEquals(0, state2.getPreTransitTime());
      assertEquals(0, state2.getPreTransitTimeDelta());
      assertEquals(0, state2.getTimeDeltaSeconds());
      assertNull(state2.getZone());
      assertEquals(0.0, state2.getWalkSinceLastTransit(), 0.01);
      assertNull(state2.getBackMode());
      assertEquals(1392409281L, state2.getTimeSeconds());
      assertEquals(0.0, state2.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state2.getLastAlightedTimeSeconds());
      assertFalse(state2.isBikeRenting());
      assertEquals(0.0, state2.getWalkDistanceDelta(), 0.01);
      assertEquals(10.0, state2.getWeight(), 0.01);
      assertFalse(state2.getReverseOptimizing());
      assertTrue(state2.isFinal());
      assertFalse(state2.isEverBoarded());
      assertEquals(TraverseMode.WALK, state2.getNonTransitMode());
      assertEquals(0, state2.getNumBoardings());
      assertFalse(state2.isCarParked());
      assertFalse(state2.isOnboard());
      assertEquals(0.0, state2.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state2.getStartTimeSeconds());
      assertEquals(0.0, state2.getWalkDistance(), 0.01);
      
      boolean boolean1 = multiShortestPathTree0.add(state2);
      assertNotSame(state2, state0);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(0, state2.getLastNextArrivalDelta());
      assertFalse(state2.isBackWalkingBike());
      assertEquals(0, state2.getAbsTimeDeltaSeconds());
      assertEquals(0L, state2.getElapsedTimeSeconds());
      assertEquals(1392409281000L, state2.getTimeInMillis());
      assertEquals(0, state2.getPreTransitTime());
      assertEquals(0, state2.getPreTransitTimeDelta());
      assertEquals(0, state2.getTimeDeltaSeconds());
      assertNull(state2.getZone());
      assertEquals(0.0, state2.getWalkSinceLastTransit(), 0.01);
      assertNull(state2.getBackMode());
      assertEquals(1392409281L, state2.getTimeSeconds());
      assertEquals(0.0, state2.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state2.getLastAlightedTimeSeconds());
      assertFalse(state2.isBikeRenting());
      assertEquals(0.0, state2.getWalkDistanceDelta(), 0.01);
      assertEquals(10.0, state2.getWeight(), 0.01);
      assertFalse(state2.getReverseOptimizing());
      assertTrue(state2.isFinal());
      assertFalse(state2.isEverBoarded());
      assertEquals(TraverseMode.WALK, state2.getNonTransitMode());
      assertEquals(0, state2.getNumBoardings());
      assertFalse(state2.isCarParked());
      assertFalse(state2.isOnboard());
      assertEquals(0.0, state2.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state2.getStartTimeSeconds());
      assertEquals(0.0, state2.getWalkDistance(), 0.01);
      assertFalse(state2.equals((Object)state0));
      assertTrue(boolean1 == boolean0);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(10.0, state2.weight, 0.01);
      assertEquals(0.0, state2.walkDistance, 0.01);
      assertTrue(boolean1);
      
      boolean boolean2 = multiShortestPathTree0.add(state0);
      assertNotSame(state0, state2);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(30.0, state0.getWeight(), 0.01);
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isEverBoarded());
      assertTrue(state0.isFinal());
      assertFalse(state0.isCarParked());
      assertNull(state0.getBackMode());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertFalse(state0.equals((Object)state2));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(30.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertFalse(boolean2);
      
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getState(vertex0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.core.State", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      RoutingRequest routingRequest0 = new RoutingRequest();
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertNotNull(routingRequest0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertNotNull(multiShortestPathTree0);
      
      Vertex vertex0 = null;
      State state0 = new State(vertex0, routingRequest0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertFalse(state0.isOnboard());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertFalse(state0.isEverBoarded());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertTrue(state0.isFinal());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertNotNull(state0);
      
      boolean boolean0 = multiShortestPathTree0.add(state0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertFalse(state0.isOnboard());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertFalse(state0.isEverBoarded());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertTrue(state0.isFinal());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertTrue(boolean0);
      
      State state1 = new State(vertex0, routingRequest0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(state1.isCarParked());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertEquals(0, state1.getPreTransitTime());
      assertTrue(state1.isFinal());
      assertFalse(state1.isBikeRenting());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state1.isBackWalkingBike());
      assertEquals(1392409281L, state1.getStartTimeSeconds());
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertEquals(1392409281000L, state1.getTimeInMillis());
      assertNull(state1.getBackMode());
      assertFalse(state1.isOnboard());
      assertEquals(0, state1.getNumBoardings());
      assertEquals(1392409281L, state1.getTimeSeconds());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertFalse(state1.getReverseOptimizing());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertFalse(state1.isEverBoarded());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(TraverseMode.WALK, state1.getNonTransitMode());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertNull(state1.getZone());
      assertFalse(state1.equals((Object)state0));
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, state1.weight, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertNotNull(state1);
      
      boolean boolean1 = multiShortestPathTree0.visit(state1);
      assertNotSame(state1, state0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(state1.isCarParked());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertEquals(0, state1.getPreTransitTime());
      assertTrue(state1.isFinal());
      assertFalse(state1.isBikeRenting());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state1.isBackWalkingBike());
      assertEquals(1392409281L, state1.getStartTimeSeconds());
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertEquals(1392409281000L, state1.getTimeInMillis());
      assertNull(state1.getBackMode());
      assertFalse(state1.isOnboard());
      assertEquals(0, state1.getNumBoardings());
      assertEquals(1392409281L, state1.getTimeSeconds());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertFalse(state1.getReverseOptimizing());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertFalse(state1.isEverBoarded());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(TraverseMode.WALK, state1.getNonTransitMode());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertNull(state1.getZone());
      assertFalse(state1.equals((Object)state0));
      assertFalse(boolean1 == boolean0);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.0, state1.weight, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertFalse(boolean1);
      
      String string0 = multiShortestPathTree0.toString();
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals("MultiSPT(1 vertices)", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getState(vertex0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.core.State", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      RoutingRequest routingRequest0 = new RoutingRequest();
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.batch);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertNotNull(routingRequest0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.batch);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertNotNull(multiShortestPathTree0);
      
      Vertex vertex0 = null;
      State state0 = new State(vertex0, routingRequest0);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(state0.isFinal());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertNull(state0.getBackMode());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.batch);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertNotNull(state0);
      
      boolean boolean0 = multiShortestPathTree0.add(state0);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertTrue(state0.isFinal());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertNull(state0.getBackMode());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.batch);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertTrue(boolean0);
      
      boolean boolean1 = multiShortestPathTree0.visit(state0);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertTrue(state0.isFinal());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertNull(state0.getBackMode());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertTrue(boolean1 == boolean0);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.batch);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertTrue(boolean1);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      RoutingRequest routingRequest0 = new RoutingRequest();
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertNotNull(routingRequest0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertNotNull(multiShortestPathTree0);
      
      Vertex vertex0 = null;
      State state0 = new State(vertex0, routingRequest0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertNull(state0.getBackMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertFalse(state0.isEverBoarded());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getNumBoardings());
      assertNull(state0.getZone());
      assertTrue(state0.isFinal());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertNotNull(state0);
      
      boolean boolean0 = multiShortestPathTree0.add(state0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertNull(state0.getBackMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertFalse(state0.isEverBoarded());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getNumBoardings());
      assertNull(state0.getZone());
      assertTrue(state0.isFinal());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertTrue(boolean0);
      
      boolean boolean1 = multiShortestPathTree0.add(state0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertNull(state0.getBackMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertFalse(state0.isEverBoarded());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getNumBoardings());
      assertNull(state0.getZone());
      assertTrue(state0.isFinal());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertTrue(boolean1 == boolean0);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertTrue(boolean1);
      
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertNotNull(collection0);
      assertTrue(collection0.contains(state0));
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      long long0 = 0L;
      String string0 = "B/\"/V,uIt7b/!48u";
      OnboardDepartVertex onboardDepartVertex0 = new OnboardDepartVertex(string0, long0, long0);
      assertEquals(1, onboardDepartVertex0.getMaxIndex());
      assertEquals(0.0, onboardDepartVertex0.getLon(), 0.01);
      assertEquals("B/\"/V,uIt7b/!48u", onboardDepartVertex0.getLabel());
      assertEquals(0.0, onboardDepartVertex0.getLat(), 0.01);
      assertEquals(0.0, onboardDepartVertex0.getY(), 0.01);
      assertEquals(0.0, onboardDepartVertex0.getX(), 0.01);
      assertEquals(0, onboardDepartVertex0.getIndex());
      assertEquals(0, onboardDepartVertex0.getDegreeIn());
      assertEquals(0, onboardDepartVertex0.getDegreeOut());
      assertEquals("B/\"/V,uIt7b/!48u", onboardDepartVertex0.getName());
      assertNotNull(onboardDepartVertex0);
      
      StreetTraversalPermission streetTraversalPermission0 = StreetTraversalPermission.BICYCLE_AND_DRIVING;
      ElevatorHopEdge elevatorHopEdge0 = new ElevatorHopEdge(onboardDepartVertex0, onboardDepartVertex0, streetTraversalPermission0);
      assertEquals(1, onboardDepartVertex0.getMaxIndex());
      assertEquals(0.0, onboardDepartVertex0.getLon(), 0.01);
      assertEquals("B/\"/V,uIt7b/!48u", onboardDepartVertex0.getLabel());
      assertEquals(0.0, onboardDepartVertex0.getLat(), 0.01);
      assertEquals(0.0, onboardDepartVertex0.getY(), 0.01);
      assertEquals(0.0, onboardDepartVertex0.getX(), 0.01);
      assertEquals(1, onboardDepartVertex0.getDegreeOut());
      assertEquals(0, onboardDepartVertex0.getIndex());
      assertEquals("B/\"/V,uIt7b/!48u", onboardDepartVertex0.getName());
      assertEquals(1, onboardDepartVertex0.getDegreeIn());
      assertTrue(elevatorHopEdge0.vertexTypesValid());
      assertNull(elevatorHopEdge0.getName());
      assertEquals(0.0, elevatorHopEdge0.getDistance(), 0.01);
      assertFalse(elevatorHopEdge0.isPartial());
      assertEquals(0, elevatorHopEdge0.getId());
      assertTrue(elevatorHopEdge0.wheelchairAccessible);
      assertNotNull(elevatorHopEdge0);
      
      TraverseMode traverseMode0 = TraverseMode.TRAM;
      OptimizeType optimizeType0 = OptimizeType.SAFE;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertNotNull(routingRequest0);
      
      State state0 = new State(onboardDepartVertex0, routingRequest0);
      assertEquals(1, onboardDepartVertex0.getMaxIndex());
      assertEquals(0.0, onboardDepartVertex0.getLon(), 0.01);
      assertEquals("B/\"/V,uIt7b/!48u", onboardDepartVertex0.getLabel());
      assertEquals(0.0, onboardDepartVertex0.getLat(), 0.01);
      assertEquals(0.0, onboardDepartVertex0.getY(), 0.01);
      assertEquals(0.0, onboardDepartVertex0.getX(), 0.01);
      assertEquals(1, onboardDepartVertex0.getDegreeOut());
      assertEquals(0, onboardDepartVertex0.getIndex());
      assertEquals("B/\"/V,uIt7b/!48u", onboardDepartVertex0.getName());
      assertEquals(1, onboardDepartVertex0.getDegreeIn());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertFalse(state0.isBikeRenting());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertTrue(state0.isFinal());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isEverBoarded());
      assertNull(state0.getBackMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertFalse(state0.isOnboard());
      assertNull(state0.getNonTransitMode());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertNotNull(state0);
      
      State state1 = elevatorHopEdge0.traverse(state0);
      assertNotSame(state0, state1);
      assertNotSame(state1, state0);
      assertEquals(1, onboardDepartVertex0.getMaxIndex());
      assertEquals(0.0, onboardDepartVertex0.getLon(), 0.01);
      assertEquals("B/\"/V,uIt7b/!48u", onboardDepartVertex0.getLabel());
      assertEquals(0.0, onboardDepartVertex0.getLat(), 0.01);
      assertEquals(0.0, onboardDepartVertex0.getY(), 0.01);
      assertEquals(0.0, onboardDepartVertex0.getX(), 0.01);
      assertEquals(1, onboardDepartVertex0.getDegreeOut());
      assertEquals(0, onboardDepartVertex0.getIndex());
      assertEquals("B/\"/V,uIt7b/!48u", onboardDepartVertex0.getName());
      assertEquals(1, onboardDepartVertex0.getDegreeIn());
      assertTrue(elevatorHopEdge0.vertexTypesValid());
      assertNull(elevatorHopEdge0.getName());
      assertEquals(0.0, elevatorHopEdge0.getDistance(), 0.01);
      assertFalse(elevatorHopEdge0.isPartial());
      assertEquals(0, elevatorHopEdge0.getId());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertFalse(state0.isBikeRenting());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertTrue(state0.isFinal());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isEverBoarded());
      assertNull(state0.getBackMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertFalse(state0.isOnboard());
      assertNull(state0.getNonTransitMode());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertEquals(1392409301000L, state1.getTimeInMillis());
      assertFalse(state1.isOnboard());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(20.0, state1.getWeightDelta(), 0.01);
      assertNull(state1.getNonTransitMode());
      assertFalse(state1.isBikeRenting());
      assertEquals(20.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state1.getPreTransitTime());
      assertEquals(0, state1.getNumBoardings());
      assertEquals(1392409301L, state1.getTimeSeconds());
      assertEquals(20.0, state1.getWeight(), 0.01);
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state1.getStartTimeSeconds());
      assertEquals(20, state1.getAbsTimeDeltaSeconds());
      assertTrue(state1.isFinal());
      assertFalse(state1.isCarParked());
      assertEquals(20L, state1.getElapsedTimeSeconds());
      assertEquals(20, state1.getTimeDeltaSeconds());
      assertFalse(state1.getReverseOptimizing());
      assertFalse(state1.isEverBoarded());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertNull(state1.getZone());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertEquals(TraverseMode.WALK, state1.getBackMode());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertFalse(state1.equals((Object)state0));
      assertTrue(elevatorHopEdge0.wheelchairAccessible);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(20.0, state1.weight, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertNotNull(state1);
      
      boolean boolean0 = MultiShortestPathTree.dominates(state1, state1);
      assertNotSame(state0, state1);
      assertNotSame(state1, state0);
      assertEquals(1, onboardDepartVertex0.getMaxIndex());
      assertEquals(0.0, onboardDepartVertex0.getLon(), 0.01);
      assertEquals("B/\"/V,uIt7b/!48u", onboardDepartVertex0.getLabel());
      assertEquals(0.0, onboardDepartVertex0.getLat(), 0.01);
      assertEquals(0.0, onboardDepartVertex0.getY(), 0.01);
      assertEquals(0.0, onboardDepartVertex0.getX(), 0.01);
      assertEquals(1, onboardDepartVertex0.getDegreeOut());
      assertEquals(0, onboardDepartVertex0.getIndex());
      assertEquals("B/\"/V,uIt7b/!48u", onboardDepartVertex0.getName());
      assertEquals(1, onboardDepartVertex0.getDegreeIn());
      assertTrue(elevatorHopEdge0.vertexTypesValid());
      assertNull(elevatorHopEdge0.getName());
      assertEquals(0.0, elevatorHopEdge0.getDistance(), 0.01);
      assertFalse(elevatorHopEdge0.isPartial());
      assertEquals(0, elevatorHopEdge0.getId());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertFalse(state0.isBikeRenting());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertTrue(state0.isFinal());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isEverBoarded());
      assertNull(state0.getBackMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertFalse(state0.isOnboard());
      assertNull(state0.getNonTransitMode());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertEquals(1392409301000L, state1.getTimeInMillis());
      assertFalse(state1.isOnboard());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(20.0, state1.getWeightDelta(), 0.01);
      assertNull(state1.getNonTransitMode());
      assertFalse(state1.isBikeRenting());
      assertEquals(20.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state1.getPreTransitTime());
      assertEquals(0, state1.getNumBoardings());
      assertEquals(1392409301L, state1.getTimeSeconds());
      assertEquals(20.0, state1.getWeight(), 0.01);
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state1.getStartTimeSeconds());
      assertEquals(20, state1.getAbsTimeDeltaSeconds());
      assertTrue(state1.isFinal());
      assertFalse(state1.isCarParked());
      assertEquals(20L, state1.getElapsedTimeSeconds());
      assertEquals(20, state1.getTimeDeltaSeconds());
      assertFalse(state1.getReverseOptimizing());
      assertFalse(state1.isEverBoarded());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertNull(state1.getZone());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertEquals(TraverseMode.WALK, state1.getBackMode());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertFalse(state0.equals((Object)state1));
      assertFalse(state1.equals((Object)state0));
      assertTrue(elevatorHopEdge0.wheelchairAccessible);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(20.0, state1.weight, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertTrue(boolean0);
      
      boolean boolean1 = MultiShortestPathTree.dominates(state0, state1);
      assertNotSame(state0, state1);
      assertNotSame(state1, state0);
      assertEquals(1, onboardDepartVertex0.getMaxIndex());
      assertEquals(0.0, onboardDepartVertex0.getLon(), 0.01);
      assertEquals("B/\"/V,uIt7b/!48u", onboardDepartVertex0.getLabel());
      assertEquals(0.0, onboardDepartVertex0.getLat(), 0.01);
      assertEquals(0.0, onboardDepartVertex0.getY(), 0.01);
      assertEquals(0.0, onboardDepartVertex0.getX(), 0.01);
      assertEquals(1, onboardDepartVertex0.getDegreeOut());
      assertEquals(0, onboardDepartVertex0.getIndex());
      assertEquals("B/\"/V,uIt7b/!48u", onboardDepartVertex0.getName());
      assertEquals(1, onboardDepartVertex0.getDegreeIn());
      assertTrue(elevatorHopEdge0.vertexTypesValid());
      assertNull(elevatorHopEdge0.getName());
      assertEquals(0.0, elevatorHopEdge0.getDistance(), 0.01);
      assertFalse(elevatorHopEdge0.isPartial());
      assertEquals(0, elevatorHopEdge0.getId());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertFalse(state0.isBikeRenting());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertTrue(state0.isFinal());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isEverBoarded());
      assertNull(state0.getBackMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertFalse(state0.isOnboard());
      assertNull(state0.getNonTransitMode());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertEquals(1392409301000L, state1.getTimeInMillis());
      assertFalse(state1.isOnboard());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(20.0, state1.getWeightDelta(), 0.01);
      assertNull(state1.getNonTransitMode());
      assertFalse(state1.isBikeRenting());
      assertEquals(20.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state1.getPreTransitTime());
      assertEquals(0, state1.getNumBoardings());
      assertEquals(1392409301L, state1.getTimeSeconds());
      assertEquals(20.0, state1.getWeight(), 0.01);
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state1.getStartTimeSeconds());
      assertEquals(20, state1.getAbsTimeDeltaSeconds());
      assertTrue(state1.isFinal());
      assertFalse(state1.isCarParked());
      assertEquals(20L, state1.getElapsedTimeSeconds());
      assertEquals(20, state1.getTimeDeltaSeconds());
      assertFalse(state1.getReverseOptimizing());
      assertFalse(state1.isEverBoarded());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertNull(state1.getZone());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertEquals(TraverseMode.WALK, state1.getBackMode());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertFalse(state0.equals((Object)state1));
      assertFalse(state1.equals((Object)state0));
      assertTrue(boolean1 == boolean0);
      assertTrue(elevatorHopEdge0.wheelchairAccessible);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(20.0, state1.weight, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertTrue(boolean1);
      
      boolean boolean2 = MultiShortestPathTree.dominates(state0, state1);
      assertNotSame(state0, state1);
      assertNotSame(state1, state0);
      assertEquals(1, onboardDepartVertex0.getMaxIndex());
      assertEquals(0.0, onboardDepartVertex0.getLon(), 0.01);
      assertEquals("B/\"/V,uIt7b/!48u", onboardDepartVertex0.getLabel());
      assertEquals(0.0, onboardDepartVertex0.getLat(), 0.01);
      assertEquals(0.0, onboardDepartVertex0.getY(), 0.01);
      assertEquals(0.0, onboardDepartVertex0.getX(), 0.01);
      assertEquals(1, onboardDepartVertex0.getDegreeOut());
      assertEquals(0, onboardDepartVertex0.getIndex());
      assertEquals("B/\"/V,uIt7b/!48u", onboardDepartVertex0.getName());
      assertEquals(1, onboardDepartVertex0.getDegreeIn());
      assertTrue(elevatorHopEdge0.vertexTypesValid());
      assertNull(elevatorHopEdge0.getName());
      assertEquals(0.0, elevatorHopEdge0.getDistance(), 0.01);
      assertFalse(elevatorHopEdge0.isPartial());
      assertEquals(0, elevatorHopEdge0.getId());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertFalse(state0.isBikeRenting());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertTrue(state0.isFinal());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isEverBoarded());
      assertNull(state0.getBackMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertFalse(state0.isOnboard());
      assertNull(state0.getNonTransitMode());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertEquals(1392409301000L, state1.getTimeInMillis());
      assertFalse(state1.isOnboard());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(20.0, state1.getWeightDelta(), 0.01);
      assertNull(state1.getNonTransitMode());
      assertFalse(state1.isBikeRenting());
      assertEquals(20.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state1.getPreTransitTime());
      assertEquals(0, state1.getNumBoardings());
      assertEquals(1392409301L, state1.getTimeSeconds());
      assertEquals(20.0, state1.getWeight(), 0.01);
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state1.getStartTimeSeconds());
      assertEquals(20, state1.getAbsTimeDeltaSeconds());
      assertTrue(state1.isFinal());
      assertFalse(state1.isCarParked());
      assertEquals(20L, state1.getElapsedTimeSeconds());
      assertEquals(20, state1.getTimeDeltaSeconds());
      assertFalse(state1.getReverseOptimizing());
      assertFalse(state1.isEverBoarded());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertNull(state1.getZone());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertEquals(TraverseMode.WALK, state1.getBackMode());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertFalse(state0.equals((Object)state1));
      assertFalse(state1.equals((Object)state0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(elevatorHopEdge0.wheelchairAccessible);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(20.0, state1.weight, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertTrue(boolean2);
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertNotNull(multiShortestPathTree0);
      
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getAllStates();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.CUSTOM_MOTOR_VEHICLE;
      OptimizeType optimizeType0 = OptimizeType.QUICK;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0, optimizeType0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertNotNull(routingRequest0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertNotNull(multiShortestPathTree0);
      
      int int0 = multiShortestPathTree0.getVertexCount();
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0, int0);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertNotNull(multiShortestPathTree0);
      
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getVertices();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertNotNull(multiShortestPathTree0);
      
      // Undeclared exception!
      try { 
        multiShortestPathTree0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      RoutingRequest routingRequest0 = null;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertNotNull(multiShortestPathTree0);
      
      Graph graph0 = new Graph();
      assertEquals(0, graph0.countVertices());
      assertNotNull(graph0);
      
      BikeRentalStation bikeRentalStation0 = new BikeRentalStation();
      assertEquals(Integer.MAX_VALUE, bikeRentalStation0.bikesAvailable);
      assertEquals(0.0, bikeRentalStation0.x, 0.01);
      assertEquals(Integer.MAX_VALUE, bikeRentalStation0.spacesAvailable);
      assertEquals(0.0, bikeRentalStation0.y, 0.01);
      assertTrue(bikeRentalStation0.realTimeData);
      assertNotNull(bikeRentalStation0);
      
      BikeRentalStationVertex bikeRentalStationVertex0 = new BikeRentalStationVertex(graph0, bikeRentalStation0);
      assertEquals(1, graph0.countVertices());
      assertEquals(0, bikeRentalStationVertex0.getDegreeIn());
      assertEquals("bike rental station null", bikeRentalStationVertex0.getLabel());
      assertEquals(0.0, bikeRentalStationVertex0.getLon(), 0.01);
      assertEquals(Integer.MAX_VALUE, bikeRentalStationVertex0.getBikesAvailable());
      assertEquals(Integer.MAX_VALUE, bikeRentalStationVertex0.getSpacesAvailable());
      assertNull(bikeRentalStationVertex0.getName());
      assertEquals(0.0, bikeRentalStationVertex0.getLat(), 0.01);
      assertEquals(1, bikeRentalStationVertex0.getMaxIndex());
      assertNull(bikeRentalStationVertex0.getId());
      assertEquals(0.0, bikeRentalStationVertex0.getX(), 0.01);
      assertEquals(0.0, bikeRentalStationVertex0.getY(), 0.01);
      assertEquals(0, bikeRentalStationVertex0.getDegreeOut());
      assertEquals(0, bikeRentalStationVertex0.getIndex());
      assertEquals(Integer.MAX_VALUE, bikeRentalStation0.bikesAvailable);
      assertEquals(0.0, bikeRentalStation0.x, 0.01);
      assertEquals(Integer.MAX_VALUE, bikeRentalStation0.spacesAvailable);
      assertEquals(0.0, bikeRentalStation0.y, 0.01);
      assertTrue(bikeRentalStation0.realTimeData);
      assertNotNull(bikeRentalStationVertex0);
      
      String string0 = "A/k)|2b1^5hQ";
      double double0 = 136.0869;
      String string1 = "";
      TransitStopStreetVertex transitStopStreetVertex0 = new TransitStopStreetVertex(graph0, string0, multiShortestPathTree0.WEIGHT_EPSILON, double0, string1, string0);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(2, graph0.countVertices());
      assertEquals("", transitStopStreetVertex0.getName());
      assertEquals(0, transitStopStreetVertex0.getDegreeIn());
      assertEquals(2, transitStopStreetVertex0.getMaxIndex());
      assertFalse(transitStopStreetVertex0.inferredFreeFlowing());
      assertEquals(0.02, transitStopStreetVertex0.getX(), 0.01);
      assertEquals(136.0869, transitStopStreetVertex0.getLat(), 0.01);
      assertEquals(136.0869, transitStopStreetVertex0.getY(), 0.01);
      assertEquals(0.02, transitStopStreetVertex0.getLon(), 0.01);
      assertEquals(0, transitStopStreetVertex0.getDegreeOut());
      assertEquals("A/k)|2b1^5hQ", transitStopStreetVertex0.getLabel());
      assertEquals(1, transitStopStreetVertex0.getIndex());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertFalse(transitStopStreetVertex0.trafficLight);
      assertFalse(transitStopStreetVertex0.freeFlowing);
      assertNotNull(transitStopStreetVertex0);
      
      StreetBikeRentalLink streetBikeRentalLink0 = new StreetBikeRentalLink(bikeRentalStationVertex0, transitStopStreetVertex0);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(2, graph0.countVertices());
      assertEquals(0, bikeRentalStationVertex0.getDegreeIn());
      assertEquals("bike rental station null", bikeRentalStationVertex0.getLabel());
      assertEquals(0.0, bikeRentalStationVertex0.getLon(), 0.01);
      assertEquals(Integer.MAX_VALUE, bikeRentalStationVertex0.getBikesAvailable());
      assertEquals(Integer.MAX_VALUE, bikeRentalStationVertex0.getSpacesAvailable());
      assertNull(bikeRentalStationVertex0.getName());
      assertEquals(0.0, bikeRentalStationVertex0.getLat(), 0.01);
      assertEquals(2, bikeRentalStationVertex0.getMaxIndex());
      assertNull(bikeRentalStationVertex0.getId());
      assertEquals(0.0, bikeRentalStationVertex0.getX(), 0.01);
      assertEquals(1, bikeRentalStationVertex0.getDegreeOut());
      assertEquals(0.0, bikeRentalStationVertex0.getY(), 0.01);
      assertEquals(0, bikeRentalStationVertex0.getIndex());
      assertEquals(1, transitStopStreetVertex0.getDegreeIn());
      assertEquals("", transitStopStreetVertex0.getName());
      assertEquals(2, transitStopStreetVertex0.getMaxIndex());
      assertFalse(transitStopStreetVertex0.inferredFreeFlowing());
      assertEquals(0.02, transitStopStreetVertex0.getX(), 0.01);
      assertEquals(136.0869, transitStopStreetVertex0.getLat(), 0.01);
      assertEquals(136.0869, transitStopStreetVertex0.getY(), 0.01);
      assertEquals(0.02, transitStopStreetVertex0.getLon(), 0.01);
      assertEquals(0, transitStopStreetVertex0.getDegreeOut());
      assertEquals("A/k)|2b1^5hQ", transitStopStreetVertex0.getLabel());
      assertEquals(1, transitStopStreetVertex0.getIndex());
      assertNull(streetBikeRentalLink0.getName());
      assertNull(streetBikeRentalLink0.getDirection());
      assertTrue(streetBikeRentalLink0.vertexTypesValid());
      assertFalse(streetBikeRentalLink0.isPartial());
      assertEquals(1, streetBikeRentalLink0.getId());
      assertEquals(0.0, streetBikeRentalLink0.getDistance(), 0.01);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(Integer.MAX_VALUE, bikeRentalStation0.bikesAvailable);
      assertEquals(0.0, bikeRentalStation0.x, 0.01);
      assertEquals(Integer.MAX_VALUE, bikeRentalStation0.spacesAvailable);
      assertEquals(0.0, bikeRentalStation0.y, 0.01);
      assertTrue(bikeRentalStation0.realTimeData);
      assertFalse(transitStopStreetVertex0.trafficLight);
      assertFalse(transitStopStreetVertex0.freeFlowing);
      assertNotNull(streetBikeRentalLink0);
      
      TransitStopStreetVertex transitStopStreetVertex1 = (TransitStopStreetVertex)streetBikeRentalLink0.getToVertex();
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(transitStopStreetVertex0, transitStopStreetVertex1);
      assertSame(transitStopStreetVertex1, transitStopStreetVertex0);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(2, graph0.countVertices());
      assertEquals(0, bikeRentalStationVertex0.getDegreeIn());
      assertEquals("bike rental station null", bikeRentalStationVertex0.getLabel());
      assertEquals(0.0, bikeRentalStationVertex0.getLon(), 0.01);
      assertEquals(Integer.MAX_VALUE, bikeRentalStationVertex0.getBikesAvailable());
      assertEquals(Integer.MAX_VALUE, bikeRentalStationVertex0.getSpacesAvailable());
      assertNull(bikeRentalStationVertex0.getName());
      assertEquals(0.0, bikeRentalStationVertex0.getLat(), 0.01);
      assertEquals(2, bikeRentalStationVertex0.getMaxIndex());
      assertNull(bikeRentalStationVertex0.getId());
      assertEquals(0.0, bikeRentalStationVertex0.getX(), 0.01);
      assertEquals(1, bikeRentalStationVertex0.getDegreeOut());
      assertEquals(0.0, bikeRentalStationVertex0.getY(), 0.01);
      assertEquals(0, bikeRentalStationVertex0.getIndex());
      assertEquals(1, transitStopStreetVertex0.getDegreeIn());
      assertEquals("", transitStopStreetVertex0.getName());
      assertEquals(2, transitStopStreetVertex0.getMaxIndex());
      assertFalse(transitStopStreetVertex0.inferredFreeFlowing());
      assertEquals(0.02, transitStopStreetVertex0.getX(), 0.01);
      assertEquals(136.0869, transitStopStreetVertex0.getLat(), 0.01);
      assertEquals(136.0869, transitStopStreetVertex0.getY(), 0.01);
      assertEquals(0.02, transitStopStreetVertex0.getLon(), 0.01);
      assertEquals(0, transitStopStreetVertex0.getDegreeOut());
      assertEquals("A/k)|2b1^5hQ", transitStopStreetVertex0.getLabel());
      assertEquals(1, transitStopStreetVertex0.getIndex());
      assertNull(streetBikeRentalLink0.getName());
      assertNull(streetBikeRentalLink0.getDirection());
      assertTrue(streetBikeRentalLink0.vertexTypesValid());
      assertFalse(streetBikeRentalLink0.isPartial());
      assertEquals(1, streetBikeRentalLink0.getId());
      assertEquals(0.0, streetBikeRentalLink0.getDistance(), 0.01);
      assertEquals(136.0869, transitStopStreetVertex1.getLat(), 0.01);
      assertEquals(136.0869, transitStopStreetVertex1.getY(), 0.01);
      assertFalse(transitStopStreetVertex1.inferredFreeFlowing());
      assertEquals(0.02, transitStopStreetVertex1.getX(), 0.01);
      assertEquals(1, transitStopStreetVertex1.getDegreeIn());
      assertEquals(1, transitStopStreetVertex1.getIndex());
      assertEquals(0, transitStopStreetVertex1.getDegreeOut());
      assertEquals("", transitStopStreetVertex1.getName());
      assertEquals(2, transitStopStreetVertex1.getMaxIndex());
      assertEquals(0.02, transitStopStreetVertex1.getLon(), 0.01);
      assertEquals("A/k)|2b1^5hQ", transitStopStreetVertex1.getLabel());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(Integer.MAX_VALUE, bikeRentalStation0.bikesAvailable);
      assertEquals(0.0, bikeRentalStation0.x, 0.01);
      assertEquals(Integer.MAX_VALUE, bikeRentalStation0.spacesAvailable);
      assertEquals(0.0, bikeRentalStation0.y, 0.01);
      assertTrue(bikeRentalStation0.realTimeData);
      assertFalse(transitStopStreetVertex0.trafficLight);
      assertFalse(transitStopStreetVertex0.freeFlowing);
      assertFalse(transitStopStreetVertex1.freeFlowing);
      assertFalse(transitStopStreetVertex1.trafficLight);
      assertNotNull(transitStopStreetVertex1);
      
      boolean boolean0 = true;
      List<GraphPath> list0 = multiShortestPathTree0.getPaths((Vertex) transitStopStreetVertex1, boolean0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(transitStopStreetVertex0, transitStopStreetVertex1);
      assertSame(transitStopStreetVertex1, transitStopStreetVertex0);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(2, graph0.countVertices());
      assertEquals(0, bikeRentalStationVertex0.getDegreeIn());
      assertEquals("bike rental station null", bikeRentalStationVertex0.getLabel());
      assertEquals(0.0, bikeRentalStationVertex0.getLon(), 0.01);
      assertEquals(Integer.MAX_VALUE, bikeRentalStationVertex0.getBikesAvailable());
      assertEquals(Integer.MAX_VALUE, bikeRentalStationVertex0.getSpacesAvailable());
      assertNull(bikeRentalStationVertex0.getName());
      assertEquals(0.0, bikeRentalStationVertex0.getLat(), 0.01);
      assertEquals(2, bikeRentalStationVertex0.getMaxIndex());
      assertNull(bikeRentalStationVertex0.getId());
      assertEquals(0.0, bikeRentalStationVertex0.getX(), 0.01);
      assertEquals(1, bikeRentalStationVertex0.getDegreeOut());
      assertEquals(0.0, bikeRentalStationVertex0.getY(), 0.01);
      assertEquals(0, bikeRentalStationVertex0.getIndex());
      assertEquals(1, transitStopStreetVertex0.getDegreeIn());
      assertEquals("", transitStopStreetVertex0.getName());
      assertEquals(2, transitStopStreetVertex0.getMaxIndex());
      assertFalse(transitStopStreetVertex0.inferredFreeFlowing());
      assertEquals(0.02, transitStopStreetVertex0.getX(), 0.01);
      assertEquals(136.0869, transitStopStreetVertex0.getLat(), 0.01);
      assertEquals(136.0869, transitStopStreetVertex0.getY(), 0.01);
      assertEquals(0.02, transitStopStreetVertex0.getLon(), 0.01);
      assertEquals(0, transitStopStreetVertex0.getDegreeOut());
      assertEquals("A/k)|2b1^5hQ", transitStopStreetVertex0.getLabel());
      assertEquals(1, transitStopStreetVertex0.getIndex());
      assertNull(streetBikeRentalLink0.getName());
      assertNull(streetBikeRentalLink0.getDirection());
      assertTrue(streetBikeRentalLink0.vertexTypesValid());
      assertFalse(streetBikeRentalLink0.isPartial());
      assertEquals(1, streetBikeRentalLink0.getId());
      assertEquals(0.0, streetBikeRentalLink0.getDistance(), 0.01);
      assertEquals(136.0869, transitStopStreetVertex1.getLat(), 0.01);
      assertEquals(136.0869, transitStopStreetVertex1.getY(), 0.01);
      assertFalse(transitStopStreetVertex1.inferredFreeFlowing());
      assertEquals(0.02, transitStopStreetVertex1.getX(), 0.01);
      assertEquals(1, transitStopStreetVertex1.getDegreeIn());
      assertEquals(1, transitStopStreetVertex1.getIndex());
      assertEquals(0, transitStopStreetVertex1.getDegreeOut());
      assertEquals("", transitStopStreetVertex1.getName());
      assertEquals(2, transitStopStreetVertex1.getMaxIndex());
      assertEquals(0.02, transitStopStreetVertex1.getLon(), 0.01);
      assertEquals("A/k)|2b1^5hQ", transitStopStreetVertex1.getLabel());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(Integer.MAX_VALUE, bikeRentalStation0.bikesAvailable);
      assertEquals(0.0, bikeRentalStation0.x, 0.01);
      assertEquals(Integer.MAX_VALUE, bikeRentalStation0.spacesAvailable);
      assertEquals(0.0, bikeRentalStation0.y, 0.01);
      assertTrue(bikeRentalStation0.realTimeData);
      assertFalse(transitStopStreetVertex0.trafficLight);
      assertFalse(transitStopStreetVertex0.freeFlowing);
      assertFalse(transitStopStreetVertex1.freeFlowing);
      assertFalse(transitStopStreetVertex1.trafficLight);
      assertNotNull(list0);
      
      String string2 = multiShortestPathTree0.toString();
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals("MultiSPT(0 vertices)", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertNotNull(multiShortestPathTree0);
      
      State state0 = null;
      // Undeclared exception!
      try { 
        multiShortestPathTree0.add(state0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.CUSTOM_MOTOR_VEHICLE;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertNotNull(routingRequest0);
      
      int int0 = (-190);
      routingRequest0.boardSlack = int0;
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      
      double double0 = 2147.0;
      routingRequest0.turnReluctance = double0;
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals((-190), routingRequest0.boardSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(2147.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertNotNull(multiShortestPathTree0);
      
      State state0 = null;
      // Undeclared exception!
      try { 
        multiShortestPathTree0.add(state0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      State state0 = null;
      // Undeclared exception!
      try { 
        MultiShortestPathTree.dominates(state0, state0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      RoutingRequest routingRequest0 = new RoutingRequest();
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.batch);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertNotNull(routingRequest0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.batch);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertNotNull(multiShortestPathTree0);
      
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.batch);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertNotNull(set0);
      
      Set<Vertex> set1 = multiShortestPathTree0.getVertices();
      assertSame(set1, set0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.batch);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertNotNull(set1);
      
      Vertex vertex0 = null;
      State state0 = multiShortestPathTree0.getState(vertex0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.batch);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertNull(state0);
      
      String string0 = multiShortestPathTree0.toString();
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.batch);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals("MultiSPT(0 vertices)", string0);
      assertNotNull(string0);
      
      State state1 = multiShortestPathTree0.getState(vertex0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.batch);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertNull(state1);
      
      State state2 = multiShortestPathTree0.getState(vertex0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.batch);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertNull(state2);
      
      State state3 = multiShortestPathTree0.getState(vertex0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.batch);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertNull(state3);
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      TraverseModeSet traverseModeSet0 = TraverseModeSet.allModes();
      assertTrue(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.isTransit());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.getSubway());
      assertEquals(8183, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.getBicycle());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.getRail());
      assertTrue(traverseModeSet0.getCableCar());
      assertNotNull(traverseModeSet0);
      
      OptimizeType optimizeType0 = OptimizeType.GREENWAYS;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseModeSet0, optimizeType0);
      assertTrue(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.isTransit());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.getSubway());
      assertEquals(8183, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.getBicycle());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.getRail());
      assertTrue(traverseModeSet0.getCableCar());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertNotNull(routingRequest0);
      
      String string0 = routingRequest0.getBannedStopsHardStr();
      assertTrue(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.isTransit());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.getSubway());
      assertEquals(8183, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.getBicycle());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.getRail());
      assertTrue(traverseModeSet0.getCableCar());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals("", string0);
      assertNotNull(string0);
      
      RoutingRequest routingRequest1 = routingRequest0.bikeWalkingOptions;
      assertNotSame(routingRequest1, routingRequest0);
      assertEquals(3, routingRequest1.getNumItineraries());
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertEquals(40.0, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest1.transitAllowed());
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertFalse(routingRequest1.equals((Object)routingRequest0));
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertTrue(routingRequest1.walkingBike);
      assertFalse(routingRequest1.arriveBy);
      assertEquals(3, routingRequest1.numItineraries);
      assertFalse(routingRequest1.kissAndRide);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest1.reverseOptimizing);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest1.maxTransfers);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest1.boardSlack);
      assertEquals(1.064, routingRequest1.walkSpeed, 0.01);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(5.4, routingRequest1.walkReluctance, 0.01);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertEquals(0, routingRequest1.transferSlack);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertTrue(routingRequest1.softWalkLimiting);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest1.worstTime);
      assertFalse(routingRequest1.batch);
      assertEquals(0, routingRequest1.transferPenalty);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest1.alightSlack);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertFalse(routingRequest1.showIntermediateStops);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertNotNull(routingRequest1);
      
      int int0 = 1478;
      routingRequest1.setOtherThanPreferredRoutesPenalty(int0);
      assertNotSame(routingRequest0, routingRequest1);
      assertNotSame(routingRequest1, routingRequest0);
      assertTrue(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.isTransit());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.getSubway());
      assertEquals(8183, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.getBicycle());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.getRail());
      assertTrue(traverseModeSet0.getCableCar());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest1.getNumItineraries());
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertEquals(40.0, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest1.transitAllowed());
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertFalse(routingRequest0.equals((Object)routingRequest1));
      assertFalse(routingRequest1.equals((Object)routingRequest0));
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertTrue(routingRequest1.walkingBike);
      assertFalse(routingRequest1.arriveBy);
      assertEquals(3, routingRequest1.numItineraries);
      assertFalse(routingRequest1.kissAndRide);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest1.reverseOptimizing);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest1.maxTransfers);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest1.boardSlack);
      assertEquals(1.064, routingRequest1.walkSpeed, 0.01);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(5.4, routingRequest1.walkReluctance, 0.01);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertEquals(0, routingRequest1.transferSlack);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertTrue(routingRequest1.softWalkLimiting);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest1.worstTime);
      assertFalse(routingRequest1.batch);
      assertEquals(0, routingRequest1.transferPenalty);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest1.alightSlack);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertFalse(routingRequest1.showIntermediateStops);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertEquals(1478, routingRequest1.otherThanPreferredRoutesPenalty);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest1);
      assertTrue(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.isTransit());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.getSubway());
      assertEquals(8183, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.getBicycle());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.getRail());
      assertTrue(traverseModeSet0.getCableCar());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest1.getNumItineraries());
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertEquals(40.0, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest1.transitAllowed());
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertFalse(routingRequest0.equals((Object)routingRequest1));
      assertFalse(routingRequest1.equals((Object)routingRequest0));
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertTrue(routingRequest1.walkingBike);
      assertFalse(routingRequest1.arriveBy);
      assertEquals(3, routingRequest1.numItineraries);
      assertFalse(routingRequest1.kissAndRide);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest1.reverseOptimizing);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest1.maxTransfers);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest1.boardSlack);
      assertEquals(1.064, routingRequest1.walkSpeed, 0.01);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(5.4, routingRequest1.walkReluctance, 0.01);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertEquals(0, routingRequest1.transferSlack);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertTrue(routingRequest1.softWalkLimiting);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest1.worstTime);
      assertFalse(routingRequest1.batch);
      assertEquals(0, routingRequest1.transferPenalty);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest1.alightSlack);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertFalse(routingRequest1.showIntermediateStops);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertEquals(1478, routingRequest1.otherThanPreferredRoutesPenalty);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertNotNull(multiShortestPathTree0);
      
      int int1 = 0;
      int int2 = (-1858);
      routingRequest1.transferPenalty = int2;
      assertTrue(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.isTransit());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.getSubway());
      assertEquals(8183, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.getBicycle());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.getRail());
      assertTrue(traverseModeSet0.getCableCar());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest1.getNumItineraries());
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertEquals(40.0, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest1.transitAllowed());
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      
      MultiShortestPathTree.TIME_DIFF_MARGIN = int1;
      int int3 = multiShortestPathTree0.getVertexCount();
      assertNotSame(routingRequest0, routingRequest1);
      assertNotSame(routingRequest1, routingRequest0);
      assertTrue(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.isTransit());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.getSubway());
      assertEquals(8183, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.getBicycle());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.getRail());
      assertTrue(traverseModeSet0.getCableCar());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest1.getNumItineraries());
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertEquals(40.0, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest1.transitAllowed());
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertFalse(routingRequest0.equals((Object)routingRequest1));
      assertFalse(routingRequest1.equals((Object)routingRequest0));
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertTrue(routingRequest1.walkingBike);
      assertFalse(routingRequest1.arriveBy);
      assertEquals(3, routingRequest1.numItineraries);
      assertFalse(routingRequest1.kissAndRide);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest1.reverseOptimizing);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest1.maxTransfers);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest1.boardSlack);
      assertEquals(1.064, routingRequest1.walkSpeed, 0.01);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(5.4, routingRequest1.walkReluctance, 0.01);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertEquals(0, routingRequest1.transferSlack);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertTrue(routingRequest1.softWalkLimiting);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest1.worstTime);
      assertFalse(routingRequest1.batch);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertEquals((-1858), routingRequest1.transferPenalty);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest1.alightSlack);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertFalse(routingRequest1.showIntermediateStops);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertEquals(1478, routingRequest1.otherThanPreferredRoutesPenalty);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0, int3);
      
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      assertNotSame(routingRequest0, routingRequest1);
      assertNotSame(routingRequest1, routingRequest0);
      assertTrue(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.isTransit());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.getSubway());
      assertEquals(8183, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.getBicycle());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.getRail());
      assertTrue(traverseModeSet0.getCableCar());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest1.getNumItineraries());
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertEquals(40.0, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest1.transitAllowed());
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(routingRequest0.equals((Object)routingRequest1));
      assertFalse(routingRequest1.equals((Object)routingRequest0));
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertTrue(routingRequest1.walkingBike);
      assertFalse(routingRequest1.arriveBy);
      assertEquals(3, routingRequest1.numItineraries);
      assertFalse(routingRequest1.kissAndRide);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest1.reverseOptimizing);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest1.maxTransfers);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest1.boardSlack);
      assertEquals(1.064, routingRequest1.walkSpeed, 0.01);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(5.4, routingRequest1.walkReluctance, 0.01);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertEquals(0, routingRequest1.transferSlack);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertTrue(routingRequest1.softWalkLimiting);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest1.worstTime);
      assertFalse(routingRequest1.batch);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertEquals((-1858), routingRequest1.transferPenalty);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest1.alightSlack);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertFalse(routingRequest1.showIntermediateStops);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertEquals(1478, routingRequest1.otherThanPreferredRoutesPenalty);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertNotNull(set0);
      
      String string1 = multiShortestPathTree0.toString();
      assertNotSame(routingRequest0, routingRequest1);
      assertNotSame(routingRequest1, routingRequest0);
      assertNotSame(string1, string0);
      assertTrue(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.isTransit());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.getSubway());
      assertEquals(8183, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.getBicycle());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.getRail());
      assertTrue(traverseModeSet0.getCableCar());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest1.getNumItineraries());
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertEquals(40.0, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest1.transitAllowed());
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertFalse(routingRequest0.equals((Object)routingRequest1));
      assertFalse(routingRequest1.equals((Object)routingRequest0));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertTrue(routingRequest1.walkingBike);
      assertFalse(routingRequest1.arriveBy);
      assertEquals(3, routingRequest1.numItineraries);
      assertFalse(routingRequest1.kissAndRide);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest1.reverseOptimizing);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest1.maxTransfers);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest1.boardSlack);
      assertEquals(1.064, routingRequest1.walkSpeed, 0.01);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(5.4, routingRequest1.walkReluctance, 0.01);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertEquals(0, routingRequest1.transferSlack);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertTrue(routingRequest1.softWalkLimiting);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest1.worstTime);
      assertFalse(routingRequest1.batch);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertEquals((-1858), routingRequest1.transferPenalty);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest1.alightSlack);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertFalse(routingRequest1.showIntermediateStops);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertEquals(1478, routingRequest1.otherThanPreferredRoutesPenalty);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals("MultiSPT(0 vertices)", string1);
      assertNotNull(string1);
      
      String string2 = multiShortestPathTree0.toString();
      assertNotSame(routingRequest0, routingRequest1);
      assertNotSame(routingRequest1, routingRequest0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertTrue(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.isTransit());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.getSubway());
      assertEquals(8183, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.getBicycle());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.getRail());
      assertTrue(traverseModeSet0.getCableCar());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest1.getNumItineraries());
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertEquals(40.0, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest1.transitAllowed());
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertFalse(routingRequest0.equals((Object)routingRequest1));
      assertFalse(routingRequest1.equals((Object)routingRequest0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertTrue(routingRequest1.walkingBike);
      assertFalse(routingRequest1.arriveBy);
      assertEquals(3, routingRequest1.numItineraries);
      assertFalse(routingRequest1.kissAndRide);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest1.reverseOptimizing);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest1.maxTransfers);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest1.boardSlack);
      assertEquals(1.064, routingRequest1.walkSpeed, 0.01);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(5.4, routingRequest1.walkReluctance, 0.01);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertEquals(0, routingRequest1.transferSlack);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertTrue(routingRequest1.softWalkLimiting);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest1.worstTime);
      assertFalse(routingRequest1.batch);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertEquals((-1858), routingRequest1.transferPenalty);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest1.alightSlack);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertFalse(routingRequest1.showIntermediateStops);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertEquals(1478, routingRequest1.otherThanPreferredRoutesPenalty);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals("MultiSPT(0 vertices)", string2);
      assertNotNull(string2);
      
      State state0 = null;
      // Undeclared exception!
      try { 
        MultiShortestPathTree.dominates(state0, state0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      RoutingRequest routingRequest0 = null;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertNotNull(multiShortestPathTree0);
      
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertNotNull(collection0);
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertNotNull(multiShortestPathTree0);
      
      Map<Vertex, List<State>> map0 = multiShortestPathTree0.stateSets;
      assertNull(map0);
      
      multiShortestPathTree0.stateSets = map0;
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getVertexCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertNotNull(multiShortestPathTree0);
      
      Vertex vertex0 = null;
      Map<Vertex, List<State>> map0 = multiShortestPathTree0.stateSets;
      assertNull(map0);
      
      multiShortestPathTree0.stateSets = map0;
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getState(vertex0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertNotNull(multiShortestPathTree0);
      
      State state0 = null;
      // Undeclared exception!
      try { 
        multiShortestPathTree0.visit(state0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.BUSISH;
      OptimizeType optimizeType0 = OptimizeType.QUICK;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0, optimizeType0);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertNotNull(routingRequest0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertNotNull(multiShortestPathTree0);
      
      State state0 = null;
      // Undeclared exception!
      try { 
        multiShortestPathTree0.visit(state0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      TraverseModeSet traverseModeSet0 = TraverseModeSet.allModes();
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getCableCar());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.isTransit());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.getBicycle());
      assertEquals(8183, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.getRail());
      assertTrue(traverseModeSet0.getSubway());
      assertNotNull(traverseModeSet0);
      
      TraverseModeSet traverseModeSet1 = traverseModeSet0.clone();
      assertNotSame(traverseModeSet0, traverseModeSet1);
      assertNotSame(traverseModeSet1, traverseModeSet0);
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getCableCar());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.isTransit());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.getBicycle());
      assertEquals(8183, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.getRail());
      assertTrue(traverseModeSet0.getSubway());
      assertTrue(traverseModeSet1.getWalk());
      assertTrue(traverseModeSet1.getDriving());
      assertTrue(traverseModeSet1.getBicycle());
      assertEquals(8183, traverseModeSet1.getMask());
      assertTrue(traverseModeSet1.getBus());
      assertTrue(traverseModeSet1.getTram());
      assertTrue(traverseModeSet1.getCar());
      assertTrue(traverseModeSet1.getTraininsh());
      assertTrue(traverseModeSet1.getSubway());
      assertTrue(traverseModeSet1.getRail());
      assertTrue(traverseModeSet1.getBusish());
      assertTrue(traverseModeSet1.getCableCar());
      assertTrue(traverseModeSet1.getFunicular());
      assertTrue(traverseModeSet1.isValid());
      assertTrue(traverseModeSet1.getGondola());
      assertTrue(traverseModeSet1.getFerry());
      assertTrue(traverseModeSet1.getCustomMotorVehicle());
      assertTrue(traverseModeSet1.isTransit());
      assertTrue(traverseModeSet1.getTrainish());
      assertTrue(traverseModeSet1.equals((Object)traverseModeSet0));
      assertNotNull(traverseModeSet1);
      
      RoutingRequest routingRequest0 = new RoutingRequest(traverseModeSet1);
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getCableCar());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.isTransit());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.getBicycle());
      assertEquals(8183, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.getRail());
      assertTrue(traverseModeSet0.getSubway());
      assertTrue(traverseModeSet1.getWalk());
      assertTrue(traverseModeSet1.getDriving());
      assertTrue(traverseModeSet1.getBicycle());
      assertEquals(8183, traverseModeSet1.getMask());
      assertTrue(traverseModeSet1.getBus());
      assertTrue(traverseModeSet1.getTram());
      assertTrue(traverseModeSet1.getCar());
      assertTrue(traverseModeSet1.getTraininsh());
      assertTrue(traverseModeSet1.getSubway());
      assertTrue(traverseModeSet1.getRail());
      assertTrue(traverseModeSet1.getBusish());
      assertTrue(traverseModeSet1.getCableCar());
      assertTrue(traverseModeSet1.getFunicular());
      assertTrue(traverseModeSet1.isValid());
      assertTrue(traverseModeSet1.getGondola());
      assertTrue(traverseModeSet1.getFerry());
      assertTrue(traverseModeSet1.getCustomMotorVehicle());
      assertTrue(traverseModeSet1.isTransit());
      assertTrue(traverseModeSet1.getTrainish());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(traverseModeSet0.equals((Object)traverseModeSet1));
      assertTrue(traverseModeSet1.equals((Object)traverseModeSet0));
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertNotNull(routingRequest0);
      
      RoutingRequest routingRequest1 = routingRequest0.clone();
      assertNotSame(traverseModeSet0, traverseModeSet1);
      assertNotSame(traverseModeSet1, traverseModeSet0);
      assertNotSame(routingRequest0, routingRequest1);
      assertNotSame(routingRequest1, routingRequest0);
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getCableCar());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.isTransit());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.getBicycle());
      assertEquals(8183, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.getRail());
      assertTrue(traverseModeSet0.getSubway());
      assertTrue(traverseModeSet1.getWalk());
      assertTrue(traverseModeSet1.getDriving());
      assertTrue(traverseModeSet1.getBicycle());
      assertEquals(8183, traverseModeSet1.getMask());
      assertTrue(traverseModeSet1.getBus());
      assertTrue(traverseModeSet1.getTram());
      assertTrue(traverseModeSet1.getCar());
      assertTrue(traverseModeSet1.getTraininsh());
      assertTrue(traverseModeSet1.getSubway());
      assertTrue(traverseModeSet1.getRail());
      assertTrue(traverseModeSet1.getBusish());
      assertTrue(traverseModeSet1.getCableCar());
      assertTrue(traverseModeSet1.getFunicular());
      assertTrue(traverseModeSet1.isValid());
      assertTrue(traverseModeSet1.getGondola());
      assertTrue(traverseModeSet1.getFerry());
      assertTrue(traverseModeSet1.getCustomMotorVehicle());
      assertTrue(traverseModeSet1.isTransit());
      assertTrue(traverseModeSet1.getTrainish());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertTrue(routingRequest1.transitAllowed());
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertEquals(40.0, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest1.getNumItineraries());
      assertTrue(traverseModeSet0.equals((Object)traverseModeSet1));
      assertTrue(traverseModeSet1.equals((Object)traverseModeSet0));
      assertTrue(routingRequest1.equals((Object)routingRequest0));
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertFalse(routingRequest1.reverseOptimizing);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest1.transferPenalty);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertFalse(routingRequest1.showIntermediateStops);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertFalse(routingRequest1.batch);
      assertEquals(3, routingRequest1.numItineraries);
      assertFalse(routingRequest1.kissAndRide);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertEquals(0, routingRequest1.transferSlack);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(0, routingRequest1.boardSlack);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(0, routingRequest1.alightSlack);
      assertEquals(2, routingRequest1.maxTransfers);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertFalse(routingRequest1.arriveBy);
      assertFalse(routingRequest1.walkingBike);
      assertTrue(routingRequest1.softWalkLimiting);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(9223372036854775807L, routingRequest1.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertNotNull(routingRequest1);
      
      TraverseMode traverseMode0 = TraverseMode.FERRY;
      boolean boolean0 = traverseModeSet1.contains(traverseMode0);
      assertNotSame(traverseModeSet0, traverseModeSet1);
      assertNotSame(traverseModeSet1, traverseModeSet0);
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getCableCar());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.isTransit());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.getBicycle());
      assertEquals(8183, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.getRail());
      assertTrue(traverseModeSet0.getSubway());
      assertTrue(traverseModeSet1.getWalk());
      assertTrue(traverseModeSet1.getDriving());
      assertTrue(traverseModeSet1.getBicycle());
      assertEquals(8183, traverseModeSet1.getMask());
      assertTrue(traverseModeSet1.getBus());
      assertTrue(traverseModeSet1.getTram());
      assertTrue(traverseModeSet1.getCar());
      assertTrue(traverseModeSet1.getTraininsh());
      assertTrue(traverseModeSet1.getSubway());
      assertTrue(traverseModeSet1.getRail());
      assertTrue(traverseModeSet1.getBusish());
      assertTrue(traverseModeSet1.getCableCar());
      assertTrue(traverseModeSet1.getFunicular());
      assertTrue(traverseModeSet1.isValid());
      assertTrue(traverseModeSet1.getGondola());
      assertTrue(traverseModeSet1.getFerry());
      assertTrue(traverseModeSet1.getCustomMotorVehicle());
      assertTrue(traverseModeSet1.isTransit());
      assertTrue(traverseModeSet1.getTrainish());
      assertTrue(traverseModeSet0.equals((Object)traverseModeSet1));
      assertTrue(traverseModeSet1.equals((Object)traverseModeSet0));
      assertTrue(boolean0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest1);
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getCableCar());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.isTransit());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.getBicycle());
      assertEquals(8183, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.getRail());
      assertTrue(traverseModeSet0.getSubway());
      assertTrue(traverseModeSet1.getWalk());
      assertTrue(traverseModeSet1.getDriving());
      assertTrue(traverseModeSet1.getBicycle());
      assertEquals(8183, traverseModeSet1.getMask());
      assertTrue(traverseModeSet1.getBus());
      assertTrue(traverseModeSet1.getTram());
      assertTrue(traverseModeSet1.getCar());
      assertTrue(traverseModeSet1.getTraininsh());
      assertTrue(traverseModeSet1.getSubway());
      assertTrue(traverseModeSet1.getRail());
      assertTrue(traverseModeSet1.getBusish());
      assertTrue(traverseModeSet1.getCableCar());
      assertTrue(traverseModeSet1.getFunicular());
      assertTrue(traverseModeSet1.isValid());
      assertTrue(traverseModeSet1.getGondola());
      assertTrue(traverseModeSet1.getFerry());
      assertTrue(traverseModeSet1.getCustomMotorVehicle());
      assertTrue(traverseModeSet1.isTransit());
      assertTrue(traverseModeSet1.getTrainish());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertTrue(routingRequest1.transitAllowed());
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertEquals(40.0, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest1.getNumItineraries());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertTrue(traverseModeSet0.equals((Object)traverseModeSet1));
      assertTrue(traverseModeSet1.equals((Object)traverseModeSet0));
      assertTrue(routingRequest0.equals((Object)routingRequest1));
      assertTrue(routingRequest1.equals((Object)routingRequest0));
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertFalse(routingRequest1.reverseOptimizing);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest1.transferPenalty);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertFalse(routingRequest1.showIntermediateStops);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertFalse(routingRequest1.batch);
      assertEquals(3, routingRequest1.numItineraries);
      assertFalse(routingRequest1.kissAndRide);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertEquals(0, routingRequest1.transferSlack);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(0, routingRequest1.boardSlack);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(0, routingRequest1.alightSlack);
      assertEquals(2, routingRequest1.maxTransfers);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertFalse(routingRequest1.arriveBy);
      assertFalse(routingRequest1.walkingBike);
      assertTrue(routingRequest1.softWalkLimiting);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(9223372036854775807L, routingRequest1.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertNotNull(multiShortestPathTree0);
      
      int int0 = 0;
      routingRequest1.elevatorBoardCost = int0;
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getCableCar());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.isTransit());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.getBicycle());
      assertEquals(8183, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.getRail());
      assertTrue(traverseModeSet0.getSubway());
      assertTrue(traverseModeSet1.getWalk());
      assertTrue(traverseModeSet1.getDriving());
      assertTrue(traverseModeSet1.getBicycle());
      assertEquals(8183, traverseModeSet1.getMask());
      assertTrue(traverseModeSet1.getBus());
      assertTrue(traverseModeSet1.getTram());
      assertTrue(traverseModeSet1.getCar());
      assertTrue(traverseModeSet1.getTraininsh());
      assertTrue(traverseModeSet1.getSubway());
      assertTrue(traverseModeSet1.getRail());
      assertTrue(traverseModeSet1.getBusish());
      assertTrue(traverseModeSet1.getCableCar());
      assertTrue(traverseModeSet1.getFunicular());
      assertTrue(traverseModeSet1.isValid());
      assertTrue(traverseModeSet1.getGondola());
      assertTrue(traverseModeSet1.getFerry());
      assertTrue(traverseModeSet1.getCustomMotorVehicle());
      assertTrue(traverseModeSet1.isTransit());
      assertTrue(traverseModeSet1.getTrainish());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertTrue(routingRequest1.transitAllowed());
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertEquals(40.0, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest1.getNumItineraries());
      
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      assertNotSame(traverseModeSet0, traverseModeSet1);
      assertNotSame(traverseModeSet1, traverseModeSet0);
      assertNotSame(routingRequest0, routingRequest1);
      assertNotSame(routingRequest1, routingRequest0);
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getCableCar());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.isTransit());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.getBicycle());
      assertEquals(8183, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.getRail());
      assertTrue(traverseModeSet0.getSubway());
      assertTrue(traverseModeSet1.getWalk());
      assertTrue(traverseModeSet1.getDriving());
      assertTrue(traverseModeSet1.getBicycle());
      assertEquals(8183, traverseModeSet1.getMask());
      assertTrue(traverseModeSet1.getBus());
      assertTrue(traverseModeSet1.getTram());
      assertTrue(traverseModeSet1.getCar());
      assertTrue(traverseModeSet1.getTraininsh());
      assertTrue(traverseModeSet1.getSubway());
      assertTrue(traverseModeSet1.getRail());
      assertTrue(traverseModeSet1.getBusish());
      assertTrue(traverseModeSet1.getCableCar());
      assertTrue(traverseModeSet1.getFunicular());
      assertTrue(traverseModeSet1.isValid());
      assertTrue(traverseModeSet1.getGondola());
      assertTrue(traverseModeSet1.getFerry());
      assertTrue(traverseModeSet1.getCustomMotorVehicle());
      assertTrue(traverseModeSet1.isTransit());
      assertTrue(traverseModeSet1.getTrainish());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertTrue(routingRequest1.transitAllowed());
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertEquals(40.0, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest1.getNumItineraries());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertTrue(traverseModeSet0.equals((Object)traverseModeSet1));
      assertTrue(traverseModeSet1.equals((Object)traverseModeSet0));
      assertFalse(routingRequest0.equals((Object)routingRequest1));
      assertFalse(routingRequest1.equals((Object)routingRequest0));
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertFalse(routingRequest1.reverseOptimizing);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest1.transferPenalty);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertFalse(routingRequest1.showIntermediateStops);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertFalse(routingRequest1.batch);
      assertEquals(3, routingRequest1.numItineraries);
      assertFalse(routingRequest1.kissAndRide);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertEquals(0, routingRequest1.transferSlack);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(0, routingRequest1.boardSlack);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(0, routingRequest1.elevatorBoardCost);
      assertEquals(0, routingRequest1.alightSlack);
      assertEquals(2, routingRequest1.maxTransfers);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertFalse(routingRequest1.arriveBy);
      assertFalse(routingRequest1.walkingBike);
      assertTrue(routingRequest1.softWalkLimiting);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(9223372036854775807L, routingRequest1.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertNotNull(collection0);
      
      Graph graph0 = null;
      double double0 = 0.0;
      double double1 = 0.0;
      String string0 = "";
      TransitStopStreetVertex transitStopStreetVertex0 = new TransitStopStreetVertex(graph0, routingRequest0.routerId, double0, double1, routingRequest0.routerId, string0);
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getCableCar());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.isTransit());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.getBicycle());
      assertEquals(8183, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.getRail());
      assertTrue(traverseModeSet0.getSubway());
      assertTrue(traverseModeSet1.getWalk());
      assertTrue(traverseModeSet1.getDriving());
      assertTrue(traverseModeSet1.getBicycle());
      assertEquals(8183, traverseModeSet1.getMask());
      assertTrue(traverseModeSet1.getBus());
      assertTrue(traverseModeSet1.getTram());
      assertTrue(traverseModeSet1.getCar());
      assertTrue(traverseModeSet1.getTraininsh());
      assertTrue(traverseModeSet1.getSubway());
      assertTrue(traverseModeSet1.getRail());
      assertTrue(traverseModeSet1.getBusish());
      assertTrue(traverseModeSet1.getCableCar());
      assertTrue(traverseModeSet1.getFunicular());
      assertTrue(traverseModeSet1.isValid());
      assertTrue(traverseModeSet1.getGondola());
      assertTrue(traverseModeSet1.getFerry());
      assertTrue(traverseModeSet1.getCustomMotorVehicle());
      assertTrue(traverseModeSet1.isTransit());
      assertTrue(traverseModeSet1.getTrainish());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0.0, transitStopStreetVertex0.getLat(), 0.01);
      assertEquals("", transitStopStreetVertex0.getName());
      assertEquals(0.0, transitStopStreetVertex0.getLon(), 0.01);
      assertEquals(0, transitStopStreetVertex0.getDegreeIn());
      assertEquals(1, transitStopStreetVertex0.getMaxIndex());
      assertFalse(transitStopStreetVertex0.inferredFreeFlowing());
      assertEquals("", transitStopStreetVertex0.getLabel());
      assertEquals(0, transitStopStreetVertex0.getDegreeOut());
      assertEquals(0, transitStopStreetVertex0.getIndex());
      assertEquals(0.0, transitStopStreetVertex0.getY(), 0.01);
      assertEquals(0.0, transitStopStreetVertex0.getX(), 0.01);
      assertTrue(traverseModeSet0.equals((Object)traverseModeSet1));
      assertTrue(traverseModeSet1.equals((Object)traverseModeSet0));
      assertFalse(routingRequest0.equals((Object)routingRequest1));
      assertEquals(double0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(transitStopStreetVertex0.freeFlowing);
      assertFalse(transitStopStreetVertex0.trafficLight);
      assertNotNull(transitStopStreetVertex0);
      
      List<State> list0 = multiShortestPathTree0.getStates(transitStopStreetVertex0);
      assertNotSame(traverseModeSet0, traverseModeSet1);
      assertNotSame(traverseModeSet1, traverseModeSet0);
      assertNotSame(routingRequest0, routingRequest1);
      assertNotSame(routingRequest1, routingRequest0);
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getCableCar());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.isTransit());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.getBicycle());
      assertEquals(8183, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.getRail());
      assertTrue(traverseModeSet0.getSubway());
      assertTrue(traverseModeSet1.getWalk());
      assertTrue(traverseModeSet1.getDriving());
      assertTrue(traverseModeSet1.getBicycle());
      assertEquals(8183, traverseModeSet1.getMask());
      assertTrue(traverseModeSet1.getBus());
      assertTrue(traverseModeSet1.getTram());
      assertTrue(traverseModeSet1.getCar());
      assertTrue(traverseModeSet1.getTraininsh());
      assertTrue(traverseModeSet1.getSubway());
      assertTrue(traverseModeSet1.getRail());
      assertTrue(traverseModeSet1.getBusish());
      assertTrue(traverseModeSet1.getCableCar());
      assertTrue(traverseModeSet1.getFunicular());
      assertTrue(traverseModeSet1.isValid());
      assertTrue(traverseModeSet1.getGondola());
      assertTrue(traverseModeSet1.getFerry());
      assertTrue(traverseModeSet1.getCustomMotorVehicle());
      assertTrue(traverseModeSet1.isTransit());
      assertTrue(traverseModeSet1.getTrainish());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertTrue(routingRequest1.transitAllowed());
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertEquals(40.0, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest1.getNumItineraries());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.0, transitStopStreetVertex0.getLat(), 0.01);
      assertEquals("", transitStopStreetVertex0.getName());
      assertEquals(0.0, transitStopStreetVertex0.getLon(), 0.01);
      assertEquals(0, transitStopStreetVertex0.getDegreeIn());
      assertEquals(1, transitStopStreetVertex0.getMaxIndex());
      assertFalse(transitStopStreetVertex0.inferredFreeFlowing());
      assertEquals("", transitStopStreetVertex0.getLabel());
      assertEquals(0, transitStopStreetVertex0.getDegreeOut());
      assertEquals(0, transitStopStreetVertex0.getIndex());
      assertEquals(0.0, transitStopStreetVertex0.getY(), 0.01);
      assertEquals(0.0, transitStopStreetVertex0.getX(), 0.01);
      assertTrue(traverseModeSet0.equals((Object)traverseModeSet1));
      assertTrue(traverseModeSet1.equals((Object)traverseModeSet0));
      assertFalse(routingRequest0.equals((Object)routingRequest1));
      assertFalse(routingRequest1.equals((Object)routingRequest0));
      assertEquals(double0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertFalse(routingRequest1.reverseOptimizing);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest1.transferPenalty);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertFalse(routingRequest1.showIntermediateStops);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertFalse(routingRequest1.batch);
      assertEquals(3, routingRequest1.numItineraries);
      assertFalse(routingRequest1.kissAndRide);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertEquals(0, routingRequest1.transferSlack);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(0, routingRequest1.boardSlack);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(0, routingRequest1.elevatorBoardCost);
      assertEquals(0, routingRequest1.alightSlack);
      assertEquals(2, routingRequest1.maxTransfers);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertFalse(routingRequest1.arriveBy);
      assertFalse(routingRequest1.walkingBike);
      assertTrue(routingRequest1.softWalkLimiting);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(9223372036854775807L, routingRequest1.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertFalse(transitStopStreetVertex0.freeFlowing);
      assertFalse(transitStopStreetVertex0.trafficLight);
      assertNull(list0);
      
      State state0 = multiShortestPathTree0.getState(transitStopStreetVertex0);
      assertNotSame(traverseModeSet0, traverseModeSet1);
      assertNotSame(traverseModeSet1, traverseModeSet0);
      assertNotSame(routingRequest0, routingRequest1);
      assertNotSame(routingRequest1, routingRequest0);
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getCableCar());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.isTransit());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.getBicycle());
      assertEquals(8183, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.getRail());
      assertTrue(traverseModeSet0.getSubway());
      assertTrue(traverseModeSet1.getWalk());
      assertTrue(traverseModeSet1.getDriving());
      assertTrue(traverseModeSet1.getBicycle());
      assertEquals(8183, traverseModeSet1.getMask());
      assertTrue(traverseModeSet1.getBus());
      assertTrue(traverseModeSet1.getTram());
      assertTrue(traverseModeSet1.getCar());
      assertTrue(traverseModeSet1.getTraininsh());
      assertTrue(traverseModeSet1.getSubway());
      assertTrue(traverseModeSet1.getRail());
      assertTrue(traverseModeSet1.getBusish());
      assertTrue(traverseModeSet1.getCableCar());
      assertTrue(traverseModeSet1.getFunicular());
      assertTrue(traverseModeSet1.isValid());
      assertTrue(traverseModeSet1.getGondola());
      assertTrue(traverseModeSet1.getFerry());
      assertTrue(traverseModeSet1.getCustomMotorVehicle());
      assertTrue(traverseModeSet1.isTransit());
      assertTrue(traverseModeSet1.getTrainish());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertTrue(routingRequest1.transitAllowed());
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertEquals(40.0, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest1.getNumItineraries());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.0, transitStopStreetVertex0.getLat(), 0.01);
      assertEquals("", transitStopStreetVertex0.getName());
      assertEquals(0.0, transitStopStreetVertex0.getLon(), 0.01);
      assertEquals(0, transitStopStreetVertex0.getDegreeIn());
      assertEquals(1, transitStopStreetVertex0.getMaxIndex());
      assertFalse(transitStopStreetVertex0.inferredFreeFlowing());
      assertEquals("", transitStopStreetVertex0.getLabel());
      assertEquals(0, transitStopStreetVertex0.getDegreeOut());
      assertEquals(0, transitStopStreetVertex0.getIndex());
      assertEquals(0.0, transitStopStreetVertex0.getY(), 0.01);
      assertEquals(0.0, transitStopStreetVertex0.getX(), 0.01);
      assertTrue(traverseModeSet0.equals((Object)traverseModeSet1));
      assertTrue(traverseModeSet1.equals((Object)traverseModeSet0));
      assertFalse(routingRequest0.equals((Object)routingRequest1));
      assertFalse(routingRequest1.equals((Object)routingRequest0));
      assertEquals(double0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertFalse(routingRequest1.reverseOptimizing);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest1.transferPenalty);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertFalse(routingRequest1.showIntermediateStops);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertFalse(routingRequest1.batch);
      assertEquals(3, routingRequest1.numItineraries);
      assertFalse(routingRequest1.kissAndRide);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertEquals(0, routingRequest1.transferSlack);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(0, routingRequest1.boardSlack);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(0, routingRequest1.elevatorBoardCost);
      assertEquals(0, routingRequest1.alightSlack);
      assertEquals(2, routingRequest1.maxTransfers);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertFalse(routingRequest1.arriveBy);
      assertFalse(routingRequest1.walkingBike);
      assertTrue(routingRequest1.softWalkLimiting);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(9223372036854775807L, routingRequest1.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertFalse(transitStopStreetVertex0.freeFlowing);
      assertFalse(transitStopStreetVertex0.trafficLight);
      assertNull(state0);
      
      int int1 = multiShortestPathTree0.getVertexCount();
      assertNotSame(traverseModeSet0, traverseModeSet1);
      assertNotSame(traverseModeSet1, traverseModeSet0);
      assertNotSame(routingRequest0, routingRequest1);
      assertNotSame(routingRequest1, routingRequest0);
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getCableCar());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.isTransit());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.getBicycle());
      assertEquals(8183, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.getRail());
      assertTrue(traverseModeSet0.getSubway());
      assertTrue(traverseModeSet1.getWalk());
      assertTrue(traverseModeSet1.getDriving());
      assertTrue(traverseModeSet1.getBicycle());
      assertEquals(8183, traverseModeSet1.getMask());
      assertTrue(traverseModeSet1.getBus());
      assertTrue(traverseModeSet1.getTram());
      assertTrue(traverseModeSet1.getCar());
      assertTrue(traverseModeSet1.getTraininsh());
      assertTrue(traverseModeSet1.getSubway());
      assertTrue(traverseModeSet1.getRail());
      assertTrue(traverseModeSet1.getBusish());
      assertTrue(traverseModeSet1.getCableCar());
      assertTrue(traverseModeSet1.getFunicular());
      assertTrue(traverseModeSet1.isValid());
      assertTrue(traverseModeSet1.getGondola());
      assertTrue(traverseModeSet1.getFerry());
      assertTrue(traverseModeSet1.getCustomMotorVehicle());
      assertTrue(traverseModeSet1.isTransit());
      assertTrue(traverseModeSet1.getTrainish());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertTrue(routingRequest1.transitAllowed());
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertEquals(40.0, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest1.getNumItineraries());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertTrue(traverseModeSet0.equals((Object)traverseModeSet1));
      assertTrue(int1 == int0);
      assertTrue(traverseModeSet1.equals((Object)traverseModeSet0));
      assertFalse(routingRequest0.equals((Object)routingRequest1));
      assertFalse(routingRequest1.equals((Object)routingRequest0));
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertFalse(routingRequest1.reverseOptimizing);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest1.transferPenalty);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertFalse(routingRequest1.showIntermediateStops);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertFalse(routingRequest1.batch);
      assertEquals(3, routingRequest1.numItineraries);
      assertFalse(routingRequest1.kissAndRide);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertEquals(0, routingRequest1.transferSlack);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(0, routingRequest1.boardSlack);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(0, routingRequest1.elevatorBoardCost);
      assertEquals(0, routingRequest1.alightSlack);
      assertEquals(2, routingRequest1.maxTransfers);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertFalse(routingRequest1.arriveBy);
      assertFalse(routingRequest1.walkingBike);
      assertTrue(routingRequest1.softWalkLimiting);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(9223372036854775807L, routingRequest1.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0, int1);
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertNotNull(multiShortestPathTree0);
      
      TransitStop transitStop0 = null;
      StopUnlinked stopUnlinked0 = new StopUnlinked(transitStop0);
      assertNotNull(stopUnlinked0);
      
      String string0 = stopUnlinked0.toString();
      assertEquals("GraphBuilderAnnotation: Stop null not near any streets; it will not be usable.", string0);
      assertNotNull(string0);
      
      Vertex vertex0 = stopUnlinked0.getReferencedVertex();
      assertNull(vertex0);
      
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getStates(vertex0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      RoutingRequest routingRequest0 = new RoutingRequest();
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertNotNull(routingRequest0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertNotNull(multiShortestPathTree0);
      
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertNotNull(set0);
      
      Set<Vertex> set1 = multiShortestPathTree0.getVertices();
      assertSame(set1, set0);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertNotNull(set1);
      
      Vertex vertex0 = null;
      State state0 = new State(vertex0, routingRequest0);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertFalse(state0.isCarParked());
      assertFalse(state0.isOnboard());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.isEverBoarded());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertNull(state0.getBackMode());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertTrue(state0.isFinal());
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertNotNull(state0);
      
      String string0 = multiShortestPathTree0.toString();
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals("MultiSPT(0 vertices)", string0);
      assertNotNull(string0);
      
      State state1 = multiShortestPathTree0.getState(vertex0);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertNull(state1);
      
      State state2 = multiShortestPathTree0.getState(vertex0);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertNull(state2);
      
      State state3 = multiShortestPathTree0.getState(vertex0);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertNull(state3);
      
      boolean boolean0 = multiShortestPathTree0.add(state0);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertFalse(state0.isCarParked());
      assertFalse(state0.isOnboard());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.isEverBoarded());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertNull(state0.getBackMode());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertTrue(state0.isFinal());
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertTrue(boolean0);
      
      List<State> list0 = multiShortestPathTree0.getStates(vertex0);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertNotNull(list0);
      assertTrue(list0.contains(state0));
      
      int int0 = multiShortestPathTree0.getVertexCount();
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(1, int0);
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      RoutingRequest routingRequest0 = new RoutingRequest();
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertNotNull(routingRequest0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertNotNull(multiShortestPathTree0);
      
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertNotNull(set0);
      
      Set<Vertex> set1 = multiShortestPathTree0.getVertices();
      assertSame(set1, set0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertNotNull(set1);
      
      Vertex vertex0 = null;
      State state0 = new State(vertex0, routingRequest0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertFalse(state0.isBikeRenting());
      assertTrue(state0.isFinal());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertFalse(state0.isEverBoarded());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertFalse(state0.isOnboard());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertNotNull(state0);
      
      String string0 = multiShortestPathTree0.toString();
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals("MultiSPT(0 vertices)", string0);
      assertNotNull(string0);
      
      State state1 = multiShortestPathTree0.getState(vertex0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertNull(state1);
      
      State state2 = multiShortestPathTree0.getState(vertex0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertNull(state2);
      
      State state3 = multiShortestPathTree0.getState(vertex0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertNull(state3);
      
      boolean boolean0 = multiShortestPathTree0.add(state0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertFalse(state0.isBikeRenting());
      assertTrue(state0.isFinal());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertFalse(state0.isEverBoarded());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertFalse(state0.isOnboard());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertTrue(boolean0);
      
      Set<Vertex> set2 = multiShortestPathTree0.getVertices();
      assertSame(set2, set1);
      assertSame(set2, set0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(set2.isEmpty());
      assertEquals(1, set2.size());
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertNotNull(set2);
      
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertNotNull(collection0);
      assertTrue(collection0.contains(state0));
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      RoutingRequest routingRequest0 = new RoutingRequest();
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertNotNull(routingRequest0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertNotNull(multiShortestPathTree0);
      
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertNotNull(set0);
      
      Set<Vertex> set1 = multiShortestPathTree0.getVertices();
      assertSame(set1, set0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertNotNull(set1);
      
      Vertex vertex0 = null;
      List<GraphPath> list0 = multiShortestPathTree0.getPaths(vertex0, routingRequest0.walkingBike);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertNotNull(list0);
      
      State state0 = new State(vertex0, routingRequest0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertFalse(state0.isEverBoarded());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertTrue(state0.isFinal());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertNull(state0.getBackMode());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertNotNull(state0);
      
      String string0 = multiShortestPathTree0.toString();
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals("MultiSPT(0 vertices)", string0);
      assertNotNull(string0);
      
      State state1 = multiShortestPathTree0.getState(vertex0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertNull(state1);
      
      State state2 = multiShortestPathTree0.getState(vertex0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertNull(state2);
      
      State state3 = multiShortestPathTree0.getState(vertex0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertNull(state3);
      
      boolean boolean0 = multiShortestPathTree0.add(state0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(state0.getReverseOptimizing());
      assertFalse(state0.isEverBoarded());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertTrue(state0.isFinal());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertNull(state0.getBackMode());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertTrue(boolean0);
      
      State state4 = new State(vertex0, routingRequest0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0.0, state4.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state4.getStartTimeSeconds());
      assertFalse(state4.isCarParked());
      assertTrue(state4.isFinal());
      assertEquals(0L, state4.getLastAlightedTimeSeconds());
      assertEquals(0, state4.getPreTransitTimeDelta());
      assertEquals(0.0, state4.getWalkAtLastTransit(), 0.01);
      assertEquals(TraverseMode.WALK, state4.getNonTransitMode());
      assertEquals(0, state4.getTimeDeltaSeconds());
      assertFalse(state4.getReverseOptimizing());
      assertEquals(0, state4.getPreTransitTime());
      assertEquals(0, state4.getAbsTimeDeltaSeconds());
      assertFalse(state4.isBikeRenting());
      assertEquals(1392409281L, state4.getTimeSeconds());
      assertFalse(state4.isOnboard());
      assertEquals(0.0, state4.getWalkDistance(), 0.01);
      assertEquals(0L, state4.getElapsedTimeSeconds());
      assertEquals(0.0, state4.getWalkDistanceDelta(), 0.01);
      assertNull(state4.getBackMode());
      assertEquals(0, state4.getNumBoardings());
      assertNull(state4.getZone());
      assertEquals(0.0, state4.getWalkSinceLastTransit(), 0.01);
      assertFalse(state4.isBackWalkingBike());
      assertEquals(0, state4.getLastNextArrivalDelta());
      assertEquals(1392409281000L, state4.getTimeInMillis());
      assertFalse(state4.isEverBoarded());
      assertEquals(0.0, state4.getWeight(), 0.01);
      assertFalse(state4.equals((Object)state0));
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.0, state4.weight, 0.01);
      assertEquals(0.0, state4.walkDistance, 0.01);
      assertNotNull(state4);
      
      boolean boolean1 = multiShortestPathTree0.add(state4);
      assertNotSame(state4, state0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(0.0, state4.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state4.getStartTimeSeconds());
      assertFalse(state4.isCarParked());
      assertTrue(state4.isFinal());
      assertEquals(0L, state4.getLastAlightedTimeSeconds());
      assertEquals(0, state4.getPreTransitTimeDelta());
      assertEquals(0.0, state4.getWalkAtLastTransit(), 0.01);
      assertEquals(TraverseMode.WALK, state4.getNonTransitMode());
      assertEquals(0, state4.getTimeDeltaSeconds());
      assertFalse(state4.getReverseOptimizing());
      assertEquals(0, state4.getPreTransitTime());
      assertEquals(0, state4.getAbsTimeDeltaSeconds());
      assertFalse(state4.isBikeRenting());
      assertEquals(1392409281L, state4.getTimeSeconds());
      assertFalse(state4.isOnboard());
      assertEquals(0.0, state4.getWalkDistance(), 0.01);
      assertEquals(0L, state4.getElapsedTimeSeconds());
      assertEquals(0.0, state4.getWalkDistanceDelta(), 0.01);
      assertNull(state4.getBackMode());
      assertEquals(0, state4.getNumBoardings());
      assertNull(state4.getZone());
      assertEquals(0.0, state4.getWalkSinceLastTransit(), 0.01);
      assertFalse(state4.isBackWalkingBike());
      assertEquals(0, state4.getLastNextArrivalDelta());
      assertEquals(1392409281000L, state4.getTimeInMillis());
      assertFalse(state4.isEverBoarded());
      assertEquals(0.0, state4.getWeight(), 0.01);
      assertFalse(state4.equals((Object)state0));
      assertTrue(boolean1 == boolean0);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.0, state4.weight, 0.01);
      assertEquals(0.0, state4.walkDistance, 0.01);
      assertTrue(boolean1);
      
      String string1 = multiShortestPathTree0.toString();
      assertNotSame(string1, string0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(string1.equals((Object)string0));
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals("MultiSPT(1 vertices)", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      RoutingRequest routingRequest0 = new RoutingRequest();
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertNotNull(routingRequest0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertNotNull(multiShortestPathTree0);
      
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertNotNull(set0);
      
      Set<Vertex> set1 = multiShortestPathTree0.getVertices();
      assertSame(set1, set0);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertNotNull(set1);
      
      Vertex vertex0 = null;
      List<GraphPath> list0 = multiShortestPathTree0.getPaths(vertex0, routingRequest0.walkingBike);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertNotNull(list0);
      
      State state0 = new State(vertex0, routingRequest0);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isEverBoarded());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertTrue(state0.isFinal());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertNotNull(state0);
      
      String string0 = multiShortestPathTree0.toString();
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals("MultiSPT(0 vertices)", string0);
      assertNotNull(string0);
      
      State state1 = multiShortestPathTree0.getState(vertex0);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertNull(state1);
      
      State state2 = multiShortestPathTree0.getState(vertex0);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertNull(state2);
      
      State state3 = multiShortestPathTree0.getState(vertex0);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertNull(state3);
      
      boolean boolean0 = multiShortestPathTree0.add(state0);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isEverBoarded());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertTrue(state0.isFinal());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getState(vertex0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.core.State", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      boolean boolean1 = true;
      boolean boolean2 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean1, boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      RoutingRequest routingRequest0 = new RoutingRequest();
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertNotNull(routingRequest0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertNotNull(multiShortestPathTree0);
      
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertNotNull(set0);
      
      Set<Vertex> set1 = multiShortestPathTree0.getVertices();
      assertSame(set1, set0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertNotNull(set1);
      
      Vertex vertex0 = null;
      State state0 = new State(vertex0, routingRequest0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(state0.isFinal());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertFalse(state0.isBikeRenting());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.isOnboard());
      assertNull(state0.getBackMode());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isCarParked());
      assertFalse(state0.isEverBoarded());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertNotNull(state0);
      
      String string0 = multiShortestPathTree0.toString();
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals("MultiSPT(0 vertices)", string0);
      assertNotNull(string0);
      
      State state1 = multiShortestPathTree0.getState(vertex0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertNull(state1);
      
      State state2 = multiShortestPathTree0.getState(vertex0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertNull(state2);
      
      State state3 = multiShortestPathTree0.getState(vertex0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertNull(state3);
      
      boolean boolean3 = multiShortestPathTree0.add(state0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertTrue(state0.isFinal());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertFalse(state0.isBikeRenting());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.isOnboard());
      assertNull(state0.getBackMode());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isCarParked());
      assertFalse(state0.isEverBoarded());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertTrue(boolean3);
      
      List<State> list0 = multiShortestPathTree0.getStates(vertex0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertNotNull(list0);
      assertTrue(list0.contains(state0));
      
      Integer integer0 = new Integer(routingRequest0.bikeRentalPickupTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(60, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean4 = multiShortestPathTree0.visit(state0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertTrue(state0.isFinal());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertFalse(state0.isBikeRenting());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.isOnboard());
      assertNull(state0.getBackMode());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isCarParked());
      assertFalse(state0.isEverBoarded());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertTrue(boolean4);
      
      System.setCurrentTimeMillis(routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softPreTransitLimiting);
      
      boolean boolean5 = MultiShortestPathTree.dominates(state1, state0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertTrue(state0.isFinal());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertFalse(state0.isBikeRenting());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.isOnboard());
      assertNull(state0.getBackMode());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isCarParked());
      assertFalse(state0.isEverBoarded());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean1);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertFalse(boolean5);
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      RoutingRequest routingRequest0 = new RoutingRequest();
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertNotNull(routingRequest0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertNotNull(multiShortestPathTree0);
      
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertNotNull(set0);
      
      Set<Vertex> set1 = multiShortestPathTree0.getVertices();
      assertSame(set1, set0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertNotNull(set1);
      
      Vertex vertex0 = null;
      List<GraphPath> list0 = multiShortestPathTree0.getPaths(vertex0, routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertNotNull(list0);
      
      State state0 = new State(vertex0, routingRequest0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(state0.isEverBoarded());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertNull(state0.getBackMode());
      assertTrue(state0.isFinal());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertFalse(state0.isBikeRenting());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertFalse(state0.isCarParked());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertNotNull(state0);
      
      String string0 = multiShortestPathTree0.toString();
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals("MultiSPT(0 vertices)", string0);
      assertNotNull(string0);
      
      State state1 = multiShortestPathTree0.getState(vertex0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertNull(state1);
      
      State state2 = multiShortestPathTree0.getState(vertex0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertNull(state2);
      
      State state3 = multiShortestPathTree0.getState(vertex0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertNull(state3);
      
      boolean boolean0 = multiShortestPathTree0.add(state0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(state0.isEverBoarded());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertNull(state0.getBackMode());
      assertTrue(state0.isFinal());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertFalse(state0.isBikeRenting());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertFalse(state0.isCarParked());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertTrue(boolean0);
      
      State state4 = new State(vertex0, routingRequest0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(state4.getReverseOptimizing());
      assertEquals(0.0, state4.getWeight(), 0.01);
      assertEquals(TraverseMode.WALK, state4.getNonTransitMode());
      assertEquals(1392409281L, state4.getTimeSeconds());
      assertEquals(0L, state4.getLastAlightedTimeSeconds());
      assertFalse(state4.isCarParked());
      assertEquals(0, state4.getTimeDeltaSeconds());
      assertEquals(0, state4.getPreTransitTimeDelta());
      assertEquals(1392409281L, state4.getStartTimeSeconds());
      assertEquals(0.0, state4.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state4.isEverBoarded());
      assertEquals(0, state4.getLastNextArrivalDelta());
      assertEquals(0, state4.getAbsTimeDeltaSeconds());
      assertFalse(state4.isBackWalkingBike());
      assertNull(state4.getZone());
      assertEquals(0.0, state4.getWalkSinceLastTransit(), 0.01);
      assertEquals(1392409281000L, state4.getTimeInMillis());
      assertEquals(0.0, state4.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state4.getWalkDistance(), 0.01);
      assertFalse(state4.isOnboard());
      assertEquals(0.0, state4.getWalkAtLastTransit(), 0.01);
      assertNull(state4.getBackMode());
      assertEquals(0, state4.getNumBoardings());
      assertEquals(0L, state4.getElapsedTimeSeconds());
      assertEquals(0, state4.getPreTransitTime());
      assertTrue(state4.isFinal());
      assertFalse(state4.isBikeRenting());
      assertFalse(state4.equals((Object)state0));
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.0, state4.weight, 0.01);
      assertEquals(0.0, state4.walkDistance, 0.01);
      assertNotNull(state4);
      
      boolean boolean1 = multiShortestPathTree0.visit(state4);
      assertNotSame(state4, state0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(state4.getReverseOptimizing());
      assertEquals(0.0, state4.getWeight(), 0.01);
      assertEquals(TraverseMode.WALK, state4.getNonTransitMode());
      assertEquals(1392409281L, state4.getTimeSeconds());
      assertEquals(0L, state4.getLastAlightedTimeSeconds());
      assertFalse(state4.isCarParked());
      assertEquals(0, state4.getTimeDeltaSeconds());
      assertEquals(0, state4.getPreTransitTimeDelta());
      assertEquals(1392409281L, state4.getStartTimeSeconds());
      assertEquals(0.0, state4.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state4.isEverBoarded());
      assertEquals(0, state4.getLastNextArrivalDelta());
      assertEquals(0, state4.getAbsTimeDeltaSeconds());
      assertFalse(state4.isBackWalkingBike());
      assertNull(state4.getZone());
      assertEquals(0.0, state4.getWalkSinceLastTransit(), 0.01);
      assertEquals(1392409281000L, state4.getTimeInMillis());
      assertEquals(0.0, state4.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state4.getWalkDistance(), 0.01);
      assertFalse(state4.isOnboard());
      assertEquals(0.0, state4.getWalkAtLastTransit(), 0.01);
      assertNull(state4.getBackMode());
      assertEquals(0, state4.getNumBoardings());
      assertEquals(0L, state4.getElapsedTimeSeconds());
      assertEquals(0, state4.getPreTransitTime());
      assertTrue(state4.isFinal());
      assertFalse(state4.isBikeRenting());
      assertFalse(state4.equals((Object)state0));
      assertFalse(boolean1 == boolean0);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.0, state4.weight, 0.01);
      assertEquals(0.0, state4.walkDistance, 0.01);
      assertFalse(boolean1);
      
      String string1 = multiShortestPathTree0.toString();
      assertNotSame(string1, string0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(string1.equals((Object)string0));
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals("MultiSPT(1 vertices)", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      RoutingRequest routingRequest0 = new RoutingRequest();
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertNotNull(routingRequest0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertNotNull(multiShortestPathTree0);
      
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertNotNull(set0);
      
      Set<Vertex> set1 = multiShortestPathTree0.getVertices();
      assertSame(set1, set0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertNotNull(set1);
      
      Vertex vertex0 = null;
      List<GraphPath> list0 = multiShortestPathTree0.getPaths(vertex0, routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertNotNull(list0);
      
      State state0 = new State(vertex0, routingRequest0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertNull(state0.getBackMode());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertTrue(state0.isFinal());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.isCarParked());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isEverBoarded());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isOnboard());
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertNotNull(state0);
      
      String string0 = multiShortestPathTree0.toString();
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals("MultiSPT(0 vertices)", string0);
      assertNotNull(string0);
      
      State state1 = multiShortestPathTree0.getState(vertex0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertNull(state1);
      
      double double0 = 1409.638;
      state0.weight = double0;
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertNull(state0.getBackMode());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertTrue(state0.isFinal());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(1409.638, state0.getWeight(), 0.01);
      assertFalse(state0.isCarParked());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isEverBoarded());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isOnboard());
      
      State state2 = multiShortestPathTree0.getState(vertex0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertNull(state2);
      
      State state3 = multiShortestPathTree0.getState(vertex0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertNull(state3);
      
      boolean boolean0 = multiShortestPathTree0.add(state0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertNull(state0.getBackMode());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertTrue(state0.isFinal());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(1409.638, state0.getWeight(), 0.01);
      assertFalse(state0.isCarParked());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isEverBoarded());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isOnboard());
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(1409.638, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertTrue(boolean0);
      
      State state4 = new State(vertex0, routingRequest0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertNull(state4.getBackMode());
      assertFalse(state4.isOnboard());
      assertEquals(0, state4.getNumBoardings());
      assertNull(state4.getZone());
      assertEquals(0L, state4.getElapsedTimeSeconds());
      assertEquals(0.0, state4.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state4.getAbsTimeDeltaSeconds());
      assertEquals(0, state4.getPreTransitTime());
      assertFalse(state4.isBikeRenting());
      assertEquals(1392409281L, state4.getTimeSeconds());
      assertEquals(0.0, state4.getWalkDistanceDelta(), 0.01);
      assertFalse(state4.getReverseOptimizing());
      assertEquals(0.0, state4.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state4.getStartTimeSeconds());
      assertFalse(state4.isCarParked());
      assertEquals(0L, state4.getLastAlightedTimeSeconds());
      assertTrue(state4.isFinal());
      assertEquals(0.0, state4.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state4.getTimeDeltaSeconds());
      assertEquals(TraverseMode.WALK, state4.getNonTransitMode());
      assertEquals(0, state4.getPreTransitTimeDelta());
      assertFalse(state4.isBackWalkingBike());
      assertFalse(state4.isEverBoarded());
      assertEquals(0, state4.getLastNextArrivalDelta());
      assertEquals(1392409281000L, state4.getTimeInMillis());
      assertEquals(0.0, state4.getWalkDistance(), 0.01);
      assertEquals(0.0, state4.getWeight(), 0.01);
      assertFalse(state4.equals((Object)state0));
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0, state4.weight, 0.01);
      assertEquals(0.0, state4.walkDistance, 0.01);
      assertNotNull(state4);
      
      boolean boolean1 = multiShortestPathTree0.add(state4);
      assertNotSame(state4, state0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertNull(state4.getBackMode());
      assertFalse(state4.isOnboard());
      assertEquals(0, state4.getNumBoardings());
      assertNull(state4.getZone());
      assertEquals(0L, state4.getElapsedTimeSeconds());
      assertEquals(0.0, state4.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state4.getAbsTimeDeltaSeconds());
      assertEquals(0, state4.getPreTransitTime());
      assertFalse(state4.isBikeRenting());
      assertEquals(1392409281L, state4.getTimeSeconds());
      assertEquals(0.0, state4.getWalkDistanceDelta(), 0.01);
      assertFalse(state4.getReverseOptimizing());
      assertEquals(0.0, state4.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state4.getStartTimeSeconds());
      assertFalse(state4.isCarParked());
      assertEquals(0L, state4.getLastAlightedTimeSeconds());
      assertTrue(state4.isFinal());
      assertEquals(0.0, state4.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state4.getTimeDeltaSeconds());
      assertEquals(TraverseMode.WALK, state4.getNonTransitMode());
      assertEquals(0, state4.getPreTransitTimeDelta());
      assertFalse(state4.isBackWalkingBike());
      assertFalse(state4.isEverBoarded());
      assertEquals(0, state4.getLastNextArrivalDelta());
      assertEquals(1392409281000L, state4.getTimeInMillis());
      assertEquals(0.0, state4.getWalkDistance(), 0.01);
      assertEquals(0.0, state4.getWeight(), 0.01);
      assertFalse(state4.equals((Object)state0));
      assertTrue(boolean1 == boolean0);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.0, state4.weight, 0.01);
      assertEquals(0.0, state4.walkDistance, 0.01);
      assertTrue(boolean1);
      
      String string1 = multiShortestPathTree0.toString();
      assertNotSame(string1, string0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(string1.equals((Object)string0));
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals("MultiSPT(1 vertices)", string1);
      assertNotNull(string1);
      
      Set<Vertex> set2 = multiShortestPathTree0.getVertices();
      assertSame(set2, set1);
      assertSame(set2, set0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(set2.isEmpty());
      assertEquals(1, set2.size());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertNotNull(set2);
      
      String string2 = multiShortestPathTree0.toString();
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals("MultiSPT(1 vertices)", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      RoutingRequest routingRequest0 = new RoutingRequest();
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertNotNull(routingRequest0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertNotNull(multiShortestPathTree0);
      
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertNotNull(set0);
      
      Set<Vertex> set1 = multiShortestPathTree0.getVertices();
      assertSame(set1, set0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertNotNull(set1);
      
      Vertex vertex0 = null;
      List<GraphPath> list0 = multiShortestPathTree0.getPaths(vertex0, routingRequest0.walkingBike);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertNotNull(list0);
      
      State state0 = new State(vertex0, routingRequest0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(state0.getReverseOptimizing());
      assertTrue(state0.isFinal());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isEverBoarded());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertNull(state0.getZone());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertNull(state0.getBackMode());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertNotNull(state0);
      
      String string0 = multiShortestPathTree0.toString();
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals("MultiSPT(0 vertices)", string0);
      assertNotNull(string0);
      
      State state1 = multiShortestPathTree0.getState(vertex0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertNull(state1);
      
      double double0 = 1409.638;
      state0.weight = routingRequest0.carAccelerationSpeed;
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(state0.getReverseOptimizing());
      assertTrue(state0.isFinal());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isEverBoarded());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(2.9, state0.getWeight(), 0.01);
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertNull(state0.getZone());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertNull(state0.getBackMode());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      
      State state2 = multiShortestPathTree0.getState(vertex0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertNull(state2);
      
      State state3 = multiShortestPathTree0.getState(vertex0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertNull(state3);
      
      boolean boolean0 = multiShortestPathTree0.add(state0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(state0.getReverseOptimizing());
      assertTrue(state0.isFinal());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isEverBoarded());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(2.9, state0.getWeight(), 0.01);
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertNull(state0.getZone());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertNull(state0.getBackMode());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(2.9, state0.weight, 0.01);
      assertTrue(boolean0);
      
      State state4 = new State(vertex0, routingRequest0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0.0, state4.getWalkDistance(), 0.01);
      assertFalse(state4.isOnboard());
      assertEquals(0.0, state4.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state4.getElapsedTimeSeconds());
      assertEquals(0, state4.getAbsTimeDeltaSeconds());
      assertFalse(state4.isBackWalkingBike());
      assertEquals(0, state4.getLastNextArrivalDelta());
      assertFalse(state4.isBikeRenting());
      assertEquals(0, state4.getPreTransitTime());
      assertEquals(0.0, state4.getWeight(), 0.01);
      assertEquals(0, state4.getNumBoardings());
      assertEquals(1392409281000L, state4.getTimeInMillis());
      assertEquals(0L, state4.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state4.getStartTimeSeconds());
      assertEquals(TraverseMode.WALK, state4.getNonTransitMode());
      assertFalse(state4.isCarParked());
      assertTrue(state4.isFinal());
      assertEquals(0.0, state4.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state4.isEverBoarded());
      assertEquals(0, state4.getPreTransitTimeDelta());
      assertFalse(state4.getReverseOptimizing());
      assertEquals(0.0, state4.getWalkSinceLastTransit(), 0.01);
      assertEquals(1392409281L, state4.getTimeSeconds());
      assertEquals(0, state4.getTimeDeltaSeconds());
      assertNull(state4.getZone());
      assertNull(state4.getBackMode());
      assertEquals(0.0, state4.getWalkAtLastTransit(), 0.01);
      assertFalse(state4.equals((Object)state0));
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.0, state4.walkDistance, 0.01);
      assertEquals(0.0, state4.weight, 0.01);
      assertNotNull(state4);
      
      State state5 = state4.detachNextResult();
      assertNotSame(state4, state0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0.0, state4.getWalkDistance(), 0.01);
      assertFalse(state4.isOnboard());
      assertEquals(0.0, state4.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state4.getElapsedTimeSeconds());
      assertEquals(0, state4.getAbsTimeDeltaSeconds());
      assertFalse(state4.isBackWalkingBike());
      assertEquals(0, state4.getLastNextArrivalDelta());
      assertFalse(state4.isBikeRenting());
      assertEquals(0, state4.getPreTransitTime());
      assertEquals(0.0, state4.getWeight(), 0.01);
      assertEquals(0, state4.getNumBoardings());
      assertEquals(1392409281000L, state4.getTimeInMillis());
      assertEquals(0L, state4.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state4.getStartTimeSeconds());
      assertEquals(TraverseMode.WALK, state4.getNonTransitMode());
      assertFalse(state4.isCarParked());
      assertTrue(state4.isFinal());
      assertEquals(0.0, state4.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state4.isEverBoarded());
      assertEquals(0, state4.getPreTransitTimeDelta());
      assertFalse(state4.getReverseOptimizing());
      assertEquals(0.0, state4.getWalkSinceLastTransit(), 0.01);
      assertEquals(1392409281L, state4.getTimeSeconds());
      assertEquals(0, state4.getTimeDeltaSeconds());
      assertNull(state4.getZone());
      assertNull(state4.getBackMode());
      assertEquals(0.0, state4.getWalkAtLastTransit(), 0.01);
      assertFalse(state4.equals((Object)state0));
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.0, state4.walkDistance, 0.01);
      assertEquals(0.0, state4.weight, 0.01);
      assertNull(state5);
      
      boolean boolean1 = multiShortestPathTree0.add(state4);
      assertNotSame(state4, state0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(0.0, state4.getWalkDistance(), 0.01);
      assertFalse(state4.isOnboard());
      assertEquals(0.0, state4.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state4.getElapsedTimeSeconds());
      assertEquals(0, state4.getAbsTimeDeltaSeconds());
      assertFalse(state4.isBackWalkingBike());
      assertEquals(0, state4.getLastNextArrivalDelta());
      assertFalse(state4.isBikeRenting());
      assertEquals(0, state4.getPreTransitTime());
      assertEquals(0.0, state4.getWeight(), 0.01);
      assertEquals(0, state4.getNumBoardings());
      assertEquals(1392409281000L, state4.getTimeInMillis());
      assertEquals(0L, state4.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state4.getStartTimeSeconds());
      assertEquals(TraverseMode.WALK, state4.getNonTransitMode());
      assertFalse(state4.isCarParked());
      assertTrue(state4.isFinal());
      assertEquals(0.0, state4.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state4.isEverBoarded());
      assertEquals(0, state4.getPreTransitTimeDelta());
      assertFalse(state4.getReverseOptimizing());
      assertEquals(0.0, state4.getWalkSinceLastTransit(), 0.01);
      assertEquals(1392409281L, state4.getTimeSeconds());
      assertEquals(0, state4.getTimeDeltaSeconds());
      assertNull(state4.getZone());
      assertNull(state4.getBackMode());
      assertEquals(0.0, state4.getWalkAtLastTransit(), 0.01);
      assertTrue(boolean1 == boolean0);
      assertFalse(state4.equals((Object)state0));
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.0, state4.walkDistance, 0.01);
      assertEquals(0.0, state4.weight, 0.01);
      assertTrue(boolean1);
      
      String string1 = multiShortestPathTree0.toString();
      assertNotSame(string1, string0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals("MultiSPT(1 vertices)", string1);
      assertNotNull(string1);
      
      Set<Vertex> set2 = new LinkedHashSet<Vertex>();
      assertTrue(set2.isEmpty());
      assertEquals(0, set2.size());
      assertFalse(set2.equals((Object)set1));
      assertFalse(set2.equals((Object)set0));
      assertNotNull(set2);
      
      String string2 = multiShortestPathTree0.toString();
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals("MultiSPT(1 vertices)", string2);
      assertNotNull(string2);
      
      boolean boolean2 = multiShortestPathTree0.add(state0);
      assertNotSame(state0, state4);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(state0.getReverseOptimizing());
      assertTrue(state0.isFinal());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isEverBoarded());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(2.9, state0.getWeight(), 0.01);
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertNull(state0.getZone());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertNull(state0.getBackMode());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(state0.equals((Object)state4));
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(2.9, state0.weight, 0.01);
      assertFalse(boolean2);
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      RoutingRequest routingRequest0 = new RoutingRequest();
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertNotNull(routingRequest0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertNotNull(multiShortestPathTree0);
      
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertNotNull(set0);
      
      Set<Vertex> set1 = multiShortestPathTree0.getVertices();
      assertSame(set1, set0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertNotNull(set1);
      
      Vertex vertex0 = null;
      List<GraphPath> list0 = multiShortestPathTree0.getPaths(vertex0, routingRequest0.walkingBike);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertNotNull(list0);
      
      State state0 = new State(vertex0, routingRequest0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertTrue(state0.isFinal());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isEverBoarded());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getBackMode());
      assertFalse(state0.isOnboard());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertNotNull(state0);
      
      String string0 = multiShortestPathTree0.toString();
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals("MultiSPT(0 vertices)", string0);
      assertNotNull(string0);
      
      State state1 = multiShortestPathTree0.getState(vertex0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertNull(state1);
      
      double double0 = 1409.638;
      state0.weight = routingRequest0.carAccelerationSpeed;
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertTrue(state0.isFinal());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isEverBoarded());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(2.9, state0.getWeight(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getBackMode());
      assertFalse(state0.isOnboard());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      
      State state2 = multiShortestPathTree0.getState(vertex0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertNull(state2);
      
      State state3 = multiShortestPathTree0.getState(vertex0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertNull(state3);
      
      boolean boolean0 = multiShortestPathTree0.add(state0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertTrue(state0.isFinal());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isEverBoarded());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(2.9, state0.getWeight(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getBackMode());
      assertFalse(state0.isOnboard());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(2.9, state0.weight, 0.01);
      assertTrue(boolean0);
      
      State state4 = new State(vertex0, routingRequest0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, state4.getTimeDeltaSeconds());
      assertFalse(state4.isBikeRenting());
      assertEquals(1392409281000L, state4.getTimeInMillis());
      assertEquals(0.0, state4.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state4.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state4.getStartTimeSeconds());
      assertEquals(0L, state4.getLastAlightedTimeSeconds());
      assertTrue(state4.isFinal());
      assertEquals(0, state4.getPreTransitTime());
      assertEquals(0, state4.getAbsTimeDeltaSeconds());
      assertEquals(0L, state4.getElapsedTimeSeconds());
      assertEquals(0, state4.getNumBoardings());
      assertEquals(1392409281L, state4.getTimeSeconds());
      assertFalse(state4.isOnboard());
      assertEquals(0.0, state4.getWeight(), 0.01);
      assertNull(state4.getBackMode());
      assertEquals(0.0, state4.getWalkDistanceDelta(), 0.01);
      assertFalse(state4.getReverseOptimizing());
      assertEquals(0.0, state4.getWalkDistance(), 0.01);
      assertNull(state4.getZone());
      assertEquals(0.0, state4.getWalkSinceLastTransit(), 0.01);
      assertEquals(TraverseMode.WALK, state4.getNonTransitMode());
      assertEquals(0, state4.getLastNextArrivalDelta());
      assertFalse(state4.isBackWalkingBike());
      assertFalse(state4.isEverBoarded());
      assertFalse(state4.isCarParked());
      assertEquals(0, state4.getPreTransitTimeDelta());
      assertFalse(state4.equals((Object)state0));
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0, state4.walkDistance, 0.01);
      assertEquals(0.0, state4.weight, 0.01);
      assertNotNull(state4);
      
      State state5 = state4.detachNextResult();
      assertNotSame(state4, state0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, state4.getTimeDeltaSeconds());
      assertFalse(state4.isBikeRenting());
      assertEquals(1392409281000L, state4.getTimeInMillis());
      assertEquals(0.0, state4.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state4.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state4.getStartTimeSeconds());
      assertEquals(0L, state4.getLastAlightedTimeSeconds());
      assertTrue(state4.isFinal());
      assertEquals(0, state4.getPreTransitTime());
      assertEquals(0, state4.getAbsTimeDeltaSeconds());
      assertEquals(0L, state4.getElapsedTimeSeconds());
      assertEquals(0, state4.getNumBoardings());
      assertEquals(1392409281L, state4.getTimeSeconds());
      assertFalse(state4.isOnboard());
      assertEquals(0.0, state4.getWeight(), 0.01);
      assertNull(state4.getBackMode());
      assertEquals(0.0, state4.getWalkDistanceDelta(), 0.01);
      assertFalse(state4.getReverseOptimizing());
      assertEquals(0.0, state4.getWalkDistance(), 0.01);
      assertNull(state4.getZone());
      assertEquals(0.0, state4.getWalkSinceLastTransit(), 0.01);
      assertEquals(TraverseMode.WALK, state4.getNonTransitMode());
      assertEquals(0, state4.getLastNextArrivalDelta());
      assertFalse(state4.isBackWalkingBike());
      assertFalse(state4.isEverBoarded());
      assertFalse(state4.isCarParked());
      assertEquals(0, state4.getPreTransitTimeDelta());
      assertFalse(state4.equals((Object)state0));
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0, state4.walkDistance, 0.01);
      assertEquals(0.0, state4.weight, 0.01);
      assertNull(state5);
      
      String string1 = multiShortestPathTree0.toString();
      assertNotSame(string1, string0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals("MultiSPT(1 vertices)", string1);
      assertNotNull(string1);
      
      LinkedHashSet<Vertex> linkedHashSet0 = new LinkedHashSet<Vertex>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      String string2 = multiShortestPathTree0.toString();
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals("MultiSPT(1 vertices)", string2);
      assertNotNull(string2);
      
      boolean boolean1 = multiShortestPathTree0.add(state0);
      assertNotSame(state0, state4);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertTrue(state0.isFinal());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isEverBoarded());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(2.9, state0.getWeight(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getBackMode());
      assertFalse(state0.isOnboard());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertFalse(boolean1 == boolean0);
      assertFalse(state0.equals((Object)state4));
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(2.9, state0.weight, 0.01);
      assertFalse(boolean1);
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      RoutingRequest routingRequest0 = new RoutingRequest();
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertNotNull(routingRequest0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertNotNull(multiShortestPathTree0);
      
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertNotNull(set0);
      
      Set<Vertex> set1 = multiShortestPathTree0.getVertices();
      assertSame(set1, set0);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertNotNull(set1);
      
      Vertex vertex0 = null;
      List<GraphPath> list0 = multiShortestPathTree0.getPaths(vertex0, routingRequest0.walkingBike);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertNotNull(list0);
      
      State state0 = new State(vertex0, routingRequest0);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertFalse(state0.isOnboard());
      assertNull(state0.getBackMode());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertTrue(state0.isFinal());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isBikeRenting());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBackWalkingBike());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isEverBoarded());
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertNotNull(state0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, routingRequest0.routerId);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(boolean0);
      
      String string0 = multiShortestPathTree0.toString();
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals("MultiSPT(0 vertices)", string0);
      assertNotNull(string0);
      
      State state1 = multiShortestPathTree0.getState(vertex0);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertNull(state1);
      
      double double0 = 1409.638;
      state0.weight = double0;
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertFalse(state0.isOnboard());
      assertNull(state0.getBackMode());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertTrue(state0.isFinal());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(1409.638, state0.getWeight(), 0.01);
      assertFalse(state0.isBikeRenting());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBackWalkingBike());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isEverBoarded());
      
      State state2 = multiShortestPathTree0.getState(vertex0);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertNull(state2);
      
      State state3 = multiShortestPathTree0.getState(vertex0);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertNull(state3);
      
      boolean boolean1 = multiShortestPathTree0.add(state0);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertFalse(state0.isOnboard());
      assertNull(state0.getBackMode());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertTrue(state0.isFinal());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(1409.638, state0.getWeight(), 0.01);
      assertFalse(state0.isBikeRenting());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBackWalkingBike());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isEverBoarded());
      assertFalse(boolean1 == boolean0);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(1409.638, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertTrue(boolean1);
      
      State state4 = new State(vertex0, routingRequest0);
      assertEquals(0.0, state4.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state4.getStartTimeSeconds());
      assertFalse(state4.isCarParked());
      assertEquals(0L, state4.getLastAlightedTimeSeconds());
      assertTrue(state4.isFinal());
      assertEquals(0, state4.getTimeDeltaSeconds());
      assertEquals(0, state4.getPreTransitTimeDelta());
      assertEquals(TraverseMode.WALK, state4.getNonTransitMode());
      assertFalse(state4.isBikeRenting());
      assertEquals(0, state4.getAbsTimeDeltaSeconds());
      assertEquals(0, state4.getPreTransitTime());
      assertEquals(0.0, state4.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281L, state4.getTimeSeconds());
      assertFalse(state4.getReverseOptimizing());
      assertFalse(state4.isOnboard());
      assertEquals(0.0, state4.getWalkDistance(), 0.01);
      assertEquals(0.0, state4.getWalkDistanceDelta(), 0.01);
      assertNull(state4.getBackMode());
      assertEquals(0L, state4.getElapsedTimeSeconds());
      assertEquals(0, state4.getNumBoardings());
      assertNull(state4.getZone());
      assertEquals(0.0, state4.getWalkSinceLastTransit(), 0.01);
      assertFalse(state4.isEverBoarded());
      assertFalse(state4.isBackWalkingBike());
      assertEquals(1392409281000L, state4.getTimeInMillis());
      assertEquals(0, state4.getLastNextArrivalDelta());
      assertEquals(0.0, state4.getWeight(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(state4.equals((Object)state0));
      assertEquals(0.0, state4.weight, 0.01);
      assertEquals(0.0, state4.walkDistance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertNotNull(state4);
      
      boolean boolean2 = multiShortestPathTree0.add(state4);
      assertNotSame(state4, state0);
      assertEquals(0.0, state4.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state4.getStartTimeSeconds());
      assertFalse(state4.isCarParked());
      assertEquals(0L, state4.getLastAlightedTimeSeconds());
      assertTrue(state4.isFinal());
      assertEquals(0, state4.getTimeDeltaSeconds());
      assertEquals(0, state4.getPreTransitTimeDelta());
      assertEquals(TraverseMode.WALK, state4.getNonTransitMode());
      assertFalse(state4.isBikeRenting());
      assertEquals(0, state4.getAbsTimeDeltaSeconds());
      assertEquals(0, state4.getPreTransitTime());
      assertEquals(0.0, state4.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281L, state4.getTimeSeconds());
      assertFalse(state4.getReverseOptimizing());
      assertFalse(state4.isOnboard());
      assertEquals(0.0, state4.getWalkDistance(), 0.01);
      assertEquals(0.0, state4.getWalkDistanceDelta(), 0.01);
      assertNull(state4.getBackMode());
      assertEquals(0L, state4.getElapsedTimeSeconds());
      assertEquals(0, state4.getNumBoardings());
      assertNull(state4.getZone());
      assertEquals(0.0, state4.getWalkSinceLastTransit(), 0.01);
      assertFalse(state4.isEverBoarded());
      assertFalse(state4.isBackWalkingBike());
      assertEquals(1392409281000L, state4.getTimeInMillis());
      assertEquals(0, state4.getLastNextArrivalDelta());
      assertEquals(0.0, state4.getWeight(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(state4.equals((Object)state0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(0.0, state4.weight, 0.01);
      assertEquals(0.0, state4.walkDistance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertTrue(boolean2);
      
      String string1 = multiShortestPathTree0.toString();
      assertNotSame(string1, string0);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(string1.equals((Object)string0));
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals("MultiSPT(1 vertices)", string1);
      assertNotNull(string1);
      
      Set<Vertex> set2 = multiShortestPathTree0.getVertices();
      assertSame(set2, set1);
      assertSame(set2, set0);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, set2.size());
      assertFalse(set2.isEmpty());
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertNotNull(set2);
      
      String string2 = multiShortestPathTree0.toString();
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals("MultiSPT(1 vertices)", string2);
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        MultiShortestPathTree.dominates(state2, state0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      RoutingRequest routingRequest0 = new RoutingRequest();
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.batch);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertNotNull(routingRequest0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.batch);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertNotNull(multiShortestPathTree0);
      
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.batch);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertNotNull(set0);
      
      Set<Vertex> set1 = multiShortestPathTree0.getVertices();
      assertSame(set1, set0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.batch);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertNotNull(set1);
      
      Vertex vertex0 = null;
      List<GraphPath> list0 = multiShortestPathTree0.getPaths(vertex0, routingRequest0.walkingBike);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.batch);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertNotNull(list0);
      
      State state0 = new State(vertex0, routingRequest0.worstTime, multiShortestPathTree0.options);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isEverBoarded());
      assertNull(state0.getBackMode());
      assertEquals(9223372036854775807L, state0.getStartTimeSeconds());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals((-1L), state0.getTimeSeconds());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertEquals((-1000L), state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals((-9223372036854775808L), state0.getElapsedTimeSeconds());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertTrue(state0.isFinal());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals((-9.223372036854776E18), state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.batch);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertNotNull(state0);
      
      String string0 = multiShortestPathTree0.toString();
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.batch);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals("MultiSPT(0 vertices)", string0);
      assertNotNull(string0);
      
      State state1 = multiShortestPathTree0.getState(vertex0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.batch);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertNull(state1);
      
      double double0 = 1409.638;
      state0.weight = double0;
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isEverBoarded());
      assertNull(state0.getBackMode());
      assertEquals(9223372036854775807L, state0.getStartTimeSeconds());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals((-1L), state0.getTimeSeconds());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertEquals((-1000L), state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals((-9223372036854775808L), state0.getElapsedTimeSeconds());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertTrue(state0.isFinal());
      assertEquals(1409.638, state0.getWeight(), 0.01);
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals((-9.223372036854776E18), state0.getOptimizedElapsedTimeSeconds(), 0.01);
      
      State state2 = multiShortestPathTree0.getState(vertex0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.batch);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertNull(state2);
      
      State state3 = multiShortestPathTree0.getState(vertex0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.batch);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertNull(state3);
      
      boolean boolean0 = multiShortestPathTree0.add(state0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isEverBoarded());
      assertNull(state0.getBackMode());
      assertEquals(9223372036854775807L, state0.getStartTimeSeconds());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals((-1L), state0.getTimeSeconds());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertEquals((-1000L), state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals((-9223372036854775808L), state0.getElapsedTimeSeconds());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertTrue(state0.isFinal());
      assertEquals(1409.638, state0.getWeight(), 0.01);
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals((-9.223372036854776E18), state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.batch);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(1409.638, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertTrue(boolean0);
      
      State state4 = new State(vertex0, routingRequest0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281000L, state4.getTimeInMillis());
      assertFalse(state4.isBackWalkingBike());
      assertEquals(0, state4.getTimeDeltaSeconds());
      assertNull(state4.getZone());
      assertEquals(0.0, state4.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state4.getLastNextArrivalDelta());
      assertEquals(0, state4.getPreTransitTimeDelta());
      assertFalse(state4.isBikeRenting());
      assertFalse(state4.isCarParked());
      assertEquals(0L, state4.getElapsedTimeSeconds());
      assertEquals(0, state4.getAbsTimeDeltaSeconds());
      assertEquals(0, state4.getPreTransitTime());
      assertEquals(0L, state4.getLastAlightedTimeSeconds());
      assertEquals(TraverseMode.WALK, state4.getNonTransitMode());
      assertEquals(0.0, state4.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281L, state4.getTimeSeconds());
      assertEquals(0.0, state4.getWalkDistanceDelta(), 0.01);
      assertNull(state4.getBackMode());
      assertFalse(state4.isEverBoarded());
      assertEquals(0.0, state4.getWeight(), 0.01);
      assertFalse(state4.getReverseOptimizing());
      assertEquals(0, state4.getNumBoardings());
      assertTrue(state4.isFinal());
      assertEquals(1392409281L, state4.getStartTimeSeconds());
      assertEquals(0.0, state4.getWalkDistance(), 0.01);
      assertEquals(0.0, state4.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state4.isOnboard());
      assertFalse(state4.equals((Object)state0));
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.batch);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0.0, state4.weight, 0.01);
      assertEquals(0.0, state4.walkDistance, 0.01);
      assertNotNull(state4);
      
      boolean boolean1 = multiShortestPathTree0.add(state4);
      assertNotSame(state4, state0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1392409281000L, state4.getTimeInMillis());
      assertFalse(state4.isBackWalkingBike());
      assertEquals(0, state4.getTimeDeltaSeconds());
      assertNull(state4.getZone());
      assertEquals(0.0, state4.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state4.getLastNextArrivalDelta());
      assertEquals(0, state4.getPreTransitTimeDelta());
      assertFalse(state4.isBikeRenting());
      assertFalse(state4.isCarParked());
      assertEquals(0L, state4.getElapsedTimeSeconds());
      assertEquals(0, state4.getAbsTimeDeltaSeconds());
      assertEquals(0, state4.getPreTransitTime());
      assertEquals(0L, state4.getLastAlightedTimeSeconds());
      assertEquals(TraverseMode.WALK, state4.getNonTransitMode());
      assertEquals(0.0, state4.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281L, state4.getTimeSeconds());
      assertEquals(0.0, state4.getWalkDistanceDelta(), 0.01);
      assertNull(state4.getBackMode());
      assertFalse(state4.isEverBoarded());
      assertEquals(0.0, state4.getWeight(), 0.01);
      assertFalse(state4.getReverseOptimizing());
      assertEquals(0, state4.getNumBoardings());
      assertTrue(state4.isFinal());
      assertEquals(1392409281L, state4.getStartTimeSeconds());
      assertEquals(0.0, state4.getWalkDistance(), 0.01);
      assertEquals(0.0, state4.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state4.isOnboard());
      assertFalse(state4.equals((Object)state0));
      assertTrue(boolean1 == boolean0);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.batch);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.0, state4.weight, 0.01);
      assertEquals(0.0, state4.walkDistance, 0.01);
      assertTrue(boolean1);
      
      String string1 = multiShortestPathTree0.toString();
      assertNotSame(string1, string0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(string1.equals((Object)string0));
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.batch);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals("MultiSPT(1 vertices)", string1);
      assertNotNull(string1);
      
      Set<Vertex> set2 = multiShortestPathTree0.getVertices();
      assertSame(set2, set0);
      assertSame(set2, set1);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(set2.isEmpty());
      assertEquals(1, set2.size());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.batch);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertNotNull(set2);
      
      String string2 = multiShortestPathTree0.toString();
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.batch);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals("MultiSPT(1 vertices)", string2);
      assertNotNull(string2);
      
      String string3 = multiShortestPathTree0.toString();
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.batch);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals("MultiSPT(1 vertices)", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      long long0 = (-9223372036854775808L);
      System.setCurrentTimeMillis(long0);
      long long1 = (-3402L);
      System.setCurrentTimeMillis(long1);
      assertFalse(long1 == long0);
      
      String string0 = "B/\"/V,uIt7b/!48u";
      OnboardDepartVertex onboardDepartVertex0 = new OnboardDepartVertex(string0, long0, long0);
      assertEquals(1, onboardDepartVertex0.getMaxIndex());
      assertEquals((-9.223372036854776E18), onboardDepartVertex0.getX(), 0.01);
      assertEquals((-9.223372036854776E18), onboardDepartVertex0.getY(), 0.01);
      assertEquals((-9.223372036854776E18), onboardDepartVertex0.getLat(), 0.01);
      assertEquals((-9.223372036854776E18), onboardDepartVertex0.getLon(), 0.01);
      assertEquals("B/\"/V,uIt7b/!48u", onboardDepartVertex0.getLabel());
      assertEquals(0, onboardDepartVertex0.getDegreeIn());
      assertEquals(0, onboardDepartVertex0.getDegreeOut());
      assertEquals(0, onboardDepartVertex0.getIndex());
      assertEquals("B/\"/V,uIt7b/!48u", onboardDepartVertex0.getName());
      assertFalse(long0 == long1);
      assertNotNull(onboardDepartVertex0);
      
      StreetTraversalPermission streetTraversalPermission0 = StreetTraversalPermission.PEDESTRIAN_AND_CAR;
      ElevatorHopEdge elevatorHopEdge0 = new ElevatorHopEdge(onboardDepartVertex0, onboardDepartVertex0, streetTraversalPermission0);
      assertEquals(1, onboardDepartVertex0.getMaxIndex());
      assertEquals((-9.223372036854776E18), onboardDepartVertex0.getX(), 0.01);
      assertEquals((-9.223372036854776E18), onboardDepartVertex0.getY(), 0.01);
      assertEquals((-9.223372036854776E18), onboardDepartVertex0.getLat(), 0.01);
      assertEquals((-9.223372036854776E18), onboardDepartVertex0.getLon(), 0.01);
      assertEquals("B/\"/V,uIt7b/!48u", onboardDepartVertex0.getLabel());
      assertEquals(1, onboardDepartVertex0.getDegreeOut());
      assertEquals(0, onboardDepartVertex0.getIndex());
      assertEquals("B/\"/V,uIt7b/!48u", onboardDepartVertex0.getName());
      assertEquals(1, onboardDepartVertex0.getDegreeIn());
      assertEquals(3, elevatorHopEdge0.getId());
      assertEquals(0.0, elevatorHopEdge0.getDistance(), 0.01);
      assertNull(elevatorHopEdge0.getName());
      assertFalse(elevatorHopEdge0.isPartial());
      assertTrue(elevatorHopEdge0.vertexTypesValid());
      assertFalse(long0 == long1);
      assertTrue(elevatorHopEdge0.wheelchairAccessible);
      assertNotNull(elevatorHopEdge0);
      assertEquals(2, elevatorHopEdge0.getId());
      
      TraverseMode traverseMode0 = TraverseMode.TRAM;
      OptimizeType optimizeType0 = OptimizeType.SAFE;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0, optimizeType0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals((-3L), routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals((-3L), routingRequest0.dateTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertNotNull(routingRequest0);
      
      State state0 = new State(onboardDepartVertex0, routingRequest0);
      assertEquals(1, onboardDepartVertex0.getMaxIndex());
      assertEquals((-9.223372036854776E18), onboardDepartVertex0.getX(), 0.01);
      assertEquals((-9.223372036854776E18), onboardDepartVertex0.getY(), 0.01);
      assertEquals((-9.223372036854776E18), onboardDepartVertex0.getLat(), 0.01);
      assertEquals((-9.223372036854776E18), onboardDepartVertex0.getLon(), 0.01);
      assertEquals("B/\"/V,uIt7b/!48u", onboardDepartVertex0.getLabel());
      assertEquals(1, onboardDepartVertex0.getDegreeOut());
      assertEquals(0, onboardDepartVertex0.getIndex());
      assertEquals("B/\"/V,uIt7b/!48u", onboardDepartVertex0.getName());
      assertEquals(1, onboardDepartVertex0.getDegreeIn());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals((-3L), routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isCarParked());
      assertFalse(state0.isBikeRenting());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertTrue(state0.isFinal());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getNumBoardings());
      assertNull(state0.getNonTransitMode());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertNull(state0.getBackMode());
      assertFalse(state0.isEverBoarded());
      assertEquals((-3L), state0.getStartTimeSeconds());
      assertEquals((-3L), state0.getTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals((-3000L), state0.getTimeInMillis());
      assertFalse(long0 == long1);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals((-3L), routingRequest0.dateTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertNotNull(state0);
      
      State state1 = elevatorHopEdge0.traverse(state0);
      assertNotSame(state0, state1);
      assertNotSame(state1, state0);
      assertEquals(1, onboardDepartVertex0.getMaxIndex());
      assertEquals((-9.223372036854776E18), onboardDepartVertex0.getX(), 0.01);
      assertEquals((-9.223372036854776E18), onboardDepartVertex0.getY(), 0.01);
      assertEquals((-9.223372036854776E18), onboardDepartVertex0.getLat(), 0.01);
      assertEquals((-9.223372036854776E18), onboardDepartVertex0.getLon(), 0.01);
      assertEquals("B/\"/V,uIt7b/!48u", onboardDepartVertex0.getLabel());
      assertEquals(1, onboardDepartVertex0.getDegreeOut());
      assertEquals(0, onboardDepartVertex0.getIndex());
      assertEquals("B/\"/V,uIt7b/!48u", onboardDepartVertex0.getName());
      assertEquals(1, onboardDepartVertex0.getDegreeIn());
      assertEquals(3, elevatorHopEdge0.getId());
      assertEquals(0.0, elevatorHopEdge0.getDistance(), 0.01);
      assertNull(elevatorHopEdge0.getName());
      assertFalse(elevatorHopEdge0.isPartial());
      assertTrue(elevatorHopEdge0.vertexTypesValid());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals((-3L), routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isCarParked());
      assertFalse(state0.isBikeRenting());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertTrue(state0.isFinal());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getNumBoardings());
      assertNull(state0.getNonTransitMode());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertNull(state0.getBackMode());
      assertFalse(state0.isEverBoarded());
      assertEquals((-3L), state0.getStartTimeSeconds());
      assertEquals((-3L), state0.getTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals((-3000L), state0.getTimeInMillis());
      assertEquals(20, state1.getAbsTimeDeltaSeconds());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertEquals(20.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertFalse(state1.isEverBoarded());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertEquals(TraverseMode.WALK, state1.getBackMode());
      assertEquals(20L, state1.getElapsedTimeSeconds());
      assertFalse(state1.isCarParked());
      assertEquals(17000L, state1.getTimeInMillis());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertFalse(state1.isOnboard());
      assertEquals(20.0, state1.getWeight(), 0.01);
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertNull(state1.getZone());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertEquals(17L, state1.getTimeSeconds());
      assertEquals((-3L), state1.getStartTimeSeconds());
      assertEquals(0, state1.getPreTransitTime());
      assertNull(state1.getNonTransitMode());
      assertEquals(0, state1.getNumBoardings());
      assertFalse(state1.getReverseOptimizing());
      assertTrue(state1.isFinal());
      assertEquals(20, state1.getTimeDeltaSeconds());
      assertFalse(state1.isBikeRenting());
      assertEquals(20.0, state1.getWeightDelta(), 0.01);
      assertFalse(long0 == long1);
      assertFalse(state1.equals((Object)state0));
      assertTrue(elevatorHopEdge0.wheelchairAccessible);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals((-3L), routingRequest0.dateTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertEquals(20.0, state1.weight, 0.01);
      assertNotNull(state1);
      assertEquals(2, elevatorHopEdge0.getId());
      
      boolean boolean0 = MultiShortestPathTree.dominates(state1, state1);
      assertNotSame(state0, state1);
      assertNotSame(state1, state0);
      assertEquals(1, onboardDepartVertex0.getMaxIndex());
      assertEquals((-9.223372036854776E18), onboardDepartVertex0.getX(), 0.01);
      assertEquals((-9.223372036854776E18), onboardDepartVertex0.getY(), 0.01);
      assertEquals((-9.223372036854776E18), onboardDepartVertex0.getLat(), 0.01);
      assertEquals((-9.223372036854776E18), onboardDepartVertex0.getLon(), 0.01);
      assertEquals("B/\"/V,uIt7b/!48u", onboardDepartVertex0.getLabel());
      assertEquals(1, onboardDepartVertex0.getDegreeOut());
      assertEquals(0, onboardDepartVertex0.getIndex());
      assertEquals("B/\"/V,uIt7b/!48u", onboardDepartVertex0.getName());
      assertEquals(1, onboardDepartVertex0.getDegreeIn());
      assertEquals(3, elevatorHopEdge0.getId());
      assertEquals(0.0, elevatorHopEdge0.getDistance(), 0.01);
      assertNull(elevatorHopEdge0.getName());
      assertFalse(elevatorHopEdge0.isPartial());
      assertTrue(elevatorHopEdge0.vertexTypesValid());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals((-3L), routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isCarParked());
      assertFalse(state0.isBikeRenting());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertTrue(state0.isFinal());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getNumBoardings());
      assertNull(state0.getNonTransitMode());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertNull(state0.getBackMode());
      assertFalse(state0.isEverBoarded());
      assertEquals((-3L), state0.getStartTimeSeconds());
      assertEquals((-3L), state0.getTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals((-3000L), state0.getTimeInMillis());
      assertEquals(20, state1.getAbsTimeDeltaSeconds());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertEquals(20.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertFalse(state1.isEverBoarded());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertEquals(TraverseMode.WALK, state1.getBackMode());
      assertEquals(20L, state1.getElapsedTimeSeconds());
      assertFalse(state1.isCarParked());
      assertEquals(17000L, state1.getTimeInMillis());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertFalse(state1.isOnboard());
      assertEquals(20.0, state1.getWeight(), 0.01);
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertNull(state1.getZone());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertEquals(17L, state1.getTimeSeconds());
      assertEquals((-3L), state1.getStartTimeSeconds());
      assertEquals(0, state1.getPreTransitTime());
      assertNull(state1.getNonTransitMode());
      assertEquals(0, state1.getNumBoardings());
      assertFalse(state1.getReverseOptimizing());
      assertTrue(state1.isFinal());
      assertEquals(20, state1.getTimeDeltaSeconds());
      assertFalse(state1.isBikeRenting());
      assertEquals(20.0, state1.getWeightDelta(), 0.01);
      assertFalse(long0 == long1);
      assertFalse(state0.equals((Object)state1));
      assertFalse(state1.equals((Object)state0));
      assertTrue(elevatorHopEdge0.wheelchairAccessible);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals((-3L), routingRequest0.dateTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertEquals(20.0, state1.weight, 0.01);
      assertTrue(boolean0);
      assertEquals(2, elevatorHopEdge0.getId());
      
      boolean boolean1 = MultiShortestPathTree.dominates(state0, state1);
      assertNotSame(state0, state1);
      assertNotSame(state1, state0);
      assertEquals(1, onboardDepartVertex0.getMaxIndex());
      assertEquals((-9.223372036854776E18), onboardDepartVertex0.getX(), 0.01);
      assertEquals((-9.223372036854776E18), onboardDepartVertex0.getY(), 0.01);
      assertEquals((-9.223372036854776E18), onboardDepartVertex0.getLat(), 0.01);
      assertEquals((-9.223372036854776E18), onboardDepartVertex0.getLon(), 0.01);
      assertEquals("B/\"/V,uIt7b/!48u", onboardDepartVertex0.getLabel());
      assertEquals(1, onboardDepartVertex0.getDegreeOut());
      assertEquals(0, onboardDepartVertex0.getIndex());
      assertEquals("B/\"/V,uIt7b/!48u", onboardDepartVertex0.getName());
      assertEquals(1, onboardDepartVertex0.getDegreeIn());
      assertEquals(3, elevatorHopEdge0.getId());
      assertEquals(0.0, elevatorHopEdge0.getDistance(), 0.01);
      assertNull(elevatorHopEdge0.getName());
      assertFalse(elevatorHopEdge0.isPartial());
      assertTrue(elevatorHopEdge0.vertexTypesValid());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals((-3L), routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isCarParked());
      assertFalse(state0.isBikeRenting());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertTrue(state0.isFinal());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getNumBoardings());
      assertNull(state0.getNonTransitMode());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertNull(state0.getBackMode());
      assertFalse(state0.isEverBoarded());
      assertEquals((-3L), state0.getStartTimeSeconds());
      assertEquals((-3L), state0.getTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals((-3000L), state0.getTimeInMillis());
      assertEquals(20, state1.getAbsTimeDeltaSeconds());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertEquals(20.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertFalse(state1.isEverBoarded());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertEquals(TraverseMode.WALK, state1.getBackMode());
      assertEquals(20L, state1.getElapsedTimeSeconds());
      assertFalse(state1.isCarParked());
      assertEquals(17000L, state1.getTimeInMillis());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertFalse(state1.isOnboard());
      assertEquals(20.0, state1.getWeight(), 0.01);
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertNull(state1.getZone());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertEquals(17L, state1.getTimeSeconds());
      assertEquals((-3L), state1.getStartTimeSeconds());
      assertEquals(0, state1.getPreTransitTime());
      assertNull(state1.getNonTransitMode());
      assertEquals(0, state1.getNumBoardings());
      assertFalse(state1.getReverseOptimizing());
      assertTrue(state1.isFinal());
      assertEquals(20, state1.getTimeDeltaSeconds());
      assertFalse(state1.isBikeRenting());
      assertEquals(20.0, state1.getWeightDelta(), 0.01);
      assertFalse(long0 == long1);
      assertFalse(state0.equals((Object)state1));
      assertFalse(state1.equals((Object)state0));
      assertTrue(boolean1 == boolean0);
      assertTrue(elevatorHopEdge0.wheelchairAccessible);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals((-3L), routingRequest0.dateTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertEquals(20.0, state1.weight, 0.01);
      assertTrue(boolean1);
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      long long0 = 0L;
      System.setCurrentTimeMillis(long0);
      System.setCurrentTimeMillis(long0);
      String string0 = "B/\"/V,uIt7b/!48u";
      OnboardDepartVertex onboardDepartVertex0 = new OnboardDepartVertex(string0, long0, long0);
      assertEquals(0, onboardDepartVertex0.getIndex());
      assertEquals(0, onboardDepartVertex0.getDegreeIn());
      assertEquals(0, onboardDepartVertex0.getDegreeOut());
      assertEquals(0.0, onboardDepartVertex0.getY(), 0.01);
      assertEquals(0.0, onboardDepartVertex0.getX(), 0.01);
      assertEquals("B/\"/V,uIt7b/!48u", onboardDepartVertex0.getName());
      assertEquals(0.0, onboardDepartVertex0.getLon(), 0.01);
      assertEquals("B/\"/V,uIt7b/!48u", onboardDepartVertex0.getLabel());
      assertEquals(0.0, onboardDepartVertex0.getLat(), 0.01);
      assertEquals(1, onboardDepartVertex0.getMaxIndex());
      assertNotNull(onboardDepartVertex0);
      
      StreetTraversalPermission streetTraversalPermission0 = StreetTraversalPermission.BICYCLE_AND_DRIVING;
      ElevatorHopEdge elevatorHopEdge0 = new ElevatorHopEdge(onboardDepartVertex0, onboardDepartVertex0, streetTraversalPermission0);
      assertEquals(1, onboardDepartVertex0.getDegreeOut());
      assertEquals(0, onboardDepartVertex0.getIndex());
      assertEquals(0.0, onboardDepartVertex0.getY(), 0.01);
      assertEquals(0.0, onboardDepartVertex0.getX(), 0.01);
      assertEquals("B/\"/V,uIt7b/!48u", onboardDepartVertex0.getName());
      assertEquals(1, onboardDepartVertex0.getDegreeIn());
      assertEquals(0.0, onboardDepartVertex0.getLon(), 0.01);
      assertEquals("B/\"/V,uIt7b/!48u", onboardDepartVertex0.getLabel());
      assertEquals(0.0, onboardDepartVertex0.getLat(), 0.01);
      assertEquals(1, onboardDepartVertex0.getMaxIndex());
      assertEquals(0.0, elevatorHopEdge0.getDistance(), 0.01);
      assertEquals(4, elevatorHopEdge0.getId());
      assertTrue(elevatorHopEdge0.vertexTypesValid());
      assertFalse(elevatorHopEdge0.isPartial());
      assertNull(elevatorHopEdge0.getName());
      assertTrue(elevatorHopEdge0.wheelchairAccessible);
      assertNotNull(elevatorHopEdge0);
      
      TraverseMode traverseMode0 = TraverseMode.TRAM;
      OptimizeType optimizeType0 = OptimizeType.SAFE;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0, optimizeType0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(0L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferPenalty);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertNotNull(routingRequest0);
      
      State state0 = new State(onboardDepartVertex0, routingRequest0);
      assertEquals(1, onboardDepartVertex0.getDegreeOut());
      assertEquals(0, onboardDepartVertex0.getIndex());
      assertEquals(0.0, onboardDepartVertex0.getY(), 0.01);
      assertEquals(0.0, onboardDepartVertex0.getX(), 0.01);
      assertEquals("B/\"/V,uIt7b/!48u", onboardDepartVertex0.getName());
      assertEquals(1, onboardDepartVertex0.getDegreeIn());
      assertEquals(0.0, onboardDepartVertex0.getLon(), 0.01);
      assertEquals("B/\"/V,uIt7b/!48u", onboardDepartVertex0.getLabel());
      assertEquals(0.0, onboardDepartVertex0.getLat(), 0.01);
      assertEquals(1, onboardDepartVertex0.getMaxIndex());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(0L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertNull(state0.getNonTransitMode());
      assertEquals(0L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getBackMode());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.isEverBoarded());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0L, state0.getTimeSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state0.getTimeInMillis());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isBikeRenting());
      assertTrue(state0.isFinal());
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferPenalty);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertNotNull(state0);
      
      State state1 = elevatorHopEdge0.traverse(state0);
      assertNotSame(state0, state1);
      assertNotSame(state1, state0);
      assertEquals(1, onboardDepartVertex0.getDegreeOut());
      assertEquals(0, onboardDepartVertex0.getIndex());
      assertEquals(0.0, onboardDepartVertex0.getY(), 0.01);
      assertEquals(0.0, onboardDepartVertex0.getX(), 0.01);
      assertEquals("B/\"/V,uIt7b/!48u", onboardDepartVertex0.getName());
      assertEquals(1, onboardDepartVertex0.getDegreeIn());
      assertEquals(0.0, onboardDepartVertex0.getLon(), 0.01);
      assertEquals("B/\"/V,uIt7b/!48u", onboardDepartVertex0.getLabel());
      assertEquals(0.0, onboardDepartVertex0.getLat(), 0.01);
      assertEquals(1, onboardDepartVertex0.getMaxIndex());
      assertEquals(0.0, elevatorHopEdge0.getDistance(), 0.01);
      assertEquals(4, elevatorHopEdge0.getId());
      assertTrue(elevatorHopEdge0.vertexTypesValid());
      assertFalse(elevatorHopEdge0.isPartial());
      assertNull(elevatorHopEdge0.getName());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(0L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertNull(state0.getNonTransitMode());
      assertEquals(0L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getBackMode());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.isEverBoarded());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0L, state0.getTimeSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state0.getTimeInMillis());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isBikeRenting());
      assertTrue(state0.isFinal());
      assertFalse(state1.isBikeRenting());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertEquals(20L, state1.getElapsedTimeSeconds());
      assertEquals(20L, state1.getTimeSeconds());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertTrue(state1.isFinal());
      assertEquals(20.0, state1.getWeightDelta(), 0.01);
      assertEquals(20.0, state1.getWeight(), 0.01);
      assertEquals(20, state1.getTimeDeltaSeconds());
      assertEquals(0, state1.getPreTransitTime());
      assertEquals(0, state1.getNumBoardings());
      assertNull(state1.getNonTransitMode());
      assertEquals(20000L, state1.getTimeInMillis());
      assertEquals(0L, state1.getStartTimeSeconds());
      assertFalse(state1.getReverseOptimizing());
      assertFalse(state1.isOnboard());
      assertEquals(20.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertEquals(20, state1.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertNull(state1.getZone());
      assertFalse(state1.isCarParked());
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(TraverseMode.WALK, state1.getBackMode());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertFalse(state1.isEverBoarded());
      assertFalse(state1.equals((Object)state0));
      assertTrue(elevatorHopEdge0.wheelchairAccessible);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferPenalty);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertEquals(20.0, state1.weight, 0.01);
      assertNotNull(state1);
      
      double double0 = 3189.54651965633;
      state0.weight = double0;
      assertEquals(1, onboardDepartVertex0.getDegreeOut());
      assertEquals(0, onboardDepartVertex0.getIndex());
      assertEquals(0.0, onboardDepartVertex0.getY(), 0.01);
      assertEquals(0.0, onboardDepartVertex0.getX(), 0.01);
      assertEquals("B/\"/V,uIt7b/!48u", onboardDepartVertex0.getName());
      assertEquals(1, onboardDepartVertex0.getDegreeIn());
      assertEquals(0.0, onboardDepartVertex0.getLon(), 0.01);
      assertEquals("B/\"/V,uIt7b/!48u", onboardDepartVertex0.getLabel());
      assertEquals(0.0, onboardDepartVertex0.getLat(), 0.01);
      assertEquals(1, onboardDepartVertex0.getMaxIndex());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(0L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, state0.getNumBoardings());
      assertNull(state0.getNonTransitMode());
      assertEquals(0L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getBackMode());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.isEverBoarded());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0L, state0.getTimeSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state0.getTimeInMillis());
      assertEquals(3189.54651965633, state0.getWeight(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isBikeRenting());
      assertTrue(state0.isFinal());
      
      String string1 = state1.toString();
      assertNotSame(string0, string1);
      assertNotSame(state0, state1);
      assertNotSame(state1, state0);
      assertNotSame(string1, string0);
      assertEquals(1, onboardDepartVertex0.getDegreeOut());
      assertEquals(0, onboardDepartVertex0.getIndex());
      assertEquals(0.0, onboardDepartVertex0.getY(), 0.01);
      assertEquals(0.0, onboardDepartVertex0.getX(), 0.01);
      assertEquals("B/\"/V,uIt7b/!48u", onboardDepartVertex0.getName());
      assertEquals(1, onboardDepartVertex0.getDegreeIn());
      assertEquals(0.0, onboardDepartVertex0.getLon(), 0.01);
      assertEquals("B/\"/V,uIt7b/!48u", onboardDepartVertex0.getLabel());
      assertEquals(0.0, onboardDepartVertex0.getLat(), 0.01);
      assertEquals(1, onboardDepartVertex0.getMaxIndex());
      assertEquals(0.0, elevatorHopEdge0.getDistance(), 0.01);
      assertEquals(4, elevatorHopEdge0.getId());
      assertTrue(elevatorHopEdge0.vertexTypesValid());
      assertFalse(elevatorHopEdge0.isPartial());
      assertNull(elevatorHopEdge0.getName());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(0L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, state0.getNumBoardings());
      assertNull(state0.getNonTransitMode());
      assertEquals(0L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getBackMode());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.isEverBoarded());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0L, state0.getTimeSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state0.getTimeInMillis());
      assertEquals(3189.54651965633, state0.getWeight(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isBikeRenting());
      assertTrue(state0.isFinal());
      assertFalse(state1.isBikeRenting());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertEquals(20L, state1.getElapsedTimeSeconds());
      assertEquals(20L, state1.getTimeSeconds());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertTrue(state1.isFinal());
      assertEquals(20.0, state1.getWeight(), 0.01);
      assertEquals(20, state1.getTimeDeltaSeconds());
      assertEquals(0, state1.getPreTransitTime());
      assertEquals(0, state1.getNumBoardings());
      assertNull(state1.getNonTransitMode());
      assertEquals(20000L, state1.getTimeInMillis());
      assertEquals(0L, state1.getStartTimeSeconds());
      assertFalse(state1.getReverseOptimizing());
      assertFalse(state1.isOnboard());
      assertEquals(20.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertEquals(20, state1.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertNull(state1.getZone());
      assertEquals((-3169.54651965633), state1.getWeightDelta(), 0.01);
      assertFalse(state1.isCarParked());
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(TraverseMode.WALK, state1.getBackMode());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertFalse(state1.isEverBoarded());
      assertFalse(state0.equals((Object)state1));
      assertFalse(state1.equals((Object)state0));
      assertFalse(string1.equals((Object)string0));
      assertTrue(elevatorHopEdge0.wheelchairAccessible);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferPenalty);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(3189.54651965633, state0.weight, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertEquals(20.0, state1.weight, 0.01);
      assertEquals("<State Thu Jan 01 00:00:20 GMT 1970 [20.0] <B/\"/V,uIt7b/!48u lat,lng=0.0,0.0>>", string1);
      assertNotNull(string1);
      
      boolean boolean0 = MultiShortestPathTree.dominates(state1, state1);
      assertNotSame(string0, string1);
      assertNotSame(state0, state1);
      assertNotSame(state1, state0);
      assertEquals(1, onboardDepartVertex0.getDegreeOut());
      assertEquals(0, onboardDepartVertex0.getIndex());
      assertEquals(0.0, onboardDepartVertex0.getY(), 0.01);
      assertEquals(0.0, onboardDepartVertex0.getX(), 0.01);
      assertEquals("B/\"/V,uIt7b/!48u", onboardDepartVertex0.getName());
      assertEquals(1, onboardDepartVertex0.getDegreeIn());
      assertEquals(0.0, onboardDepartVertex0.getLon(), 0.01);
      assertEquals("B/\"/V,uIt7b/!48u", onboardDepartVertex0.getLabel());
      assertEquals(0.0, onboardDepartVertex0.getLat(), 0.01);
      assertEquals(1, onboardDepartVertex0.getMaxIndex());
      assertEquals(0.0, elevatorHopEdge0.getDistance(), 0.01);
      assertEquals(4, elevatorHopEdge0.getId());
      assertTrue(elevatorHopEdge0.vertexTypesValid());
      assertFalse(elevatorHopEdge0.isPartial());
      assertNull(elevatorHopEdge0.getName());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(0L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, state0.getNumBoardings());
      assertNull(state0.getNonTransitMode());
      assertEquals(0L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getBackMode());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.isEverBoarded());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0L, state0.getTimeSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state0.getTimeInMillis());
      assertEquals(3189.54651965633, state0.getWeight(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isBikeRenting());
      assertTrue(state0.isFinal());
      assertFalse(state1.isBikeRenting());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertEquals(20L, state1.getElapsedTimeSeconds());
      assertEquals(20L, state1.getTimeSeconds());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertTrue(state1.isFinal());
      assertEquals(20.0, state1.getWeight(), 0.01);
      assertEquals(20, state1.getTimeDeltaSeconds());
      assertEquals(0, state1.getPreTransitTime());
      assertEquals(0, state1.getNumBoardings());
      assertNull(state1.getNonTransitMode());
      assertEquals(20000L, state1.getTimeInMillis());
      assertEquals(0L, state1.getStartTimeSeconds());
      assertFalse(state1.getReverseOptimizing());
      assertFalse(state1.isOnboard());
      assertEquals(20.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertEquals(20, state1.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertNull(state1.getZone());
      assertEquals((-3169.54651965633), state1.getWeightDelta(), 0.01);
      assertFalse(state1.isCarParked());
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(TraverseMode.WALK, state1.getBackMode());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertFalse(state1.isEverBoarded());
      assertFalse(string0.equals((Object)string1));
      assertFalse(state0.equals((Object)state1));
      assertFalse(state1.equals((Object)state0));
      assertTrue(elevatorHopEdge0.wheelchairAccessible);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferPenalty);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(3189.54651965633, state0.weight, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertEquals(20.0, state1.weight, 0.01);
      assertTrue(boolean0);
      
      boolean boolean1 = MultiShortestPathTree.dominates(state0, state1);
      assertNotSame(string0, string1);
      assertNotSame(state0, state1);
      assertNotSame(state1, state0);
      assertEquals(1, onboardDepartVertex0.getDegreeOut());
      assertEquals(0, onboardDepartVertex0.getIndex());
      assertEquals(0.0, onboardDepartVertex0.getY(), 0.01);
      assertEquals(0.0, onboardDepartVertex0.getX(), 0.01);
      assertEquals("B/\"/V,uIt7b/!48u", onboardDepartVertex0.getName());
      assertEquals(1, onboardDepartVertex0.getDegreeIn());
      assertEquals(0.0, onboardDepartVertex0.getLon(), 0.01);
      assertEquals("B/\"/V,uIt7b/!48u", onboardDepartVertex0.getLabel());
      assertEquals(0.0, onboardDepartVertex0.getLat(), 0.01);
      assertEquals(1, onboardDepartVertex0.getMaxIndex());
      assertEquals(0.0, elevatorHopEdge0.getDistance(), 0.01);
      assertEquals(4, elevatorHopEdge0.getId());
      assertTrue(elevatorHopEdge0.vertexTypesValid());
      assertFalse(elevatorHopEdge0.isPartial());
      assertNull(elevatorHopEdge0.getName());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(0L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, state0.getNumBoardings());
      assertNull(state0.getNonTransitMode());
      assertEquals(0L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getBackMode());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.isEverBoarded());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0L, state0.getTimeSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state0.getTimeInMillis());
      assertEquals(3189.54651965633, state0.getWeight(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isBikeRenting());
      assertTrue(state0.isFinal());
      assertFalse(state1.isBikeRenting());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertEquals(20L, state1.getElapsedTimeSeconds());
      assertEquals(20L, state1.getTimeSeconds());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertTrue(state1.isFinal());
      assertEquals(20.0, state1.getWeight(), 0.01);
      assertEquals(20, state1.getTimeDeltaSeconds());
      assertEquals(0, state1.getPreTransitTime());
      assertEquals(0, state1.getNumBoardings());
      assertNull(state1.getNonTransitMode());
      assertEquals(20000L, state1.getTimeInMillis());
      assertEquals(0L, state1.getStartTimeSeconds());
      assertFalse(state1.getReverseOptimizing());
      assertFalse(state1.isOnboard());
      assertEquals(20.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertEquals(20, state1.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertNull(state1.getZone());
      assertEquals((-3169.54651965633), state1.getWeightDelta(), 0.01);
      assertFalse(state1.isCarParked());
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(TraverseMode.WALK, state1.getBackMode());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertFalse(state1.isEverBoarded());
      assertFalse(boolean1 == boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(state0.equals((Object)state1));
      assertFalse(state1.equals((Object)state0));
      assertTrue(elevatorHopEdge0.wheelchairAccessible);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferPenalty);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(3189.54651965633, state0.weight, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertEquals(20.0, state1.weight, 0.01);
      assertFalse(boolean1);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(0L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferPenalty);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertNotNull(multiShortestPathTree0);
      
      String string2 = multiShortestPathTree0.toString();
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(0L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferPenalty);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals("MultiSPT(0 vertices)", string2);
      assertNotNull(string2);
      
      boolean boolean2 = MultiShortestPathTree.dominates(state0, state1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(state0, state1);
      assertNotSame(state1, state0);
      assertEquals(1, onboardDepartVertex0.getDegreeOut());
      assertEquals(0, onboardDepartVertex0.getIndex());
      assertEquals(0.0, onboardDepartVertex0.getY(), 0.01);
      assertEquals(0.0, onboardDepartVertex0.getX(), 0.01);
      assertEquals("B/\"/V,uIt7b/!48u", onboardDepartVertex0.getName());
      assertEquals(1, onboardDepartVertex0.getDegreeIn());
      assertEquals(0.0, onboardDepartVertex0.getLon(), 0.01);
      assertEquals("B/\"/V,uIt7b/!48u", onboardDepartVertex0.getLabel());
      assertEquals(0.0, onboardDepartVertex0.getLat(), 0.01);
      assertEquals(1, onboardDepartVertex0.getMaxIndex());
      assertEquals(0.0, elevatorHopEdge0.getDistance(), 0.01);
      assertEquals(4, elevatorHopEdge0.getId());
      assertTrue(elevatorHopEdge0.vertexTypesValid());
      assertFalse(elevatorHopEdge0.isPartial());
      assertNull(elevatorHopEdge0.getName());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(0L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, state0.getNumBoardings());
      assertNull(state0.getNonTransitMode());
      assertEquals(0L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getBackMode());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.isEverBoarded());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0L, state0.getTimeSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state0.getTimeInMillis());
      assertEquals(3189.54651965633, state0.getWeight(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isBikeRenting());
      assertTrue(state0.isFinal());
      assertFalse(state1.isBikeRenting());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertEquals(20L, state1.getElapsedTimeSeconds());
      assertEquals(20L, state1.getTimeSeconds());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertTrue(state1.isFinal());
      assertEquals(20.0, state1.getWeight(), 0.01);
      assertEquals(20, state1.getTimeDeltaSeconds());
      assertEquals(0, state1.getPreTransitTime());
      assertEquals(0, state1.getNumBoardings());
      assertNull(state1.getNonTransitMode());
      assertEquals(20000L, state1.getTimeInMillis());
      assertEquals(0L, state1.getStartTimeSeconds());
      assertFalse(state1.getReverseOptimizing());
      assertFalse(state1.isOnboard());
      assertEquals(20.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertEquals(20, state1.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertNull(state1.getZone());
      assertEquals((-3169.54651965633), state1.getWeightDelta(), 0.01);
      assertFalse(state1.isCarParked());
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(TraverseMode.WALK, state1.getBackMode());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertFalse(state1.isEverBoarded());
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(state0.equals((Object)state1));
      assertFalse(state1.equals((Object)state0));
      assertTrue(elevatorHopEdge0.wheelchairAccessible);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferPenalty);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(3189.54651965633, state0.weight, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertEquals(20.0, state1.weight, 0.01);
      assertFalse(boolean2);
      
      String string3 = multiShortestPathTree0.toString();
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(0L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferPenalty);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals("MultiSPT(0 vertices)", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      RoutingRequest routingRequest0 = new RoutingRequest();
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertNotNull(routingRequest0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertNotNull(multiShortestPathTree0);
      
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertNotNull(set0);
      
      Set<Vertex> set1 = multiShortestPathTree0.getVertices();
      assertSame(set1, set0);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertNotNull(set1);
      
      Vertex vertex0 = null;
      List<GraphPath> list0 = multiShortestPathTree0.getPaths(vertex0, routingRequest0.walkingBike);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertNotNull(list0);
      
      State state0 = new State(vertex0, routingRequest0);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertNull(state0.getBackMode());
      assertFalse(state0.isOnboard());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.isEverBoarded());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertNull(state0.getZone());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertFalse(state0.isCarParked());
      assertTrue(state0.isFinal());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isBikeRenting());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertNotNull(state0);
      
      State state1 = multiShortestPathTree0.getState(vertex0);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertNull(state1);
      
      state0.weight = (double) multiShortestPathTree0.TIME_DIFF_MARGIN;
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertNull(state0.getBackMode());
      assertFalse(state0.isOnboard());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(30.0, state0.getWeight(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.isEverBoarded());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertNull(state0.getZone());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertFalse(state0.isCarParked());
      assertTrue(state0.isFinal());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isBikeRenting());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      
      State state2 = new State(vertex0, state0.backEdge, routingRequest0.bikeBoardCost, routingRequest0);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertNull(state0.getBackMode());
      assertFalse(state0.isOnboard());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(30.0, state0.getWeight(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.isEverBoarded());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertNull(state0.getZone());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertFalse(state0.isCarParked());
      assertTrue(state0.isFinal());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isBikeRenting());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertFalse(state2.isEverBoarded());
      assertEquals(TraverseMode.WALK, state2.getNonTransitMode());
      assertEquals(0, state2.getNumBoardings());
      assertEquals(600000L, state2.getTimeInMillis());
      assertEquals(0.0, state2.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state2.getWalkDistance(), 0.01);
      assertFalse(state2.isOnboard());
      assertEquals(0.0, state2.getWeight(), 0.01);
      assertEquals(0, state2.getPreTransitTime());
      assertFalse(state2.isBackWalkingBike());
      assertEquals(0, state2.getAbsTimeDeltaSeconds());
      assertFalse(state2.isBikeRenting());
      assertEquals(0.0, state2.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state2.getLastNextArrivalDelta());
      assertEquals(0, state2.getTimeDeltaSeconds());
      assertNull(state2.getZone());
      assertEquals(600L, state2.getStartTimeSeconds());
      assertFalse(state2.isCarParked());
      assertEquals(0, state2.getPreTransitTimeDelta());
      assertEquals(0.0, state2.getWalkSinceLastTransit(), 0.01);
      assertEquals(0L, state2.getLastAlightedTimeSeconds());
      assertEquals(0L, state2.getElapsedTimeSeconds());
      assertEquals(0.0, state2.getWalkDistanceDelta(), 0.01);
      assertNull(state2.getBackMode());
      assertTrue(state2.isFinal());
      assertEquals(600L, state2.getTimeSeconds());
      assertFalse(state2.getReverseOptimizing());
      assertFalse(state2.equals((Object)state0));
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(30.0, state0.weight, 0.01);
      assertEquals(0.0, state2.weight, 0.01);
      assertEquals(0.0, state2.walkDistance, 0.01);
      assertNotNull(state2);
      
      boolean boolean0 = multiShortestPathTree0.add(state0);
      assertNotSame(state0, state2);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertNull(state0.getBackMode());
      assertFalse(state0.isOnboard());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(30.0, state0.getWeight(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.isEverBoarded());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertNull(state0.getZone());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertFalse(state0.isCarParked());
      assertTrue(state0.isFinal());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isBikeRenting());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertFalse(state0.equals((Object)state2));
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(30.0, state0.weight, 0.01);
      assertTrue(boolean0);
      
      State state3 = state0.reversedClone();
      assertNotSame(state0, state2);
      assertNotSame(state0, state3);
      assertNotSame(state3, state2);
      assertNotSame(state3, state0);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertNull(state0.getBackMode());
      assertFalse(state0.isOnboard());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(30.0, state0.getWeight(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.isEverBoarded());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertNull(state0.getZone());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertFalse(state0.isCarParked());
      assertTrue(state0.isFinal());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isBikeRenting());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(1392409281000L, state3.getTimeInMillis());
      assertFalse(state3.isBackWalkingBike());
      assertEquals(0, state3.getTimeDeltaSeconds());
      assertNull(state3.getZone());
      assertEquals(0.0, state3.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state3.getLastNextArrivalDelta());
      assertEquals(0, state3.getAbsTimeDeltaSeconds());
      assertFalse(state3.isBikeRenting());
      assertEquals(0, state3.getPreTransitTime());
      assertFalse(state3.isCarParked());
      assertEquals(0, state3.getPreTransitTimeDelta());
      assertEquals(0L, state3.getElapsedTimeSeconds());
      assertEquals(0L, state3.getLastAlightedTimeSeconds());
      assertEquals(TraverseMode.WALK, state3.getNonTransitMode());
      assertTrue(state3.getReverseOptimizing());
      assertEquals(0.0, state3.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281L, state3.getTimeSeconds());
      assertEquals(0.0, state3.getWalkDistanceDelta(), 0.01);
      assertNull(state3.getBackMode());
      assertFalse(state3.isEverBoarded());
      assertEquals(0, state3.getNumBoardings());
      assertTrue(state3.isFinal());
      assertEquals(1392409281L, state3.getStartTimeSeconds());
      assertEquals(0.0, state3.getWalkDistance(), 0.01);
      assertEquals(0.0, state3.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state3.getWeight(), 0.01);
      assertFalse(state3.isOnboard());
      assertFalse(state0.equals((Object)state2));
      assertFalse(state3.equals((Object)state2));
      assertFalse(state3.equals((Object)state0));
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(30.0, state0.weight, 0.01);
      assertEquals(0.0, state3.weight, 0.01);
      assertEquals(0.0, state3.walkDistance, 0.01);
      assertNotNull(state3);
      
      State state4 = new State(vertex0, routingRequest0);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(state4.isCarParked());
      assertEquals(1392409281L, state4.getStartTimeSeconds());
      assertEquals(0L, state4.getLastAlightedTimeSeconds());
      assertEquals(0.0, state4.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state4.getWalkAtLastTransit(), 0.01);
      assertFalse(state4.isBackWalkingBike());
      assertFalse(state4.isEverBoarded());
      assertEquals(0, state4.getLastNextArrivalDelta());
      assertEquals(0, state4.getPreTransitTimeDelta());
      assertEquals(TraverseMode.WALK, state4.getNonTransitMode());
      assertEquals(0, state4.getTimeDeltaSeconds());
      assertNull(state4.getZone());
      assertEquals(0.0, state4.getWalkSinceLastTransit(), 0.01);
      assertFalse(state4.isOnboard());
      assertNull(state4.getBackMode());
      assertEquals(0.0, state4.getWeight(), 0.01);
      assertEquals(1392409281L, state4.getTimeSeconds());
      assertEquals(0.0, state4.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state4.getWalkDistance(), 0.01);
      assertFalse(state4.getReverseOptimizing());
      assertEquals(0, state4.getAbsTimeDeltaSeconds());
      assertEquals(1392409281000L, state4.getTimeInMillis());
      assertTrue(state4.isFinal());
      assertFalse(state4.isBikeRenting());
      assertEquals(0, state4.getPreTransitTime());
      assertEquals(0L, state4.getElapsedTimeSeconds());
      assertEquals(0, state4.getNumBoardings());
      assertFalse(state4.equals((Object)state0));
      assertFalse(state4.equals((Object)state2));
      assertFalse(state4.equals((Object)state3));
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.0, state4.walkDistance, 0.01);
      assertEquals(0.0, state4.weight, 0.01);
      assertNotNull(state4);
      
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "V<d0Hg>f]gMlpHTW*8";
      boolean boolean1 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      double double0 = (-3145.800330414);
      state4.weight = double0;
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(state4.isCarParked());
      assertEquals(1392409281L, state4.getStartTimeSeconds());
      assertEquals(0L, state4.getLastAlightedTimeSeconds());
      assertEquals(0.0, state4.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state4.getWalkAtLastTransit(), 0.01);
      assertFalse(state4.isBackWalkingBike());
      assertEquals((-3145.800330414), state4.getWeight(), 0.01);
      assertFalse(state4.isEverBoarded());
      assertEquals(0, state4.getLastNextArrivalDelta());
      assertEquals(0, state4.getPreTransitTimeDelta());
      assertEquals(TraverseMode.WALK, state4.getNonTransitMode());
      assertEquals(0, state4.getTimeDeltaSeconds());
      assertNull(state4.getZone());
      assertEquals(0.0, state4.getWalkSinceLastTransit(), 0.01);
      assertFalse(state4.isOnboard());
      assertNull(state4.getBackMode());
      assertEquals(1392409281L, state4.getTimeSeconds());
      assertEquals(0.0, state4.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state4.getWalkDistance(), 0.01);
      assertFalse(state4.getReverseOptimizing());
      assertEquals(0, state4.getAbsTimeDeltaSeconds());
      assertEquals(1392409281000L, state4.getTimeInMillis());
      assertTrue(state4.isFinal());
      assertFalse(state4.isBikeRenting());
      assertEquals(0, state4.getPreTransitTime());
      assertEquals(0L, state4.getElapsedTimeSeconds());
      assertEquals(0, state4.getNumBoardings());
      
      State state5 = state4.detachNextResult();
      assertNotSame(state4, state0);
      assertNotSame(state4, state2);
      assertNotSame(state4, state3);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(state4.isCarParked());
      assertEquals(1392409281L, state4.getStartTimeSeconds());
      assertEquals(0L, state4.getLastAlightedTimeSeconds());
      assertEquals(0.0, state4.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state4.getWalkAtLastTransit(), 0.01);
      assertFalse(state4.isBackWalkingBike());
      assertEquals((-3145.800330414), state4.getWeight(), 0.01);
      assertFalse(state4.isEverBoarded());
      assertEquals(0, state4.getLastNextArrivalDelta());
      assertEquals(0, state4.getPreTransitTimeDelta());
      assertEquals(TraverseMode.WALK, state4.getNonTransitMode());
      assertEquals(0, state4.getTimeDeltaSeconds());
      assertNull(state4.getZone());
      assertEquals(0.0, state4.getWalkSinceLastTransit(), 0.01);
      assertFalse(state4.isOnboard());
      assertNull(state4.getBackMode());
      assertEquals(1392409281L, state4.getTimeSeconds());
      assertEquals(0.0, state4.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state4.getWalkDistance(), 0.01);
      assertFalse(state4.getReverseOptimizing());
      assertEquals(0, state4.getAbsTimeDeltaSeconds());
      assertEquals(1392409281000L, state4.getTimeInMillis());
      assertTrue(state4.isFinal());
      assertFalse(state4.isBikeRenting());
      assertEquals(0, state4.getPreTransitTime());
      assertEquals(0L, state4.getElapsedTimeSeconds());
      assertEquals(0, state4.getNumBoardings());
      assertFalse(state4.equals((Object)state0));
      assertFalse(state4.equals((Object)state2));
      assertFalse(state4.equals((Object)state3));
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.0, state4.walkDistance, 0.01);
      assertEquals((-3145.800330414), state4.weight, 0.01);
      assertNull(state5);
      
      boolean boolean2 = multiShortestPathTree0.add(state4);
      assertNotSame(state4, state0);
      assertNotSame(state4, state2);
      assertNotSame(state4, state3);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(state4.isCarParked());
      assertEquals(1392409281L, state4.getStartTimeSeconds());
      assertEquals(0L, state4.getLastAlightedTimeSeconds());
      assertEquals(0.0, state4.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state4.getWalkAtLastTransit(), 0.01);
      assertFalse(state4.isBackWalkingBike());
      assertEquals((-3145.800330414), state4.getWeight(), 0.01);
      assertFalse(state4.isEverBoarded());
      assertEquals(0, state4.getLastNextArrivalDelta());
      assertEquals(0, state4.getPreTransitTimeDelta());
      assertEquals(TraverseMode.WALK, state4.getNonTransitMode());
      assertEquals(0, state4.getTimeDeltaSeconds());
      assertNull(state4.getZone());
      assertEquals(0.0, state4.getWalkSinceLastTransit(), 0.01);
      assertFalse(state4.isOnboard());
      assertNull(state4.getBackMode());
      assertEquals(1392409281L, state4.getTimeSeconds());
      assertEquals(0.0, state4.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state4.getWalkDistance(), 0.01);
      assertFalse(state4.getReverseOptimizing());
      assertEquals(0, state4.getAbsTimeDeltaSeconds());
      assertEquals(1392409281000L, state4.getTimeInMillis());
      assertTrue(state4.isFinal());
      assertFalse(state4.isBikeRenting());
      assertEquals(0, state4.getPreTransitTime());
      assertEquals(0L, state4.getElapsedTimeSeconds());
      assertEquals(0, state4.getNumBoardings());
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(state4.equals((Object)state0));
      assertFalse(state4.equals((Object)state2));
      assertFalse(state4.equals((Object)state3));
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.0, state4.walkDistance, 0.01);
      assertEquals((-3145.800330414), state4.weight, 0.01);
      assertTrue(boolean2);
      
      boolean boolean3 = multiShortestPathTree0.add(state0);
      assertNotSame(state0, state2);
      assertNotSame(state0, state4);
      assertNotSame(state0, state3);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertNull(state0.getBackMode());
      assertFalse(state0.isOnboard());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(30.0, state0.getWeight(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.isEverBoarded());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertNull(state0.getZone());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertFalse(state0.isCarParked());
      assertTrue(state0.isFinal());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isBikeRenting());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(state0.equals((Object)state2));
      assertFalse(state0.equals((Object)state4));
      assertFalse(state0.equals((Object)state3));
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(30.0, state0.weight, 0.01);
      assertFalse(boolean3);
      
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getState(vertex0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.core.State", e);
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      long long0 = 0L;
      System.setCurrentTimeMillis(long0);
      String string0 = "B/\"/V,uIt7b/!48u";
      OnboardDepartVertex onboardDepartVertex0 = new OnboardDepartVertex(string0, long0, long0);
      assertEquals(0, onboardDepartVertex0.getDegreeOut());
      assertEquals(0, onboardDepartVertex0.getIndex());
      assertEquals("B/\"/V,uIt7b/!48u", onboardDepartVertex0.getName());
      assertEquals(0, onboardDepartVertex0.getDegreeIn());
      assertEquals(0.0, onboardDepartVertex0.getLon(), 0.01);
      assertEquals("B/\"/V,uIt7b/!48u", onboardDepartVertex0.getLabel());
      assertEquals(0.0, onboardDepartVertex0.getLat(), 0.01);
      assertEquals(1, onboardDepartVertex0.getMaxIndex());
      assertEquals(0.0, onboardDepartVertex0.getX(), 0.01);
      assertEquals(0.0, onboardDepartVertex0.getY(), 0.01);
      assertNotNull(onboardDepartVertex0);
      
      StreetTraversalPermission streetTraversalPermission0 = StreetTraversalPermission.BICYCLE_AND_DRIVING;
      ElevatorHopEdge elevatorHopEdge0 = new ElevatorHopEdge(onboardDepartVertex0, onboardDepartVertex0, streetTraversalPermission0);
      assertEquals(1, onboardDepartVertex0.getDegreeOut());
      assertEquals(0, onboardDepartVertex0.getIndex());
      assertEquals(1, onboardDepartVertex0.getDegreeIn());
      assertEquals("B/\"/V,uIt7b/!48u", onboardDepartVertex0.getName());
      assertEquals(0.0, onboardDepartVertex0.getLon(), 0.01);
      assertEquals("B/\"/V,uIt7b/!48u", onboardDepartVertex0.getLabel());
      assertEquals(0.0, onboardDepartVertex0.getLat(), 0.01);
      assertEquals(1, onboardDepartVertex0.getMaxIndex());
      assertEquals(0.0, onboardDepartVertex0.getX(), 0.01);
      assertEquals(0.0, onboardDepartVertex0.getY(), 0.01);
      assertFalse(elevatorHopEdge0.isPartial());
      assertTrue(elevatorHopEdge0.vertexTypesValid());
      assertEquals(0.0, elevatorHopEdge0.getDistance(), 0.01);
      assertEquals(5, elevatorHopEdge0.getId());
      assertNull(elevatorHopEdge0.getName());
      assertTrue(elevatorHopEdge0.wheelchairAccessible);
      assertNotNull(elevatorHopEdge0);
      
      TraverseMode traverseMode0 = TraverseMode.TRAM;
      OptimizeType optimizeType0 = OptimizeType.SAFE;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0, optimizeType0);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(0L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0L, routingRequest0.dateTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertNotNull(routingRequest0);
      
      State state0 = new State(onboardDepartVertex0, routingRequest0);
      assertEquals(1, onboardDepartVertex0.getDegreeOut());
      assertEquals(0, onboardDepartVertex0.getIndex());
      assertEquals(1, onboardDepartVertex0.getDegreeIn());
      assertEquals("B/\"/V,uIt7b/!48u", onboardDepartVertex0.getName());
      assertEquals(0.0, onboardDepartVertex0.getLon(), 0.01);
      assertEquals("B/\"/V,uIt7b/!48u", onboardDepartVertex0.getLabel());
      assertEquals(0.0, onboardDepartVertex0.getLat(), 0.01);
      assertEquals(1, onboardDepartVertex0.getMaxIndex());
      assertEquals(0.0, onboardDepartVertex0.getX(), 0.01);
      assertEquals(0.0, onboardDepartVertex0.getY(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(0L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isCarParked());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertTrue(state0.isFinal());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0L, state0.getStartTimeSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isEverBoarded());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertNull(state0.getBackMode());
      assertFalse(state0.isOnboard());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0L, state0.getTimeInMillis());
      assertEquals(0L, state0.getTimeSeconds());
      assertNull(state0.getZone());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getNonTransitMode());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0L, routingRequest0.dateTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertNotNull(state0);
      
      State state1 = elevatorHopEdge0.traverse(state0);
      assertNotSame(state0, state1);
      assertNotSame(state1, state0);
      assertEquals(1, onboardDepartVertex0.getDegreeOut());
      assertEquals(0, onboardDepartVertex0.getIndex());
      assertEquals(1, onboardDepartVertex0.getDegreeIn());
      assertEquals("B/\"/V,uIt7b/!48u", onboardDepartVertex0.getName());
      assertEquals(0.0, onboardDepartVertex0.getLon(), 0.01);
      assertEquals("B/\"/V,uIt7b/!48u", onboardDepartVertex0.getLabel());
      assertEquals(0.0, onboardDepartVertex0.getLat(), 0.01);
      assertEquals(1, onboardDepartVertex0.getMaxIndex());
      assertEquals(0.0, onboardDepartVertex0.getX(), 0.01);
      assertEquals(0.0, onboardDepartVertex0.getY(), 0.01);
      assertFalse(elevatorHopEdge0.isPartial());
      assertTrue(elevatorHopEdge0.vertexTypesValid());
      assertEquals(0.0, elevatorHopEdge0.getDistance(), 0.01);
      assertEquals(5, elevatorHopEdge0.getId());
      assertNull(elevatorHopEdge0.getName());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(0L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isCarParked());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertTrue(state0.isFinal());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0L, state0.getStartTimeSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isEverBoarded());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertNull(state0.getBackMode());
      assertFalse(state0.isOnboard());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0L, state0.getTimeInMillis());
      assertEquals(0L, state0.getTimeSeconds());
      assertNull(state0.getZone());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getNonTransitMode());
      assertFalse(state0.getReverseOptimizing());
      assertFalse(state1.isBikeRenting());
      assertEquals(0, state1.getPreTransitTime());
      assertTrue(state1.isFinal());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertFalse(state1.isCarParked());
      assertEquals(20, state1.getTimeDeltaSeconds());
      assertEquals(TraverseMode.WALK, state1.getBackMode());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertFalse(state1.getReverseOptimizing());
      assertNull(state1.getZone());
      assertEquals(20.0, state1.getWeightDelta(), 0.01);
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertNull(state1.getNonTransitMode());
      assertEquals(20L, state1.getTimeSeconds());
      assertEquals(20.0, state1.getWeight(), 0.01);
      assertEquals(0, state1.getNumBoardings());
      assertFalse(state1.isEverBoarded());
      assertEquals(20.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals(20000L, state1.getTimeInMillis());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0L, state1.getStartTimeSeconds());
      assertEquals(20L, state1.getElapsedTimeSeconds());
      assertFalse(state1.isOnboard());
      assertEquals(20, state1.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertFalse(state1.equals((Object)state0));
      assertTrue(elevatorHopEdge0.wheelchairAccessible);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0L, routingRequest0.dateTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertEquals(20.0, state1.weight, 0.01);
      assertNotNull(state1);
      
      boolean boolean0 = MultiShortestPathTree.dominates(state1, state1);
      assertNotSame(state0, state1);
      assertNotSame(state1, state0);
      assertEquals(1, onboardDepartVertex0.getDegreeOut());
      assertEquals(0, onboardDepartVertex0.getIndex());
      assertEquals(1, onboardDepartVertex0.getDegreeIn());
      assertEquals("B/\"/V,uIt7b/!48u", onboardDepartVertex0.getName());
      assertEquals(0.0, onboardDepartVertex0.getLon(), 0.01);
      assertEquals("B/\"/V,uIt7b/!48u", onboardDepartVertex0.getLabel());
      assertEquals(0.0, onboardDepartVertex0.getLat(), 0.01);
      assertEquals(1, onboardDepartVertex0.getMaxIndex());
      assertEquals(0.0, onboardDepartVertex0.getX(), 0.01);
      assertEquals(0.0, onboardDepartVertex0.getY(), 0.01);
      assertFalse(elevatorHopEdge0.isPartial());
      assertTrue(elevatorHopEdge0.vertexTypesValid());
      assertEquals(0.0, elevatorHopEdge0.getDistance(), 0.01);
      assertEquals(5, elevatorHopEdge0.getId());
      assertNull(elevatorHopEdge0.getName());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(0L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isCarParked());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertTrue(state0.isFinal());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0L, state0.getStartTimeSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isEverBoarded());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertNull(state0.getBackMode());
      assertFalse(state0.isOnboard());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0L, state0.getTimeInMillis());
      assertEquals(0L, state0.getTimeSeconds());
      assertNull(state0.getZone());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getNonTransitMode());
      assertFalse(state0.getReverseOptimizing());
      assertFalse(state1.isBikeRenting());
      assertEquals(0, state1.getPreTransitTime());
      assertTrue(state1.isFinal());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertFalse(state1.isCarParked());
      assertEquals(20, state1.getTimeDeltaSeconds());
      assertEquals(TraverseMode.WALK, state1.getBackMode());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertFalse(state1.getReverseOptimizing());
      assertNull(state1.getZone());
      assertEquals(20.0, state1.getWeightDelta(), 0.01);
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertNull(state1.getNonTransitMode());
      assertEquals(20L, state1.getTimeSeconds());
      assertEquals(20.0, state1.getWeight(), 0.01);
      assertEquals(0, state1.getNumBoardings());
      assertFalse(state1.isEverBoarded());
      assertEquals(20.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals(20000L, state1.getTimeInMillis());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0L, state1.getStartTimeSeconds());
      assertEquals(20L, state1.getElapsedTimeSeconds());
      assertFalse(state1.isOnboard());
      assertEquals(20, state1.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertFalse(state0.equals((Object)state1));
      assertFalse(state1.equals((Object)state0));
      assertTrue(elevatorHopEdge0.wheelchairAccessible);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0L, routingRequest0.dateTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertEquals(20.0, state1.weight, 0.01);
      assertTrue(boolean0);
      
      boolean boolean1 = MultiShortestPathTree.dominates(state0, state1);
      assertNotSame(state0, state1);
      assertNotSame(state1, state0);
      assertEquals(1, onboardDepartVertex0.getDegreeOut());
      assertEquals(0, onboardDepartVertex0.getIndex());
      assertEquals(1, onboardDepartVertex0.getDegreeIn());
      assertEquals("B/\"/V,uIt7b/!48u", onboardDepartVertex0.getName());
      assertEquals(0.0, onboardDepartVertex0.getLon(), 0.01);
      assertEquals("B/\"/V,uIt7b/!48u", onboardDepartVertex0.getLabel());
      assertEquals(0.0, onboardDepartVertex0.getLat(), 0.01);
      assertEquals(1, onboardDepartVertex0.getMaxIndex());
      assertEquals(0.0, onboardDepartVertex0.getX(), 0.01);
      assertEquals(0.0, onboardDepartVertex0.getY(), 0.01);
      assertFalse(elevatorHopEdge0.isPartial());
      assertTrue(elevatorHopEdge0.vertexTypesValid());
      assertEquals(0.0, elevatorHopEdge0.getDistance(), 0.01);
      assertEquals(5, elevatorHopEdge0.getId());
      assertNull(elevatorHopEdge0.getName());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(0L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isCarParked());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertTrue(state0.isFinal());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0L, state0.getStartTimeSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isEverBoarded());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertNull(state0.getBackMode());
      assertFalse(state0.isOnboard());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0L, state0.getTimeInMillis());
      assertEquals(0L, state0.getTimeSeconds());
      assertNull(state0.getZone());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getNonTransitMode());
      assertFalse(state0.getReverseOptimizing());
      assertFalse(state1.isBikeRenting());
      assertEquals(0, state1.getPreTransitTime());
      assertTrue(state1.isFinal());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertFalse(state1.isCarParked());
      assertEquals(20, state1.getTimeDeltaSeconds());
      assertEquals(TraverseMode.WALK, state1.getBackMode());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertFalse(state1.getReverseOptimizing());
      assertNull(state1.getZone());
      assertEquals(20.0, state1.getWeightDelta(), 0.01);
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertNull(state1.getNonTransitMode());
      assertEquals(20L, state1.getTimeSeconds());
      assertEquals(20.0, state1.getWeight(), 0.01);
      assertEquals(0, state1.getNumBoardings());
      assertFalse(state1.isEverBoarded());
      assertEquals(20.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals(20000L, state1.getTimeInMillis());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0L, state1.getStartTimeSeconds());
      assertEquals(20L, state1.getElapsedTimeSeconds());
      assertFalse(state1.isOnboard());
      assertEquals(20, state1.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertFalse(state0.equals((Object)state1));
      assertFalse(state1.equals((Object)state0));
      assertTrue(boolean1 == boolean0);
      assertTrue(elevatorHopEdge0.wheelchairAccessible);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0L, routingRequest0.dateTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertEquals(20.0, state1.weight, 0.01);
      assertTrue(boolean1);
      
      boolean boolean2 = MultiShortestPathTree.dominates(state0, state1);
      assertNotSame(state0, state1);
      assertNotSame(state1, state0);
      assertEquals(1, onboardDepartVertex0.getDegreeOut());
      assertEquals(0, onboardDepartVertex0.getIndex());
      assertEquals(1, onboardDepartVertex0.getDegreeIn());
      assertEquals("B/\"/V,uIt7b/!48u", onboardDepartVertex0.getName());
      assertEquals(0.0, onboardDepartVertex0.getLon(), 0.01);
      assertEquals("B/\"/V,uIt7b/!48u", onboardDepartVertex0.getLabel());
      assertEquals(0.0, onboardDepartVertex0.getLat(), 0.01);
      assertEquals(1, onboardDepartVertex0.getMaxIndex());
      assertEquals(0.0, onboardDepartVertex0.getX(), 0.01);
      assertEquals(0.0, onboardDepartVertex0.getY(), 0.01);
      assertFalse(elevatorHopEdge0.isPartial());
      assertTrue(elevatorHopEdge0.vertexTypesValid());
      assertEquals(0.0, elevatorHopEdge0.getDistance(), 0.01);
      assertEquals(5, elevatorHopEdge0.getId());
      assertNull(elevatorHopEdge0.getName());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(0L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isCarParked());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertTrue(state0.isFinal());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0L, state0.getStartTimeSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isEverBoarded());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertNull(state0.getBackMode());
      assertFalse(state0.isOnboard());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0L, state0.getTimeInMillis());
      assertEquals(0L, state0.getTimeSeconds());
      assertNull(state0.getZone());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getNonTransitMode());
      assertFalse(state0.getReverseOptimizing());
      assertFalse(state1.isBikeRenting());
      assertEquals(0, state1.getPreTransitTime());
      assertTrue(state1.isFinal());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertFalse(state1.isCarParked());
      assertEquals(20, state1.getTimeDeltaSeconds());
      assertEquals(TraverseMode.WALK, state1.getBackMode());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertFalse(state1.getReverseOptimizing());
      assertNull(state1.getZone());
      assertEquals(20.0, state1.getWeightDelta(), 0.01);
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertNull(state1.getNonTransitMode());
      assertEquals(20L, state1.getTimeSeconds());
      assertEquals(20.0, state1.getWeight(), 0.01);
      assertEquals(0, state1.getNumBoardings());
      assertFalse(state1.isEverBoarded());
      assertEquals(20.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals(20000L, state1.getTimeInMillis());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0L, state1.getStartTimeSeconds());
      assertEquals(20L, state1.getElapsedTimeSeconds());
      assertFalse(state1.isOnboard());
      assertEquals(20, state1.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertFalse(state0.equals((Object)state1));
      assertFalse(state1.equals((Object)state0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(elevatorHopEdge0.wheelchairAccessible);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0L, routingRequest0.dateTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertEquals(20.0, state1.weight, 0.01);
      assertTrue(boolean2);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertNotNull(multiShortestPathTree0);
      
      TreeMap<Vertex, List<State>> treeMap0 = new TreeMap<Vertex, List<State>>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      multiShortestPathTree0.stateSets = (Map<Vertex, List<State>>) treeMap0;
      assertEquals(0, multiShortestPathTree0.stateSets.size());
      assertTrue(multiShortestPathTree0.stateSets.isEmpty());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, treeMap0.size());
      
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getStates(onboardDepartVertex0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.opentripplanner.routing.vertextype.OnboardDepartVertex cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertNotNull(multiShortestPathTree0);
      
      HashMap<Vertex, List<State>> hashMap0 = new HashMap<Vertex, List<State>>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      double double0 = (-3145.922786792443);
      MultiShortestPathTree.TIME_EPSILON = double0;
      multiShortestPathTree0.stateSets = (Map<Vertex, List<State>>) hashMap0;
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, multiShortestPathTree0.stateSets.size());
      assertTrue(multiShortestPathTree0.stateSets.isEmpty());
      
      String string0 = multiShortestPathTree0.toString();
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals((-3145.922786792443), MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals("MultiSPT(0 vertices)", string0);
      assertNotNull(string0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      boolean boolean1 = true;
      boolean boolean2 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean0, boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Vertex vertex0 = null;
      Vector<State> vector0 = new Vector<State>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      PriorityQueue<PatternArriveVertex> priorityQueue0 = new PriorityQueue<PatternArriveVertex>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      boolean boolean3 = vector0.removeAll(priorityQueue0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, priorityQueue0.size());
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      List<State> list0 = hashMap0.put(vertex0, vector0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNull(list0);
      
      String string1 = multiShortestPathTree0.toString();
      assertNotSame(string1, string0);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(string1.equals((Object)string0));
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals((-3145.922786792443), MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals("MultiSPT(1 vertices)", string1);
      assertNotNull(string1);
      
      Graph graph0 = new Graph();
      assertEquals(0, graph0.countVertices());
      assertNotNull(graph0);
      
      String string2 = "B*hAKSpL8{[`Im~";
      Vertex vertex1 = graph0.getVertex(string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals(0, graph0.countVertices());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNull(vertex1);
      
      List<State> list1 = multiShortestPathTree0.getStates(vertex1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals(0, graph0.countVertices());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals((-3145.922786792443), MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertNotNull(list1);
      
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals((-3145.922786792443), MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertNotNull(set0);
      
      List<State> list2 = multiShortestPathTree0.getStates(vertex1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(list2, list1);
      assertEquals(0, graph0.countVertices());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals((-3145.922786792443), MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertNotNull(list2);
      
      Set<Vertex> set1 = multiShortestPathTree0.getVertices();
      assertSame(set1, set0);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(set1.isEmpty());
      assertEquals(1, set1.size());
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals((-3145.922786792443), MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertNotNull(set1);
  }
}
