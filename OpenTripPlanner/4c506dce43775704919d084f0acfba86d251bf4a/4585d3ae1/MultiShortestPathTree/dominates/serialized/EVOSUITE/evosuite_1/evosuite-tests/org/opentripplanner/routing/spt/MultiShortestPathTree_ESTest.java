/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 09 08:16:08 GMT 2021
 */

package org.opentripplanner.routing.spt;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.onebusaway.gtfs.model.AgencyAndId;
import org.opentripplanner.api.parameter.QualifiedMode;
import org.opentripplanner.api.parameter.QualifiedModeSetSequence;
import org.opentripplanner.routing.core.OptimizeType;
import org.opentripplanner.routing.core.RouteMatcher;
import org.opentripplanner.routing.core.RoutingRequest;
import org.opentripplanner.routing.core.State;
import org.opentripplanner.routing.core.StateData;
import org.opentripplanner.routing.core.TraversalRequirements;
import org.opentripplanner.routing.core.TraverseMode;
import org.opentripplanner.routing.core.TraverseModeSet;
import org.opentripplanner.routing.edgetype.StreetEdge;
import org.opentripplanner.routing.graph.Graph;
import org.opentripplanner.routing.graph.Vertex;
import org.opentripplanner.routing.spt.MultiShortestPathTree;
import org.opentripplanner.routing.spt.SerializedObjectSupporter;
import org.opentripplanner.routing.vertextype.ElevatorOffboardVertex;
import org.opentripplanner.routing.vertextype.IntersectionVertex;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MultiShortestPathTree_ESTest extends MultiShortestPathTree_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      RoutingRequest routingRequest0 = new RoutingRequest();
      assertNotNull(routingRequest0);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertNotNull(multiShortestPathTree0);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      assertNotNull(collection0);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      State state0 = serializedObjectSupporter0.deserializeObjectState296();
      assertNull(state0);
      
      // Undeclared exception!
      try { 
        multiShortestPathTree0.add(state0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      RoutingRequest routingRequest0 = null;
      TraversalRequirements traversalRequirements0 = new TraversalRequirements(routingRequest0);
      assertNotNull(traversalRequirements0);
      assertFalse(traversalRequirements0.hasBikeWalkingRequirements());
      
      RoutingRequest routingRequest1 = new RoutingRequest(traversalRequirements0.modes);
      assertNotNull(routingRequest1);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertFalse(routingRequest1.arriveBy);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertFalse(routingRequest1.batch);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertEquals(3, routingRequest1.numItineraries);
      assertFalse(routingRequest1.kissAndRide);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest1.maxTransfers);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertFalse(routingRequest1.reverseOptimizing);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest1.boardSlack);
      assertEquals(0, routingRequest1.transferSlack);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest1.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertFalse(routingRequest1.walkingBike);
      assertTrue(routingRequest1.softWalkLimiting);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(0, routingRequest1.transferPenalty);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(0, routingRequest1.alightSlack);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertFalse(routingRequest1.showIntermediateStops);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertFalse(traversalRequirements0.hasBikeWalkingRequirements());
      assertEquals(40.0, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest1.getNumItineraries());
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertTrue(routingRequest1.transitAllowed());
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest1);
      assertNotNull(multiShortestPathTree0);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertFalse(routingRequest1.arriveBy);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertFalse(routingRequest1.batch);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertEquals(3, routingRequest1.numItineraries);
      assertFalse(routingRequest1.kissAndRide);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest1.maxTransfers);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertFalse(routingRequest1.reverseOptimizing);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest1.boardSlack);
      assertEquals(0, routingRequest1.transferSlack);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest1.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertFalse(routingRequest1.walkingBike);
      assertTrue(routingRequest1.softWalkLimiting);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(0, routingRequest1.transferPenalty);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(0, routingRequest1.alightSlack);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertFalse(routingRequest1.showIntermediateStops);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertFalse(traversalRequirements0.hasBikeWalkingRequirements());
      assertEquals(40.0, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest1.getNumItineraries());
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertTrue(routingRequest1.transitAllowed());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      assertNotNull(collection0);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertFalse(routingRequest1.arriveBy);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertFalse(routingRequest1.batch);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertEquals(3, routingRequest1.numItineraries);
      assertFalse(routingRequest1.kissAndRide);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest1.maxTransfers);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertFalse(routingRequest1.reverseOptimizing);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest1.boardSlack);
      assertEquals(0, routingRequest1.transferSlack);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest1.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertFalse(routingRequest1.walkingBike);
      assertTrue(routingRequest1.softWalkLimiting);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(0, routingRequest1.transferPenalty);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(0, routingRequest1.alightSlack);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertFalse(routingRequest1.showIntermediateStops);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertFalse(traversalRequirements0.hasBikeWalkingRequirements());
      assertEquals(40.0, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest1.getNumItineraries());
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertTrue(routingRequest1.transitAllowed());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      assertNotNull(set0);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertFalse(routingRequest1.arriveBy);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertFalse(routingRequest1.batch);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertEquals(3, routingRequest1.numItineraries);
      assertFalse(routingRequest1.kissAndRide);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest1.maxTransfers);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertFalse(routingRequest1.reverseOptimizing);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest1.boardSlack);
      assertEquals(0, routingRequest1.transferSlack);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest1.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertFalse(routingRequest1.walkingBike);
      assertTrue(routingRequest1.softWalkLimiting);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(0, routingRequest1.transferPenalty);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(0, routingRequest1.alightSlack);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertFalse(routingRequest1.showIntermediateStops);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertFalse(traversalRequirements0.hasBikeWalkingRequirements());
      assertEquals(40.0, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest1.getNumItineraries());
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertTrue(routingRequest1.transitAllowed());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      TraverseModeSet traverseModeSet0 = TraverseModeSet.allModes();
      assertNotNull(traverseModeSet0);
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertEquals(8183, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getCableCar());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getSubway());
      assertTrue(traverseModeSet0.getRail());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.getBicycle());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.isTransit());
      
      RoutingRequest routingRequest0 = new RoutingRequest(traverseModeSet0);
      assertNotNull(routingRequest0);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertEquals(8183, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getCableCar());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getSubway());
      assertTrue(traverseModeSet0.getRail());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.getBicycle());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.isTransit());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertNotNull(multiShortestPathTree0);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertEquals(8183, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getCableCar());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getSubway());
      assertTrue(traverseModeSet0.getRail());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.getBicycle());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.isTransit());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      
      int int0 = multiShortestPathTree0.getVertexCount();
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertEquals(8183, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getCableCar());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getSubway());
      assertTrue(traverseModeSet0.getRail());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.getBicycle());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.isTransit());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      RoutingRequest routingRequest0 = new RoutingRequest();
      assertNotNull(routingRequest0);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertNotNull(multiShortestPathTree0);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      
      Map<Vertex, List<State>> map0 = multiShortestPathTree0.getstateSets();
      assertNotNull(map0);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      routingRequest0.elevatorBoardCost = routingRequest0.bikeRentalDropoffCost;
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      
      multiShortestPathTree0.setstateSets(map0);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.batch);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(30, routingRequest0.elevatorBoardCost);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      int int0 = multiShortestPathTree0.getWEIGHT_DIFF_MARGIN();
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.batch);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(30, routingRequest0.elevatorBoardCost);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(30, int0);
      
      System.setCurrentTimeMillis(routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.batch);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(30, routingRequest0.elevatorBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      
      routingRequest0.maxWeight = (double) multiShortestPathTree0.WEIGHT_DIFF_MARGIN;
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      
      int int1 = multiShortestPathTree0.getTIME_DIFF_MARGIN();
      assertTrue(int1 == int0);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.batch);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(30.0, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(30, routingRequest0.elevatorBoardCost);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(30, int1);
      
      double double0 = multiShortestPathTree0.getWEIGHT_EPSILON();
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.batch);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(30.0, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(30, routingRequest0.elevatorBoardCost);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(0.02, double0, 0.01);
      
      double double1 = multiShortestPathTree0.getTIME_EPSILON();
      assertEquals(double1, double0, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.batch);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(30.0, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(30, routingRequest0.elevatorBoardCost);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(0.02, double1, 0.01);
      
      double double2 = multiShortestPathTree0.getWALK_DIST_EPSILON();
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.batch);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(30.0, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(30, routingRequest0.elevatorBoardCost);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(0.05, double2, 0.01);
      
      State state0 = null;
      // Undeclared exception!
      try { 
        multiShortestPathTree0.visit(state0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      RoutingRequest routingRequest0 = null;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertNotNull(multiShortestPathTree0);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      
      String string0 = multiShortestPathTree0.toString();
      assertNotNull(string0);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals("MultiSPT(0 vertices)", string0);
      
      Vertex vertex0 = null;
      State state0 = multiShortestPathTree0.getState(vertex0);
      assertNull(state0);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      
      // Undeclared exception!
      try { 
        MultiShortestPathTree.dominates(state0, state0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      RoutingRequest routingRequest0 = null;
      EvoSuiteFile evoSuiteFile0 = null;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertNotNull(multiShortestPathTree0);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      
      Vertex vertex0 = null;
      List<State> list0 = multiShortestPathTree0.getStates(vertex0);
      assertNull(list0);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      
      long long0 = multiShortestPathTree0.getserialVersionUID();
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals((-1000000L), long0);
      
      State state0 = multiShortestPathTree0.getState(vertex0);
      assertNull(state0);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      RoutingRequest routingRequest0 = new RoutingRequest();
      assertNotNull(routingRequest0);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertNotNull(multiShortestPathTree0);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      
      int int0 = multiShortestPathTree0.getTIME_DIFF_MARGIN();
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals(30, int0);
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.SUBWAY;
      OptimizeType optimizeType0 = OptimizeType.QUICK;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0, optimizeType0);
      assertNotNull(routingRequest0);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.batch);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      
      RoutingRequest routingRequest1 = routingRequest0.clone();
      assertTrue(routingRequest1.equals((Object)routingRequest0));
      assertNotSame(routingRequest0, routingRequest1);
      assertNotSame(routingRequest1, routingRequest0);
      assertNotNull(routingRequest1);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.batch);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest1.boardSlack);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertEquals(0, routingRequest1.transferSlack);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest1.reverseOptimizing);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertFalse(routingRequest1.allowBikeRental);
      assertFalse(routingRequest1.showIntermediateStops);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertFalse(routingRequest1.batch);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertEquals(3, routingRequest1.numItineraries);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertEquals(2, routingRequest1.maxTransfers);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(0, routingRequest1.alightSlack);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertTrue(routingRequest1.softWalkLimiting);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest1.kissAndRide);
      assertFalse(routingRequest1.arriveBy);
      assertEquals(9223372036854775807L, routingRequest1.worstTime);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest1.walkingBike);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(0, routingRequest1.transferPenalty);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertTrue(routingRequest1.transitAllowed());
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest1.getNumItineraries());
      assertEquals(1.33, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest1);
      assertTrue(routingRequest0.equals((Object)routingRequest1));
      assertTrue(routingRequest1.equals((Object)routingRequest0));
      assertNotNull(multiShortestPathTree0);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.batch);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest1.boardSlack);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertEquals(0, routingRequest1.transferSlack);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest1.reverseOptimizing);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertFalse(routingRequest1.allowBikeRental);
      assertFalse(routingRequest1.showIntermediateStops);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertFalse(routingRequest1.batch);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertEquals(3, routingRequest1.numItineraries);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertEquals(2, routingRequest1.maxTransfers);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(0, routingRequest1.alightSlack);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertTrue(routingRequest1.softWalkLimiting);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest1.kissAndRide);
      assertFalse(routingRequest1.arriveBy);
      assertEquals(9223372036854775807L, routingRequest1.worstTime);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest1.walkingBike);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(0, routingRequest1.transferPenalty);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertTrue(routingRequest1.transitAllowed());
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest1.getNumItineraries());
      assertEquals(1.33, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      
      int int0 = multiShortestPathTree0.getVertexCount();
      assertTrue(routingRequest0.equals((Object)routingRequest1));
      assertTrue(routingRequest1.equals((Object)routingRequest0));
      assertNotSame(routingRequest0, routingRequest1);
      assertNotSame(routingRequest1, routingRequest0);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.batch);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest1.boardSlack);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertEquals(0, routingRequest1.transferSlack);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest1.reverseOptimizing);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertFalse(routingRequest1.allowBikeRental);
      assertFalse(routingRequest1.showIntermediateStops);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertFalse(routingRequest1.batch);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertEquals(3, routingRequest1.numItineraries);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertEquals(2, routingRequest1.maxTransfers);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(0, routingRequest1.alightSlack);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertTrue(routingRequest1.softWalkLimiting);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest1.kissAndRide);
      assertFalse(routingRequest1.arriveBy);
      assertEquals(9223372036854775807L, routingRequest1.worstTime);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest1.walkingBike);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(0, routingRequest1.transferPenalty);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertTrue(routingRequest1.transitAllowed());
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest1.getNumItineraries());
      assertEquals(1.33, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      RoutingRequest routingRequest0 = null;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertNotNull(multiShortestPathTree0);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      
      String string0 = multiShortestPathTree0.toString();
      assertNotNull(string0);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals("MultiSPT(0 vertices)", string0);
      
      double double0 = multiShortestPathTree0.getTIME_EPSILON();
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(0.02, double0, 0.01);
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.CUSTOM_MOTOR_VEHICLE;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      assertNotNull(routingRequest0);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertNotNull(multiShortestPathTree0);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      
      int int0 = multiShortestPathTree0.getWEIGHT_DIFF_MARGIN();
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(30, int0);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      RoutingRequest routingRequest0 = null;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertNotNull(multiShortestPathTree0);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      
      long long0 = multiShortestPathTree0.getserialVersionUID();
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals((-1000000L), long0);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      RoutingRequest routingRequest0 = new RoutingRequest();
      assertNotNull(routingRequest0);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertNotNull(multiShortestPathTree0);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      
      double double0 = multiShortestPathTree0.getWALK_DIST_EPSILON();
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0.05, double0, 0.01);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.FERRY;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      assertNotNull(routingRequest0);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertNotNull(multiShortestPathTree0);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      
      Map<Vertex, List<State>> map0 = multiShortestPathTree0.getstateSets();
      assertNotNull(map0);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      multiShortestPathTree0.setstateSets(map0);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.BUS;
      OptimizeType optimizeType0 = OptimizeType.TRANSFERS;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0, optimizeType0);
      assertNotNull(routingRequest0);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertNotNull(multiShortestPathTree0);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      
      double double0 = multiShortestPathTree0.getWEIGHT_EPSILON();
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(0.02, double0, 0.01);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.TRAM;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      assertNotNull(routingRequest0);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.batch);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertNotNull(multiShortestPathTree0);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.batch);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      boolean boolean0 = true;
      routingRequest0.useBikeRentalAvailabilityInformation = boolean0;
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      
      Map<Vertex, List<State>> map0 = multiShortestPathTree0.getstateSets();
      assertNotNull(map0);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.batch);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      assertNotNull(collection0);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.batch);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      RoutingRequest routingRequest0 = new RoutingRequest();
      assertNotNull(routingRequest0);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      
      HashSet<String> hashSet0 = routingRequest0.bannedAgencies;
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      routingRequest0.unpreferredAgencies = hashSet0;
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, routingRequest0.unpreferredAgencies.size());
      assertTrue(routingRequest0.unpreferredAgencies.isEmpty());
      
      double double0 = (-999.0);
      boolean boolean0 = hashSet0.addAll(routingRequest0.unpreferredAgencies);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(boolean0);
      
      routingRequest0.softWalkPenalty = double0;
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertNotNull(multiShortestPathTree0);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals((-999.0), routingRequest0.softWalkPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      
      int int0 = multiShortestPathTree0.getVertexCount();
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals((-999.0), routingRequest0.softWalkPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(0, int0);
      
      HashMap<Vertex, List<State>> hashMap0 = new HashMap<Vertex, List<State>>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      multiShortestPathTree0.setstateSets(hashMap0);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals((-999.0), routingRequest0.softWalkPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      double double1 = multiShortestPathTree0.getWEIGHT_EPSILON();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals((-999.0), routingRequest0.softWalkPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(0.02, double1, 0.01);
      
      double double2 = multiShortestPathTree0.getWEIGHT_EPSILON();
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals((-999.0), routingRequest0.softWalkPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(0.02, double2, 0.01);
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.TRANSIT;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      assertNotNull(routingRequest0);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      
      RoutingRequest routingRequest1 = routingRequest0.bikeWalkingOptions;
      assertSame(routingRequest1, routingRequest0);
      assertNotNull(routingRequest1);
      assertEquals(0, routingRequest1.alightSlack);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(2, routingRequest1.maxTransfers);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertTrue(routingRequest1.driveOnRight);
      assertFalse(routingRequest1.arriveBy);
      assertTrue(routingRequest1.softWalkLimiting);
      assertFalse(routingRequest1.walkingBike);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertEquals(9223372036854775807L, routingRequest1.worstTime);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest1.showIntermediateStops);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertFalse(routingRequest1.batch);
      assertFalse(routingRequest1.reverseOptimizing);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest1.transferPenalty);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertFalse(routingRequest1.kissAndRide);
      assertEquals(3, routingRequest1.numItineraries);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertFalse(routingRequest1.parkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertEquals(0, routingRequest1.transferSlack);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest1.boardSlack);
      assertEquals(3, routingRequest1.getNumItineraries());
      assertEquals(1.33, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest1.transitAllowed());
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest1);
      assertNotNull(multiShortestPathTree0);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest1.alightSlack);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(2, routingRequest1.maxTransfers);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertTrue(routingRequest1.driveOnRight);
      assertFalse(routingRequest1.arriveBy);
      assertTrue(routingRequest1.softWalkLimiting);
      assertFalse(routingRequest1.walkingBike);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertEquals(9223372036854775807L, routingRequest1.worstTime);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest1.showIntermediateStops);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertFalse(routingRequest1.batch);
      assertFalse(routingRequest1.reverseOptimizing);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest1.transferPenalty);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertFalse(routingRequest1.kissAndRide);
      assertEquals(3, routingRequest1.numItineraries);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertFalse(routingRequest1.parkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertEquals(0, routingRequest1.transferSlack);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest1.boardSlack);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest1.getNumItineraries());
      assertEquals(1.33, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest1.transitAllowed());
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      
      HashMap<Vertex, List<State>> hashMap0 = new HashMap<Vertex, List<State>>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      multiShortestPathTree0.setstateSets(hashMap0);
      assertSame(routingRequest0, routingRequest1);
      assertSame(routingRequest1, routingRequest0);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest1.alightSlack);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(2, routingRequest1.maxTransfers);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertTrue(routingRequest1.driveOnRight);
      assertFalse(routingRequest1.arriveBy);
      assertTrue(routingRequest1.softWalkLimiting);
      assertFalse(routingRequest1.walkingBike);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertEquals(9223372036854775807L, routingRequest1.worstTime);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest1.showIntermediateStops);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertFalse(routingRequest1.batch);
      assertFalse(routingRequest1.reverseOptimizing);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest1.transferPenalty);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertFalse(routingRequest1.kissAndRide);
      assertEquals(3, routingRequest1.numItineraries);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertFalse(routingRequest1.parkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertEquals(0, routingRequest1.transferSlack);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest1.boardSlack);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest1.getNumItineraries());
      assertEquals(1.33, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest1.transitAllowed());
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      State state0 = serializedObjectSupporter0.deserializeObjectState371();
      assertNull(state0);
      
      // Undeclared exception!
      try { 
        multiShortestPathTree0.visit(state0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      RoutingRequest routingRequest0 = new RoutingRequest();
      assertNotNull(routingRequest0);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      
      boolean boolean0 = false;
      routingRequest0.walkingBike = boolean0;
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertNotNull(multiShortestPathTree0);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      assertNotNull(set0);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.BUS;
      OptimizeType optimizeType0 = OptimizeType.TRANSFERS;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0, optimizeType0);
      assertNotNull(routingRequest0);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.batch);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertNotNull(multiShortestPathTree0);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.batch);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      
      Vertex vertex0 = null;
      State state0 = multiShortestPathTree0.getState(vertex0);
      assertNull(state0);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.batch);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      
      long long0 = multiShortestPathTree0.getserialVersionUID();
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.batch);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals((-1000000L), long0);
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      RoutingRequest routingRequest0 = null;
      TraversalRequirements traversalRequirements0 = new TraversalRequirements(routingRequest0);
      assertNotNull(traversalRequirements0);
      assertFalse(traversalRequirements0.hasBikeWalkingRequirements());
      
      TraverseModeSet traverseModeSet0 = traversalRequirements0.modes;
      assertNotNull(traverseModeSet0);
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getCableCar());
      assertTrue(traverseModeSet0.isTransit());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.getBicycle());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.getSubway());
      assertEquals(8183, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getRail());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getTraininsh());
      
      OptimizeType optimizeType0 = OptimizeType.SAFE;
      RoutingRequest routingRequest1 = new RoutingRequest(traverseModeSet0, optimizeType0);
      assertNotNull(routingRequest1);
      assertEquals(0, routingRequest1.alightSlack);
      assertFalse(routingRequest1.walkingBike);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest1.arriveBy);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(2, routingRequest1.maxTransfers);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertEquals(9223372036854775807L, routingRequest1.worstTime);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertTrue(routingRequest1.softWalkLimiting);
      assertFalse(routingRequest1.kissAndRide);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(0, routingRequest1.transferSlack);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertEquals(0, routingRequest1.transferPenalty);
      assertFalse(routingRequest1.batch);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest1.reverseOptimizing);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(0, routingRequest1.boardSlack);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertTrue(routingRequest1.driveOnRight);
      assertFalse(routingRequest1.showIntermediateStops);
      assertEquals(3, routingRequest1.numItineraries);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertFalse(traversalRequirements0.hasBikeWalkingRequirements());
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getCableCar());
      assertTrue(traverseModeSet0.isTransit());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.getBicycle());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.getSubway());
      assertEquals(8183, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getRail());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getTraininsh());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest1.getNumItineraries());
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(40.0, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertTrue(routingRequest1.transitAllowed());
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest1);
      assertNotNull(multiShortestPathTree0);
      assertEquals(0, routingRequest1.alightSlack);
      assertFalse(routingRequest1.walkingBike);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest1.arriveBy);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(2, routingRequest1.maxTransfers);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertEquals(9223372036854775807L, routingRequest1.worstTime);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertTrue(routingRequest1.softWalkLimiting);
      assertFalse(routingRequest1.kissAndRide);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(0, routingRequest1.transferSlack);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertEquals(0, routingRequest1.transferPenalty);
      assertFalse(routingRequest1.batch);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest1.reverseOptimizing);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(0, routingRequest1.boardSlack);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertTrue(routingRequest1.driveOnRight);
      assertFalse(routingRequest1.showIntermediateStops);
      assertEquals(3, routingRequest1.numItineraries);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertFalse(traversalRequirements0.hasBikeWalkingRequirements());
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getCableCar());
      assertTrue(traverseModeSet0.isTransit());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.getBicycle());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.getSubway());
      assertEquals(8183, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getRail());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getTraininsh());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest1.getNumItineraries());
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(40.0, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertTrue(routingRequest1.transitAllowed());
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      assertNotNull(collection0);
      assertEquals(0, routingRequest1.alightSlack);
      assertFalse(routingRequest1.walkingBike);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest1.arriveBy);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(2, routingRequest1.maxTransfers);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertEquals(9223372036854775807L, routingRequest1.worstTime);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertTrue(routingRequest1.softWalkLimiting);
      assertFalse(routingRequest1.kissAndRide);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(0, routingRequest1.transferSlack);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertEquals(0, routingRequest1.transferPenalty);
      assertFalse(routingRequest1.batch);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest1.reverseOptimizing);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(0, routingRequest1.boardSlack);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertTrue(routingRequest1.driveOnRight);
      assertFalse(routingRequest1.showIntermediateStops);
      assertEquals(3, routingRequest1.numItineraries);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertFalse(traversalRequirements0.hasBikeWalkingRequirements());
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getCableCar());
      assertTrue(traverseModeSet0.isTransit());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.getBicycle());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.getSubway());
      assertEquals(8183, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getRail());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getTraininsh());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest1.getNumItineraries());
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(40.0, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertTrue(routingRequest1.transitAllowed());
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.CAR;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      assertNotNull(routingRequest0);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      
      RoutingRequest routingRequest1 = routingRequest0.bikeWalkingOptions;
      assertFalse(routingRequest1.equals((Object)routingRequest0));
      assertNotSame(routingRequest1, routingRequest0);
      assertNotNull(routingRequest1);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertFalse(routingRequest1.arriveBy);
      assertEquals(0, routingRequest1.transferPenalty);
      assertEquals(0, routingRequest1.alightSlack);
      assertFalse(routingRequest1.reverseOptimizing);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertFalse(routingRequest1.walkingBike);
      assertFalse(routingRequest1.kissAndRide);
      assertTrue(routingRequest1.softWalkLimiting);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(0, routingRequest1.transferSlack);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertEquals(9223372036854775807L, routingRequest1.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(0, routingRequest1.boardSlack);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest1.maxTransfers);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertFalse(routingRequest1.showIntermediateStops);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertFalse(routingRequest1.batch);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertEquals(3, routingRequest1.numItineraries);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(1, routingRequest1.getNumItineraries());
      assertFalse(routingRequest1.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(40.0, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest1);
      assertFalse(routingRequest0.equals((Object)routingRequest1));
      assertFalse(routingRequest1.equals((Object)routingRequest0));
      assertNotNull(multiShortestPathTree0);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertFalse(routingRequest1.arriveBy);
      assertEquals(0, routingRequest1.transferPenalty);
      assertEquals(0, routingRequest1.alightSlack);
      assertFalse(routingRequest1.reverseOptimizing);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertFalse(routingRequest1.walkingBike);
      assertFalse(routingRequest1.kissAndRide);
      assertTrue(routingRequest1.softWalkLimiting);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(0, routingRequest1.transferSlack);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertEquals(9223372036854775807L, routingRequest1.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(0, routingRequest1.boardSlack);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest1.maxTransfers);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertFalse(routingRequest1.showIntermediateStops);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertFalse(routingRequest1.batch);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertEquals(3, routingRequest1.numItineraries);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(1, routingRequest1.getNumItineraries());
      assertFalse(routingRequest1.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(40.0, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      double double0 = routingRequest1.getSpeed(traverseMode0);
      assertFalse(routingRequest0.equals((Object)routingRequest1));
      assertFalse(routingRequest1.equals((Object)routingRequest0));
      assertNotSame(routingRequest0, routingRequest1);
      assertNotSame(routingRequest1, routingRequest0);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertFalse(routingRequest1.arriveBy);
      assertEquals(0, routingRequest1.transferPenalty);
      assertEquals(0, routingRequest1.alightSlack);
      assertFalse(routingRequest1.reverseOptimizing);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertFalse(routingRequest1.walkingBike);
      assertFalse(routingRequest1.kissAndRide);
      assertTrue(routingRequest1.softWalkLimiting);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(0, routingRequest1.transferSlack);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertEquals(9223372036854775807L, routingRequest1.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(0, routingRequest1.boardSlack);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest1.maxTransfers);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertFalse(routingRequest1.showIntermediateStops);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertFalse(routingRequest1.batch);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertEquals(3, routingRequest1.numItineraries);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(1, routingRequest1.getNumItineraries());
      assertFalse(routingRequest1.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(40.0, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertEquals(40.0, double0, 0.01);
      
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      assertFalse(routingRequest0.equals((Object)routingRequest1));
      assertFalse(routingRequest1.equals((Object)routingRequest0));
      assertNotSame(routingRequest0, routingRequest1);
      assertNotSame(routingRequest1, routingRequest0);
      assertNotNull(collection0);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertFalse(routingRequest1.arriveBy);
      assertEquals(0, routingRequest1.transferPenalty);
      assertEquals(0, routingRequest1.alightSlack);
      assertFalse(routingRequest1.reverseOptimizing);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertFalse(routingRequest1.walkingBike);
      assertFalse(routingRequest1.kissAndRide);
      assertTrue(routingRequest1.softWalkLimiting);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(0, routingRequest1.transferSlack);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertEquals(9223372036854775807L, routingRequest1.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(0, routingRequest1.boardSlack);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest1.maxTransfers);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertFalse(routingRequest1.showIntermediateStops);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertFalse(routingRequest1.batch);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertEquals(3, routingRequest1.numItineraries);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(1, routingRequest1.getNumItineraries());
      assertFalse(routingRequest1.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(40.0, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      long long0 = multiShortestPathTree0.getserialVersionUID();
      assertFalse(routingRequest0.equals((Object)routingRequest1));
      assertFalse(routingRequest1.equals((Object)routingRequest0));
      assertNotSame(routingRequest0, routingRequest1);
      assertNotSame(routingRequest1, routingRequest0);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertFalse(routingRequest1.arriveBy);
      assertEquals(0, routingRequest1.transferPenalty);
      assertEquals(0, routingRequest1.alightSlack);
      assertFalse(routingRequest1.reverseOptimizing);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertFalse(routingRequest1.walkingBike);
      assertFalse(routingRequest1.kissAndRide);
      assertTrue(routingRequest1.softWalkLimiting);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(0, routingRequest1.transferSlack);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertEquals(9223372036854775807L, routingRequest1.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(0, routingRequest1.boardSlack);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest1.maxTransfers);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertFalse(routingRequest1.showIntermediateStops);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertFalse(routingRequest1.batch);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertEquals(3, routingRequest1.numItineraries);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(1, routingRequest1.getNumItineraries());
      assertFalse(routingRequest1.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(40.0, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals((-1000000L), long0);
      
      String string0 = multiShortestPathTree0.toString();
      assertFalse(routingRequest0.equals((Object)routingRequest1));
      assertFalse(routingRequest1.equals((Object)routingRequest0));
      assertNotSame(routingRequest0, routingRequest1);
      assertNotSame(routingRequest1, routingRequest0);
      assertNotNull(string0);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertFalse(routingRequest1.arriveBy);
      assertEquals(0, routingRequest1.transferPenalty);
      assertEquals(0, routingRequest1.alightSlack);
      assertFalse(routingRequest1.reverseOptimizing);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertFalse(routingRequest1.walkingBike);
      assertFalse(routingRequest1.kissAndRide);
      assertTrue(routingRequest1.softWalkLimiting);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(0, routingRequest1.transferSlack);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertEquals(9223372036854775807L, routingRequest1.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(0, routingRequest1.boardSlack);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest1.maxTransfers);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertFalse(routingRequest1.showIntermediateStops);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertFalse(routingRequest1.batch);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertEquals(3, routingRequest1.numItineraries);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(1, routingRequest1.getNumItineraries());
      assertFalse(routingRequest1.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(40.0, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals("MultiSPT(0 vertices)", string0);
      
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      assertFalse(routingRequest0.equals((Object)routingRequest1));
      assertFalse(routingRequest1.equals((Object)routingRequest0));
      assertNotSame(routingRequest0, routingRequest1);
      assertNotSame(routingRequest1, routingRequest0);
      assertNotNull(set0);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertFalse(routingRequest1.arriveBy);
      assertEquals(0, routingRequest1.transferPenalty);
      assertEquals(0, routingRequest1.alightSlack);
      assertFalse(routingRequest1.reverseOptimizing);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertFalse(routingRequest1.walkingBike);
      assertFalse(routingRequest1.kissAndRide);
      assertTrue(routingRequest1.softWalkLimiting);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(0, routingRequest1.transferSlack);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertEquals(9223372036854775807L, routingRequest1.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(0, routingRequest1.boardSlack);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest1.maxTransfers);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertFalse(routingRequest1.showIntermediateStops);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertFalse(routingRequest1.batch);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertEquals(3, routingRequest1.numItineraries);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(1, routingRequest1.getNumItineraries());
      assertFalse(routingRequest1.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(40.0, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      double double1 = multiShortestPathTree0.getTIME_EPSILON();
      assertFalse(routingRequest0.equals((Object)routingRequest1));
      assertFalse(routingRequest1.equals((Object)routingRequest0));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(routingRequest0, routingRequest1);
      assertNotSame(routingRequest1, routingRequest0);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertFalse(routingRequest1.arriveBy);
      assertEquals(0, routingRequest1.transferPenalty);
      assertEquals(0, routingRequest1.alightSlack);
      assertFalse(routingRequest1.reverseOptimizing);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertFalse(routingRequest1.walkingBike);
      assertFalse(routingRequest1.kissAndRide);
      assertTrue(routingRequest1.softWalkLimiting);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(0, routingRequest1.transferSlack);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertEquals(9223372036854775807L, routingRequest1.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(0, routingRequest1.boardSlack);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest1.maxTransfers);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertFalse(routingRequest1.showIntermediateStops);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertFalse(routingRequest1.batch);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertEquals(3, routingRequest1.numItineraries);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(1, routingRequest1.getNumItineraries());
      assertFalse(routingRequest1.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(40.0, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.02, double1, 0.01);
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      ArrayList<TraverseMode> arrayList0 = new ArrayList<TraverseMode>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      TraverseModeSet traverseModeSet0 = new TraverseModeSet(arrayList0);
      assertNotNull(traverseModeSet0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(traverseModeSet0.getCustomMotorVehicle());
      assertFalse(traverseModeSet0.getBicycle());
      assertFalse(traverseModeSet0.getBus());
      assertFalse(traverseModeSet0.getFerry());
      assertFalse(traverseModeSet0.getDriving());
      assertFalse(traverseModeSet0.getRail());
      assertFalse(traverseModeSet0.getCableCar());
      assertFalse(traverseModeSet0.getSubway());
      assertEquals(0, traverseModeSet0.getMask());
      assertFalse(traverseModeSet0.getTraininsh());
      assertFalse(traverseModeSet0.getCar());
      assertFalse(traverseModeSet0.isValid());
      assertFalse(traverseModeSet0.getGondola());
      assertFalse(traverseModeSet0.getFunicular());
      assertFalse(traverseModeSet0.getTram());
      assertFalse(traverseModeSet0.getBusish());
      assertFalse(traverseModeSet0.getWalk());
      assertFalse(traverseModeSet0.isTransit());
      assertFalse(traverseModeSet0.getTrainish());
      
      RoutingRequest routingRequest0 = new RoutingRequest(traverseModeSet0);
      assertNotNull(routingRequest0);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(traverseModeSet0.getCustomMotorVehicle());
      assertFalse(traverseModeSet0.getBicycle());
      assertFalse(traverseModeSet0.getBus());
      assertFalse(traverseModeSet0.getFerry());
      assertFalse(traverseModeSet0.getDriving());
      assertFalse(traverseModeSet0.getRail());
      assertFalse(traverseModeSet0.getCableCar());
      assertFalse(traverseModeSet0.getSubway());
      assertEquals(0, traverseModeSet0.getMask());
      assertFalse(traverseModeSet0.getTraininsh());
      assertFalse(traverseModeSet0.getCar());
      assertFalse(traverseModeSet0.isValid());
      assertFalse(traverseModeSet0.getGondola());
      assertFalse(traverseModeSet0.getFunicular());
      assertFalse(traverseModeSet0.getTram());
      assertFalse(traverseModeSet0.getBusish());
      assertFalse(traverseModeSet0.getWalk());
      assertFalse(traverseModeSet0.isTransit());
      assertFalse(traverseModeSet0.getTrainish());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertNotNull(multiShortestPathTree0);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(traverseModeSet0.getCustomMotorVehicle());
      assertFalse(traverseModeSet0.getBicycle());
      assertFalse(traverseModeSet0.getBus());
      assertFalse(traverseModeSet0.getFerry());
      assertFalse(traverseModeSet0.getDriving());
      assertFalse(traverseModeSet0.getRail());
      assertFalse(traverseModeSet0.getCableCar());
      assertFalse(traverseModeSet0.getSubway());
      assertEquals(0, traverseModeSet0.getMask());
      assertFalse(traverseModeSet0.getTraininsh());
      assertFalse(traverseModeSet0.getCar());
      assertFalse(traverseModeSet0.isValid());
      assertFalse(traverseModeSet0.getGondola());
      assertFalse(traverseModeSet0.getFunicular());
      assertFalse(traverseModeSet0.getTram());
      assertFalse(traverseModeSet0.getBusish());
      assertFalse(traverseModeSet0.getWalk());
      assertFalse(traverseModeSet0.isTransit());
      assertFalse(traverseModeSet0.getTrainish());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      
      State state0 = null;
      // Undeclared exception!
      try { 
        multiShortestPathTree0.add(state0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.FERRY;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      assertNotNull(routingRequest0);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.batch);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertNotNull(multiShortestPathTree0);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.batch);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      
      State state0 = null;
      // Undeclared exception!
      try { 
        multiShortestPathTree0.add(state0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      RoutingRequest routingRequest0 = null;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertNotNull(multiShortestPathTree0);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      
      String string0 = multiShortestPathTree0.toString();
      assertNotNull(string0);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals("MultiSPT(0 vertices)", string0);
      
      long long0 = multiShortestPathTree0.getserialVersionUID();
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals((-1000000L), long0);
      
      Vertex vertex0 = null;
      List<State> list0 = multiShortestPathTree0.getStates(vertex0);
      assertNull(list0);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      
      long long1 = multiShortestPathTree0.getserialVersionUID();
      assertTrue(long1 == long0);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals((-1000000L), long1);
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      RoutingRequest routingRequest0 = null;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertNotNull(multiShortestPathTree0);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      assertNotNull(collection0);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      
      Map<Vertex, List<State>> map0 = null;
      multiShortestPathTree0.stateSets = map0;
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      
      // Undeclared exception!
      try { 
        multiShortestPathTree0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.TRAINISH;
      State state0 = null;
      // Undeclared exception!
      try { 
        MultiShortestPathTree.dominates(state0, state0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      State state0 = serializedObjectSupporter0.deserializeObjectState1403();
      assertNull(state0);
      
      // Undeclared exception!
      try { 
        MultiShortestPathTree.dominates(state0, state0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.TRAINISH;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      assertNotNull(routingRequest0);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      
      String string0 = "PTL&U4`^h\"j*";
      RouteMatcher routeMatcher0 = routingRequest0.unpreferredRoutes;
      assertNotNull(routeMatcher0);
      
      routingRequest0.bannedRoutes = routeMatcher0;
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertNotNull(multiShortestPathTree0);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      assertNotNull(collection0);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      
      Map<Vertex, List<State>> map0 = multiShortestPathTree0.getstateSets();
      assertNotNull(map0);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.WALK;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      assertNotNull(routingRequest0);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertNotNull(multiShortestPathTree0);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      
      String string0 = multiShortestPathTree0.toString();
      assertNotNull(string0);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals("MultiSPT(0 vertices)", string0);
      
      String string1 = multiShortestPathTree0.toString();
      assertTrue(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals("MultiSPT(0 vertices)", string1);
      
      int int0 = multiShortestPathTree0.getWEIGHT_DIFF_MARGIN();
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(30, int0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(string0));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      routingRequest0.bannedAgencies = (HashSet<String>) linkedHashSet0;
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, routingRequest0.bannedAgencies.size());
      assertTrue(routingRequest0.bannedAgencies.isEmpty());
      
      double double0 = multiShortestPathTree0.getWEIGHT_EPSILON();
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(0.02, double0, 0.01);
      
      int int1 = multiShortestPathTree0.getVertexCount();
      assertFalse(int1 == int0);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(0, int1);
      
      Map<Vertex, List<State>> map0 = multiShortestPathTree0.getstateSets();
      assertNotNull(map0);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      multiShortestPathTree0.setstateSets(map0);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      String string2 = multiShortestPathTree0.toString();
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotNull(string2);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals("MultiSPT(0 vertices)", string2);
      
      int int2 = multiShortestPathTree0.getTIME_DIFF_MARGIN();
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(30, int2);
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      TraverseMode traverseMode0 = TraverseMode.FERRY;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      assertNotNull(routingRequest0);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertNotNull(multiShortestPathTree0);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      IntersectionVertex intersectionVertex0 = serializedObjectSupporter0.deserializeObjectVertex28();
      assertNotNull(intersectionVertex0);
      assertFalse(intersectionVertex0.freeFlowing);
      assertTrue(intersectionVertex0.trafficLight);
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(40.723423, intersectionVertex0.getY(), 0.01);
      assertTrue(intersectionVertex0.gettrafficLight());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(1L, intersectionVertex0.getserialVersionUID());
      assertFalse(intersectionVertex0.getfreeFlowing());
      assertEquals("osm:node:42442269", intersectionVertex0.getLabel());
      assertEquals((-73.999609), intersectionVertex0.getLon(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals(40.723423, intersectionVertex0.getLat(), 0.01);
      assertEquals((-73.999609), intersectionVertex0.getX(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals("osm:node:42442269", intersectionVertex0.getName());
      
      State state0 = multiShortestPathTree0.getState(intersectionVertex0);
      assertNull(state0);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertFalse(intersectionVertex0.freeFlowing);
      assertTrue(intersectionVertex0.trafficLight);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(40.723423, intersectionVertex0.getY(), 0.01);
      assertTrue(intersectionVertex0.gettrafficLight());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(1L, intersectionVertex0.getserialVersionUID());
      assertFalse(intersectionVertex0.getfreeFlowing());
      assertEquals("osm:node:42442269", intersectionVertex0.getLabel());
      assertEquals((-73.999609), intersectionVertex0.getLon(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals(40.723423, intersectionVertex0.getLat(), 0.01);
      assertEquals((-73.999609), intersectionVertex0.getX(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals("osm:node:42442269", intersectionVertex0.getName());
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      TraverseModeSet traverseModeSet0 = TraverseModeSet.allModes();
      assertNotNull(traverseModeSet0);
      assertTrue(traverseModeSet0.isTransit());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.getRail());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertEquals(8183, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getSubway());
      assertTrue(traverseModeSet0.getBicycle());
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getCableCar());
      
      RoutingRequest routingRequest0 = new RoutingRequest(traverseModeSet0);
      assertNotNull(routingRequest0);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertTrue(traverseModeSet0.isTransit());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.getRail());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertEquals(8183, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getSubway());
      assertTrue(traverseModeSet0.getBicycle());
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getCableCar());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      
      RoutingRequest routingRequest1 = routingRequest0.reversedClone();
      assertFalse(routingRequest1.equals((Object)routingRequest0));
      assertNotSame(routingRequest0, routingRequest1);
      assertNotSame(routingRequest1, routingRequest0);
      assertNotNull(routingRequest1);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest1.parkAndRide);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest1.transferSlack);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertTrue(routingRequest1.arriveBy);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertTrue(routingRequest1.softWalkLimiting);
      assertFalse(routingRequest1.walkingBike);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertEquals(0, routingRequest1.transferPenalty);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest1.worstTime);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertEquals(2, routingRequest1.maxTransfers);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest1.boardSlack);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertFalse(routingRequest1.kissAndRide);
      assertEquals(3, routingRequest1.numItineraries);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertFalse(routingRequest1.batch);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest1.driveOnRight);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest1.alightSlack);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertFalse(routingRequest1.showIntermediateStops);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertTrue(routingRequest1.reverseOptimizing);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertTrue(traverseModeSet0.isTransit());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.getRail());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertEquals(8183, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getSubway());
      assertTrue(traverseModeSet0.getBicycle());
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getCableCar());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(3, routingRequest1.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(40.0, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest1.transitAllowed());
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      
      RoutingRequest routingRequest2 = routingRequest0.reversedClone();
      assertFalse(routingRequest0.equals((Object)routingRequest1));
      assertTrue(routingRequest2.equals((Object)routingRequest1));
      assertFalse(routingRequest2.equals((Object)routingRequest0));
      assertNotSame(routingRequest0, routingRequest2);
      assertNotSame(routingRequest0, routingRequest1);
      assertNotSame(routingRequest2, routingRequest1);
      assertNotSame(routingRequest2, routingRequest0);
      assertNotNull(routingRequest2);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest2.transferSlack);
      assertEquals(0L, routingRequest2.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest2.dateTime);
      assertFalse(routingRequest2.parkAndRide);
      assertFalse(routingRequest2.allowBikeRental);
      assertFalse(routingRequest2.walkingBike);
      assertEquals(600, routingRequest2.walkBoardCost);
      assertTrue(routingRequest2.driveOnRight);
      assertEquals(1.0, routingRequest2.turnReluctance, 0.01);
      assertEquals(1.33, routingRequest2.walkSpeed, 0.01);
      assertTrue(routingRequest2.softWalkLimiting);
      assertEquals(300.0, routingRequest2.preTransitPenalty, 0.01);
      assertFalse(routingRequest2.disableRemainingWeightHeuristic);
      assertTrue(routingRequest2.arriveBy);
      assertEquals(300, routingRequest2.useUnpreferredRoutesPenalty);
      assertEquals(2, routingRequest2.maxTransfers);
      assertEquals(20, routingRequest2.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest2.maxSlope, 0.01);
      assertEquals(1.0, routingRequest2.heuristicWeight, 0.01);
      assertEquals(600, routingRequest2.bikeBoardCost);
      assertEquals(20, routingRequest2.elevatorHopTime);
      assertEquals(0, routingRequest2.bikeSwitchTime);
      assertEquals(30, routingRequest2.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest2.waitReluctance, 0.01);
      assertEquals(0, routingRequest2.boardSlack);
      assertFalse(routingRequest2.wheelchairAccessible);
      assertFalse(routingRequest2.ignoreRealtimeUpdates);
      assertEquals(300, routingRequest2.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest2.bikeSwitchCost);
      assertEquals(30, routingRequest2.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest2.maxPreTransitTime);
      assertEquals(2.9, routingRequest2.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest2.maxWeight, 0.01);
      assertEquals(120, routingRequest2.carDropoffTime);
      assertEquals(40.0, routingRequest2.carSpeed, 0.01);
      assertFalse(routingRequest2.intermediatePlacesOrdered);
      assertEquals(90, routingRequest2.elevatorBoardTime);
      assertFalse(routingRequest2.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest2.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest2.stairsReluctance, 0.01);
      assertEquals(90, routingRequest2.elevatorBoardCost);
      assertEquals(5.0, routingRequest2.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest2.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest2.nonpreferredTransferPenalty);
      assertFalse(routingRequest2.kissAndRide);
      assertEquals(3, routingRequest2.numItineraries);
      assertEquals(2.0, routingRequest2.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest2.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest2.batch);
      assertEquals(0L, routingRequest2.clampInitialWait);
      assertTrue(routingRequest2.softPreTransitLimiting);
      assertEquals(60, routingRequest2.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest2.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest2.alightSlack);
      assertTrue(routingRequest2.reverseOptimizing);
      assertEquals(0, routingRequest2.transferPenalty);
      assertFalse(routingRequest2.showIntermediateStops);
      assertEquals(120, routingRequest2.bikeRentalPickupCost);
      assertEquals(0.0, routingRequest2.triangleSafetyFactor, 0.01);
      assertEquals(0.2, routingRequest2.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest2.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest2.softWalkPenalty, 0.01);
      assertFalse(routingRequest2.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest2.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest2.preTransitOverageRate, 0.01);
      assertTrue(traverseModeSet0.isTransit());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.getRail());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertEquals(8183, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getSubway());
      assertTrue(traverseModeSet0.getBicycle());
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getCableCar());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(40.0, routingRequest2.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest2.transitAllowed());
      assertEquals(600, routingRequest2.getBoardCostLowerBound());
      assertFalse(routingRequest2.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest2.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest2.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest2.getSecondsSinceEpoch());
      assertEquals(3, routingRequest2.getNumItineraries());
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest2);
      assertFalse(routingRequest0.equals((Object)routingRequest2));
      assertFalse(routingRequest0.equals((Object)routingRequest1));
      assertTrue(routingRequest2.equals((Object)routingRequest1));
      assertFalse(routingRequest2.equals((Object)routingRequest0));
      assertNotNull(multiShortestPathTree0);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest2.transferSlack);
      assertEquals(0L, routingRequest2.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest2.dateTime);
      assertFalse(routingRequest2.parkAndRide);
      assertFalse(routingRequest2.allowBikeRental);
      assertFalse(routingRequest2.walkingBike);
      assertEquals(600, routingRequest2.walkBoardCost);
      assertTrue(routingRequest2.driveOnRight);
      assertEquals(1.0, routingRequest2.turnReluctance, 0.01);
      assertEquals(1.33, routingRequest2.walkSpeed, 0.01);
      assertTrue(routingRequest2.softWalkLimiting);
      assertEquals(300.0, routingRequest2.preTransitPenalty, 0.01);
      assertFalse(routingRequest2.disableRemainingWeightHeuristic);
      assertTrue(routingRequest2.arriveBy);
      assertEquals(300, routingRequest2.useUnpreferredRoutesPenalty);
      assertEquals(2, routingRequest2.maxTransfers);
      assertEquals(20, routingRequest2.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest2.maxSlope, 0.01);
      assertEquals(1.0, routingRequest2.heuristicWeight, 0.01);
      assertEquals(600, routingRequest2.bikeBoardCost);
      assertEquals(20, routingRequest2.elevatorHopTime);
      assertEquals(0, routingRequest2.bikeSwitchTime);
      assertEquals(30, routingRequest2.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest2.waitReluctance, 0.01);
      assertEquals(0, routingRequest2.boardSlack);
      assertFalse(routingRequest2.wheelchairAccessible);
      assertFalse(routingRequest2.ignoreRealtimeUpdates);
      assertEquals(300, routingRequest2.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest2.bikeSwitchCost);
      assertEquals(30, routingRequest2.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest2.maxPreTransitTime);
      assertEquals(2.9, routingRequest2.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest2.maxWeight, 0.01);
      assertEquals(120, routingRequest2.carDropoffTime);
      assertEquals(40.0, routingRequest2.carSpeed, 0.01);
      assertFalse(routingRequest2.intermediatePlacesOrdered);
      assertEquals(90, routingRequest2.elevatorBoardTime);
      assertFalse(routingRequest2.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest2.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest2.stairsReluctance, 0.01);
      assertEquals(90, routingRequest2.elevatorBoardCost);
      assertEquals(5.0, routingRequest2.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest2.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest2.nonpreferredTransferPenalty);
      assertFalse(routingRequest2.kissAndRide);
      assertEquals(3, routingRequest2.numItineraries);
      assertEquals(2.0, routingRequest2.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest2.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest2.batch);
      assertEquals(0L, routingRequest2.clampInitialWait);
      assertTrue(routingRequest2.softPreTransitLimiting);
      assertEquals(60, routingRequest2.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest2.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest2.alightSlack);
      assertTrue(routingRequest2.reverseOptimizing);
      assertEquals(0, routingRequest2.transferPenalty);
      assertFalse(routingRequest2.showIntermediateStops);
      assertEquals(120, routingRequest2.bikeRentalPickupCost);
      assertEquals(0.0, routingRequest2.triangleSafetyFactor, 0.01);
      assertEquals(0.2, routingRequest2.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest2.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest2.softWalkPenalty, 0.01);
      assertFalse(routingRequest2.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest2.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest2.preTransitOverageRate, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertTrue(traverseModeSet0.isTransit());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.getRail());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertEquals(8183, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getSubway());
      assertTrue(traverseModeSet0.getBicycle());
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getCableCar());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(40.0, routingRequest2.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest2.transitAllowed());
      assertEquals(600, routingRequest2.getBoardCostLowerBound());
      assertFalse(routingRequest2.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest2.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest2.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest2.getSecondsSinceEpoch());
      assertEquals(3, routingRequest2.getNumItineraries());
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      
      Map<Vertex, List<State>> map0 = null;
      multiShortestPathTree0.setstateSets(map0);
      assertFalse(routingRequest0.equals((Object)routingRequest2));
      assertFalse(routingRequest0.equals((Object)routingRequest1));
      assertTrue(routingRequest2.equals((Object)routingRequest1));
      assertFalse(routingRequest2.equals((Object)routingRequest0));
      assertNotSame(routingRequest0, routingRequest2);
      assertNotSame(routingRequest0, routingRequest1);
      assertNotSame(routingRequest2, routingRequest1);
      assertNotSame(routingRequest2, routingRequest0);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest2.transferSlack);
      assertEquals(0L, routingRequest2.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest2.dateTime);
      assertFalse(routingRequest2.parkAndRide);
      assertFalse(routingRequest2.allowBikeRental);
      assertFalse(routingRequest2.walkingBike);
      assertEquals(600, routingRequest2.walkBoardCost);
      assertTrue(routingRequest2.driveOnRight);
      assertEquals(1.0, routingRequest2.turnReluctance, 0.01);
      assertEquals(1.33, routingRequest2.walkSpeed, 0.01);
      assertTrue(routingRequest2.softWalkLimiting);
      assertEquals(300.0, routingRequest2.preTransitPenalty, 0.01);
      assertFalse(routingRequest2.disableRemainingWeightHeuristic);
      assertTrue(routingRequest2.arriveBy);
      assertEquals(300, routingRequest2.useUnpreferredRoutesPenalty);
      assertEquals(2, routingRequest2.maxTransfers);
      assertEquals(20, routingRequest2.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest2.maxSlope, 0.01);
      assertEquals(1.0, routingRequest2.heuristicWeight, 0.01);
      assertEquals(600, routingRequest2.bikeBoardCost);
      assertEquals(20, routingRequest2.elevatorHopTime);
      assertEquals(0, routingRequest2.bikeSwitchTime);
      assertEquals(30, routingRequest2.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest2.waitReluctance, 0.01);
      assertEquals(0, routingRequest2.boardSlack);
      assertFalse(routingRequest2.wheelchairAccessible);
      assertFalse(routingRequest2.ignoreRealtimeUpdates);
      assertEquals(300, routingRequest2.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest2.bikeSwitchCost);
      assertEquals(30, routingRequest2.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest2.maxPreTransitTime);
      assertEquals(2.9, routingRequest2.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest2.maxWeight, 0.01);
      assertEquals(120, routingRequest2.carDropoffTime);
      assertEquals(40.0, routingRequest2.carSpeed, 0.01);
      assertFalse(routingRequest2.intermediatePlacesOrdered);
      assertEquals(90, routingRequest2.elevatorBoardTime);
      assertFalse(routingRequest2.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest2.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest2.stairsReluctance, 0.01);
      assertEquals(90, routingRequest2.elevatorBoardCost);
      assertEquals(5.0, routingRequest2.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest2.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest2.nonpreferredTransferPenalty);
      assertFalse(routingRequest2.kissAndRide);
      assertEquals(3, routingRequest2.numItineraries);
      assertEquals(2.0, routingRequest2.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest2.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest2.batch);
      assertEquals(0L, routingRequest2.clampInitialWait);
      assertTrue(routingRequest2.softPreTransitLimiting);
      assertEquals(60, routingRequest2.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest2.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest2.alightSlack);
      assertTrue(routingRequest2.reverseOptimizing);
      assertEquals(0, routingRequest2.transferPenalty);
      assertFalse(routingRequest2.showIntermediateStops);
      assertEquals(120, routingRequest2.bikeRentalPickupCost);
      assertEquals(0.0, routingRequest2.triangleSafetyFactor, 0.01);
      assertEquals(0.2, routingRequest2.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest2.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest2.softWalkPenalty, 0.01);
      assertFalse(routingRequest2.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest2.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest2.preTransitOverageRate, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertTrue(traverseModeSet0.isTransit());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.getRail());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertEquals(8183, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getSubway());
      assertTrue(traverseModeSet0.getBicycle());
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getCableCar());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(40.0, routingRequest2.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest2.transitAllowed());
      assertEquals(600, routingRequest2.getBoardCostLowerBound());
      assertFalse(routingRequest2.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest2.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest2.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest2.getSecondsSinceEpoch());
      assertEquals(3, routingRequest2.getNumItineraries());
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      
      double double0 = multiShortestPathTree0.getWEIGHT_EPSILON();
      assertFalse(routingRequest0.equals((Object)routingRequest2));
      assertFalse(routingRequest0.equals((Object)routingRequest1));
      assertTrue(routingRequest2.equals((Object)routingRequest1));
      assertFalse(routingRequest2.equals((Object)routingRequest0));
      assertNotSame(routingRequest0, routingRequest2);
      assertNotSame(routingRequest0, routingRequest1);
      assertNotSame(routingRequest2, routingRequest1);
      assertNotSame(routingRequest2, routingRequest0);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest2.transferSlack);
      assertEquals(0L, routingRequest2.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest2.dateTime);
      assertFalse(routingRequest2.parkAndRide);
      assertFalse(routingRequest2.allowBikeRental);
      assertFalse(routingRequest2.walkingBike);
      assertEquals(600, routingRequest2.walkBoardCost);
      assertTrue(routingRequest2.driveOnRight);
      assertEquals(1.0, routingRequest2.turnReluctance, 0.01);
      assertEquals(1.33, routingRequest2.walkSpeed, 0.01);
      assertTrue(routingRequest2.softWalkLimiting);
      assertEquals(300.0, routingRequest2.preTransitPenalty, 0.01);
      assertFalse(routingRequest2.disableRemainingWeightHeuristic);
      assertTrue(routingRequest2.arriveBy);
      assertEquals(300, routingRequest2.useUnpreferredRoutesPenalty);
      assertEquals(2, routingRequest2.maxTransfers);
      assertEquals(20, routingRequest2.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest2.maxSlope, 0.01);
      assertEquals(1.0, routingRequest2.heuristicWeight, 0.01);
      assertEquals(600, routingRequest2.bikeBoardCost);
      assertEquals(20, routingRequest2.elevatorHopTime);
      assertEquals(0, routingRequest2.bikeSwitchTime);
      assertEquals(30, routingRequest2.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest2.waitReluctance, 0.01);
      assertEquals(0, routingRequest2.boardSlack);
      assertFalse(routingRequest2.wheelchairAccessible);
      assertFalse(routingRequest2.ignoreRealtimeUpdates);
      assertEquals(300, routingRequest2.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest2.bikeSwitchCost);
      assertEquals(30, routingRequest2.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest2.maxPreTransitTime);
      assertEquals(2.9, routingRequest2.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest2.maxWeight, 0.01);
      assertEquals(120, routingRequest2.carDropoffTime);
      assertEquals(40.0, routingRequest2.carSpeed, 0.01);
      assertFalse(routingRequest2.intermediatePlacesOrdered);
      assertEquals(90, routingRequest2.elevatorBoardTime);
      assertFalse(routingRequest2.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest2.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest2.stairsReluctance, 0.01);
      assertEquals(90, routingRequest2.elevatorBoardCost);
      assertEquals(5.0, routingRequest2.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest2.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest2.nonpreferredTransferPenalty);
      assertFalse(routingRequest2.kissAndRide);
      assertEquals(3, routingRequest2.numItineraries);
      assertEquals(2.0, routingRequest2.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest2.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest2.batch);
      assertEquals(0L, routingRequest2.clampInitialWait);
      assertTrue(routingRequest2.softPreTransitLimiting);
      assertEquals(60, routingRequest2.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest2.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest2.alightSlack);
      assertTrue(routingRequest2.reverseOptimizing);
      assertEquals(0, routingRequest2.transferPenalty);
      assertFalse(routingRequest2.showIntermediateStops);
      assertEquals(120, routingRequest2.bikeRentalPickupCost);
      assertEquals(0.0, routingRequest2.triangleSafetyFactor, 0.01);
      assertEquals(0.2, routingRequest2.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest2.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest2.softWalkPenalty, 0.01);
      assertFalse(routingRequest2.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest2.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest2.preTransitOverageRate, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertTrue(traverseModeSet0.isTransit());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.getRail());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertEquals(8183, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getSubway());
      assertTrue(traverseModeSet0.getBicycle());
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getCableCar());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(40.0, routingRequest2.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest2.transitAllowed());
      assertEquals(600, routingRequest2.getBoardCostLowerBound());
      assertFalse(routingRequest2.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest2.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest2.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest2.getSecondsSinceEpoch());
      assertEquals(3, routingRequest2.getNumItineraries());
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.02, double0, 0.01);
      
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getVertexCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      RoutingRequest routingRequest0 = new RoutingRequest();
      assertNotNull(routingRequest0);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.batch);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      
      AgencyAndId agencyAndId0 = null;
      routingRequest0.banTrip(agencyAndId0);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.batch);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      
      boolean boolean0 = false;
      routingRequest0.bikeParkAndRide = boolean0;
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertNotNull(multiShortestPathTree0);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.batch);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      
      Map<Vertex, List<State>> map0 = multiShortestPathTree0.getstateSets();
      assertNotNull(map0);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.batch);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      multiShortestPathTree0.setstateSets(map0);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.batch);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      routingRequest0.elevatorBoardCost = multiShortestPathTree0.WEIGHT_DIFF_MARGIN;
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      
      multiShortestPathTree0.setstateSets(map0);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.batch);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      TreeMap<Vertex, List<State>> treeMap0 = new TreeMap<Vertex, List<State>>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      multiShortestPathTree0.stateSets = (Map<Vertex, List<State>>) treeMap0;
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(0, treeMap0.size());
      assertTrue(multiShortestPathTree0.stateSets.isEmpty());
      assertEquals(0, multiShortestPathTree0.stateSets.size());
      
      int int0 = multiShortestPathTree0.getWEIGHT_DIFF_MARGIN();
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.batch);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(30, int0);
      
      String string0 = multiShortestPathTree0.toString();
      assertNotNull(string0);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.batch);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals("MultiSPT(0 vertices)", string0);
      
      System.setCurrentTimeMillis(routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.batch);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      
      routingRequest0.maxWeight = (double) multiShortestPathTree0.WEIGHT_DIFF_MARGIN;
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      
      int int1 = multiShortestPathTree0.getTIME_DIFF_MARGIN();
      assertTrue(int1 == int0);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(30.0, routingRequest0.maxWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.batch);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(30, int1);
      
      double double0 = multiShortestPathTree0.getWEIGHT_EPSILON();
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(30.0, routingRequest0.maxWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.batch);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(0.02, double0, 0.01);
      
      double double1 = multiShortestPathTree0.getWEIGHT_EPSILON();
      assertEquals(double1, double0, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(30.0, routingRequest0.maxWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.batch);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(0.02, double1, 0.01);
      
      String string1 = multiShortestPathTree0.toString();
      assertTrue(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(30.0, routingRequest0.maxWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.batch);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals("MultiSPT(0 vertices)", string1);
      
      double double2 = multiShortestPathTree0.getWALK_DIST_EPSILON();
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(30.0, routingRequest0.maxWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.batch);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(0.05, double2, 0.01);
      
      routingRequest0.setWalkReluctance(multiShortestPathTree0.WEIGHT_EPSILON);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.02, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(30.0, routingRequest0.maxWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.batch);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      
      double double3 = multiShortestPathTree0.getTIME_EPSILON();
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.02, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(30.0, routingRequest0.maxWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.batch);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(0.02, double3, 0.01);
      
      double double4 = multiShortestPathTree0.getWALK_DIST_EPSILON();
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertEquals(double4, double2, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.02, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(30.0, routingRequest0.maxWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.batch);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(0.05, double4, 0.01);
      
      State state0 = null;
      Graph graph0 = new Graph();
      assertNotNull(graph0);
      assertEquals(0, graph0.countVertices());
      
      int int2 = (-1198);
      Vertex vertex0 = graph0.getVertexById(int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertNull(vertex0);
      assertEquals(0, graph0.countVertices());
      
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getState(vertex0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      RoutingRequest routingRequest0 = null;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertNotNull(multiShortestPathTree0);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      
      TreeMap<Vertex, List<State>> treeMap0 = new TreeMap<Vertex, List<State>>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      multiShortestPathTree0.setstateSets(treeMap0);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(0, treeMap0.size());
      
      String string0 = multiShortestPathTree0.toString();
      assertNotNull(string0);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals("MultiSPT(0 vertices)", string0);
      
      long long0 = multiShortestPathTree0.getserialVersionUID();
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals((-1000000L), long0);
      
      Vertex vertex0 = null;
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getStates(vertex0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.GONDOLA;
      OptimizeType optimizeType0 = OptimizeType.TRIANGLE;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0, optimizeType0);
      assertNotNull(routingRequest0);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertNotNull(multiShortestPathTree0);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.02, MultiShortestPathTree.TIME_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.WEIGHT_DIFF_MARGIN);
      assertEquals(0.02, MultiShortestPathTree.WEIGHT_EPSILON, 0.01);
      assertEquals(0.05, MultiShortestPathTree.WALK_DIST_EPSILON, 0.01);
      assertEquals(30, MultiShortestPathTree.TIME_DIFF_MARGIN);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      
      Map<Vertex, List<State>> map0 = null;
      multiShortestPathTree0.stateSets = map0;
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals((-1000000L), multiShortestPathTree0.getserialVersionUID());
      assertEquals(0.02, multiShortestPathTree0.getWEIGHT_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getWEIGHT_DIFF_MARGIN());
      assertEquals(0.02, multiShortestPathTree0.getTIME_EPSILON(), 0.01);
      assertEquals(0.05, multiShortestPathTree0.getWALK_DIST_EPSILON(), 0.01);
      assertEquals(30, multiShortestPathTree0.getTIME_DIFF_MARGIN());
      
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getAllStates();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }
}
