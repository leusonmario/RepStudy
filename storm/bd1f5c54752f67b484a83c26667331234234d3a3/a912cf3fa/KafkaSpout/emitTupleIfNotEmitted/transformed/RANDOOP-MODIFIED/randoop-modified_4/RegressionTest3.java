import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest3 {

    public static boolean debug = false;

    @Test
    public void test1501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1501");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        java.lang.String str6 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        org.apache.kafka.common.header.Headers headers7 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        org.apache.kafka.common.header.Headers headers8 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        long long9 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        int int10 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedKeySize();
        java.lang.String str11 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        java.lang.String str12 = kafkaSpoutMessageIdComparatorConsumerRecord5.toString();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(headers7);
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test1502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1502");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>();
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService1 = null;
        genericDeclarationKafkaSpout0.retryService = kafkaSpoutRetryService1;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray3 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet4 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet4, kafkaSpoutMessageIdArray3);
        genericDeclarationKafkaSpout0.emitted = kafkaSpoutMessageIdSet4;
        genericDeclarationKafkaSpout0.maxRetries = '#';
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpoutConfig9 = genericDeclarationKafkaSpout0.kafkaSpoutConfig;
        org.apache.kafka.common.TopicPartition topicPartition10 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection11 = genericDeclarationKafkaSpout0.toArrayList(topicPartition10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.kafka.clients.consumer.ConsumerRecords<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationConsumerRecords12 = genericDeclarationKafkaSpout0.pollKafkaBroker();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(genericDeclarationKafkaSpoutConfig9);
        org.junit.Assert.assertNotNull(topicPartitionCollection11);
    }

    @Test
    public void test1503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1503");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.topology.base.BaseComponent, java.util.ArrayList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> baseComponentKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.base.BaseComponent, java.util.ArrayList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> baseComponentKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.base.BaseComponent, java.util.ArrayList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>(baseComponentKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1504");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.util.Set<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.reflect.AnnotatedElement> kafkaSpoutMessageIdSetKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.util.Set<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.reflect.AnnotatedElement> kafkaSpoutMessageIdSetKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<java.util.Set<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.reflect.AnnotatedElement>(kafkaSpoutMessageIdSetKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1505");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.lang.String, org.apache.kafka.common.record.TimestampType>.KafkaSpoutConsumerRebalanceListener kafkaSpoutConsumerRebalanceListener1 = kafkaSpout0.new KafkaSpoutConsumerRebalanceListener();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$KafkaSpoutConsumerRebalanceListener with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1506");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        java.lang.String str6 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        org.apache.kafka.common.header.Headers headers7 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        org.apache.kafka.common.header.Headers headers8 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        long long9 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        java.util.Optional<java.lang.Integer> intOptional10 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        java.lang.String str11 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        java.lang.String str12 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        org.apache.kafka.common.record.TimestampType timestampType13 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(headers7);
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test1507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1507");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator6 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (-1), (long) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator6, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator9 = offsetComparator6.reversed();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator10 = kafkaSpoutMessageIdComparator9.reversed();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator11 = kafkaSpoutMessageIdComparator10.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator19 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator19, "");
        org.apache.kafka.common.record.TimestampType timestampType22 = kafkaSpoutMessageIdComparatorConsumerRecord21.timestampType();
        int int23 = kafkaSpoutMessageIdComparatorConsumerRecord21.serializedValueSize();
        java.lang.String str24 = kafkaSpoutMessageIdComparatorConsumerRecord21.value();
        java.lang.String str25 = kafkaSpoutMessageIdComparatorConsumerRecord21.value();
        org.apache.kafka.common.record.TimestampType timestampType26 = kafkaSpoutMessageIdComparatorConsumerRecord21.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator33 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (-1), (long) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator33, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator36 = offsetComparator33.reversed();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator37 = offsetComparator33.reversed();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=null}", (int) (short) -1, (long) 0, (long) (-1), timestampType26, (long) 100, (int) (byte) 10, (int) '#', kafkaSpoutMessageIdComparator37, "KafkaSpout{acked=null, emitted=null}");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator40 = kafkaSpoutMessageIdComparator11.thenComparing(kafkaSpoutMessageIdComparator37);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator11;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=[]}", (int) 'a', 0L, kafkaSpoutMessageIdComparator11, "KafkaSpout{acked=null, emitted=[]}");
        org.apache.kafka.common.header.Headers headers44 = kafkaSpoutMessageIdComparatorConsumerRecord43.headers();
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator9);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator10);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator11);
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + timestampType26 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType26.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator36);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator37);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator40);
        org.junit.Assert.assertNotNull(headers44);
    }

    @Test
    public void test1508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1508");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.AnnotatedElement, java.lang.Comparable<java.lang.String>> annotatedElementKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.AnnotatedElement, java.lang.Comparable<java.lang.String>>();
    }

    @Test
    public void test1509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1509");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        int int6 = kafkaSpoutMessageIdComparatorConsumerRecord5.partition();
        java.util.Optional<java.lang.Integer> intOptional7 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        int int8 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        long long9 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertNotNull(intOptional7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
    }

    @Test
    public void test1510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1510");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        int int6 = kafkaSpoutMessageIdComparatorConsumerRecord5.partition();
        long long7 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        long long8 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        java.util.Optional<java.lang.Integer> intOptional9 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        long long10 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        java.lang.String str11 = kafkaSpoutMessageIdComparatorConsumerRecord5.toString();
        org.apache.kafka.common.header.Headers headers12 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        int int13 = kafkaSpoutMessageIdComparatorConsumerRecord5.partition();
        int int14 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertNotNull(intOptional9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(headers12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test1511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1511");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator7 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator7, "");
        org.apache.kafka.common.record.TimestampType timestampType10 = kafkaSpoutMessageIdComparatorConsumerRecord9.timestampType();
        int int11 = kafkaSpoutMessageIdComparatorConsumerRecord9.serializedValueSize();
        java.lang.String str12 = kafkaSpoutMessageIdComparatorConsumerRecord9.value();
        int int13 = kafkaSpoutMessageIdComparatorConsumerRecord9.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional14 = kafkaSpoutMessageIdComparatorConsumerRecord9.leaderEpoch();
        int int15 = kafkaSpoutMessageIdComparatorConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType16 = kafkaSpoutMessageIdComparatorConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType17 = kafkaSpoutMessageIdComparatorConsumerRecord9.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator24 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator24, "");
        org.apache.kafka.common.record.TimestampType timestampType27 = kafkaSpoutMessageIdComparatorConsumerRecord26.timestampType();
        int int28 = kafkaSpoutMessageIdComparatorConsumerRecord26.serializedValueSize();
        java.lang.String str29 = kafkaSpoutMessageIdComparatorConsumerRecord26.value();
        java.lang.String str30 = kafkaSpoutMessageIdComparatorConsumerRecord26.value();
        java.lang.String str31 = kafkaSpoutMessageIdComparatorConsumerRecord26.value();
        java.lang.String str32 = kafkaSpoutMessageIdComparatorConsumerRecord26.value();
        long long33 = kafkaSpoutMessageIdComparatorConsumerRecord26.timestamp();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator34 = kafkaSpoutMessageIdComparatorConsumerRecord26.key();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator45 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator45, "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (short) 100, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator45, "");
        java.util.Optional<java.lang.Integer> intOptional50 = kafkaSpoutMessageIdComparatorConsumerRecord49.leaderEpoch();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator54 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator54, "");
        java.lang.String str57 = kafkaSpoutMessageIdComparatorConsumerRecord56.topic();
        org.apache.kafka.common.header.Headers headers58 = kafkaSpoutMessageIdComparatorConsumerRecord56.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, java.lang.Iterable<org.apache.kafka.common.header.Header>> intOptionalConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, java.lang.Iterable<org.apache.kafka.common.header.Header>>("hi!", (int) (short) 100, (-1L), intOptional50, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers58);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=null}", 32, 10L, (long) 100, timestampType17, (java.lang.Long) (-1L), 52, (int) (short) 0, kafkaSpoutMessageIdComparator34, "ConsumerRecord(topic = KafkaSpout{acked=null, emitted=null}, partition = -1, leaderEpoch = null, offset = 97, NoTimestampType = 32, serialized key size = 100, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = )", headers58);
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(intOptional14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType27 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType27.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator34);
        org.junit.Assert.assertNotNull(intOptional50);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(headers58);
    }

    @Test
    public void test1512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1512");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.kafka.common.record.TimestampType, java.lang.CharSequence> timestampTypeKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<org.apache.kafka.common.record.TimestampType, java.lang.CharSequence> timestampTypeKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.kafka.common.record.TimestampType, java.lang.CharSequence>(timestampTypeKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1513");
        org.apache.storm.kafka.spout.KafkaSpout<java.util.RandomAccess, java.util.List<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> randomAccessKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.util.RandomAccess, java.util.List<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>();
    }

    @Test
    public void test1514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1514");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        long long7 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        long long8 = kafkaSpoutMessageIdComparatorConsumerRecord5.offset();
        org.apache.kafka.common.header.Headers headers9 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        org.apache.kafka.common.header.Headers headers10 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        java.lang.String str11 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.util.Optional<java.lang.Integer> intOptional12 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional13 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(headers9);
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(intOptional12);
        org.junit.Assert.assertNotNull(intOptional13);
    }

    @Test
    public void test1515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1515");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        int int9 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional10 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        long long11 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        org.apache.kafka.common.record.TimestampType timestampType12 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test1516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1516");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>();
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService1 = null;
        genericDeclarationKafkaSpout0.retryService = kafkaSpoutRetryService1;
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>.Timer timer3 = genericDeclarationKafkaSpout0.commitTimer;
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>.Timer timer4 = genericDeclarationKafkaSpout0.commitTimer;
        org.apache.kafka.clients.consumer.KafkaConsumer<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaConsumer5 = genericDeclarationKafkaSpout0.kafkaConsumer;
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpoutConfig6 = genericDeclarationKafkaSpout0.kafkaSpoutConfig;
        org.apache.kafka.common.TopicPartition topicPartition7 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection8 = genericDeclarationKafkaSpout0.toArrayList(topicPartition7);
        org.junit.Assert.assertNull(timer3);
        org.junit.Assert.assertNull(timer4);
        org.junit.Assert.assertNull(genericDeclarationKafkaConsumer5);
        org.junit.Assert.assertNull(genericDeclarationKafkaSpoutConfig6);
        org.junit.Assert.assertNotNull(topicPartitionCollection8);
    }

    @Test
    public void test1517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1517");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator11 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator11, "");
        org.apache.kafka.common.record.TimestampType timestampType14 = kafkaSpoutMessageIdComparatorConsumerRecord13.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator25 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator25, "");
        org.apache.kafka.common.record.TimestampType timestampType28 = kafkaSpoutMessageIdComparatorConsumerRecord27.timestampType();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        java.lang.Object obj34 = new java.lang.Object();
        java.lang.Class<?> wildcardClass35 = obj34.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType28, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass33, (java.lang.reflect.GenericDeclaration) wildcardClass35);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator44 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator44, "");
        org.apache.kafka.common.record.TimestampType timestampType47 = kafkaSpoutMessageIdComparatorConsumerRecord46.timestampType();
        java.lang.Object obj51 = new java.lang.Object();
        java.lang.Class<?> wildcardClass52 = obj51.getClass();
        java.lang.Object obj53 = new java.lang.Object();
        java.lang.Class<?> wildcardClass54 = obj53.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType47, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass52, (java.lang.reflect.GenericDeclaration) wildcardClass54);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("hi!", (int) (byte) 0, (long) (byte) 10, 10L, timestampType14, (long) (short) 10, (int) (short) 0, (int) (byte) 0, (java.lang.reflect.Type) wildcardClass33, timestampType47);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator60 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=null}", (int) (short) 0, (long) (byte) 1, (long) (short) 100, timestampType47, 0L, (int) (byte) 10, (int) (short) 100, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator60, "hi!");
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator60;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator64 = offsetComparator60.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator71 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord73 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator71, "");
        java.lang.String str74 = kafkaSpoutMessageIdComparatorConsumerRecord73.topic();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator75 = kafkaSpoutMessageIdComparatorConsumerRecord73.key();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("hi!", (int) '4', 100L, kafkaSpoutMessageIdComparator75, "");
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator75;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator79 = kafkaSpoutMessageIdComparator64.thenComparing(kafkaSpoutMessageIdComparator75);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator75;
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator75;
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator64);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator75);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator79);
    }

    @Test
    public void test1518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1518");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>();
        org.apache.kafka.clients.consumer.KafkaConsumer<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaConsumer1 = genericDeclarationKafkaSpout0.kafkaConsumer;
        org.apache.storm.kafka.spout.KafkaSpoutStreams kafkaSpoutStreams2 = genericDeclarationKafkaSpout0.kafkaSpoutStreams;
        java.util.Set<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet3 = genericDeclarationKafkaSpout0.emitted;
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpoutConfig4 = null;
        genericDeclarationKafkaSpout0.kafkaSpoutConfig = genericDeclarationKafkaSpoutConfig4;
        java.util.Map map6 = null;
        org.apache.storm.task.TopologyContext topologyContext7 = null;
        org.apache.storm.spout.SpoutOutputCollector spoutOutputCollector8 = null;
        // The following exception was thrown during execution in test generation
        try {
            genericDeclarationKafkaSpout0.open(map6, topologyContext7, spoutOutputCollector8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(genericDeclarationKafkaConsumer1);
        org.junit.Assert.assertNull(kafkaSpoutStreams2);
        org.junit.Assert.assertNull(kafkaSpoutMessageIdSet3);
    }

    @Test
    public void test1519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1519");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator7 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator7, "");
        org.apache.kafka.common.record.TimestampType timestampType10 = kafkaSpoutMessageIdComparatorConsumerRecord9.timestampType();
        int int11 = kafkaSpoutMessageIdComparatorConsumerRecord9.serializedValueSize();
        java.lang.String str12 = kafkaSpoutMessageIdComparatorConsumerRecord9.value();
        java.lang.String str13 = kafkaSpoutMessageIdComparatorConsumerRecord9.value();
        org.apache.kafka.common.record.TimestampType timestampType14 = kafkaSpoutMessageIdComparatorConsumerRecord9.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator21 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator21, "");
        java.lang.String str24 = kafkaSpoutMessageIdComparatorConsumerRecord23.topic();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator25 = kafkaSpoutMessageIdComparatorConsumerRecord23.key();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator26 = kafkaSpoutMessageIdComparator25.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator30 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator30, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator33 = offsetComparator30.reversed();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator34 = kafkaSpoutMessageIdComparator26.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator30);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator38 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator38, "");
        java.lang.String str41 = kafkaSpoutMessageIdComparatorConsumerRecord40.topic();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator42 = kafkaSpoutMessageIdComparatorConsumerRecord40.key();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator43 = kafkaSpoutMessageIdComparator26.thenComparing(kafkaSpoutMessageIdComparator42);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator51 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator51, "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (short) 100, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator51, "");
        int int56 = kafkaSpoutMessageIdComparatorConsumerRecord55.serializedValueSize();
        java.lang.String str57 = kafkaSpoutMessageIdComparatorConsumerRecord55.topic();
        int int58 = kafkaSpoutMessageIdComparatorConsumerRecord55.serializedValueSize();
        org.apache.kafka.common.header.Headers headers59 = kafkaSpoutMessageIdComparatorConsumerRecord55.headers();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator63 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord65 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator63, "");
        org.apache.kafka.common.record.TimestampType timestampType66 = kafkaSpoutMessageIdComparatorConsumerRecord65.timestampType();
        int int67 = kafkaSpoutMessageIdComparatorConsumerRecord65.serializedValueSize();
        java.lang.String str68 = kafkaSpoutMessageIdComparatorConsumerRecord65.value();
        java.lang.String str69 = kafkaSpoutMessageIdComparatorConsumerRecord65.value();
        org.apache.kafka.common.record.TimestampType timestampType70 = kafkaSpoutMessageIdComparatorConsumerRecord65.timestampType();
        int int71 = kafkaSpoutMessageIdComparatorConsumerRecord65.serializedKeySize();
        long long72 = kafkaSpoutMessageIdComparatorConsumerRecord65.offset();
        long long73 = kafkaSpoutMessageIdComparatorConsumerRecord65.offset();
        long long74 = kafkaSpoutMessageIdComparatorConsumerRecord65.timestamp();
        org.apache.kafka.common.header.Headers headers75 = kafkaSpoutMessageIdComparatorConsumerRecord65.headers();
        java.util.Optional<java.lang.Integer> intOptional76 = kafkaSpoutMessageIdComparatorConsumerRecord65.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("hi!", (int) ' ', (long) (byte) 100, 0L, timestampType14, (java.lang.Long) (-1L), 35, (int) '4', kafkaSpoutMessageIdComparator42, "", headers59, intOptional76);
        java.lang.Class<?> wildcardClass78 = timestampType14.getClass();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator25);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator26);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator33);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator34);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator42);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator43);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(headers59);
        org.junit.Assert.assertTrue("'" + timestampType66 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType66.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertTrue("'" + timestampType70 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType70.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + (-1L) + "'", long74 == (-1L));
        org.junit.Assert.assertNotNull(headers75);
        org.junit.Assert.assertNotNull(intOptional76);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test1520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1520");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str10 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.util.Optional<java.lang.Integer> intOptional11 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType12 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        long long13 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        int int14 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        int int15 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType16 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int17 = kafkaSpoutMessageIdComparatorConsumerRecord5.partition();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(intOptional11);
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
    }

    @Test
    public void test1521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1521");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        int int9 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.header.Headers headers10 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        long long11 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
    }

    @Test
    public void test1522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1522");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        long long7 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        long long8 = kafkaSpoutMessageIdComparatorConsumerRecord5.offset();
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        org.apache.kafka.common.header.Headers headers10 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator11 = kafkaSpoutMessageIdComparatorConsumerRecord5.key();
        java.util.Optional<java.lang.Integer> intOptional12 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        java.lang.String str13 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator11);
        org.junit.Assert.assertNotNull(intOptional12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test1523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1523");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        int int9 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedKeySize();
        org.apache.kafka.common.header.Headers headers10 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        java.lang.String str11 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator12 = kafkaSpoutMessageIdComparatorConsumerRecord5.key();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator12);
    }

    @Test
    public void test1524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1524");
        org.apache.storm.kafka.spout.KafkaSpout<java.util.AbstractCollection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.kafka.spout.KafkaSpout<org.apache.kafka.common.record.TimestampType, org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>>.KafkaSpoutConsumerRebalanceListener> kafkaSpoutMessageIdCollectionKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.util.AbstractCollection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.kafka.spout.KafkaSpout<org.apache.kafka.common.record.TimestampType, org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>>.KafkaSpoutConsumerRebalanceListener>();
    }

    @Test
    public void test1525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1525");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.lang.reflect.AnnotatedElement, java.lang.reflect.Type> annotatedElementKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.AnnotatedElement, java.lang.reflect.Type> annotatedElementKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.AnnotatedElement, java.lang.reflect.Type>(annotatedElementKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1526");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator11 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator11, "");
        org.apache.kafka.common.record.TimestampType timestampType14 = kafkaSpoutMessageIdComparatorConsumerRecord13.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator25 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator25, "");
        org.apache.kafka.common.record.TimestampType timestampType28 = kafkaSpoutMessageIdComparatorConsumerRecord27.timestampType();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        java.lang.Object obj34 = new java.lang.Object();
        java.lang.Class<?> wildcardClass35 = obj34.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType28, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass33, (java.lang.reflect.GenericDeclaration) wildcardClass35);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator44 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator44, "");
        org.apache.kafka.common.record.TimestampType timestampType47 = kafkaSpoutMessageIdComparatorConsumerRecord46.timestampType();
        java.lang.Object obj51 = new java.lang.Object();
        java.lang.Class<?> wildcardClass52 = obj51.getClass();
        java.lang.Object obj53 = new java.lang.Object();
        java.lang.Class<?> wildcardClass54 = obj53.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType47, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass52, (java.lang.reflect.GenericDeclaration) wildcardClass54);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("hi!", (int) (byte) 0, (long) (byte) 10, 10L, timestampType14, (long) (short) 10, (int) (short) 0, (int) (byte) 0, (java.lang.reflect.Type) wildcardClass33, timestampType47);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator60 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=null}", (int) (short) 0, (long) (byte) 1, (long) (short) 100, timestampType47, 0L, (int) (byte) 10, (int) (short) 100, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator60, "hi!");
        java.lang.String str63 = kafkaSpoutMessageIdComparatorConsumerRecord62.toString();
        int int64 = kafkaSpoutMessageIdComparatorConsumerRecord62.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional65 = kafkaSpoutMessageIdComparatorConsumerRecord62.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional66 = kafkaSpoutMessageIdComparatorConsumerRecord62.leaderEpoch();
        java.lang.Class<?> wildcardClass67 = kafkaSpoutMessageIdComparatorConsumerRecord62.getClass();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 100 + "'", int64 == 100);
        org.junit.Assert.assertNotNull(intOptional65);
        org.junit.Assert.assertNotNull(intOptional66);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test1527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1527");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>();
        org.apache.kafka.clients.consumer.KafkaConsumer<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaConsumer1 = genericDeclarationKafkaSpout0.kafkaConsumer;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>> genericDeclarationConsumerRecordItor2 = genericDeclarationKafkaSpout0.waitingToEmit;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>> genericDeclarationConsumerRecordItor3 = genericDeclarationKafkaSpout0.waitingToEmit;
        java.util.Set<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet4 = genericDeclarationKafkaSpout0.emitted;
        genericDeclarationKafkaSpout0.initialized = true;
        org.apache.storm.kafka.spout.KafkaSpoutStreams kafkaSpoutStreams7 = null;
        genericDeclarationKafkaSpout0.kafkaSpoutStreams = kafkaSpoutStreams7;
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>.Timer timer9 = genericDeclarationKafkaSpout0.commitTimer;
        org.apache.storm.kafka.spout.KafkaSpoutTuplesBuilder<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpoutTuplesBuilder10 = genericDeclarationKafkaSpout0.tuplesBuilder;
        org.junit.Assert.assertNull(genericDeclarationKafkaConsumer1);
        org.junit.Assert.assertNull(genericDeclarationConsumerRecordItor2);
        org.junit.Assert.assertNull(genericDeclarationConsumerRecordItor3);
        org.junit.Assert.assertNull(kafkaSpoutMessageIdSet4);
        org.junit.Assert.assertNull(timer9);
        org.junit.Assert.assertNull(genericDeclarationKafkaSpoutTuplesBuilder10);
    }

    @Test
    public void test1528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1528");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator7 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator7, "");
        java.lang.String str10 = kafkaSpoutMessageIdComparatorConsumerRecord9.topic();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator11 = kafkaSpoutMessageIdComparatorConsumerRecord9.key();
        java.lang.String str12 = kafkaSpoutMessageIdComparatorConsumerRecord9.topic();
        java.lang.String str13 = kafkaSpoutMessageIdComparatorConsumerRecord9.toString();
        long long14 = kafkaSpoutMessageIdComparatorConsumerRecord9.offset();
        org.apache.kafka.common.header.Headers headers15 = kafkaSpoutMessageIdComparatorConsumerRecord9.headers();
        org.apache.kafka.common.record.TimestampType timestampType16 = kafkaSpoutMessageIdComparatorConsumerRecord9.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator26 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator26, "");
        java.lang.String str29 = kafkaSpoutMessageIdComparatorConsumerRecord28.topic();
        org.apache.kafka.common.header.Headers headers30 = kafkaSpoutMessageIdComparatorConsumerRecord28.headers();
        org.apache.kafka.common.header.Headers headers31 = kafkaSpoutMessageIdComparatorConsumerRecord28.headers();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator32 = kafkaSpoutMessageIdComparatorConsumerRecord28.key();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator32;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("hi!", 0, (long) 10, kafkaSpoutMessageIdComparator32, "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=[]}", 1, (long) ' ', 100L, timestampType16, (long) (short) 0, (int) (short) 100, 10, kafkaSpoutMessageIdComparator32, "KafkaSpout{acked=null, emitted=null}");
        java.lang.String str38 = kafkaSpoutMessageIdComparatorConsumerRecord37.toString();
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(headers30);
        org.junit.Assert.assertNotNull(headers31);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator32);
    }

    @Test
    public void test1529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1529");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.util.Optional<java.lang.Integer> intOptional10 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType11 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        long long12 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType13 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType14 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test1530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1530");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        long long7 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord5.toString();
        long long10 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        long long11 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType12 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        long long13 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
    }

    @Test
    public void test1531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1531");
        org.apache.storm.kafka.spout.KafkaSpout<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.kafka.common.header.Headers> kafkaSpoutMessageIdComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.kafka.common.header.Headers>();
    }

    @Test
    public void test1532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1532");
        org.apache.storm.kafka.spout.KafkaSpout<java.io.Serializable, org.apache.storm.kafka.spout.KafkaSpout<java.lang.String, java.lang.CharSequence>.Timer> serializableKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.io.Serializable, org.apache.storm.kafka.spout.KafkaSpout<java.lang.String, java.lang.CharSequence>.Timer>();
    }

    @Test
    public void test1533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1533");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        java.lang.String str6 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        org.apache.kafka.common.record.TimestampType timestampType7 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int8 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedKeySize();
        long long9 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        org.apache.kafka.common.header.Headers headers10 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNotNull(headers10);
    }

    @Test
    public void test1534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1534");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.util.Optional<java.lang.Integer> intOptional10 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        int int11 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        int int12 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType13 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        long long14 = kafkaSpoutMessageIdComparatorConsumerRecord5.offset();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test1535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1535");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator11 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator11, "");
        org.apache.kafka.common.record.TimestampType timestampType14 = kafkaSpoutMessageIdComparatorConsumerRecord13.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator25 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator25, "");
        org.apache.kafka.common.record.TimestampType timestampType28 = kafkaSpoutMessageIdComparatorConsumerRecord27.timestampType();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        java.lang.Object obj34 = new java.lang.Object();
        java.lang.Class<?> wildcardClass35 = obj34.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType28, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass33, (java.lang.reflect.GenericDeclaration) wildcardClass35);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator44 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator44, "");
        org.apache.kafka.common.record.TimestampType timestampType47 = kafkaSpoutMessageIdComparatorConsumerRecord46.timestampType();
        java.lang.Object obj51 = new java.lang.Object();
        java.lang.Class<?> wildcardClass52 = obj51.getClass();
        java.lang.Object obj53 = new java.lang.Object();
        java.lang.Class<?> wildcardClass54 = obj53.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType47, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass52, (java.lang.reflect.GenericDeclaration) wildcardClass54);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("hi!", (int) (byte) 0, (long) (byte) 10, 10L, timestampType14, (long) (short) 10, (int) (short) 0, (int) (byte) 0, (java.lang.reflect.Type) wildcardClass33, timestampType47);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator60 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=null}", (int) (short) 0, (long) (byte) 1, (long) (short) 100, timestampType47, 0L, (int) (byte) 10, (int) (short) 100, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator60, "hi!");
        int int63 = kafkaSpoutMessageIdComparatorConsumerRecord62.serializedKeySize();
        long long64 = kafkaSpoutMessageIdComparatorConsumerRecord62.checksum();
        java.lang.String str65 = kafkaSpoutMessageIdComparatorConsumerRecord62.toString();
        int int66 = kafkaSpoutMessageIdComparatorConsumerRecord62.partition();
        int int67 = kafkaSpoutMessageIdComparatorConsumerRecord62.serializedValueSize();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 100 + "'", int67 == 100);
    }

    @Test
    public void test1536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1536");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>();
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService1 = null;
        genericDeclarationKafkaSpout0.retryService = kafkaSpoutRetryService1;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray3 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet4 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet4, kafkaSpoutMessageIdArray3);
        genericDeclarationKafkaSpout0.emitted = kafkaSpoutMessageIdSet4;
        org.apache.storm.kafka.spout.KafkaSpoutTuplesBuilder<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpoutTuplesBuilder7 = genericDeclarationKafkaSpout0.tuplesBuilder;
        int int8 = genericDeclarationKafkaSpout0.maxRetries;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean9 = genericDeclarationKafkaSpout0.poll();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(genericDeclarationKafkaSpoutTuplesBuilder7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test1537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1537");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.reflect.Type> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.reflect.Type>();
    }

    @Test
    public void test1538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1538");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        int int6 = kafkaSpoutMessageIdComparatorConsumerRecord5.partition();
        java.util.Optional<java.lang.Integer> intOptional7 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str10 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertNotNull(intOptional7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test1539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1539");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator14 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator14, "");
        org.apache.kafka.common.record.TimestampType timestampType17 = kafkaSpoutMessageIdComparatorConsumerRecord16.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator28 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator28, "");
        org.apache.kafka.common.record.TimestampType timestampType31 = kafkaSpoutMessageIdComparatorConsumerRecord30.timestampType();
        java.lang.Object obj35 = new java.lang.Object();
        java.lang.Class<?> wildcardClass36 = obj35.getClass();
        java.lang.Object obj37 = new java.lang.Object();
        java.lang.Class<?> wildcardClass38 = obj37.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType31, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass36, (java.lang.reflect.GenericDeclaration) wildcardClass38);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator47 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator47, "");
        org.apache.kafka.common.record.TimestampType timestampType50 = kafkaSpoutMessageIdComparatorConsumerRecord49.timestampType();
        java.lang.Object obj54 = new java.lang.Object();
        java.lang.Class<?> wildcardClass55 = obj54.getClass();
        java.lang.Object obj56 = new java.lang.Object();
        java.lang.Class<?> wildcardClass57 = obj56.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType50, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass55, (java.lang.reflect.GenericDeclaration) wildcardClass57);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("hi!", (int) (byte) 0, (long) (byte) 10, 10L, timestampType17, (long) (short) 10, (int) (short) 0, (int) (byte) 0, (java.lang.reflect.Type) wildcardClass36, timestampType50);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator66 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (-1), (long) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator66, "");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator73 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord75 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator73, "");
        java.lang.String str76 = kafkaSpoutMessageIdComparatorConsumerRecord75.topic();
        org.apache.kafka.common.header.Headers headers77 = kafkaSpoutMessageIdComparatorConsumerRecord75.headers();
        org.apache.kafka.common.header.Headers headers78 = kafkaSpoutMessageIdComparatorConsumerRecord75.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=null}", 100, (long) (byte) -1, (long) (byte) 1, timestampType17, (java.lang.Long) 100L, 0, (int) (byte) 10, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator66, "KafkaSpout{acked=null, emitted=null}", headers78);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator80 = offsetComparator66.reversed();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord82 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("hi!", (int) (short) 10, (long) 32, kafkaSpoutMessageIdComparator80, "hi!");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator83 = kafkaSpoutMessageIdComparator80.reversed();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator84 = kafkaSpoutMessageIdComparator83.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator83;
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertTrue("'" + timestampType50 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType50.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(headers77);
        org.junit.Assert.assertNotNull(headers78);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator80);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator83);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator84);
    }

    @Test
    public void test1540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1540");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator7 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator7, "");
        org.apache.kafka.common.record.TimestampType timestampType10 = kafkaSpoutMessageIdComparatorConsumerRecord9.timestampType();
        int int11 = kafkaSpoutMessageIdComparatorConsumerRecord9.serializedValueSize();
        java.lang.String str12 = kafkaSpoutMessageIdComparatorConsumerRecord9.value();
        long long13 = kafkaSpoutMessageIdComparatorConsumerRecord9.checksum();
        org.apache.kafka.common.record.TimestampType timestampType14 = kafkaSpoutMessageIdComparatorConsumerRecord9.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator24 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator24, "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (short) 100, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator24, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator29 = offsetComparator24.reversed();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("hi!", (int) (byte) 1, 10L, (long) (short) 1, timestampType14, (long) 100, (-1), 0, kafkaSpoutMessageIdComparator29, "KafkaSpout{acked=null, emitted=null}");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator32 = kafkaSpoutMessageIdComparator29.reversed();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator33 = kafkaSpoutMessageIdComparator29.reversed();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator29);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator32);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator33);
    }

    @Test
    public void test1541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1541");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        java.lang.String str6 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        org.apache.kafka.common.header.Headers headers7 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.toString();
        long long9 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        long long10 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator11 = kafkaSpoutMessageIdComparatorConsumerRecord5.key();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator11;
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(headers7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator11);
    }

    @Test
    public void test1542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1542");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str10 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.util.Optional<java.lang.Integer> intOptional11 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        int int12 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedKeySize();
        int int13 = kafkaSpoutMessageIdComparatorConsumerRecord5.partition();
        int int14 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType15 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(intOptional11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test1543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1543");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        java.lang.String str6 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        java.util.Optional<java.lang.Integer> intOptional7 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        long long8 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        long long9 = kafkaSpoutMessageIdComparatorConsumerRecord5.offset();
        java.lang.String str10 = kafkaSpoutMessageIdComparatorConsumerRecord5.toString();
        int int11 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(intOptional7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test1544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1544");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        int int9 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedKeySize();
        long long10 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        long long11 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        java.lang.String str12 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        int int13 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator14 = kafkaSpoutMessageIdComparatorConsumerRecord5.key();
        int int15 = kafkaSpoutMessageIdComparatorConsumerRecord5.partition();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
    }

    @Test
    public void test1545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1545");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, org.apache.storm.kafka.spout.KafkaSpout<org.apache.kafka.common.record.TimestampType, org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>>.KafkaSpoutConsumerRebalanceListener> genericDeclarationKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, org.apache.storm.kafka.spout.KafkaSpout<org.apache.kafka.common.record.TimestampType, org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>>.KafkaSpoutConsumerRebalanceListener>();
    }

    @Test
    public void test1546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1546");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, org.apache.kafka.clients.consumer.ConsumerRebalanceListener> timestampTypeEnumKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, org.apache.kafka.clients.consumer.ConsumerRebalanceListener> timestampTypeEnumKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, org.apache.kafka.clients.consumer.ConsumerRebalanceListener>(timestampTypeEnumKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1547");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        int int10 = kafkaSpoutMessageIdComparatorConsumerRecord5.partition();
        java.lang.String str11 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.util.Optional<java.lang.Integer> intOptional12 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        int int13 = kafkaSpoutMessageIdComparatorConsumerRecord5.partition();
        java.lang.String str14 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        int int15 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.header.Headers headers16 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(intOptional12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(headers16);
    }

    @Test
    public void test1548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1548");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator0 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator4 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord6 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator4, "");
        org.apache.kafka.common.record.TimestampType timestampType7 = kafkaSpoutMessageIdComparatorConsumerRecord6.timestampType();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord6.value();
        int int9 = kafkaSpoutMessageIdComparatorConsumerRecord6.serializedValueSize();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator10 = kafkaSpoutMessageIdComparatorConsumerRecord6.key();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator11 = offsetComparator0.thenComparing(kafkaSpoutMessageIdComparator10);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator12 = kafkaSpoutMessageIdComparator10.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator16 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord18 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator16, "");
        java.lang.String str19 = kafkaSpoutMessageIdComparatorConsumerRecord18.topic();
        org.apache.kafka.common.header.Headers headers20 = kafkaSpoutMessageIdComparatorConsumerRecord18.headers();
        java.lang.String str21 = kafkaSpoutMessageIdComparatorConsumerRecord18.toString();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator22 = kafkaSpoutMessageIdComparatorConsumerRecord18.key();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator22;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator24 = kafkaSpoutMessageIdComparator10.thenComparing(kafkaSpoutMessageIdComparator22);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator25 = kafkaSpoutMessageIdComparator24.reversed();
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator10);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator11);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator12);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(headers20);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator22);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator24);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator25);
    }

    @Test
    public void test1549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1549");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        long long7 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord5.toString();
        long long10 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator11 = kafkaSpoutMessageIdComparatorConsumerRecord5.key();
        long long12 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        long long13 = kafkaSpoutMessageIdComparatorConsumerRecord5.offset();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test1550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1550");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str10 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str11 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        long long12 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        int int13 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        int int14 = kafkaSpoutMessageIdComparatorConsumerRecord5.partition();
        org.apache.kafka.common.record.TimestampType timestampType15 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test1551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1551");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpout7 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>();
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService8 = null;
        genericDeclarationKafkaSpout7.retryService = kafkaSpoutRetryService8;
        org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy firstPollOffsetStrategy10 = genericDeclarationKafkaSpout7.firstPollOffsetStrategy;
        java.lang.String str11 = genericDeclarationKafkaSpout7.toString();
        org.apache.storm.kafka.spout.KafkaSpoutTuplesBuilder<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpoutTuplesBuilder12 = null;
        genericDeclarationKafkaSpout7.tuplesBuilder = genericDeclarationKafkaSpoutTuplesBuilder12;
        boolean boolean14 = genericDeclarationKafkaSpout7.initialized;
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpout15 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>();
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService16 = null;
        genericDeclarationKafkaSpout15.retryService = kafkaSpoutRetryService16;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray18 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet19 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet19, kafkaSpoutMessageIdArray18);
        genericDeclarationKafkaSpout15.emitted = kafkaSpoutMessageIdSet19;
        genericDeclarationKafkaSpout7.emitted = kafkaSpoutMessageIdSet19;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator34 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator34, "");
        org.apache.kafka.common.record.TimestampType timestampType37 = kafkaSpoutMessageIdComparatorConsumerRecord36.timestampType();
        int int38 = kafkaSpoutMessageIdComparatorConsumerRecord36.serializedValueSize();
        java.lang.String str39 = kafkaSpoutMessageIdComparatorConsumerRecord36.value();
        java.lang.String str40 = kafkaSpoutMessageIdComparatorConsumerRecord36.value();
        org.apache.kafka.common.record.TimestampType timestampType41 = kafkaSpoutMessageIdComparatorConsumerRecord36.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator48 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (-1), (long) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator48, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator51 = offsetComparator48.reversed();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator52 = offsetComparator48.reversed();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=null}", (int) (short) -1, (long) 0, (long) (-1), timestampType41, (long) 100, (int) (byte) 10, (int) '#', kafkaSpoutMessageIdComparator52, "KafkaSpout{acked=null, emitted=null}");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator64 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator64, "");
        org.apache.kafka.common.record.TimestampType timestampType67 = kafkaSpoutMessageIdComparatorConsumerRecord66.timestampType();
        int int68 = kafkaSpoutMessageIdComparatorConsumerRecord66.serializedValueSize();
        java.lang.String str69 = kafkaSpoutMessageIdComparatorConsumerRecord66.value();
        java.lang.String str70 = kafkaSpoutMessageIdComparatorConsumerRecord66.value();
        org.apache.kafka.common.record.TimestampType timestampType71 = kafkaSpoutMessageIdComparatorConsumerRecord66.timestampType();
        int int72 = kafkaSpoutMessageIdComparatorConsumerRecord66.serializedKeySize();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator73 = kafkaSpoutMessageIdComparatorConsumerRecord66.key();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator74 = kafkaSpoutMessageIdComparator73.reversed();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("hi!", (int) (byte) -1, (long) (-1), kafkaSpoutMessageIdComparator74, "ConsumerRecord(topic = KafkaSpout{acked=null, emitted=[]}, partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = 1, serialized key size = 97, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = KafkaSpout{acked=null, emitted=[]})");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord78 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=null}", (int) (short) 1, 35L, (long) (byte) 0, timestampType41, (long) (byte) 10, 32, 52, kafkaSpoutMessageIdComparator74, "ConsumerRecord(topic = KafkaSpout{acked=null, emitted=[]}, partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = 1, serialized key size = 97, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = KafkaSpout{acked=null, emitted=[]})");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Set<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> kafkaSpoutMessageIdSetConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Set<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) '4', (java.util.Set<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet19, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType41);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> charSequenceConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>("KafkaSpout{acked=null, emitted=null}", (int) (byte) 10, (long) 'a', (java.lang.CharSequence) "ConsumerRecord(topic = KafkaSpout{acked=null, emitted=null}, partition = -1, leaderEpoch = null, offset = 97, NoTimestampType = 32, serialized key size = 100, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = )", (java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet19);
        org.junit.Assert.assertNull(firstPollOffsetStrategy10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "KafkaSpout{acked=null, emitted=null}" + "'", str11, "KafkaSpout{acked=null, emitted=null}");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + timestampType37 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType37.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + timestampType41 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType41.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator51);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator52);
        org.junit.Assert.assertTrue("'" + timestampType67 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType67.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertTrue("'" + timestampType71 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType71.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator73);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator74);
    }

    @Test
    public void test1552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1552");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.util.Optional<java.lang.Integer>, org.apache.storm.topology.IComponent> intOptionalKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.util.Optional<java.lang.Integer>, org.apache.storm.topology.IComponent> intOptionalKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<java.util.Optional<java.lang.Integer>, org.apache.storm.topology.IComponent>(intOptionalKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1553");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<org.apache.kafka.common.header.Headers, java.util.AbstractCollection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>.Timer timer1 = kafkaSpout0.new Timer();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$Timer with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1554");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        long long7 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord5.toString();
        long long10 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        int int11 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedKeySize();
        long long12 = kafkaSpoutMessageIdComparatorConsumerRecord5.offset();
        org.apache.kafka.common.header.Headers headers13 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        long long14 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        int int15 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str16 = kafkaSpoutMessageIdComparatorConsumerRecord5.toString();
        java.lang.String str17 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        int int18 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(headers13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test1555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1555");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        int int6 = kafkaSpoutMessageIdComparatorConsumerRecord5.partition();
        long long7 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        long long8 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        java.util.Optional<java.lang.Integer> intOptional9 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        int int10 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator11 = kafkaSpoutMessageIdComparatorConsumerRecord5.key();
        long long12 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        java.lang.String str13 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertNotNull(intOptional9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test1556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1556");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>();
        genericDeclarationKafkaSpout0.maxRetries = (byte) -1;
        org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy firstPollOffsetStrategy3 = genericDeclarationKafkaSpout0.firstPollOffsetStrategy;
        org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy firstPollOffsetStrategy4 = null;
        genericDeclarationKafkaSpout0.firstPollOffsetStrategy = firstPollOffsetStrategy4;
        org.apache.storm.kafka.spout.KafkaSpoutStreams kafkaSpoutStreams6 = null;
        genericDeclarationKafkaSpout0.kafkaSpoutStreams = kafkaSpoutStreams6;
        org.apache.storm.kafka.spout.KafkaSpoutStreams kafkaSpoutStreams8 = genericDeclarationKafkaSpout0.kafkaSpoutStreams;
        org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy firstPollOffsetStrategy9 = null;
        genericDeclarationKafkaSpout0.firstPollOffsetStrategy = firstPollOffsetStrategy9;
        org.apache.kafka.common.TopicPartition topicPartition11 = null;
        // The following exception was thrown during execution in test generation
        try {
            genericDeclarationKafkaSpout0.setAcked(topicPartition11, 97L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(firstPollOffsetStrategy3);
        org.junit.Assert.assertNull(kafkaSpoutStreams8);
    }

    @Test
    public void test1557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1557");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator7 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator7, "");
        org.apache.kafka.common.record.TimestampType timestampType10 = kafkaSpoutMessageIdComparatorConsumerRecord9.timestampType();
        int int11 = kafkaSpoutMessageIdComparatorConsumerRecord9.serializedValueSize();
        java.lang.String str12 = kafkaSpoutMessageIdComparatorConsumerRecord9.value();
        int int13 = kafkaSpoutMessageIdComparatorConsumerRecord9.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional14 = kafkaSpoutMessageIdComparatorConsumerRecord9.leaderEpoch();
        int int15 = kafkaSpoutMessageIdComparatorConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType16 = kafkaSpoutMessageIdComparatorConsumerRecord9.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator27 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator27, "");
        long long30 = kafkaSpoutMessageIdComparatorConsumerRecord29.checksum();
        int int31 = kafkaSpoutMessageIdComparatorConsumerRecord29.partition();
        org.apache.kafka.common.header.Headers headers32 = kafkaSpoutMessageIdComparatorConsumerRecord29.headers();
        java.util.Optional<java.lang.Integer> intOptional33 = kafkaSpoutMessageIdComparatorConsumerRecord29.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType34 = kafkaSpoutMessageIdComparatorConsumerRecord29.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator41 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator41, "");
        org.apache.kafka.common.record.TimestampType timestampType44 = kafkaSpoutMessageIdComparatorConsumerRecord43.timestampType();
        long long45 = kafkaSpoutMessageIdComparatorConsumerRecord43.timestamp();
        long long46 = kafkaSpoutMessageIdComparatorConsumerRecord43.offset();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator47 = kafkaSpoutMessageIdComparatorConsumerRecord43.key();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator48 = kafkaSpoutMessageIdComparator47.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator52 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator52, "");
        java.lang.String str55 = kafkaSpoutMessageIdComparatorConsumerRecord54.topic();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator56 = kafkaSpoutMessageIdComparatorConsumerRecord54.key();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator57 = kafkaSpoutMessageIdComparator56.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator61 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator61, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator64 = offsetComparator61.reversed();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator65 = kafkaSpoutMessageIdComparator57.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator61);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator69 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator69, "");
        java.lang.String str72 = kafkaSpoutMessageIdComparatorConsumerRecord71.topic();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator73 = kafkaSpoutMessageIdComparatorConsumerRecord71.key();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator74 = kafkaSpoutMessageIdComparator57.thenComparing(kafkaSpoutMessageIdComparator73);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator75 = kafkaSpoutMessageIdComparator48.thenComparing(kafkaSpoutMessageIdComparator57);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator80 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord82 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator80, "");
        org.apache.kafka.common.record.TimestampType timestampType83 = kafkaSpoutMessageIdComparatorConsumerRecord82.timestampType();
        int int84 = kafkaSpoutMessageIdComparatorConsumerRecord82.serializedValueSize();
        java.lang.String str85 = kafkaSpoutMessageIdComparatorConsumerRecord82.value();
        int int86 = kafkaSpoutMessageIdComparatorConsumerRecord82.partition();
        long long87 = kafkaSpoutMessageIdComparatorConsumerRecord82.timestamp();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator88 = kafkaSpoutMessageIdComparatorConsumerRecord82.key();
        long long89 = kafkaSpoutMessageIdComparatorConsumerRecord82.checksum();
        org.apache.kafka.common.header.Headers headers90 = kafkaSpoutMessageIdComparatorConsumerRecord82.headers();
        java.util.Optional<java.lang.Integer> intOptional91 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("hi!", 52, 52L, (long) (byte) 100, timestampType34, (java.lang.Long) 0L, (int) (short) 1, (int) (byte) 100, kafkaSpoutMessageIdComparator48, "ConsumerRecord(topic = KafkaSpout{acked=null, emitted=[]}, partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = 1, serialized key size = 97, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = KafkaSpout{acked=null, emitted=[]})", headers90, intOptional91);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord94 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) ' ', (long) (short) 100, (-1L), timestampType16, 0L, (int) (byte) 10, (-1), kafkaSpoutMessageIdComparator48, "KafkaSpout{acked=null, emitted=[]}");
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(intOptional14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertNotNull(headers32);
        org.junit.Assert.assertNotNull(intOptional33);
        org.junit.Assert.assertTrue("'" + timestampType34 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType34.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType44 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType44.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-1L) + "'", long45 == (-1L));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator47);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator48);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator56);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator57);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator64);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator65);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator73);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator74);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator75);
        org.junit.Assert.assertTrue("'" + timestampType83 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType83.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 10 + "'", int86 == 10);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + (-1L) + "'", long87 == (-1L));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator88);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + (-1L) + "'", long89 == (-1L));
        org.junit.Assert.assertNotNull(headers90);
    }

    @Test
    public void test1558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1558");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator6 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator6, "");
        org.apache.kafka.common.record.TimestampType timestampType9 = kafkaSpoutMessageIdComparatorConsumerRecord8.timestampType();
        long long10 = kafkaSpoutMessageIdComparatorConsumerRecord8.timestamp();
        java.lang.String str11 = kafkaSpoutMessageIdComparatorConsumerRecord8.value();
        java.util.Optional<java.lang.Integer> intOptional12 = kafkaSpoutMessageIdComparatorConsumerRecord8.leaderEpoch();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator13 = kafkaSpoutMessageIdComparatorConsumerRecord8.key();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator14 = kafkaSpoutMessageIdComparator13.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator21 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator21, "");
        java.lang.String str24 = kafkaSpoutMessageIdComparatorConsumerRecord23.topic();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator25 = kafkaSpoutMessageIdComparatorConsumerRecord23.key();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("hi!", (int) '4', 100L, kafkaSpoutMessageIdComparator25, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator28 = kafkaSpoutMessageIdComparator14.thenComparing(kafkaSpoutMessageIdComparator25);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=[]}", 52, 52L, kafkaSpoutMessageIdComparator25, "KafkaSpout{acked=null, emitted=[]}");
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(intOptional12);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator13);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator14);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator25);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator28);
    }

    @Test
    public void test1559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1559");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout<org.apache.kafka.common.record.TimestampType, org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>>.KafkaSpoutConsumerRebalanceListener, java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> kafkaSpoutConsumerRebalanceListenerKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout<org.apache.kafka.common.record.TimestampType, org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>>.KafkaSpoutConsumerRebalanceListener, java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>();
    }

    @Test
    public void test1560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1560");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>();
        org.apache.kafka.clients.consumer.KafkaConsumer<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaConsumer1 = genericDeclarationKafkaSpout0.kafkaConsumer;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>> genericDeclarationConsumerRecordItor2 = genericDeclarationKafkaSpout0.waitingToEmit;
        org.apache.storm.kafka.spout.KafkaSpoutTuplesBuilder<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpoutTuplesBuilder3 = null;
        genericDeclarationKafkaSpout0.tuplesBuilder = genericDeclarationKafkaSpoutTuplesBuilder3;
        org.apache.storm.kafka.spout.KafkaSpoutStreams kafkaSpoutStreams5 = genericDeclarationKafkaSpout0.kafkaSpoutStreams;
        genericDeclarationKafkaSpout0.numUncommittedOffsets = 97;
        int int8 = genericDeclarationKafkaSpout0.maxRetries;
        org.junit.Assert.assertNull(genericDeclarationKafkaConsumer1);
        org.junit.Assert.assertNull(genericDeclarationConsumerRecordItor2);
        org.junit.Assert.assertNull(kafkaSpoutStreams5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test1561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1561");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.util.Optional<java.lang.Integer> intOptional10 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        long long11 = kafkaSpoutMessageIdComparatorConsumerRecord5.offset();
        long long12 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
    }

    @Test
    public void test1562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1562");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator11 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator11, "");
        org.apache.kafka.common.record.TimestampType timestampType14 = kafkaSpoutMessageIdComparatorConsumerRecord13.timestampType();
        long long15 = kafkaSpoutMessageIdComparatorConsumerRecord13.timestamp();
        java.lang.String str16 = kafkaSpoutMessageIdComparatorConsumerRecord13.value();
        java.util.Optional<java.lang.Integer> intOptional17 = kafkaSpoutMessageIdComparatorConsumerRecord13.leaderEpoch();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator18 = kafkaSpoutMessageIdComparatorConsumerRecord13.key();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator19 = kafkaSpoutMessageIdComparator18.reversed();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("ConsumerRecord(topic = KafkaSpout{acked=null, emitted=[]}, partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = 1, serialized key size = 97, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = KafkaSpout{acked=null, emitted=[]})", 100, (long) (short) 0, (long) (short) 100, timestampType4, (long) 32, 32, (int) (short) -1, kafkaSpoutMessageIdComparator19, "KafkaSpout{acked=null, emitted=null}");
        java.lang.String str22 = kafkaSpoutMessageIdComparatorConsumerRecord21.toString();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(intOptional17);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator18);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator19);
    }

    @Test
    public void test1563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1563");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.util.Set<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.spout.ISpout> kafkaSpoutMessageIdSetKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.util.Set<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.spout.ISpout> kafkaSpoutMessageIdSetKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<java.util.Set<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.spout.ISpout>(kafkaSpoutMessageIdSetKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1564");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str10 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str11 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str12 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        java.lang.String str13 = kafkaSpoutMessageIdComparatorConsumerRecord5.toString();
        org.apache.kafka.common.record.TimestampType timestampType14 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        long long15 = kafkaSpoutMessageIdComparatorConsumerRecord5.offset();
        long long16 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator17 = kafkaSpoutMessageIdComparatorConsumerRecord5.key();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator17);
    }

    @Test
    public void test1565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1565");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>();
        genericDeclarationKafkaSpout0.maxRetries = (byte) -1;
        org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy firstPollOffsetStrategy3 = genericDeclarationKafkaSpout0.firstPollOffsetStrategy;
        long long4 = genericDeclarationKafkaSpout0.numUncommittedOffsets;
        org.junit.Assert.assertNull(firstPollOffsetStrategy3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
    }

    @Test
    public void test1566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1566");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        java.lang.String str6 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        org.apache.kafka.common.header.Headers headers7 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        org.apache.kafka.common.header.Headers headers8 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord5.toString();
        int int10 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedKeySize();
        int int11 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional12 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        long long13 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(headers7);
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(intOptional12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
    }

    @Test
    public void test1567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1567");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>();
        org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy firstPollOffsetStrategy1 = null;
        genericDeclarationKafkaSpout0.firstPollOffsetStrategy = firstPollOffsetStrategy1;
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService3 = genericDeclarationKafkaSpout0.retryService;
        boolean boolean4 = genericDeclarationKafkaSpout0.consumerAutoCommitMode;
        java.util.Set<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet5 = genericDeclarationKafkaSpout0.emitted;
        long long6 = genericDeclarationKafkaSpout0.numUncommittedOffsets;
        org.junit.Assert.assertNull(kafkaSpoutRetryService3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(kafkaSpoutMessageIdSet5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test1568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1568");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator8 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=null}", (int) (short) 10, (long) (byte) -1, (long) (byte) 100, timestampType4, 10L, 1, 32, kafkaSpoutMessageIdComparator8, "");
        int int11 = kafkaSpoutMessageIdComparatorConsumerRecord10.serializedValueSize();
        int int12 = kafkaSpoutMessageIdComparatorConsumerRecord10.serializedValueSize();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 32 + "'", int11 == 32);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 32 + "'", int12 == 32);
    }

    @Test
    public void test1569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1569");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>> genericDeclarationConsumerRecordItor1 = genericDeclarationKafkaSpout0.waitingToEmit;
        boolean boolean2 = genericDeclarationKafkaSpout0.waitingToEmit();
        genericDeclarationKafkaSpout0.maxRetries = 'a';
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService5 = genericDeclarationKafkaSpout0.retryService;
        org.apache.kafka.common.TopicPartition topicPartition6 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection7 = genericDeclarationKafkaSpout0.toArrayList(topicPartition6);
        org.junit.Assert.assertNull(genericDeclarationConsumerRecordItor1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(kafkaSpoutRetryService5);
        org.junit.Assert.assertNotNull(topicPartitionCollection7);
    }

    @Test
    public void test1570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1570");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator6 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator6, "");
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord8.topic();
        long long10 = kafkaSpoutMessageIdComparatorConsumerRecord8.offset();
        int int11 = kafkaSpoutMessageIdComparatorConsumerRecord8.partition();
        long long12 = kafkaSpoutMessageIdComparatorConsumerRecord8.checksum();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator13 = kafkaSpoutMessageIdComparatorConsumerRecord8.key();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator20 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord22 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator20, "");
        java.lang.String str23 = kafkaSpoutMessageIdComparatorConsumerRecord22.topic();
        org.apache.kafka.common.header.Headers headers24 = kafkaSpoutMessageIdComparatorConsumerRecord22.headers();
        org.apache.kafka.common.header.Headers headers25 = kafkaSpoutMessageIdComparatorConsumerRecord22.headers();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator26 = kafkaSpoutMessageIdComparatorConsumerRecord22.key();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator26;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("hi!", 0, (long) 10, kafkaSpoutMessageIdComparator26, "hi!");
        java.util.Optional<java.lang.Integer> intOptional30 = kafkaSpoutMessageIdComparatorConsumerRecord29.leaderEpoch();
        int int31 = kafkaSpoutMessageIdComparatorConsumerRecord29.serializedKeySize();
        long long32 = kafkaSpoutMessageIdComparatorConsumerRecord29.checksum();
        int int33 = kafkaSpoutMessageIdComparatorConsumerRecord29.partition();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator34 = kafkaSpoutMessageIdComparatorConsumerRecord29.key();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator34;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator36 = kafkaSpoutMessageIdComparator13.thenComparing(kafkaSpoutMessageIdComparator34);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("ConsumerRecord(topic = KafkaSpout{acked=null, emitted=[]}, partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = 1, serialized key size = 97, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = KafkaSpout{acked=null, emitted=[]})", (int) ' ', (long) (short) 0, kafkaSpoutMessageIdComparator13, "KafkaSpout{acked=null, emitted=[]}");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator13);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(headers24);
        org.junit.Assert.assertNotNull(headers25);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator26);
        org.junit.Assert.assertNotNull(intOptional30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator34);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator36);
    }

    @Test
    public void test1571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1571");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator6 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator6, "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (short) 100, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator6, "");
        int int11 = kafkaSpoutMessageIdComparatorConsumerRecord10.serializedValueSize();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator12 = kafkaSpoutMessageIdComparatorConsumerRecord10.key();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator16 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord18 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (-1), (long) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator16, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator19 = offsetComparator16.reversed();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator20 = kafkaSpoutMessageIdComparator19.reversed();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator21 = kafkaSpoutMessageIdComparator20.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator29 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator29, "");
        org.apache.kafka.common.record.TimestampType timestampType32 = kafkaSpoutMessageIdComparatorConsumerRecord31.timestampType();
        int int33 = kafkaSpoutMessageIdComparatorConsumerRecord31.serializedValueSize();
        java.lang.String str34 = kafkaSpoutMessageIdComparatorConsumerRecord31.value();
        java.lang.String str35 = kafkaSpoutMessageIdComparatorConsumerRecord31.value();
        org.apache.kafka.common.record.TimestampType timestampType36 = kafkaSpoutMessageIdComparatorConsumerRecord31.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator43 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (-1), (long) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator43, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator46 = offsetComparator43.reversed();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator47 = offsetComparator43.reversed();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=null}", (int) (short) -1, (long) 0, (long) (-1), timestampType36, (long) 100, (int) (byte) 10, (int) '#', kafkaSpoutMessageIdComparator47, "KafkaSpout{acked=null, emitted=null}");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator50 = kafkaSpoutMessageIdComparator21.thenComparing(kafkaSpoutMessageIdComparator47);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator21;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator61 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator61, "");
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator61;
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator61;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator66 = offsetComparator61.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator61;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord69 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("ConsumerRecord(topic = KafkaSpout{acked=null, emitted=[]}, partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = 1, serialized key size = 97, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = KafkaSpout{acked=null, emitted=[]})", (int) (byte) 0, (long) (short) 1, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator61, "KafkaSpout{acked=null, emitted=null}");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("hi!", (int) (byte) 0, (long) 'a', (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator61, "hi!");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator72 = kafkaSpoutMessageIdComparator21.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator61);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator73 = kafkaSpoutMessageIdComparator12.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator61);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator12);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator19);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator20);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator21);
        org.junit.Assert.assertTrue("'" + timestampType32 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType32.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + timestampType36 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType36.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator46);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator47);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator50);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator66);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator72);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator73);
    }

    @Test
    public void test1572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1572");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator9 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord11 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator9, "");
        org.apache.kafka.common.record.TimestampType timestampType12 = kafkaSpoutMessageIdComparatorConsumerRecord11.timestampType();
        int int13 = kafkaSpoutMessageIdComparatorConsumerRecord11.serializedValueSize();
        java.lang.String str14 = kafkaSpoutMessageIdComparatorConsumerRecord11.value();
        java.lang.String str15 = kafkaSpoutMessageIdComparatorConsumerRecord11.value();
        org.apache.kafka.common.record.TimestampType timestampType16 = kafkaSpoutMessageIdComparatorConsumerRecord11.timestampType();
        int int17 = kafkaSpoutMessageIdComparatorConsumerRecord11.serializedKeySize();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator18 = kafkaSpoutMessageIdComparatorConsumerRecord11.key();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator19 = kafkaSpoutMessageIdComparatorConsumerRecord11.key();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator20 = kafkaSpoutMessageIdComparatorConsumerRecord11.key();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator27 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (-1), (long) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator27, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator30 = offsetComparator27.reversed();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("hi!", 0, (long) 1, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator27, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator33 = kafkaSpoutMessageIdComparator20.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator27);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("ConsumerRecord(topic = KafkaSpout{acked=null, emitted=null}, partition = -1, leaderEpoch = null, offset = 97, NoTimestampType = 32, serialized key size = 100, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = )", (int) '#', 32L, kafkaSpoutMessageIdComparator33, "");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator45 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (-1), (long) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator45, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator48 = offsetComparator45.reversed();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("hi!", 0, (long) 1, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator45, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator51 = org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator52 = kafkaSpoutMessageIdComparator51.reversed();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator53 = offsetComparator45.thenComparing(kafkaSpoutMessageIdComparator51);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("hi!", 10, (long) (byte) 1, kafkaSpoutMessageIdComparator51, "KafkaSpout{acked=null, emitted=null}");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator56 = kafkaSpoutMessageIdComparator51.reversed();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator57 = kafkaSpoutMessageIdComparator33.thenComparing(kafkaSpoutMessageIdComparator51);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=[]}", (int) (byte) 100, 0L, kafkaSpoutMessageIdComparator51, "KafkaSpout{acked=null, emitted=null}");
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator18);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator19);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator20);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator30);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator33);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator48);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator51);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator52);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator53);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator56);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator57);
    }

    @Test
    public void test1573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1573");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>();
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService1 = null;
        genericDeclarationKafkaSpout0.retryService = kafkaSpoutRetryService1;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray3 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet4 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet4, kafkaSpoutMessageIdArray3);
        genericDeclarationKafkaSpout0.emitted = kafkaSpoutMessageIdSet4;
        // The following exception was thrown during execution in test generation
        try {
            genericDeclarationKafkaSpout0.doSeekRetriableTopicPartitions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1574");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.base.BaseRichSpout, java.lang.Comparable<java.lang.String>> baseRichSpoutKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.base.BaseRichSpout, java.lang.Comparable<java.lang.String>>();
    }

    @Test
    public void test1575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1575");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>> genericDeclarationConsumerRecordItor1 = genericDeclarationKafkaSpout0.waitingToEmit;
        boolean boolean2 = genericDeclarationKafkaSpout0.waitingToEmit();
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService3 = genericDeclarationKafkaSpout0.retryService;
        org.apache.storm.spout.SpoutOutputCollector spoutOutputCollector4 = genericDeclarationKafkaSpout0.collector;
        java.lang.Class<?> wildcardClass5 = genericDeclarationKafkaSpout0.getClass();
        org.junit.Assert.assertNull(genericDeclarationConsumerRecordItor1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(kafkaSpoutRetryService3);
        org.junit.Assert.assertNull(spoutOutputCollector4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1576");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        long long6 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.partition();
        int int8 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord5.toString();
        java.lang.String str10 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        long long11 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
    }

    @Test
    public void test1577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1577");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator12 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord14 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator12, "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (short) 100, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator12, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator17 = offsetComparator12.reversed();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator18 = offsetComparator12.reversed();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("hi!", (int) ' ', (long) (short) -1, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator12, "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord22 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (short) 100, (long) (byte) -1, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator12, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator23 = kafkaSpoutMessageIdComparatorConsumerRecord22.key();
        long long24 = kafkaSpoutMessageIdComparatorConsumerRecord22.offset();
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator17);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator18);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
    }

    @Test
    public void test1578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1578");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.Class<?>> headerIterableKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.Class<?>>();
    }

    @Test
    public void test1579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1579");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator11 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator11, "");
        org.apache.kafka.common.record.TimestampType timestampType14 = kafkaSpoutMessageIdComparatorConsumerRecord13.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator25 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator25, "");
        org.apache.kafka.common.record.TimestampType timestampType28 = kafkaSpoutMessageIdComparatorConsumerRecord27.timestampType();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        java.lang.Object obj34 = new java.lang.Object();
        java.lang.Class<?> wildcardClass35 = obj34.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType28, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass33, (java.lang.reflect.GenericDeclaration) wildcardClass35);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator44 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator44, "");
        org.apache.kafka.common.record.TimestampType timestampType47 = kafkaSpoutMessageIdComparatorConsumerRecord46.timestampType();
        java.lang.Object obj51 = new java.lang.Object();
        java.lang.Class<?> wildcardClass52 = obj51.getClass();
        java.lang.Object obj53 = new java.lang.Object();
        java.lang.Class<?> wildcardClass54 = obj53.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType47, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass52, (java.lang.reflect.GenericDeclaration) wildcardClass54);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("hi!", (int) (byte) 0, (long) (byte) 10, 10L, timestampType14, (long) (short) 10, (int) (short) 0, (int) (byte) 0, (java.lang.reflect.Type) wildcardClass33, timestampType47);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator60 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=null}", (int) (short) 0, (long) (byte) 1, (long) (short) 100, timestampType47, 0L, (int) (byte) 10, (int) (short) 100, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator60, "hi!");
        int int63 = kafkaSpoutMessageIdComparatorConsumerRecord62.serializedKeySize();
        long long64 = kafkaSpoutMessageIdComparatorConsumerRecord62.checksum();
        long long65 = kafkaSpoutMessageIdComparatorConsumerRecord62.checksum();
        org.apache.kafka.common.header.Headers headers66 = kafkaSpoutMessageIdComparatorConsumerRecord62.headers();
        org.apache.kafka.common.record.TimestampType timestampType67 = kafkaSpoutMessageIdComparatorConsumerRecord62.timestampType();
        java.lang.String str68 = kafkaSpoutMessageIdComparatorConsumerRecord62.toString();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertNotNull(headers66);
        org.junit.Assert.assertTrue("'" + timestampType67 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType67.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test1580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1580");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> timestampTypeEnumKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>();
    }

    @Test
    public void test1581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1581");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        int int9 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str10 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        int int11 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedKeySize();
        long long12 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        int int13 = kafkaSpoutMessageIdComparatorConsumerRecord5.partition();
        java.lang.String str14 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.util.Optional<java.lang.Integer> intOptional15 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        int int16 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test1582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1582");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>.KafkaSpoutConsumerRebalanceListener kafkaSpoutConsumerRebalanceListener1 = kafkaSpout0.new KafkaSpoutConsumerRebalanceListener();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$KafkaSpoutConsumerRebalanceListener with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1583");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator7 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator7, "");
        org.apache.kafka.common.record.TimestampType timestampType10 = kafkaSpoutMessageIdComparatorConsumerRecord9.timestampType();
        int int11 = kafkaSpoutMessageIdComparatorConsumerRecord9.serializedValueSize();
        java.lang.String str12 = kafkaSpoutMessageIdComparatorConsumerRecord9.value();
        int int13 = kafkaSpoutMessageIdComparatorConsumerRecord9.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional14 = kafkaSpoutMessageIdComparatorConsumerRecord9.leaderEpoch();
        int int15 = kafkaSpoutMessageIdComparatorConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType16 = kafkaSpoutMessageIdComparatorConsumerRecord9.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator26 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator26, "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (short) 100, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator26, "");
        int int31 = kafkaSpoutMessageIdComparatorConsumerRecord30.serializedValueSize();
        java.lang.String str32 = kafkaSpoutMessageIdComparatorConsumerRecord30.topic();
        int int33 = kafkaSpoutMessageIdComparatorConsumerRecord30.serializedValueSize();
        org.apache.kafka.common.header.Headers headers34 = kafkaSpoutMessageIdComparatorConsumerRecord30.headers();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator35 = kafkaSpoutMessageIdComparatorConsumerRecord30.key();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator36 = kafkaSpoutMessageIdComparator35.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator44 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator44, "");
        java.lang.String str47 = kafkaSpoutMessageIdComparatorConsumerRecord46.topic();
        org.apache.kafka.common.header.Headers headers48 = kafkaSpoutMessageIdComparatorConsumerRecord46.headers();
        org.apache.kafka.common.header.Headers headers49 = kafkaSpoutMessageIdComparatorConsumerRecord46.headers();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator50 = kafkaSpoutMessageIdComparatorConsumerRecord46.key();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator50;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("hi!", 0, (long) 10, kafkaSpoutMessageIdComparator50, "hi!");
        java.util.Optional<java.lang.Integer> intOptional54 = kafkaSpoutMessageIdComparatorConsumerRecord53.leaderEpoch();
        int int55 = kafkaSpoutMessageIdComparatorConsumerRecord53.serializedKeySize();
        java.lang.String str56 = kafkaSpoutMessageIdComparatorConsumerRecord53.topic();
        java.lang.String str57 = kafkaSpoutMessageIdComparatorConsumerRecord53.value();
        int int58 = kafkaSpoutMessageIdComparatorConsumerRecord53.partition();
        org.apache.kafka.common.header.Headers headers59 = kafkaSpoutMessageIdComparatorConsumerRecord53.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("ConsumerRecord(topic = KafkaSpout{acked=null, emitted=[]}, partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = 1, serialized key size = 97, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = KafkaSpout{acked=null, emitted=[]})", 0, (long) 1, (long) '4', timestampType16, (java.lang.Long) 1L, (int) (short) 1, 52, kafkaSpoutMessageIdComparator35, "KafkaSpout{acked=null, emitted=[]}", headers59);
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(intOptional14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(headers34);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator35);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator36);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(headers48);
        org.junit.Assert.assertNotNull(headers49);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator50);
        org.junit.Assert.assertNotNull(intOptional54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(headers59);
    }

    @Test
    public void test1584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1584");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        long long7 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord5.toString();
        long long10 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        int int11 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedKeySize();
        long long12 = kafkaSpoutMessageIdComparatorConsumerRecord5.offset();
        long long13 = kafkaSpoutMessageIdComparatorConsumerRecord5.offset();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test1585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1585");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator11 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator11, "");
        org.apache.kafka.common.record.TimestampType timestampType14 = kafkaSpoutMessageIdComparatorConsumerRecord13.timestampType();
        long long15 = kafkaSpoutMessageIdComparatorConsumerRecord13.timestamp();
        long long16 = kafkaSpoutMessageIdComparatorConsumerRecord13.offset();
        java.lang.String str17 = kafkaSpoutMessageIdComparatorConsumerRecord13.topic();
        org.apache.kafka.common.header.Headers headers18 = kafkaSpoutMessageIdComparatorConsumerRecord13.headers();
        org.apache.kafka.common.record.TimestampType timestampType19 = kafkaSpoutMessageIdComparatorConsumerRecord13.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator26 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator26, "");
        org.apache.kafka.common.record.TimestampType timestampType29 = kafkaSpoutMessageIdComparatorConsumerRecord28.timestampType();
        int int30 = kafkaSpoutMessageIdComparatorConsumerRecord28.serializedValueSize();
        java.lang.String str31 = kafkaSpoutMessageIdComparatorConsumerRecord28.value();
        java.lang.String str32 = kafkaSpoutMessageIdComparatorConsumerRecord28.value();
        org.apache.kafka.common.record.TimestampType timestampType33 = kafkaSpoutMessageIdComparatorConsumerRecord28.timestampType();
        int int34 = kafkaSpoutMessageIdComparatorConsumerRecord28.serializedKeySize();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator35 = kafkaSpoutMessageIdComparatorConsumerRecord28.key();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator36 = kafkaSpoutMessageIdComparatorConsumerRecord28.key();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator37 = kafkaSpoutMessageIdComparator36.reversed();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("hi!", (int) '#', 0L, (long) (byte) -1, timestampType19, (long) (short) 10, (int) ' ', 1, kafkaSpoutMessageIdComparator37, "");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator46 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator46, "");
        org.apache.kafka.common.record.TimestampType timestampType49 = kafkaSpoutMessageIdComparatorConsumerRecord48.timestampType();
        int int50 = kafkaSpoutMessageIdComparatorConsumerRecord48.serializedValueSize();
        java.lang.String str51 = kafkaSpoutMessageIdComparatorConsumerRecord48.value();
        java.lang.String str52 = kafkaSpoutMessageIdComparatorConsumerRecord48.value();
        java.lang.String str53 = kafkaSpoutMessageIdComparatorConsumerRecord48.value();
        int int54 = kafkaSpoutMessageIdComparatorConsumerRecord48.partition();
        java.lang.String str55 = kafkaSpoutMessageIdComparatorConsumerRecord48.toString();
        long long56 = kafkaSpoutMessageIdComparatorConsumerRecord48.offset();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator57 = kafkaSpoutMessageIdComparatorConsumerRecord48.key();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator71 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord73 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator71, "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord75 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (short) 100, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator71, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator76 = offsetComparator71.reversed();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator77 = offsetComparator71.reversed();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("hi!", (int) ' ', (long) (short) -1, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator71, "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord81 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (short) 100, (long) (byte) -1, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator71, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator82 = kafkaSpoutMessageIdComparatorConsumerRecord81.key();
        org.apache.kafka.common.header.Headers headers83 = kafkaSpoutMessageIdComparatorConsumerRecord81.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord84 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=[]}", (int) 'a', 10L, 1L, timestampType19, (java.lang.Long) 10L, (int) 'a', 0, kafkaSpoutMessageIdComparator57, "ConsumerRecord(topic = KafkaSpout{acked=null, emitted=null}, partition = -1, leaderEpoch = null, offset = 97, NoTimestampType = 32, serialized key size = 100, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = )", headers83);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator85 = kafkaSpoutMessageIdComparatorConsumerRecord84.key();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(headers18);
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType29 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType29.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertTrue("'" + timestampType33 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType33.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator35);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator36);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator37);
        org.junit.Assert.assertTrue("'" + timestampType49 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType49.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator57);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator76);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator77);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator82);
        org.junit.Assert.assertNotNull(headers83);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator85);
    }

    @Test
    public void test1586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1586");
        org.apache.storm.kafka.spout.KafkaSpout<java.util.Optional<java.lang.Integer>, org.apache.storm.kafka.spout.KafkaSpout<java.lang.String, java.lang.CharSequence>.Timer> intOptionalKafkaSpout3 = new org.apache.storm.kafka.spout.KafkaSpout<java.util.Optional<java.lang.Integer>, org.apache.storm.kafka.spout.KafkaSpout<java.lang.String, java.lang.CharSequence>.Timer>();
        java.lang.Class<?> wildcardClass4 = intOptionalKafkaSpout3.getClass();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator8 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator8, "");
        java.lang.String str11 = kafkaSpoutMessageIdComparatorConsumerRecord10.topic();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator12 = kafkaSpoutMessageIdComparatorConsumerRecord10.key();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator13 = kafkaSpoutMessageIdComparator12.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator17 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator17, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator20 = offsetComparator17.reversed();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator21 = kafkaSpoutMessageIdComparator12.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator17);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator> annotatedElementConsumerRecord22 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator>("KafkaSpout{acked=null, emitted=null}", 35, (long) 'a', (java.lang.reflect.AnnotatedElement) wildcardClass4, offsetComparator17);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId23 = null;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId24 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int25 = offsetComparator17.compare(kafkaSpoutMessageId23, kafkaSpoutMessageId24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator12);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator13);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator20);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator21);
    }

    @Test
    public void test1587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1587");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.util.AbstractList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.util.AbstractList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>();
    }

    @Test
    public void test1588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1588");
        org.apache.storm.kafka.spout.KafkaSpout<java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>> kafkaSpoutMessageIdSetKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>>();
    }

    @Test
    public void test1589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1589");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.util.Optional<java.lang.Integer> intOptional10 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType11 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int12 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedKeySize();
        java.lang.String str13 = kafkaSpoutMessageIdComparatorConsumerRecord5.toString();
        int int14 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional15 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        int int16 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test1590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1590");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        java.lang.String str6 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        java.util.Optional<java.lang.Integer> intOptional7 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        long long8 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        int int9 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional10 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        int int11 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(intOptional7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test1591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1591");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>();
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService1 = null;
        genericDeclarationKafkaSpout0.retryService = kafkaSpoutRetryService1;
        org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy firstPollOffsetStrategy3 = genericDeclarationKafkaSpout0.firstPollOffsetStrategy;
        java.lang.String str4 = genericDeclarationKafkaSpout0.toString();
        org.apache.storm.kafka.spout.KafkaSpoutTuplesBuilder<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpoutTuplesBuilder5 = null;
        genericDeclarationKafkaSpout0.tuplesBuilder = genericDeclarationKafkaSpoutTuplesBuilder5;
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpoutConfig7 = genericDeclarationKafkaSpout0.kafkaSpoutConfig;
        boolean boolean8 = genericDeclarationKafkaSpout0.consumerAutoCommitMode;
        long long9 = genericDeclarationKafkaSpout0.numUncommittedOffsets;
        org.junit.Assert.assertNull(firstPollOffsetStrategy3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "KafkaSpout{acked=null, emitted=null}" + "'", str4, "KafkaSpout{acked=null, emitted=null}");
        org.junit.Assert.assertNull(genericDeclarationKafkaSpoutConfig7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test1592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1592");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.topology.IRichSpout, org.apache.kafka.common.record.TimestampType> iRichSpoutKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IRichSpout, org.apache.kafka.common.record.TimestampType> iRichSpoutKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IRichSpout, org.apache.kafka.common.record.TimestampType>(iRichSpoutKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1593");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout<java.lang.String, java.lang.CharSequence>.Timer, java.lang.CharSequence> timerKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout<java.lang.String, java.lang.CharSequence>.Timer, java.lang.CharSequence> timerKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout<java.lang.String, java.lang.CharSequence>.Timer, java.lang.CharSequence>(timerKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1594");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        int int9 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        long long10 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType11 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        long long12 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        org.apache.kafka.common.header.Headers headers13 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(headers13);
    }

    @Test
    public void test1595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1595");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator6 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator6, "");
        org.apache.kafka.common.record.TimestampType timestampType9 = kafkaSpoutMessageIdComparatorConsumerRecord8.timestampType();
        int int10 = kafkaSpoutMessageIdComparatorConsumerRecord8.serializedValueSize();
        java.lang.String str11 = kafkaSpoutMessageIdComparatorConsumerRecord8.value();
        java.lang.String str12 = kafkaSpoutMessageIdComparatorConsumerRecord8.value();
        java.lang.String str13 = kafkaSpoutMessageIdComparatorConsumerRecord8.value();
        java.util.Optional<java.lang.Integer> intOptional14 = kafkaSpoutMessageIdComparatorConsumerRecord8.leaderEpoch();
        int int15 = kafkaSpoutMessageIdComparatorConsumerRecord8.serializedKeySize();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator16 = kafkaSpoutMessageIdComparatorConsumerRecord8.key();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord18 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=null}", (int) '4', (long) 97, kafkaSpoutMessageIdComparator16, "KafkaSpout{acked=null, emitted=[]}");
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(intOptional14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator16);
    }

    @Test
    public void test1596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1596");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        java.lang.String str6 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator7 = kafkaSpoutMessageIdComparatorConsumerRecord5.key();
        long long8 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        long long9 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        java.lang.String str10 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        int int11 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test1597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1597");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        java.lang.String str6 = kafkaSpoutMessageIdComparatorConsumerRecord5.toString();
        org.apache.kafka.common.header.Headers headers7 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        int int8 = kafkaSpoutMessageIdComparatorConsumerRecord5.partition();
        org.junit.Assert.assertNotNull(headers7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
    }

    @Test
    public void test1598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1598");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator7 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator7, "");
        org.apache.kafka.common.record.TimestampType timestampType10 = kafkaSpoutMessageIdComparatorConsumerRecord9.timestampType();
        int int11 = kafkaSpoutMessageIdComparatorConsumerRecord9.serializedValueSize();
        java.lang.String str12 = kafkaSpoutMessageIdComparatorConsumerRecord9.value();
        java.lang.String str13 = kafkaSpoutMessageIdComparatorConsumerRecord9.value();
        java.lang.String str14 = kafkaSpoutMessageIdComparatorConsumerRecord9.value();
        java.lang.String str15 = kafkaSpoutMessageIdComparatorConsumerRecord9.value();
        org.apache.kafka.common.record.TimestampType timestampType16 = kafkaSpoutMessageIdComparatorConsumerRecord9.timestampType();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator20 = null;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator25 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator25, "");
        org.apache.kafka.common.record.TimestampType timestampType28 = kafkaSpoutMessageIdComparatorConsumerRecord27.timestampType();
        long long29 = kafkaSpoutMessageIdComparatorConsumerRecord27.timestamp();
        java.lang.String str30 = kafkaSpoutMessageIdComparatorConsumerRecord27.value();
        java.lang.String str31 = kafkaSpoutMessageIdComparatorConsumerRecord27.toString();
        long long32 = kafkaSpoutMessageIdComparatorConsumerRecord27.checksum();
        int int33 = kafkaSpoutMessageIdComparatorConsumerRecord27.serializedKeySize();
        long long34 = kafkaSpoutMessageIdComparatorConsumerRecord27.offset();
        org.apache.kafka.common.header.Headers headers35 = kafkaSpoutMessageIdComparatorConsumerRecord27.headers();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator39 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator39, "");
        org.apache.kafka.common.record.TimestampType timestampType42 = kafkaSpoutMessageIdComparatorConsumerRecord41.timestampType();
        int int43 = kafkaSpoutMessageIdComparatorConsumerRecord41.serializedValueSize();
        java.lang.String str44 = kafkaSpoutMessageIdComparatorConsumerRecord41.value();
        java.lang.String str45 = kafkaSpoutMessageIdComparatorConsumerRecord41.value();
        org.apache.kafka.common.record.TimestampType timestampType46 = kafkaSpoutMessageIdComparatorConsumerRecord41.timestampType();
        int int47 = kafkaSpoutMessageIdComparatorConsumerRecord41.serializedKeySize();
        long long48 = kafkaSpoutMessageIdComparatorConsumerRecord41.offset();
        long long49 = kafkaSpoutMessageIdComparatorConsumerRecord41.offset();
        long long50 = kafkaSpoutMessageIdComparatorConsumerRecord41.timestamp();
        org.apache.kafka.common.header.Headers headers51 = kafkaSpoutMessageIdComparatorConsumerRecord41.headers();
        java.util.Optional<java.lang.Integer> intOptional52 = kafkaSpoutMessageIdComparatorConsumerRecord41.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 0, 35L, (long) 0, timestampType16, (java.lang.Long) 35L, (int) (short) 100, (int) '#', kafkaSpoutMessageIdComparator20, "KafkaSpout{acked=null, emitted=null}", headers35, intOptional52);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator54 = kafkaSpoutMessageIdComparatorConsumerRecord53.key();
        long long55 = kafkaSpoutMessageIdComparatorConsumerRecord53.offset();
        java.lang.Class<?> wildcardClass56 = kafkaSpoutMessageIdComparatorConsumerRecord53.getClass();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(headers35);
        org.junit.Assert.assertTrue("'" + timestampType42 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType42.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertTrue("'" + timestampType46 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType46.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-1L) + "'", long50 == (-1L));
        org.junit.Assert.assertNotNull(headers51);
        org.junit.Assert.assertNotNull(intOptional52);
        org.junit.Assert.assertNull(kafkaSpoutMessageIdComparator54);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 35L + "'", long55 == 35L);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test1599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1599");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator6 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (-1), (long) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator6, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator9 = offsetComparator6.reversed();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord11 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("hi!", 0, (long) 1, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator6, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator12 = org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator13 = kafkaSpoutMessageIdComparator12.reversed();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator14 = offsetComparator6.thenComparing(kafkaSpoutMessageIdComparator12);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator15 = kafkaSpoutMessageIdComparator12.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator15;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator20 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord22 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator20, "");
        org.apache.kafka.common.record.TimestampType timestampType23 = kafkaSpoutMessageIdComparatorConsumerRecord22.timestampType();
        long long24 = kafkaSpoutMessageIdComparatorConsumerRecord22.timestamp();
        long long25 = kafkaSpoutMessageIdComparatorConsumerRecord22.offset();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator26 = kafkaSpoutMessageIdComparatorConsumerRecord22.key();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator27 = kafkaSpoutMessageIdComparator26.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator34 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator34, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator37 = offsetComparator34.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator34;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator39 = offsetComparator34.reversed();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=null}", (int) (byte) -1, (long) 100, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator34, "hi!");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator42 = kafkaSpoutMessageIdComparator26.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator34);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator43 = kafkaSpoutMessageIdComparator15.thenComparing(kafkaSpoutMessageIdComparator42);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator44 = kafkaSpoutMessageIdComparator43.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator44;
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator9);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator12);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator13);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator14);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator15);
        org.junit.Assert.assertTrue("'" + timestampType23 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType23.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator26);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator27);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator37);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator39);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator42);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator43);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator44);
    }

    @Test
    public void test1600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1600");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        int int6 = kafkaSpoutMessageIdComparatorConsumerRecord5.partition();
        long long7 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        long long8 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        java.util.Optional<java.lang.Integer> intOptional9 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        long long10 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        org.apache.kafka.common.record.TimestampType timestampType11 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator12 = kafkaSpoutMessageIdComparatorConsumerRecord5.key();
        long long13 = kafkaSpoutMessageIdComparatorConsumerRecord5.offset();
        long long14 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertNotNull(intOptional9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
    }

    @Test
    public void test1601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1601");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>();
        genericDeclarationKafkaSpout0.maxRetries = (byte) -1;
        boolean boolean3 = genericDeclarationKafkaSpout0.waitingToEmit();
        org.apache.kafka.clients.consumer.KafkaConsumer<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaConsumer4 = null;
        genericDeclarationKafkaSpout0.kafkaConsumer = genericDeclarationKafkaConsumer4;
        org.apache.kafka.clients.consumer.ConsumerRecords<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationConsumerRecords6 = null;
        // The following exception was thrown during execution in test generation
        try {
            genericDeclarationKafkaSpout0.setWaitingToEmit(genericDeclarationConsumerRecords6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1602");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>();
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService1 = null;
        genericDeclarationKafkaSpout0.retryService = kafkaSpoutRetryService1;
        org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy firstPollOffsetStrategy3 = genericDeclarationKafkaSpout0.firstPollOffsetStrategy;
        java.lang.String str4 = genericDeclarationKafkaSpout0.toString();
        org.apache.storm.kafka.spout.KafkaSpoutTuplesBuilder<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpoutTuplesBuilder5 = null;
        genericDeclarationKafkaSpout0.tuplesBuilder = genericDeclarationKafkaSpoutTuplesBuilder5;
        boolean boolean7 = genericDeclarationKafkaSpout0.initialized;
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpout8 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>();
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService9 = null;
        genericDeclarationKafkaSpout8.retryService = kafkaSpoutRetryService9;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray11 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet12 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet12, kafkaSpoutMessageIdArray11);
        genericDeclarationKafkaSpout8.emitted = kafkaSpoutMessageIdSet12;
        genericDeclarationKafkaSpout0.emitted = kafkaSpoutMessageIdSet12;
        // The following exception was thrown during execution in test generation
        try {
            genericDeclarationKafkaSpout0.activate();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(firstPollOffsetStrategy3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "KafkaSpout{acked=null, emitted=null}" + "'", str4, "KafkaSpout{acked=null, emitted=null}");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1603");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        int int9 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str10 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        int int11 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedKeySize();
        long long12 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        org.apache.kafka.common.record.TimestampType timestampType13 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator14 = kafkaSpoutMessageIdComparatorConsumerRecord5.key();
        int int15 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test1604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1604");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator10 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator10, "");
        long long13 = kafkaSpoutMessageIdComparatorConsumerRecord12.checksum();
        int int14 = kafkaSpoutMessageIdComparatorConsumerRecord12.partition();
        org.apache.kafka.common.header.Headers headers15 = kafkaSpoutMessageIdComparatorConsumerRecord12.headers();
        java.util.Optional<java.lang.Integer> intOptional16 = kafkaSpoutMessageIdComparatorConsumerRecord12.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType17 = kafkaSpoutMessageIdComparatorConsumerRecord12.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator24 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator24, "");
        org.apache.kafka.common.record.TimestampType timestampType27 = kafkaSpoutMessageIdComparatorConsumerRecord26.timestampType();
        long long28 = kafkaSpoutMessageIdComparatorConsumerRecord26.timestamp();
        long long29 = kafkaSpoutMessageIdComparatorConsumerRecord26.offset();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator30 = kafkaSpoutMessageIdComparatorConsumerRecord26.key();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator31 = kafkaSpoutMessageIdComparator30.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator35 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator35, "");
        java.lang.String str38 = kafkaSpoutMessageIdComparatorConsumerRecord37.topic();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator39 = kafkaSpoutMessageIdComparatorConsumerRecord37.key();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator40 = kafkaSpoutMessageIdComparator39.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator44 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator44, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator47 = offsetComparator44.reversed();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator48 = kafkaSpoutMessageIdComparator40.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator44);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator52 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator52, "");
        java.lang.String str55 = kafkaSpoutMessageIdComparatorConsumerRecord54.topic();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator56 = kafkaSpoutMessageIdComparatorConsumerRecord54.key();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator57 = kafkaSpoutMessageIdComparator40.thenComparing(kafkaSpoutMessageIdComparator56);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator58 = kafkaSpoutMessageIdComparator31.thenComparing(kafkaSpoutMessageIdComparator40);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator63 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord65 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator63, "");
        org.apache.kafka.common.record.TimestampType timestampType66 = kafkaSpoutMessageIdComparatorConsumerRecord65.timestampType();
        int int67 = kafkaSpoutMessageIdComparatorConsumerRecord65.serializedValueSize();
        java.lang.String str68 = kafkaSpoutMessageIdComparatorConsumerRecord65.value();
        int int69 = kafkaSpoutMessageIdComparatorConsumerRecord65.partition();
        long long70 = kafkaSpoutMessageIdComparatorConsumerRecord65.timestamp();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator71 = kafkaSpoutMessageIdComparatorConsumerRecord65.key();
        long long72 = kafkaSpoutMessageIdComparatorConsumerRecord65.checksum();
        org.apache.kafka.common.header.Headers headers73 = kafkaSpoutMessageIdComparatorConsumerRecord65.headers();
        java.util.Optional<java.lang.Integer> intOptional74 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord75 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("hi!", 52, 52L, (long) (byte) 100, timestampType17, (java.lang.Long) 0L, (int) (short) 1, (int) (byte) 100, kafkaSpoutMessageIdComparator31, "ConsumerRecord(topic = KafkaSpout{acked=null, emitted=[]}, partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = 1, serialized key size = 97, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = KafkaSpout{acked=null, emitted=[]})", headers73, intOptional74);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=[]}", (int) (short) -1, 100L, kafkaSpoutMessageIdComparator31, "ConsumerRecord(topic = KafkaSpout{acked=null, emitted=null}, partition = -1, leaderEpoch = null, offset = 97, NoTimestampType = 32, serialized key size = 100, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = )");
        int int78 = kafkaSpoutMessageIdComparatorConsumerRecord77.serializedValueSize();
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertNotNull(intOptional16);
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType27 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType27.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator30);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator31);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator39);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator40);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator47);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator48);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator56);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator57);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator58);
        org.junit.Assert.assertTrue("'" + timestampType66 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType66.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 10 + "'", int69 == 10);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + (-1L) + "'", long70 == (-1L));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator71);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + (-1L) + "'", long72 == (-1L));
        org.junit.Assert.assertNotNull(headers73);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
    }

    @Test
    public void test1605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1605");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator11 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator11, "");
        org.apache.kafka.common.record.TimestampType timestampType14 = kafkaSpoutMessageIdComparatorConsumerRecord13.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator25 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator25, "");
        org.apache.kafka.common.record.TimestampType timestampType28 = kafkaSpoutMessageIdComparatorConsumerRecord27.timestampType();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        java.lang.Object obj34 = new java.lang.Object();
        java.lang.Class<?> wildcardClass35 = obj34.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType28, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass33, (java.lang.reflect.GenericDeclaration) wildcardClass35);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator44 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator44, "");
        org.apache.kafka.common.record.TimestampType timestampType47 = kafkaSpoutMessageIdComparatorConsumerRecord46.timestampType();
        java.lang.Object obj51 = new java.lang.Object();
        java.lang.Class<?> wildcardClass52 = obj51.getClass();
        java.lang.Object obj53 = new java.lang.Object();
        java.lang.Class<?> wildcardClass54 = obj53.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType47, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass52, (java.lang.reflect.GenericDeclaration) wildcardClass54);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("hi!", (int) (byte) 0, (long) (byte) 10, 10L, timestampType14, (long) (short) 10, (int) (short) 0, (int) (byte) 0, (java.lang.reflect.Type) wildcardClass33, timestampType47);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator60 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=null}", (int) (short) 0, (long) (byte) 1, (long) (short) 100, timestampType47, 0L, (int) (byte) 10, (int) (short) 100, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator60, "hi!");
        java.lang.String str63 = kafkaSpoutMessageIdComparatorConsumerRecord62.toString();
        int int64 = kafkaSpoutMessageIdComparatorConsumerRecord62.partition();
        java.lang.String str65 = kafkaSpoutMessageIdComparatorConsumerRecord62.value();
        long long66 = kafkaSpoutMessageIdComparatorConsumerRecord62.checksum();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "hi!" + "'", str65, "hi!");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
    }

    @Test
    public void test1606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1606");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        long long9 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        int int10 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test1607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1607");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator6 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator6, "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (short) 100, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator6, "");
        int int11 = kafkaSpoutMessageIdComparatorConsumerRecord10.serializedValueSize();
        int int12 = kafkaSpoutMessageIdComparatorConsumerRecord10.serializedKeySize();
        java.lang.String str13 = kafkaSpoutMessageIdComparatorConsumerRecord10.topic();
        org.apache.kafka.common.header.Headers headers14 = kafkaSpoutMessageIdComparatorConsumerRecord10.headers();
        java.util.Optional<java.lang.Integer> intOptional15 = kafkaSpoutMessageIdComparatorConsumerRecord10.leaderEpoch();
        int int16 = kafkaSpoutMessageIdComparatorConsumerRecord10.serializedKeySize();
        int int17 = kafkaSpoutMessageIdComparatorConsumerRecord10.serializedKeySize();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test1608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1608");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        int int9 = kafkaSpoutMessageIdComparatorConsumerRecord5.partition();
        long long10 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        org.apache.kafka.common.header.Headers headers11 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        java.lang.String str12 = kafkaSpoutMessageIdComparatorConsumerRecord5.toString();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(headers11);
    }

    @Test
    public void test1609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1609");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        long long6 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.partition();
        org.apache.kafka.common.header.Headers headers8 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        java.util.Optional<java.lang.Integer> intOptional9 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        java.lang.String str10 = kafkaSpoutMessageIdComparatorConsumerRecord5.toString();
        java.lang.String str11 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertNotNull(intOptional9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test1610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1610");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        int int10 = kafkaSpoutMessageIdComparatorConsumerRecord5.partition();
        java.lang.String str11 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.util.Optional<java.lang.Integer> intOptional12 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        int int13 = kafkaSpoutMessageIdComparatorConsumerRecord5.partition();
        java.lang.String str14 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        java.lang.String str15 = kafkaSpoutMessageIdComparatorConsumerRecord5.toString();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator16 = kafkaSpoutMessageIdComparatorConsumerRecord5.key();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(intOptional12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator16);
    }

    @Test
    public void test1611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1611");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        java.util.concurrent.TimeUnit timeUnit3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.Type, java.lang.Object>.Timer timer4 = kafkaSpout0.new Timer(0L, (long) (byte) 0, timeUnit3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$Timer with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1612");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.base.BaseComponent, java.lang.reflect.AnnotatedElement> baseComponentKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.base.BaseComponent, java.lang.reflect.AnnotatedElement>();
    }

    @Test
    public void test1613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1613");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>, java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>.KafkaSpoutConsumerRebalanceListener kafkaSpoutConsumerRebalanceListener1 = kafkaSpout0.new KafkaSpoutConsumerRebalanceListener();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$KafkaSpoutConsumerRebalanceListener with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1614");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>> iComponentKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>>();
    }

    @Test
    public void test1615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1615");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>();
        org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy firstPollOffsetStrategy1 = null;
        genericDeclarationKafkaSpout0.firstPollOffsetStrategy = firstPollOffsetStrategy1;
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>.Timer timer3 = genericDeclarationKafkaSpout0.commitTimer;
        org.apache.kafka.clients.consumer.ConsumerRecords<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationConsumerRecords4 = null;
        // The following exception was thrown during execution in test generation
        try {
            genericDeclarationKafkaSpout0.setWaitingToEmit(genericDeclarationConsumerRecords4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(timer3);
    }

    @Test
    public void test1616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1616");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>();
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService1 = null;
        genericDeclarationKafkaSpout0.retryService = kafkaSpoutRetryService1;
        org.apache.kafka.clients.consumer.KafkaConsumer<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaConsumer3 = genericDeclarationKafkaSpout0.kafkaConsumer;
        org.apache.storm.spout.SpoutOutputCollector spoutOutputCollector4 = null;
        genericDeclarationKafkaSpout0.collector = spoutOutputCollector4;
        genericDeclarationKafkaSpout0.numUncommittedOffsets = 0L;
        genericDeclarationKafkaSpout0.maxRetries = (short) 10;
        boolean boolean10 = genericDeclarationKafkaSpout0.waitingToEmit();
        genericDeclarationKafkaSpout0.maxRetries = 0;
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpoutConfig13 = genericDeclarationKafkaSpout0.kafkaSpoutConfig;
        org.junit.Assert.assertNull(genericDeclarationKafkaConsumer3);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(genericDeclarationKafkaSpoutConfig13);
    }

    @Test
    public void test1617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1617");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout<org.apache.kafka.common.record.TimestampType, org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>>.KafkaSpoutConsumerRebalanceListener, org.apache.storm.topology.base.BaseRichSpout>.KafkaSpoutConsumerRebalanceListener kafkaSpoutConsumerRebalanceListener1 = kafkaSpout0.new KafkaSpoutConsumerRebalanceListener();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$KafkaSpoutConsumerRebalanceListener with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1618");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator9 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord11 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator9, "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (short) 100, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator9, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator14 = offsetComparator9.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator18 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator18, "");
        java.lang.String str21 = kafkaSpoutMessageIdComparatorConsumerRecord20.topic();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator22 = kafkaSpoutMessageIdComparatorConsumerRecord20.key();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator23 = kafkaSpoutMessageIdComparator22.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator27 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator27, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator30 = offsetComparator27.reversed();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator31 = kafkaSpoutMessageIdComparator23.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator27);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator35 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator35, "");
        java.lang.String str38 = kafkaSpoutMessageIdComparatorConsumerRecord37.topic();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator39 = kafkaSpoutMessageIdComparatorConsumerRecord37.key();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator40 = kafkaSpoutMessageIdComparator23.thenComparing(kafkaSpoutMessageIdComparator39);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator41 = kafkaSpoutMessageIdComparator14.thenComparing(kafkaSpoutMessageIdComparator23);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator42 = kafkaSpoutMessageIdComparator41.reversed();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator43 = kafkaSpoutMessageIdComparator42.reversed();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=null}", (int) '#', 100L, kafkaSpoutMessageIdComparator43, "KafkaSpout{acked=null, emitted=null}");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator46 = kafkaSpoutMessageIdComparator43.reversed();
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator14);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator22);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator23);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator30);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator31);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator39);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator40);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator41);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator42);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator43);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator46);
    }

    @Test
    public void test1619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1619");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>();
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService1 = null;
        genericDeclarationKafkaSpout0.retryService = kafkaSpoutRetryService1;
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>.Timer timer3 = genericDeclarationKafkaSpout0.commitTimer;
        org.apache.kafka.clients.consumer.KafkaConsumer<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaConsumer4 = genericDeclarationKafkaSpout0.kafkaConsumer;
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpoutConfig5 = genericDeclarationKafkaSpout0.kafkaSpoutConfig;
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpoutConfig6 = genericDeclarationKafkaSpout0.kafkaSpoutConfig;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>> genericDeclarationConsumerRecordItor7 = genericDeclarationKafkaSpout0.waitingToEmit;
        org.junit.Assert.assertNull(timer3);
        org.junit.Assert.assertNull(genericDeclarationKafkaConsumer4);
        org.junit.Assert.assertNull(genericDeclarationKafkaSpoutConfig5);
        org.junit.Assert.assertNull(genericDeclarationKafkaSpoutConfig6);
        org.junit.Assert.assertNull(genericDeclarationConsumerRecordItor7);
    }

    @Test
    public void test1620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1620");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.lang.reflect.GenericDeclaration, java.util.ArrayList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> genericDeclarationKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.util.ArrayList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> genericDeclarationKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.util.ArrayList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>(genericDeclarationKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1621");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        int int8 = kafkaSpoutMessageIdComparatorConsumerRecord5.partition();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator9 = kafkaSpoutMessageIdComparatorConsumerRecord5.key();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator9);
    }

    @Test
    public void test1622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1622");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.util.List<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>> kafkaSpoutMessageIdListKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.util.List<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>> kafkaSpoutMessageIdListKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<java.util.List<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>>(kafkaSpoutMessageIdListKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1623");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.AnnotatedElement, java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>.KafkaSpoutConsumerRebalanceListener kafkaSpoutConsumerRebalanceListener1 = kafkaSpout0.new KafkaSpoutConsumerRebalanceListener();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$KafkaSpoutConsumerRebalanceListener with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1624");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        int int9 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        long long10 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        java.lang.String str11 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        long long12 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        long long13 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
    }

    @Test
    public void test1625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1625");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>();
        org.apache.kafka.clients.consumer.KafkaConsumer<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaConsumer1 = genericDeclarationKafkaSpout0.kafkaConsumer;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>> genericDeclarationConsumerRecordItor2 = genericDeclarationKafkaSpout0.waitingToEmit;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>> genericDeclarationConsumerRecordItor3 = genericDeclarationKafkaSpout0.waitingToEmit;
        java.util.Set<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet4 = genericDeclarationKafkaSpout0.emitted;
        genericDeclarationKafkaSpout0.initialized = true;
        org.apache.storm.kafka.spout.KafkaSpoutStreams kafkaSpoutStreams7 = null;
        genericDeclarationKafkaSpout0.kafkaSpoutStreams = kafkaSpoutStreams7;
        org.apache.storm.kafka.spout.KafkaSpoutStreams kafkaSpoutStreams9 = null;
        genericDeclarationKafkaSpout0.kafkaSpoutStreams = kafkaSpoutStreams9;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>> genericDeclarationConsumerRecordItor11 = genericDeclarationKafkaSpout0.waitingToEmit;
        genericDeclarationKafkaSpout0.consumerAutoCommitMode = true;
        // The following exception was thrown during execution in test generation
        try {
            genericDeclarationKafkaSpout0.nextTuple();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(genericDeclarationKafkaConsumer1);
        org.junit.Assert.assertNull(genericDeclarationConsumerRecordItor2);
        org.junit.Assert.assertNull(genericDeclarationConsumerRecordItor3);
        org.junit.Assert.assertNull(kafkaSpoutMessageIdSet4);
        org.junit.Assert.assertNull(genericDeclarationConsumerRecordItor11);
    }

    @Test
    public void test1626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1626");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.kafka.common.header.Headers, java.util.List<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> headersKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<org.apache.kafka.common.header.Headers, java.util.List<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> headersKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.kafka.common.header.Headers, java.util.List<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>(headersKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1627");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str10 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.util.Optional<java.lang.Integer> intOptional11 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType12 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        long long13 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        java.util.Optional<java.lang.Integer> intOptional14 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(intOptional11);
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNotNull(intOptional14);
    }

    @Test
    public void test1628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1628");
        org.apache.storm.kafka.spout.KafkaSpout<java.util.AbstractCollection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.topology.IComponent> kafkaSpoutMessageIdCollectionKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.util.AbstractCollection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.topology.IComponent>();
    }

    @Test
    public void test1629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1629");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator14 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator14, "");
        org.apache.kafka.common.record.TimestampType timestampType17 = kafkaSpoutMessageIdComparatorConsumerRecord16.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator28 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator28, "");
        org.apache.kafka.common.record.TimestampType timestampType31 = kafkaSpoutMessageIdComparatorConsumerRecord30.timestampType();
        java.lang.Object obj35 = new java.lang.Object();
        java.lang.Class<?> wildcardClass36 = obj35.getClass();
        java.lang.Object obj37 = new java.lang.Object();
        java.lang.Class<?> wildcardClass38 = obj37.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType31, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass36, (java.lang.reflect.GenericDeclaration) wildcardClass38);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator47 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator47, "");
        org.apache.kafka.common.record.TimestampType timestampType50 = kafkaSpoutMessageIdComparatorConsumerRecord49.timestampType();
        java.lang.Object obj54 = new java.lang.Object();
        java.lang.Class<?> wildcardClass55 = obj54.getClass();
        java.lang.Object obj56 = new java.lang.Object();
        java.lang.Class<?> wildcardClass57 = obj56.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType50, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass55, (java.lang.reflect.GenericDeclaration) wildcardClass57);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("hi!", (int) (byte) 0, (long) (byte) 10, 10L, timestampType17, (long) (short) 10, (int) (short) 0, (int) (byte) 0, (java.lang.reflect.Type) wildcardClass36, timestampType50);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator66 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator66, "");
        int int69 = kafkaSpoutMessageIdComparatorConsumerRecord68.partition();
        java.util.Optional<java.lang.Integer> intOptional70 = kafkaSpoutMessageIdComparatorConsumerRecord68.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional71 = kafkaSpoutMessageIdComparatorConsumerRecord68.leaderEpoch();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator72 = kafkaSpoutMessageIdComparatorConsumerRecord68.key();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 1, (long) 1, (long) (byte) -1, timestampType50, 32L, 0, (int) (short) 10, kafkaSpoutMessageIdComparator72, "KafkaSpout{acked=null, emitted=null}");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=[]}", (int) (short) 0, (-1L), kafkaSpoutMessageIdComparator72, "ConsumerRecord(topic = KafkaSpout{acked=null, emitted=null}, partition = -1, leaderEpoch = null, offset = 97, NoTimestampType = 32, serialized key size = 100, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = )");
        int int77 = kafkaSpoutMessageIdComparatorConsumerRecord76.serializedValueSize();
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertTrue("'" + timestampType50 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType50.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 10 + "'", int69 == 10);
        org.junit.Assert.assertNotNull(intOptional70);
        org.junit.Assert.assertNotNull(intOptional71);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator72);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
    }

    @Test
    public void test1630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1630");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>();
        org.apache.kafka.clients.consumer.KafkaConsumer<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaConsumer1 = genericDeclarationKafkaSpout0.kafkaConsumer;
        org.apache.storm.kafka.spout.KafkaSpoutStreams kafkaSpoutStreams2 = genericDeclarationKafkaSpout0.kafkaSpoutStreams;
        java.util.Set<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet3 = genericDeclarationKafkaSpout0.emitted;
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpoutConfig4 = null;
        genericDeclarationKafkaSpout0.kafkaSpoutConfig = genericDeclarationKafkaSpoutConfig4;
        java.util.Set<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = genericDeclarationKafkaSpout0.emitted;
        // The following exception was thrown during execution in test generation
        try {
            genericDeclarationKafkaSpout0.subscribeKafkaConsumer();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(genericDeclarationKafkaConsumer1);
        org.junit.Assert.assertNull(kafkaSpoutStreams2);
        org.junit.Assert.assertNull(kafkaSpoutMessageIdSet3);
        org.junit.Assert.assertNull(kafkaSpoutMessageIdSet6);
    }

    @Test
    public void test1631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1631");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator7 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator7, "");
        org.apache.kafka.common.record.TimestampType timestampType10 = kafkaSpoutMessageIdComparatorConsumerRecord9.timestampType();
        int int11 = kafkaSpoutMessageIdComparatorConsumerRecord9.serializedValueSize();
        java.lang.String str12 = kafkaSpoutMessageIdComparatorConsumerRecord9.value();
        java.lang.String str13 = kafkaSpoutMessageIdComparatorConsumerRecord9.value();
        java.lang.String str14 = kafkaSpoutMessageIdComparatorConsumerRecord9.value();
        org.apache.kafka.common.record.TimestampType timestampType15 = kafkaSpoutMessageIdComparatorConsumerRecord9.timestampType();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator19 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=null}", (int) (short) -1, (long) 97, 32L, timestampType15, (long) (byte) 0, 100, (int) '4', kafkaSpoutMessageIdComparator19, "");
        int int22 = kafkaSpoutMessageIdComparatorConsumerRecord21.partition();
        long long23 = kafkaSpoutMessageIdComparatorConsumerRecord21.checksum();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
    }

    @Test
    public void test1632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1632");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator11 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator11, "");
        org.apache.kafka.common.record.TimestampType timestampType14 = kafkaSpoutMessageIdComparatorConsumerRecord13.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator25 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator25, "");
        org.apache.kafka.common.record.TimestampType timestampType28 = kafkaSpoutMessageIdComparatorConsumerRecord27.timestampType();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        java.lang.Object obj34 = new java.lang.Object();
        java.lang.Class<?> wildcardClass35 = obj34.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType28, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass33, (java.lang.reflect.GenericDeclaration) wildcardClass35);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator44 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator44, "");
        org.apache.kafka.common.record.TimestampType timestampType47 = kafkaSpoutMessageIdComparatorConsumerRecord46.timestampType();
        java.lang.Object obj51 = new java.lang.Object();
        java.lang.Class<?> wildcardClass52 = obj51.getClass();
        java.lang.Object obj53 = new java.lang.Object();
        java.lang.Class<?> wildcardClass54 = obj53.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType47, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass52, (java.lang.reflect.GenericDeclaration) wildcardClass54);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("hi!", (int) (byte) 0, (long) (byte) 10, 10L, timestampType14, (long) (short) 10, (int) (short) 0, (int) (byte) 0, (java.lang.reflect.Type) wildcardClass33, timestampType47);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator60 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=null}", (int) (short) 0, (long) (byte) 1, (long) (short) 100, timestampType47, 0L, (int) (byte) 10, (int) (short) 100, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator60, "hi!");
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator60;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator64 = offsetComparator60.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator60;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator72 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator72, "");
        java.lang.String str75 = kafkaSpoutMessageIdComparatorConsumerRecord74.topic();
        org.apache.kafka.common.header.Headers headers76 = kafkaSpoutMessageIdComparatorConsumerRecord74.headers();
        org.apache.kafka.common.header.Headers headers77 = kafkaSpoutMessageIdComparatorConsumerRecord74.headers();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator78 = kafkaSpoutMessageIdComparatorConsumerRecord74.key();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=[]}", (int) (short) 100, (long) (-1), kafkaSpoutMessageIdComparator78, "");
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator78;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator85 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator85, "");
        org.apache.kafka.common.record.TimestampType timestampType88 = kafkaSpoutMessageIdComparatorConsumerRecord87.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType89 = kafkaSpoutMessageIdComparatorConsumerRecord87.timestampType();
        java.util.Optional<java.lang.Integer> intOptional90 = kafkaSpoutMessageIdComparatorConsumerRecord87.leaderEpoch();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator91 = kafkaSpoutMessageIdComparatorConsumerRecord87.key();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator91;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator93 = kafkaSpoutMessageIdComparator78.thenComparing(kafkaSpoutMessageIdComparator91);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator94 = offsetComparator60.thenComparing(kafkaSpoutMessageIdComparator78);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator60;
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator64);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(headers76);
        org.junit.Assert.assertNotNull(headers77);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator78);
        org.junit.Assert.assertTrue("'" + timestampType88 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType88.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType89 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType89.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional90);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator91);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator93);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator94);
    }

    @Test
    public void test1633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1633");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>> genericDeclarationConsumerRecordItor1 = genericDeclarationKafkaSpout0.waitingToEmit;
        boolean boolean2 = genericDeclarationKafkaSpout0.waitingToEmit();
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService3 = genericDeclarationKafkaSpout0.retryService;
        org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy firstPollOffsetStrategy4 = genericDeclarationKafkaSpout0.firstPollOffsetStrategy;
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService5 = null;
        genericDeclarationKafkaSpout0.retryService = kafkaSpoutRetryService5;
        // The following exception was thrown during execution in test generation
        try {
            genericDeclarationKafkaSpout0.nextTuple();
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(genericDeclarationConsumerRecordItor1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(kafkaSpoutRetryService3);
        org.junit.Assert.assertNull(firstPollOffsetStrategy4);
    }

    @Test
    public void test1634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1634");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        long long7 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord5.toString();
        long long10 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        int int11 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedKeySize();
        long long12 = kafkaSpoutMessageIdComparatorConsumerRecord5.offset();
        org.apache.kafka.common.header.Headers headers13 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        long long14 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        int int15 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(headers13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test1635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1635");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        java.util.concurrent.TimeUnit timeUnit3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.util.Optional<java.lang.Integer>, org.apache.storm.kafka.spout.KafkaSpout<java.lang.String, java.lang.CharSequence>.Timer>.Timer timer4 = kafkaSpout0.new Timer((long) (short) 1, (long) 32, timeUnit3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$Timer with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1636");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.lang.CharSequence> timestampTypeEnumKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.lang.CharSequence>();
    }

    @Test
    public void test1637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1637");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator7 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator7, "");
        org.apache.kafka.common.record.TimestampType timestampType10 = kafkaSpoutMessageIdComparatorConsumerRecord9.timestampType();
        int int11 = kafkaSpoutMessageIdComparatorConsumerRecord9.serializedValueSize();
        java.lang.String str12 = kafkaSpoutMessageIdComparatorConsumerRecord9.value();
        java.lang.String str13 = kafkaSpoutMessageIdComparatorConsumerRecord9.value();
        java.lang.String str14 = kafkaSpoutMessageIdComparatorConsumerRecord9.value();
        org.apache.kafka.common.record.TimestampType timestampType15 = kafkaSpoutMessageIdComparatorConsumerRecord9.timestampType();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator19 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=null}", (int) (short) -1, (long) 97, 32L, timestampType15, (long) (byte) 0, 100, (int) '4', kafkaSpoutMessageIdComparator19, "");
        int int22 = kafkaSpoutMessageIdComparatorConsumerRecord21.partition();
        int int23 = kafkaSpoutMessageIdComparatorConsumerRecord21.partition();
        long long24 = kafkaSpoutMessageIdComparatorConsumerRecord21.offset();
        long long25 = kafkaSpoutMessageIdComparatorConsumerRecord21.offset();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 97L + "'", long24 == 97L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 97L + "'", long25 == 97L);
    }

    @Test
    public void test1638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1638");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator11 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator11, "");
        org.apache.kafka.common.record.TimestampType timestampType14 = kafkaSpoutMessageIdComparatorConsumerRecord13.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator25 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator25, "");
        org.apache.kafka.common.record.TimestampType timestampType28 = kafkaSpoutMessageIdComparatorConsumerRecord27.timestampType();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        java.lang.Object obj34 = new java.lang.Object();
        java.lang.Class<?> wildcardClass35 = obj34.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType28, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass33, (java.lang.reflect.GenericDeclaration) wildcardClass35);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator44 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator44, "");
        org.apache.kafka.common.record.TimestampType timestampType47 = kafkaSpoutMessageIdComparatorConsumerRecord46.timestampType();
        java.lang.Object obj51 = new java.lang.Object();
        java.lang.Class<?> wildcardClass52 = obj51.getClass();
        java.lang.Object obj53 = new java.lang.Object();
        java.lang.Class<?> wildcardClass54 = obj53.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType47, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass52, (java.lang.reflect.GenericDeclaration) wildcardClass54);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("hi!", (int) (byte) 0, (long) (byte) 10, 10L, timestampType14, (long) (short) 10, (int) (short) 0, (int) (byte) 0, (java.lang.reflect.Type) wildcardClass33, timestampType47);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator60 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=null}", (int) (short) 0, (long) (byte) 1, (long) (short) 100, timestampType47, 0L, (int) (byte) 10, (int) (short) 100, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator60, "hi!");
        java.lang.String str63 = kafkaSpoutMessageIdComparatorConsumerRecord62.toString();
        int int64 = kafkaSpoutMessageIdComparatorConsumerRecord62.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional65 = kafkaSpoutMessageIdComparatorConsumerRecord62.leaderEpoch();
        org.apache.kafka.common.header.Headers headers66 = kafkaSpoutMessageIdComparatorConsumerRecord62.headers();
        int int67 = kafkaSpoutMessageIdComparatorConsumerRecord62.serializedKeySize();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator68 = kafkaSpoutMessageIdComparatorConsumerRecord62.key();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 100 + "'", int64 == 100);
        org.junit.Assert.assertNotNull(intOptional65);
        org.junit.Assert.assertNotNull(headers66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 10 + "'", int67 == 10);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator68);
    }

    @Test
    public void test1639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1639");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        org.apache.kafka.common.record.TimestampType timestampType10 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int11 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedKeySize();
        long long12 = kafkaSpoutMessageIdComparatorConsumerRecord5.offset();
        long long13 = kafkaSpoutMessageIdComparatorConsumerRecord5.offset();
        java.lang.String str14 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        long long15 = kafkaSpoutMessageIdComparatorConsumerRecord5.offset();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test1640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1640");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator8 = null;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator13 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord15 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator13, "");
        org.apache.kafka.common.record.TimestampType timestampType16 = kafkaSpoutMessageIdComparatorConsumerRecord15.timestampType();
        long long17 = kafkaSpoutMessageIdComparatorConsumerRecord15.timestamp();
        long long18 = kafkaSpoutMessageIdComparatorConsumerRecord15.offset();
        java.lang.String str19 = kafkaSpoutMessageIdComparatorConsumerRecord15.topic();
        org.apache.kafka.common.header.Headers headers20 = kafkaSpoutMessageIdComparatorConsumerRecord15.headers();
        long long21 = kafkaSpoutMessageIdComparatorConsumerRecord15.timestamp();
        org.apache.kafka.common.header.Headers headers22 = kafkaSpoutMessageIdComparatorConsumerRecord15.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=null}", (int) (byte) 1, (-1L), (long) 97, timestampType4, (java.lang.Long) 1L, (int) '#', 0, kafkaSpoutMessageIdComparator8, "hi!", headers22);
        int int24 = kafkaSpoutMessageIdComparatorConsumerRecord23.partition();
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(headers20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertNotNull(headers22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
    }

    @Test
    public void test1641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1641");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        long long9 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        long long10 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        java.lang.String str11 = kafkaSpoutMessageIdComparatorConsumerRecord5.toString();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
    }

    @Test
    public void test1642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1642");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        int int6 = kafkaSpoutMessageIdComparatorConsumerRecord5.partition();
        long long7 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        long long8 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        java.util.Optional<java.lang.Integer> intOptional9 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        int int10 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str11 = kafkaSpoutMessageIdComparatorConsumerRecord5.toString();
        int int12 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertNotNull(intOptional9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test1643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1643");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        int int9 = kafkaSpoutMessageIdComparatorConsumerRecord5.partition();
        long long10 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator11 = kafkaSpoutMessageIdComparatorConsumerRecord5.key();
        org.apache.kafka.common.record.TimestampType timestampType12 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        long long13 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator11);
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
    }

    @Test
    public void test1644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1644");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator10 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator10, "");
        int int13 = kafkaSpoutMessageIdComparatorConsumerRecord12.partition();
        org.apache.kafka.common.record.TimestampType timestampType14 = kafkaSpoutMessageIdComparatorConsumerRecord12.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator21 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator21, "");
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator21;
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator21;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("hi!", (int) (short) 10, (long) 32, (long) (short) 0, timestampType14, (-1L), 97, 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator21, "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("hi!", (-1), 100L, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator21, "hi!");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator30 = kafkaSpoutMessageIdComparatorConsumerRecord29.key();
        java.lang.String str31 = kafkaSpoutMessageIdComparatorConsumerRecord29.toString();
        java.lang.Class<?> wildcardClass32 = kafkaSpoutMessageIdComparatorConsumerRecord29.getClass();
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator30);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test1645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1645");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator8 = null;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator21 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator21, "");
        org.apache.kafka.common.record.TimestampType timestampType24 = kafkaSpoutMessageIdComparatorConsumerRecord23.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator35 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator35, "");
        org.apache.kafka.common.record.TimestampType timestampType38 = kafkaSpoutMessageIdComparatorConsumerRecord37.timestampType();
        java.lang.Object obj42 = new java.lang.Object();
        java.lang.Class<?> wildcardClass43 = obj42.getClass();
        java.lang.Object obj44 = new java.lang.Object();
        java.lang.Class<?> wildcardClass45 = obj44.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType38, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass43, (java.lang.reflect.GenericDeclaration) wildcardClass45);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator54 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator54, "");
        org.apache.kafka.common.record.TimestampType timestampType57 = kafkaSpoutMessageIdComparatorConsumerRecord56.timestampType();
        java.lang.Object obj61 = new java.lang.Object();
        java.lang.Class<?> wildcardClass62 = obj61.getClass();
        java.lang.Object obj63 = new java.lang.Object();
        java.lang.Class<?> wildcardClass64 = obj63.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord65 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType57, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass62, (java.lang.reflect.GenericDeclaration) wildcardClass64);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("hi!", (int) (byte) 0, (long) (byte) 10, 10L, timestampType24, (long) (short) 10, (int) (short) 0, (int) (byte) 0, (java.lang.reflect.Type) wildcardClass43, timestampType57);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator70 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=null}", (int) (short) 0, (long) (byte) 1, (long) (short) 100, timestampType57, 0L, (int) (byte) 10, (int) (short) 100, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator70, "hi!");
        java.lang.String str73 = kafkaSpoutMessageIdComparatorConsumerRecord72.toString();
        int int74 = kafkaSpoutMessageIdComparatorConsumerRecord72.partition();
        int int75 = kafkaSpoutMessageIdComparatorConsumerRecord72.serializedKeySize();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator76 = kafkaSpoutMessageIdComparatorConsumerRecord72.key();
        org.apache.kafka.common.header.Headers headers77 = kafkaSpoutMessageIdComparatorConsumerRecord72.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord78 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("ConsumerRecord(topic = KafkaSpout{acked=null, emitted=null}, partition = -1, leaderEpoch = null, offset = 97, NoTimestampType = 32, serialized key size = 100, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = )", 35, (long) 32, (long) (short) 0, timestampType4, (java.lang.Long) 97L, (int) (short) 0, (int) (byte) 10, kafkaSpoutMessageIdComparator8, "ConsumerRecord(topic = KafkaSpout{acked=null, emitted=null}, partition = -1, leaderEpoch = null, offset = 97, NoTimestampType = 32, serialized key size = 100, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = )", headers77);
        org.apache.kafka.common.record.TimestampType timestampType79 = kafkaSpoutMessageIdComparatorConsumerRecord78.timestampType();
        org.junit.Assert.assertTrue("'" + timestampType24 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType24.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType38 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType38.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertTrue("'" + timestampType57 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType57.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10 + "'", int75 == 10);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator76);
        org.junit.Assert.assertNotNull(headers77);
        org.junit.Assert.assertNull(timestampType79);
    }

    @Test
    public void test1646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1646");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.kafka.clients.consumer.ConsumerRebalanceListener, java.lang.String> consumerRebalanceListenerKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.kafka.clients.consumer.ConsumerRebalanceListener, java.lang.String>();
    }

    @Test
    public void test1647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1647");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.lang.Iterable<org.apache.kafka.common.header.Header>, org.apache.kafka.clients.consumer.ConsumerRebalanceListener> headerIterableKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.lang.Iterable<org.apache.kafka.common.header.Header>, org.apache.kafka.clients.consumer.ConsumerRebalanceListener> headerIterableKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.Iterable<org.apache.kafka.common.header.Header>, org.apache.kafka.clients.consumer.ConsumerRebalanceListener>(headerIterableKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1648");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        long long6 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.partition();
        int int8 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        long long9 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        int int10 = kafkaSpoutMessageIdComparatorConsumerRecord5.partition();
        int int11 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test1649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1649");
        org.apache.storm.kafka.spout.KafkaSpout<java.util.Optional<java.lang.Integer>, java.io.Serializable> intOptionalKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.util.Optional<java.lang.Integer>, java.io.Serializable>();
    }

    @Test
    public void test1650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1650");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator11 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator11, "");
        org.apache.kafka.common.record.TimestampType timestampType14 = kafkaSpoutMessageIdComparatorConsumerRecord13.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator25 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator25, "");
        org.apache.kafka.common.record.TimestampType timestampType28 = kafkaSpoutMessageIdComparatorConsumerRecord27.timestampType();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        java.lang.Object obj34 = new java.lang.Object();
        java.lang.Class<?> wildcardClass35 = obj34.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType28, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass33, (java.lang.reflect.GenericDeclaration) wildcardClass35);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator44 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator44, "");
        org.apache.kafka.common.record.TimestampType timestampType47 = kafkaSpoutMessageIdComparatorConsumerRecord46.timestampType();
        java.lang.Object obj51 = new java.lang.Object();
        java.lang.Class<?> wildcardClass52 = obj51.getClass();
        java.lang.Object obj53 = new java.lang.Object();
        java.lang.Class<?> wildcardClass54 = obj53.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType47, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass52, (java.lang.reflect.GenericDeclaration) wildcardClass54);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("hi!", (int) (byte) 0, (long) (byte) 10, 10L, timestampType14, (long) (short) 10, (int) (short) 0, (int) (byte) 0, (java.lang.reflect.Type) wildcardClass33, timestampType47);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator60 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=null}", (int) (short) 0, (long) (byte) 1, (long) (short) 100, timestampType47, 0L, (int) (byte) 10, (int) (short) 100, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator60, "hi!");
        java.lang.String str63 = kafkaSpoutMessageIdComparatorConsumerRecord62.value();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator64 = kafkaSpoutMessageIdComparatorConsumerRecord62.key();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hi!" + "'", str63, "hi!");
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator64);
    }

    @Test
    public void test1651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1651");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.io.Serializable> kafkaSpoutMessageIdSetKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.io.Serializable> kafkaSpoutMessageIdSetKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.io.Serializable>(kafkaSpoutMessageIdSetKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1652");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>, org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>>.KafkaSpoutConsumerRebalanceListener kafkaSpoutConsumerRebalanceListener1 = kafkaSpout0.new KafkaSpoutConsumerRebalanceListener();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$KafkaSpoutConsumerRebalanceListener with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1653");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>.Timer timer1 = kafkaSpout0.new Timer();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$Timer with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1654");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout<java.lang.String, java.lang.CharSequence>.Timer, org.apache.kafka.clients.consumer.ConsumerRebalanceListener> timerKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout<java.lang.String, java.lang.CharSequence>.Timer, org.apache.kafka.clients.consumer.ConsumerRebalanceListener> timerKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout<java.lang.String, java.lang.CharSequence>.Timer, org.apache.kafka.clients.consumer.ConsumerRebalanceListener>(timerKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1655");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator6 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (-1), (long) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator6, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator9 = offsetComparator6.reversed();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator10 = kafkaSpoutMessageIdComparator9.reversed();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator11 = kafkaSpoutMessageIdComparator10.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator19 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator19, "");
        org.apache.kafka.common.record.TimestampType timestampType22 = kafkaSpoutMessageIdComparatorConsumerRecord21.timestampType();
        int int23 = kafkaSpoutMessageIdComparatorConsumerRecord21.serializedValueSize();
        java.lang.String str24 = kafkaSpoutMessageIdComparatorConsumerRecord21.value();
        java.lang.String str25 = kafkaSpoutMessageIdComparatorConsumerRecord21.value();
        org.apache.kafka.common.record.TimestampType timestampType26 = kafkaSpoutMessageIdComparatorConsumerRecord21.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator33 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (-1), (long) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator33, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator36 = offsetComparator33.reversed();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator37 = offsetComparator33.reversed();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=null}", (int) (short) -1, (long) 0, (long) (-1), timestampType26, (long) 100, (int) (byte) 10, (int) '#', kafkaSpoutMessageIdComparator37, "KafkaSpout{acked=null, emitted=null}");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator40 = kafkaSpoutMessageIdComparator11.thenComparing(kafkaSpoutMessageIdComparator37);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator11;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=[]}", (int) 'a', 0L, kafkaSpoutMessageIdComparator11, "KafkaSpout{acked=null, emitted=[]}");
        int int44 = kafkaSpoutMessageIdComparatorConsumerRecord43.serializedValueSize();
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator9);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator10);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator11);
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + timestampType26 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType26.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator36);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator37);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator40);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
    }

    @Test
    public void test1656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1656");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        long long7 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        long long8 = kafkaSpoutMessageIdComparatorConsumerRecord5.offset();
        java.util.Optional<java.lang.Integer> intOptional9 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        long long10 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(intOptional9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
    }

    @Test
    public void test1657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1657");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator10 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator10, "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord14 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (short) 100, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator10, "");
        int int15 = kafkaSpoutMessageIdComparatorConsumerRecord14.serializedValueSize();
        java.lang.String str16 = kafkaSpoutMessageIdComparatorConsumerRecord14.topic();
        int int17 = kafkaSpoutMessageIdComparatorConsumerRecord14.serializedValueSize();
        org.apache.kafka.common.header.Headers headers18 = kafkaSpoutMessageIdComparatorConsumerRecord14.headers();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator19 = kafkaSpoutMessageIdComparatorConsumerRecord14.key();
        org.apache.kafka.common.record.TimestampType timestampType20 = kafkaSpoutMessageIdComparatorConsumerRecord14.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator27 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator27, "");
        java.lang.String str30 = kafkaSpoutMessageIdComparatorConsumerRecord29.topic();
        java.util.Optional<java.lang.Integer> intOptional31 = kafkaSpoutMessageIdComparatorConsumerRecord29.leaderEpoch();
        long long32 = kafkaSpoutMessageIdComparatorConsumerRecord29.checksum();
        int int33 = kafkaSpoutMessageIdComparatorConsumerRecord29.serializedValueSize();
        int int34 = kafkaSpoutMessageIdComparatorConsumerRecord29.serializedKeySize();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator35 = kafkaSpoutMessageIdComparatorConsumerRecord29.key();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator40 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator40, "");
        int int43 = kafkaSpoutMessageIdComparatorConsumerRecord42.partition();
        long long44 = kafkaSpoutMessageIdComparatorConsumerRecord42.checksum();
        long long45 = kafkaSpoutMessageIdComparatorConsumerRecord42.timestamp();
        java.util.Optional<java.lang.Integer> intOptional46 = kafkaSpoutMessageIdComparatorConsumerRecord42.leaderEpoch();
        long long47 = kafkaSpoutMessageIdComparatorConsumerRecord42.timestamp();
        java.lang.String str48 = kafkaSpoutMessageIdComparatorConsumerRecord42.toString();
        org.apache.kafka.common.header.Headers headers49 = kafkaSpoutMessageIdComparatorConsumerRecord42.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("ConsumerRecord(topic = KafkaSpout{acked=null, emitted=[]}, partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = 1, serialized key size = 97, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = KafkaSpout{acked=null, emitted=[]})", (int) (short) 100, (long) (short) 0, (long) 10, timestampType20, (java.lang.Long) 0L, 97, 0, kafkaSpoutMessageIdComparator35, "KafkaSpout{acked=null, emitted=null}", headers49);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator35;
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(headers18);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator19);
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(intOptional31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator35);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-1L) + "'", long45 == (-1L));
        org.junit.Assert.assertNotNull(intOptional46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-1L) + "'", long47 == (-1L));
        org.junit.Assert.assertNotNull(headers49);
    }

    @Test
    public void test1658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1658");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>();
        org.apache.kafka.clients.consumer.KafkaConsumer<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaConsumer1 = genericDeclarationKafkaSpout0.kafkaConsumer;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>> genericDeclarationConsumerRecordItor2 = genericDeclarationKafkaSpout0.waitingToEmit;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>> genericDeclarationConsumerRecordItor3 = genericDeclarationKafkaSpout0.waitingToEmit;
        org.apache.kafka.clients.consumer.KafkaConsumer<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaConsumer4 = null;
        genericDeclarationKafkaSpout0.kafkaConsumer = genericDeclarationKafkaConsumer4;
        java.util.Set<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = genericDeclarationKafkaSpout0.emitted;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean7 = genericDeclarationKafkaSpout0.poll();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(genericDeclarationKafkaConsumer1);
        org.junit.Assert.assertNull(genericDeclarationConsumerRecordItor2);
        org.junit.Assert.assertNull(genericDeclarationConsumerRecordItor3);
        org.junit.Assert.assertNull(kafkaSpoutMessageIdSet6);
    }

    @Test
    public void test1659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1659");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.util.List<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.util.ArrayList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> kafkaSpoutMessageIdListKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.util.List<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.util.ArrayList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> kafkaSpoutMessageIdListKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<java.util.List<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.util.ArrayList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>(kafkaSpoutMessageIdListKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1660");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>();
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService1 = null;
        genericDeclarationKafkaSpout0.retryService = kafkaSpoutRetryService1;
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>.Timer timer3 = genericDeclarationKafkaSpout0.commitTimer;
        org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy firstPollOffsetStrategy4 = genericDeclarationKafkaSpout0.firstPollOffsetStrategy;
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService5 = null;
        genericDeclarationKafkaSpout0.retryService = kafkaSpoutRetryService5;
        org.apache.kafka.clients.consumer.ConsumerRecords<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationConsumerRecords7 = null;
        // The following exception was thrown during execution in test generation
        try {
            genericDeclarationKafkaSpout0.setWaitingToEmit(genericDeclarationConsumerRecords7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(timer3);
        org.junit.Assert.assertNull(firstPollOffsetStrategy4);
    }

    @Test
    public void test1661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1661");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator17 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator17, "");
        org.apache.kafka.common.record.TimestampType timestampType20 = kafkaSpoutMessageIdComparatorConsumerRecord19.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator31 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator31, "");
        org.apache.kafka.common.record.TimestampType timestampType34 = kafkaSpoutMessageIdComparatorConsumerRecord33.timestampType();
        java.lang.Object obj38 = new java.lang.Object();
        java.lang.Class<?> wildcardClass39 = obj38.getClass();
        java.lang.Object obj40 = new java.lang.Object();
        java.lang.Class<?> wildcardClass41 = obj40.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType34, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass39, (java.lang.reflect.GenericDeclaration) wildcardClass41);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator50 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord52 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator50, "");
        org.apache.kafka.common.record.TimestampType timestampType53 = kafkaSpoutMessageIdComparatorConsumerRecord52.timestampType();
        java.lang.Object obj57 = new java.lang.Object();
        java.lang.Class<?> wildcardClass58 = obj57.getClass();
        java.lang.Object obj59 = new java.lang.Object();
        java.lang.Class<?> wildcardClass60 = obj59.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType53, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass58, (java.lang.reflect.GenericDeclaration) wildcardClass60);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("hi!", (int) (byte) 0, (long) (byte) 10, 10L, timestampType20, (long) (short) 10, (int) (short) 0, (int) (byte) 0, (java.lang.reflect.Type) wildcardClass39, timestampType53);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator66 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=null}", (int) (short) 0, (long) (byte) 1, (long) (short) 100, timestampType53, 0L, (int) (byte) 10, (int) (short) 100, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator66, "hi!");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator69 = offsetComparator66.reversed();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", 52, 1L, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator66, "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord73 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("ConsumerRecord(topic = KafkaSpout{acked=null, emitted=[]}, partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = 1, serialized key size = 97, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = KafkaSpout{acked=null, emitted=[]})", 35, (long) (byte) 1, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator66, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType34 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType34.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + timestampType53 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType53.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator69);
    }

    @Test
    public void test1662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1662");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>> genericDeclarationConsumerRecordItor1 = genericDeclarationKafkaSpout0.waitingToEmit;
        boolean boolean2 = genericDeclarationKafkaSpout0.waitingToEmit();
        org.apache.kafka.clients.consumer.KafkaConsumer<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaConsumer3 = genericDeclarationKafkaSpout0.kafkaConsumer;
        org.apache.kafka.clients.consumer.KafkaConsumer<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaConsumer4 = null;
        genericDeclarationKafkaSpout0.kafkaConsumer = genericDeclarationKafkaConsumer4;
        org.junit.Assert.assertNull(genericDeclarationConsumerRecordItor1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(genericDeclarationKafkaConsumer3);
    }

    @Test
    public void test1663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1663");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        long long9 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        java.lang.String str10 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator11 = kafkaSpoutMessageIdComparatorConsumerRecord5.key();
        org.apache.kafka.common.record.TimestampType timestampType12 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator11);
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test1664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1664");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        long long7 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        long long8 = kafkaSpoutMessageIdComparatorConsumerRecord5.offset();
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        java.util.Optional<java.lang.Integer> intOptional10 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(intOptional10);
    }

    @Test
    public void test1665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1665");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str10 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        int int11 = kafkaSpoutMessageIdComparatorConsumerRecord5.partition();
        long long12 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        long long13 = kafkaSpoutMessageIdComparatorConsumerRecord5.offset();
        java.util.Optional<java.lang.Integer> intOptional14 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        java.lang.String str15 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(intOptional14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test1666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1666");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator6 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator6, "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (short) 100, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator6, "");
        int int11 = kafkaSpoutMessageIdComparatorConsumerRecord10.serializedValueSize();
        int int12 = kafkaSpoutMessageIdComparatorConsumerRecord10.serializedKeySize();
        long long13 = kafkaSpoutMessageIdComparatorConsumerRecord10.timestamp();
        java.util.Optional<java.lang.Integer> intOptional14 = kafkaSpoutMessageIdComparatorConsumerRecord10.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType15 = kafkaSpoutMessageIdComparatorConsumerRecord10.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType16 = kafkaSpoutMessageIdComparatorConsumerRecord10.timestampType();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNotNull(intOptional14);
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test1667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1667");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.topology.IRichSpout, java.io.Serializable> iRichSpoutKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IRichSpout, java.io.Serializable> iRichSpoutKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IRichSpout, java.io.Serializable>(iRichSpoutKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1668");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator9 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord11 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator9, "");
        org.apache.kafka.common.record.TimestampType timestampType12 = kafkaSpoutMessageIdComparatorConsumerRecord11.timestampType();
        long long13 = kafkaSpoutMessageIdComparatorConsumerRecord11.timestamp();
        java.lang.String str14 = kafkaSpoutMessageIdComparatorConsumerRecord11.value();
        java.lang.String str15 = kafkaSpoutMessageIdComparatorConsumerRecord11.toString();
        long long16 = kafkaSpoutMessageIdComparatorConsumerRecord11.timestamp();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator17 = kafkaSpoutMessageIdComparatorConsumerRecord11.key();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator18 = kafkaSpoutMessageIdComparator17.reversed();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("hi!", (int) '4', 35L, kafkaSpoutMessageIdComparator18, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator21 = kafkaSpoutMessageIdComparator18.reversed();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) '#', (long) (byte) 10, kafkaSpoutMessageIdComparator18, "ConsumerRecord(topic = KafkaSpout{acked=null, emitted=[]}, partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = 1, serialized key size = 97, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = KafkaSpout{acked=null, emitted=[]})");
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator17);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator18);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator21);
    }

    @Test
    public void test1669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1669");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator11 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator11, "");
        org.apache.kafka.common.record.TimestampType timestampType14 = kafkaSpoutMessageIdComparatorConsumerRecord13.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator25 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator25, "");
        org.apache.kafka.common.record.TimestampType timestampType28 = kafkaSpoutMessageIdComparatorConsumerRecord27.timestampType();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        java.lang.Object obj34 = new java.lang.Object();
        java.lang.Class<?> wildcardClass35 = obj34.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType28, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass33, (java.lang.reflect.GenericDeclaration) wildcardClass35);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator44 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator44, "");
        org.apache.kafka.common.record.TimestampType timestampType47 = kafkaSpoutMessageIdComparatorConsumerRecord46.timestampType();
        java.lang.Object obj51 = new java.lang.Object();
        java.lang.Class<?> wildcardClass52 = obj51.getClass();
        java.lang.Object obj53 = new java.lang.Object();
        java.lang.Class<?> wildcardClass54 = obj53.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType47, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass52, (java.lang.reflect.GenericDeclaration) wildcardClass54);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("hi!", (int) (byte) 0, (long) (byte) 10, 10L, timestampType14, (long) (short) 10, (int) (short) 0, (int) (byte) 0, (java.lang.reflect.Type) wildcardClass33, timestampType47);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator60 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=null}", (int) (short) 0, (long) (byte) 1, (long) (short) 100, timestampType47, 0L, (int) (byte) 10, (int) (short) 100, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator60, "hi!");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator63 = offsetComparator60.reversed();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator64 = offsetComparator60.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator64;
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator64;
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator63);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator64);
    }

    @Test
    public void test1670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1670");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator14 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator14, "");
        org.apache.kafka.common.record.TimestampType timestampType17 = kafkaSpoutMessageIdComparatorConsumerRecord16.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator28 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator28, "");
        org.apache.kafka.common.record.TimestampType timestampType31 = kafkaSpoutMessageIdComparatorConsumerRecord30.timestampType();
        java.lang.Object obj35 = new java.lang.Object();
        java.lang.Class<?> wildcardClass36 = obj35.getClass();
        java.lang.Object obj37 = new java.lang.Object();
        java.lang.Class<?> wildcardClass38 = obj37.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType31, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass36, (java.lang.reflect.GenericDeclaration) wildcardClass38);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator47 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator47, "");
        org.apache.kafka.common.record.TimestampType timestampType50 = kafkaSpoutMessageIdComparatorConsumerRecord49.timestampType();
        java.lang.Object obj54 = new java.lang.Object();
        java.lang.Class<?> wildcardClass55 = obj54.getClass();
        java.lang.Object obj56 = new java.lang.Object();
        java.lang.Class<?> wildcardClass57 = obj56.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType50, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass55, (java.lang.reflect.GenericDeclaration) wildcardClass57);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("hi!", (int) (byte) 0, (long) (byte) 10, 10L, timestampType17, (long) (short) 10, (int) (short) 0, (int) (byte) 0, (java.lang.reflect.Type) wildcardClass36, timestampType50);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator63 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord65 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=null}", (int) (short) 0, (long) (byte) 1, (long) (short) 100, timestampType50, 0L, (int) (byte) 10, (int) (short) 100, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator63, "hi!");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator66 = offsetComparator63.reversed();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", 52, 1L, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator63, "");
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId69 = null;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId70 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int71 = offsetComparator63.compare(kafkaSpoutMessageId69, kafkaSpoutMessageId70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertTrue("'" + timestampType50 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType50.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator66);
    }

    @Test
    public void test1671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1671");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.io.Serializable, java.util.AbstractList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> serializableKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.io.Serializable, java.util.AbstractList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> serializableKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<java.io.Serializable, java.util.AbstractList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>(serializableKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1672");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, org.apache.storm.topology.IRichSpout> offsetComparatorKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, org.apache.storm.topology.IRichSpout> offsetComparatorKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, org.apache.storm.topology.IRichSpout>(offsetComparatorKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1673");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.AnnotatedElement, org.apache.storm.spout.ISpout> annotatedElementKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.AnnotatedElement, org.apache.storm.spout.ISpout>();
    }

    @Test
    public void test1674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1674");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.util.Optional<java.lang.Integer> intOptional10 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType11 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        long long12 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType13 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        long long14 = kafkaSpoutMessageIdComparatorConsumerRecord5.offset();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test1675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1675");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator9 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord11 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator9, "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (short) 100, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator9, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator14 = offsetComparator9.reversed();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator15 = offsetComparator9.reversed();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("hi!", (int) ' ', (long) (short) -1, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator9, "hi!");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator18 = kafkaSpoutMessageIdComparatorConsumerRecord17.key();
        java.util.Optional<java.lang.Integer> intOptional19 = kafkaSpoutMessageIdComparatorConsumerRecord17.leaderEpoch();
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator14);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator15);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator18);
        org.junit.Assert.assertNotNull(intOptional19);
    }

    @Test
    public void test1676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1676");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        int int9 = kafkaSpoutMessageIdComparatorConsumerRecord5.partition();
        long long10 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        org.apache.kafka.common.record.TimestampType timestampType11 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator12 = kafkaSpoutMessageIdComparatorConsumerRecord5.key();
        java.util.Optional<java.lang.Integer> intOptional13 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator12);
        org.junit.Assert.assertNotNull(intOptional13);
    }

    @Test
    public void test1677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1677");
        org.apache.storm.kafka.spout.KafkaSpout<java.util.AbstractCollection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.io.Serializable> kafkaSpoutMessageIdCollectionKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.util.AbstractCollection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.io.Serializable>();
    }

    @Test
    public void test1678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1678");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.util.RandomAccess, java.lang.reflect.AnnotatedElement> randomAccessKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.util.RandomAccess, java.lang.reflect.AnnotatedElement> randomAccessKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<java.util.RandomAccess, java.lang.reflect.AnnotatedElement>(randomAccessKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1679");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator6 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator6, "");
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord8.topic();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator10 = kafkaSpoutMessageIdComparatorConsumerRecord8.key();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator11 = kafkaSpoutMessageIdComparator10.reversed();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (short) 10, 0L, kafkaSpoutMessageIdComparator11, "hi!");
        long long14 = kafkaSpoutMessageIdComparatorConsumerRecord13.checksum();
        java.util.Optional<java.lang.Integer> intOptional15 = kafkaSpoutMessageIdComparatorConsumerRecord13.leaderEpoch();
        java.lang.String str16 = kafkaSpoutMessageIdComparatorConsumerRecord13.value();
        int int17 = kafkaSpoutMessageIdComparatorConsumerRecord13.serializedKeySize();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator10);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test1680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1680");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>();
        org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy firstPollOffsetStrategy1 = null;
        genericDeclarationKafkaSpout0.firstPollOffsetStrategy = firstPollOffsetStrategy1;
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>.Timer timer3 = genericDeclarationKafkaSpout0.commitTimer;
        boolean boolean4 = genericDeclarationKafkaSpout0.initialized;
        boolean boolean5 = genericDeclarationKafkaSpout0.waitingToEmit();
        org.junit.Assert.assertNull(timer3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1681");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator11 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator11, "");
        org.apache.kafka.common.record.TimestampType timestampType14 = kafkaSpoutMessageIdComparatorConsumerRecord13.timestampType();
        int int15 = kafkaSpoutMessageIdComparatorConsumerRecord13.serializedValueSize();
        java.lang.String str16 = kafkaSpoutMessageIdComparatorConsumerRecord13.value();
        long long17 = kafkaSpoutMessageIdComparatorConsumerRecord13.checksum();
        org.apache.kafka.common.record.TimestampType timestampType18 = kafkaSpoutMessageIdComparatorConsumerRecord13.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator28 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator28, "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (short) 100, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator28, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator33 = offsetComparator28.reversed();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("hi!", (int) (byte) 1, 10L, (long) (short) 1, timestampType18, (long) 100, (-1), 0, kafkaSpoutMessageIdComparator33, "KafkaSpout{acked=null, emitted=null}");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator39 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=[]}", (int) (short) 1, (long) 97, 32L, timestampType18, (long) 0, (int) ' ', 32, kafkaSpoutMessageIdComparator39, "ConsumerRecord(topic = KafkaSpout{acked=null, emitted=null}, partition = -1, leaderEpoch = null, offset = 97, NoTimestampType = 32, serialized key size = 100, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = )");
        java.lang.String str42 = kafkaSpoutMessageIdComparatorConsumerRecord41.value();
        long long43 = kafkaSpoutMessageIdComparatorConsumerRecord41.checksum();
        int int44 = kafkaSpoutMessageIdComparatorConsumerRecord41.partition();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator33);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ConsumerRecord(topic = KafkaSpout{acked=null, emitted=null}, partition = -1, leaderEpoch = null, offset = 97, NoTimestampType = 32, serialized key size = 100, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = )" + "'", str42, "ConsumerRecord(topic = KafkaSpout{acked=null, emitted=null}, partition = -1, leaderEpoch = null, offset = 97, NoTimestampType = 32, serialized key size = 100, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = )");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
    }

    @Test
    public void test1682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1682");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        long long7 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        long long8 = kafkaSpoutMessageIdComparatorConsumerRecord5.offset();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator9 = kafkaSpoutMessageIdComparatorConsumerRecord5.key();
        java.lang.String str10 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str11 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test1683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1683");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>();
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService1 = null;
        genericDeclarationKafkaSpout0.retryService = kafkaSpoutRetryService1;
        org.apache.kafka.clients.consumer.KafkaConsumer<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaConsumer3 = genericDeclarationKafkaSpout0.kafkaConsumer;
        org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy firstPollOffsetStrategy4 = null;
        genericDeclarationKafkaSpout0.firstPollOffsetStrategy = firstPollOffsetStrategy4;
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpoutConfig6 = null;
        genericDeclarationKafkaSpout0.kafkaSpoutConfig = genericDeclarationKafkaSpoutConfig6;
        org.apache.storm.kafka.spout.KafkaSpoutTuplesBuilder<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpoutTuplesBuilder8 = genericDeclarationKafkaSpout0.tuplesBuilder;
        org.junit.Assert.assertNull(genericDeclarationKafkaConsumer3);
        org.junit.Assert.assertNull(genericDeclarationKafkaSpoutTuplesBuilder8);
    }

    @Test
    public void test1684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1684");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator14 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator14, "");
        org.apache.kafka.common.record.TimestampType timestampType17 = kafkaSpoutMessageIdComparatorConsumerRecord16.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator28 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator28, "");
        org.apache.kafka.common.record.TimestampType timestampType31 = kafkaSpoutMessageIdComparatorConsumerRecord30.timestampType();
        java.lang.Object obj35 = new java.lang.Object();
        java.lang.Class<?> wildcardClass36 = obj35.getClass();
        java.lang.Object obj37 = new java.lang.Object();
        java.lang.Class<?> wildcardClass38 = obj37.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType31, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass36, (java.lang.reflect.GenericDeclaration) wildcardClass38);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator47 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator47, "");
        org.apache.kafka.common.record.TimestampType timestampType50 = kafkaSpoutMessageIdComparatorConsumerRecord49.timestampType();
        java.lang.Object obj54 = new java.lang.Object();
        java.lang.Class<?> wildcardClass55 = obj54.getClass();
        java.lang.Object obj56 = new java.lang.Object();
        java.lang.Class<?> wildcardClass57 = obj56.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType50, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass55, (java.lang.reflect.GenericDeclaration) wildcardClass57);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("hi!", (int) (byte) 0, (long) (byte) 10, 10L, timestampType17, (long) (short) 10, (int) (short) 0, (int) (byte) 0, (java.lang.reflect.Type) wildcardClass36, timestampType50);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator63 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord65 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=null}", (int) (short) 0, (long) (byte) 1, (long) (short) 100, timestampType50, 0L, (int) (byte) 10, (int) (short) 100, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator63, "hi!");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator66 = offsetComparator63.reversed();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator67 = offsetComparator63.reversed();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord69 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("hi!", (int) ' ', (long) 100, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator63, "KafkaSpout{acked=null, emitted=[]}");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator70 = offsetComparator63.reversed();
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertTrue("'" + timestampType50 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType50.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator66);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator67);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator70);
    }

    @Test
    public void test1685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1685");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.util.Optional<java.lang.Integer> intOptional10 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        int int11 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType12 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        java.util.Optional<java.lang.Integer> intOptional13 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        long long14 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        long long15 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
    }

    @Test
    public void test1686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1686");
        org.apache.storm.kafka.spout.KafkaSpout<java.util.List<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> kafkaSpoutMessageIdListKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.util.List<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>();
    }

    @Test
    public void test1687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1687");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.io.Serializable, org.apache.kafka.common.header.Headers> serializableKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.io.Serializable, org.apache.kafka.common.header.Headers> serializableKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<java.io.Serializable, org.apache.kafka.common.header.Headers>(serializableKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1688");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        java.lang.String str6 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator7 = kafkaSpoutMessageIdComparatorConsumerRecord5.key();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord5.toString();
        long long10 = kafkaSpoutMessageIdComparatorConsumerRecord5.offset();
        org.apache.kafka.common.header.Headers headers11 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        java.lang.String str12 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        long long13 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(headers11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
    }

    @Test
    public void test1689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1689");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator11 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator11, "");
        org.apache.kafka.common.record.TimestampType timestampType14 = kafkaSpoutMessageIdComparatorConsumerRecord13.timestampType();
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Object obj20 = new java.lang.Object();
        java.lang.Class<?> wildcardClass21 = obj20.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord22 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType14, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass19, (java.lang.reflect.GenericDeclaration) wildcardClass21);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator29 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator29, "");
        org.apache.kafka.common.record.TimestampType timestampType32 = kafkaSpoutMessageIdComparatorConsumerRecord31.timestampType();
        int int33 = kafkaSpoutMessageIdComparatorConsumerRecord31.serializedValueSize();
        java.lang.String str34 = kafkaSpoutMessageIdComparatorConsumerRecord31.value();
        java.lang.String str35 = kafkaSpoutMessageIdComparatorConsumerRecord31.value();
        org.apache.kafka.common.record.TimestampType timestampType36 = kafkaSpoutMessageIdComparatorConsumerRecord31.timestampType();
        int int37 = kafkaSpoutMessageIdComparatorConsumerRecord31.serializedKeySize();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator38 = kafkaSpoutMessageIdComparatorConsumerRecord31.key();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator45 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator45, "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (short) 100, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator45, "");
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator45;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator51 = kafkaSpoutMessageIdComparator38.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator45);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator52 = kafkaSpoutMessageIdComparator51.reversed();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", 52, (long) (short) 10, 1L, timestampType14, (long) 'a', 52, (int) '#', kafkaSpoutMessageIdComparator52, "KafkaSpout{acked=null, emitted=null}");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator58 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator58, "");
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator58;
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator58;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator63 = kafkaSpoutMessageIdComparator52.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator58);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator64 = offsetComparator58.reversed();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + timestampType32 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType32.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + timestampType36 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType36.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator38);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator51);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator52);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator63);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator64);
    }

    @Test
    public void test1690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1690");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator11 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator11, "");
        org.apache.kafka.common.record.TimestampType timestampType14 = kafkaSpoutMessageIdComparatorConsumerRecord13.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator25 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator25, "");
        org.apache.kafka.common.record.TimestampType timestampType28 = kafkaSpoutMessageIdComparatorConsumerRecord27.timestampType();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        java.lang.Object obj34 = new java.lang.Object();
        java.lang.Class<?> wildcardClass35 = obj34.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType28, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass33, (java.lang.reflect.GenericDeclaration) wildcardClass35);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator44 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator44, "");
        org.apache.kafka.common.record.TimestampType timestampType47 = kafkaSpoutMessageIdComparatorConsumerRecord46.timestampType();
        java.lang.Object obj51 = new java.lang.Object();
        java.lang.Class<?> wildcardClass52 = obj51.getClass();
        java.lang.Object obj53 = new java.lang.Object();
        java.lang.Class<?> wildcardClass54 = obj53.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType47, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass52, (java.lang.reflect.GenericDeclaration) wildcardClass54);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("hi!", (int) (byte) 0, (long) (byte) 10, 10L, timestampType14, (long) (short) 10, (int) (short) 0, (int) (byte) 0, (java.lang.reflect.Type) wildcardClass33, timestampType47);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator60 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=null}", (int) (short) 0, (long) (byte) 1, (long) (short) 100, timestampType47, 0L, (int) (byte) 10, (int) (short) 100, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator60, "hi!");
        java.lang.String str63 = kafkaSpoutMessageIdComparatorConsumerRecord62.toString();
        int int64 = kafkaSpoutMessageIdComparatorConsumerRecord62.partition();
        int int65 = kafkaSpoutMessageIdComparatorConsumerRecord62.serializedKeySize();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator66 = kafkaSpoutMessageIdComparatorConsumerRecord62.key();
        int int67 = kafkaSpoutMessageIdComparatorConsumerRecord62.serializedValueSize();
        int int68 = kafkaSpoutMessageIdComparatorConsumerRecord62.partition();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10 + "'", int65 == 10);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 100 + "'", int67 == 100);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
    }

    @Test
    public void test1691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1691");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator6 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator6, "");
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord8.topic();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator10 = kafkaSpoutMessageIdComparatorConsumerRecord8.key();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator11 = kafkaSpoutMessageIdComparator10.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator15 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator15, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator18 = offsetComparator15.reversed();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator19 = kafkaSpoutMessageIdComparator10.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator15);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator10;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord22 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("hi!", (int) '4', 0L, kafkaSpoutMessageIdComparator10, "KafkaSpout{acked=null, emitted=[]}");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator10);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator11);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator18);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator19);
    }

    @Test
    public void test1692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1692");
        java.lang.Enum<org.apache.kafka.common.record.TimestampType> timestampTypeEnum3 = null;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator10 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator10, "");
        java.lang.String str13 = kafkaSpoutMessageIdComparatorConsumerRecord12.topic();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator14 = kafkaSpoutMessageIdComparatorConsumerRecord12.key();
        org.apache.kafka.common.header.Headers headers15 = kafkaSpoutMessageIdComparatorConsumerRecord12.headers();
        long long16 = kafkaSpoutMessageIdComparatorConsumerRecord12.checksum();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator17 = kafkaSpoutMessageIdComparatorConsumerRecord12.key();
        long long18 = kafkaSpoutMessageIdComparatorConsumerRecord12.timestamp();
        org.apache.kafka.common.header.Headers headers19 = kafkaSpoutMessageIdComparatorConsumerRecord12.headers();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator29 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator29, "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (short) 100, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator29, "");
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator29;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator35 = offsetComparator29.reversed();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("hi!", (int) 'a', (long) 1, kafkaSpoutMessageIdComparator35, "");
        long long38 = kafkaSpoutMessageIdComparatorConsumerRecord37.checksum();
        org.apache.kafka.common.record.TimestampType timestampType39 = kafkaSpoutMessageIdComparatorConsumerRecord37.timestampType();
        long long40 = kafkaSpoutMessageIdComparatorConsumerRecord37.checksum();
        java.lang.String str41 = kafkaSpoutMessageIdComparatorConsumerRecord37.value();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>> headersConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>>("ConsumerRecord(topic = KafkaSpout{acked=null, emitted=null}, partition = -1, leaderEpoch = null, offset = 97, NoTimestampType = 32, serialized key size = 100, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = )", (-1), (long) (short) 100, headers19, kafkaSpoutMessageIdComparatorConsumerRecord37);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.lang.Iterable<org.apache.kafka.common.header.Header>> timestampTypeEnumConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.lang.Iterable<org.apache.kafka.common.header.Header>>("ConsumerRecord(topic = KafkaSpout{acked=null, emitted=[]}, partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = 1, serialized key size = 97, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = KafkaSpout{acked=null, emitted=[]})", (int) (byte) 10, (long) (short) 1, timestampTypeEnum3, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers19);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator14);
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertNotNull(headers19);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1L) + "'", long38 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType39 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType39.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1L) + "'", long40 == (-1L));
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
    }

    @Test
    public void test1693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1693");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.lang.Object, java.io.Serializable>.KafkaSpoutConsumerRebalanceListener kafkaSpoutConsumerRebalanceListener1 = kafkaSpout0.new KafkaSpoutConsumerRebalanceListener();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$KafkaSpoutConsumerRebalanceListener with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1694");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        java.lang.String str6 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator7 = kafkaSpoutMessageIdComparatorConsumerRecord5.key();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord5.toString();
        long long10 = kafkaSpoutMessageIdComparatorConsumerRecord5.offset();
        org.apache.kafka.common.header.Headers headers11 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        java.util.Optional<java.lang.Integer> intOptional12 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        long long13 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        long long14 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        java.lang.String str15 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        int int16 = kafkaSpoutMessageIdComparatorConsumerRecord5.partition();
        long long17 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        org.apache.kafka.common.record.TimestampType timestampType18 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(headers11);
        org.junit.Assert.assertNotNull(intOptional12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test1695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1695");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        long long7 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord5.toString();
        long long10 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator11 = kafkaSpoutMessageIdComparatorConsumerRecord5.key();
        java.lang.String str12 = kafkaSpoutMessageIdComparatorConsumerRecord5.toString();
        int int13 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedKeySize();
        java.lang.String str14 = kafkaSpoutMessageIdComparatorConsumerRecord5.toString();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test1696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1696");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        org.apache.kafka.common.record.TimestampType timestampType10 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int11 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedKeySize();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator12 = kafkaSpoutMessageIdComparatorConsumerRecord5.key();
        java.util.Optional<java.lang.Integer> intOptional13 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        java.lang.Class<?> wildcardClass14 = intOptional13.getClass();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator12);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1697");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator3 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 1, (long) (short) -1, kafkaSpoutMessageIdComparator3, "");
    }

    @Test
    public void test1698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1698");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.base.BaseComponent, java.io.Serializable> baseComponentKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.base.BaseComponent, java.io.Serializable>();
    }

    @Test
    public void test1699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1699");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout<org.apache.kafka.common.record.TimestampType, org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>>.KafkaSpoutConsumerRebalanceListener, java.util.Set<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> kafkaSpoutConsumerRebalanceListenerKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout<org.apache.kafka.common.record.TimestampType, org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>>.KafkaSpoutConsumerRebalanceListener, java.util.Set<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>();
    }

    @Test
    public void test1700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1700");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.Iterable<org.apache.kafka.common.header.Header>> kafkaSpoutMessageIdComparatorKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.Iterable<org.apache.kafka.common.header.Header>> kafkaSpoutMessageIdComparatorKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.Iterable<org.apache.kafka.common.header.Header>>(kafkaSpoutMessageIdComparatorKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1701");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        int int9 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional10 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        int int11 = kafkaSpoutMessageIdComparatorConsumerRecord5.partition();
        int int12 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        int int13 = kafkaSpoutMessageIdComparatorConsumerRecord5.partition();
        int int14 = kafkaSpoutMessageIdComparatorConsumerRecord5.partition();
        int int15 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str16 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test1702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1702");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator11 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator11, "");
        org.apache.kafka.common.record.TimestampType timestampType14 = kafkaSpoutMessageIdComparatorConsumerRecord13.timestampType();
        int int15 = kafkaSpoutMessageIdComparatorConsumerRecord13.serializedValueSize();
        java.lang.String str16 = kafkaSpoutMessageIdComparatorConsumerRecord13.value();
        java.lang.String str17 = kafkaSpoutMessageIdComparatorConsumerRecord13.value();
        java.lang.String str18 = kafkaSpoutMessageIdComparatorConsumerRecord13.value();
        java.util.Optional<java.lang.Integer> intOptional19 = kafkaSpoutMessageIdComparatorConsumerRecord13.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType20 = kafkaSpoutMessageIdComparatorConsumerRecord13.timestampType();
        long long21 = kafkaSpoutMessageIdComparatorConsumerRecord13.timestamp();
        int int22 = kafkaSpoutMessageIdComparatorConsumerRecord13.serializedValueSize();
        int int23 = kafkaSpoutMessageIdComparatorConsumerRecord13.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType24 = kafkaSpoutMessageIdComparatorConsumerRecord13.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator34 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (-1), (long) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator34, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator37 = offsetComparator34.reversed();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("hi!", 0, (long) 1, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator34, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator40 = org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator41 = kafkaSpoutMessageIdComparator40.reversed();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator42 = offsetComparator34.thenComparing(kafkaSpoutMessageIdComparator40);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator43 = kafkaSpoutMessageIdComparator40.reversed();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("ConsumerRecord(topic = KafkaSpout{acked=null, emitted=null}, partition = -1, leaderEpoch = null, offset = 97, NoTimestampType = 32, serialized key size = 100, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = )", (int) '4', 0L, 0L, timestampType24, (long) (byte) 1, (int) (short) 1, (int) (byte) 100, kafkaSpoutMessageIdComparator40, "");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator53 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator53, "");
        java.lang.String str56 = kafkaSpoutMessageIdComparatorConsumerRecord55.topic();
        org.apache.kafka.common.header.Headers headers57 = kafkaSpoutMessageIdComparatorConsumerRecord55.headers();
        java.lang.String str58 = kafkaSpoutMessageIdComparatorConsumerRecord55.toString();
        java.lang.String str59 = kafkaSpoutMessageIdComparatorConsumerRecord55.toString();
        int int60 = kafkaSpoutMessageIdComparatorConsumerRecord55.partition();
        org.apache.kafka.common.record.TimestampType timestampType61 = kafkaSpoutMessageIdComparatorConsumerRecord55.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, org.apache.kafka.common.record.TimestampType> charSequenceConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, org.apache.kafka.common.record.TimestampType>("ConsumerRecord(topic = KafkaSpout{acked=null, emitted=[]}, partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = 1, serialized key size = 97, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = KafkaSpout{acked=null, emitted=[]})", 1, (long) (byte) -1, (long) (short) 10, timestampType24, 35L, 0, 35, (java.lang.CharSequence) "", timestampType61);
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(intOptional19);
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType24 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType24.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator37);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator40);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator41);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator42);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator43);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(headers57);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10 + "'", int60 == 10);
        org.junit.Assert.assertTrue("'" + timestampType61 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType61.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test1703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1703");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator7 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator7, "");
        org.apache.kafka.common.record.TimestampType timestampType10 = kafkaSpoutMessageIdComparatorConsumerRecord9.timestampType();
        int int11 = kafkaSpoutMessageIdComparatorConsumerRecord9.serializedValueSize();
        java.lang.String str12 = kafkaSpoutMessageIdComparatorConsumerRecord9.value();
        int int13 = kafkaSpoutMessageIdComparatorConsumerRecord9.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional14 = kafkaSpoutMessageIdComparatorConsumerRecord9.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType15 = kafkaSpoutMessageIdComparatorConsumerRecord9.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator25 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator25, "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (short) 100, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator25, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator30 = offsetComparator25.reversed();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator31 = offsetComparator25.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator38 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator38, "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (short) 100, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator38, "");
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator38;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator44 = offsetComparator38.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator48 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (-1), (long) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator48, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator51 = offsetComparator48.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator48;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator53 = offsetComparator38.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator48);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator54 = kafkaSpoutMessageIdComparator31.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator38);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator59 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator59, "");
        java.lang.String str62 = kafkaSpoutMessageIdComparatorConsumerRecord61.topic();
        org.apache.kafka.common.header.Headers headers63 = kafkaSpoutMessageIdComparatorConsumerRecord61.headers();
        org.apache.kafka.common.header.Headers headers64 = kafkaSpoutMessageIdComparatorConsumerRecord61.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord65 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("hi!", (int) (byte) -1, (long) (short) 0, (long) ' ', timestampType15, (java.lang.Long) 1L, (-1), 32, kafkaSpoutMessageIdComparator54, "KafkaSpout{acked=null, emitted=null}", headers64);
        long long66 = kafkaSpoutMessageIdComparatorConsumerRecord65.offset();
        long long67 = kafkaSpoutMessageIdComparatorConsumerRecord65.timestamp();
        java.util.Optional<java.lang.Integer> intOptional68 = kafkaSpoutMessageIdComparatorConsumerRecord65.leaderEpoch();
        int int69 = kafkaSpoutMessageIdComparatorConsumerRecord65.partition();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(intOptional14);
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator30);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator31);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator44);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator51);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator53);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator54);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(headers63);
        org.junit.Assert.assertNotNull(headers64);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 32L + "'", long67 == 32L);
        org.junit.Assert.assertNotNull(intOptional68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
    }

    @Test
    public void test1704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1704");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator6 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (-1), (long) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator6, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator9 = offsetComparator6.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator6;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=[]}", (int) (short) 1, (long) ' ', (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator6, "ConsumerRecord(topic = KafkaSpout{acked=null, emitted=null}, partition = -1, leaderEpoch = null, offset = 97, NoTimestampType = 32, serialized key size = 100, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = )");
        java.util.Optional<java.lang.Integer> intOptional13 = kafkaSpoutMessageIdComparatorConsumerRecord12.leaderEpoch();
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator9);
        org.junit.Assert.assertNotNull(intOptional13);
    }

    @Test
    public void test1705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1705");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        java.lang.String str6 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator7 = kafkaSpoutMessageIdComparatorConsumerRecord5.key();
        int int8 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedKeySize();
        int int9 = kafkaSpoutMessageIdComparatorConsumerRecord5.partition();
        long long10 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
    }

    @Test
    public void test1706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1706");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator6 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator6, "");
        org.apache.kafka.common.record.TimestampType timestampType9 = kafkaSpoutMessageIdComparatorConsumerRecord8.timestampType();
        long long10 = kafkaSpoutMessageIdComparatorConsumerRecord8.timestamp();
        java.lang.String str11 = kafkaSpoutMessageIdComparatorConsumerRecord8.value();
        java.lang.String str12 = kafkaSpoutMessageIdComparatorConsumerRecord8.toString();
        long long13 = kafkaSpoutMessageIdComparatorConsumerRecord8.timestamp();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator14 = kafkaSpoutMessageIdComparatorConsumerRecord8.key();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator15 = kafkaSpoutMessageIdComparator14.reversed();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("hi!", (int) '4', 35L, kafkaSpoutMessageIdComparator15, "");
        java.lang.String str18 = kafkaSpoutMessageIdComparatorConsumerRecord17.topic();
        java.lang.String str19 = kafkaSpoutMessageIdComparatorConsumerRecord17.toString();
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator14);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
    }

    @Test
    public void test1707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1707");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator10 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator10, "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord14 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (short) 100, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator10, "");
        int int15 = kafkaSpoutMessageIdComparatorConsumerRecord14.serializedValueSize();
        java.lang.String str16 = kafkaSpoutMessageIdComparatorConsumerRecord14.topic();
        int int17 = kafkaSpoutMessageIdComparatorConsumerRecord14.serializedValueSize();
        org.apache.kafka.common.header.Headers headers18 = kafkaSpoutMessageIdComparatorConsumerRecord14.headers();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator19 = kafkaSpoutMessageIdComparatorConsumerRecord14.key();
        org.apache.kafka.common.record.TimestampType timestampType20 = kafkaSpoutMessageIdComparatorConsumerRecord14.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator27 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator27, "");
        java.lang.String str30 = kafkaSpoutMessageIdComparatorConsumerRecord29.topic();
        java.util.Optional<java.lang.Integer> intOptional31 = kafkaSpoutMessageIdComparatorConsumerRecord29.leaderEpoch();
        long long32 = kafkaSpoutMessageIdComparatorConsumerRecord29.checksum();
        int int33 = kafkaSpoutMessageIdComparatorConsumerRecord29.serializedValueSize();
        int int34 = kafkaSpoutMessageIdComparatorConsumerRecord29.serializedKeySize();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator35 = kafkaSpoutMessageIdComparatorConsumerRecord29.key();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator40 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator40, "");
        int int43 = kafkaSpoutMessageIdComparatorConsumerRecord42.partition();
        long long44 = kafkaSpoutMessageIdComparatorConsumerRecord42.checksum();
        long long45 = kafkaSpoutMessageIdComparatorConsumerRecord42.timestamp();
        java.util.Optional<java.lang.Integer> intOptional46 = kafkaSpoutMessageIdComparatorConsumerRecord42.leaderEpoch();
        long long47 = kafkaSpoutMessageIdComparatorConsumerRecord42.timestamp();
        java.lang.String str48 = kafkaSpoutMessageIdComparatorConsumerRecord42.toString();
        org.apache.kafka.common.header.Headers headers49 = kafkaSpoutMessageIdComparatorConsumerRecord42.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("ConsumerRecord(topic = KafkaSpout{acked=null, emitted=[]}, partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = 1, serialized key size = 97, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = KafkaSpout{acked=null, emitted=[]})", (int) (short) 100, (long) (short) 0, (long) 10, timestampType20, (java.lang.Long) 0L, 97, 0, kafkaSpoutMessageIdComparator35, "KafkaSpout{acked=null, emitted=null}", headers49);
        java.lang.String str51 = kafkaSpoutMessageIdComparatorConsumerRecord50.topic();
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(headers18);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator19);
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(intOptional31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator35);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-1L) + "'", long45 == (-1L));
        org.junit.Assert.assertNotNull(intOptional46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-1L) + "'", long47 == (-1L));
        org.junit.Assert.assertNotNull(headers49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "ConsumerRecord(topic = KafkaSpout{acked=null, emitted=[]}, partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = 1, serialized key size = 97, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = KafkaSpout{acked=null, emitted=[]})" + "'", str51, "ConsumerRecord(topic = KafkaSpout{acked=null, emitted=[]}, partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = 1, serialized key size = 97, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = KafkaSpout{acked=null, emitted=[]})");
    }

    @Test
    public void test1708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1708");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>();
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService1 = null;
        genericDeclarationKafkaSpout0.retryService = kafkaSpoutRetryService1;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray3 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet4 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet4, kafkaSpoutMessageIdArray3);
        genericDeclarationKafkaSpout0.emitted = kafkaSpoutMessageIdSet4;
        genericDeclarationKafkaSpout0.maxRetries = '#';
        org.apache.kafka.clients.consumer.KafkaConsumer<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaConsumer9 = null;
        genericDeclarationKafkaSpout0.kafkaConsumer = genericDeclarationKafkaConsumer9;
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1709");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str10 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str11 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str12 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        java.lang.String str13 = kafkaSpoutMessageIdComparatorConsumerRecord5.toString();
        org.apache.kafka.common.record.TimestampType timestampType14 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int15 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        long long16 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
    }

    @Test
    public void test1710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1710");
        org.apache.storm.kafka.spout.KafkaSpout<java.util.AbstractList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.CharSequence> kafkaSpoutMessageIdListKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.util.AbstractList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.CharSequence>();
    }

    @Test
    public void test1711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1711");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        long long8 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        org.apache.kafka.common.header.Headers headers9 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        org.apache.kafka.common.header.Headers headers10 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        java.lang.String str11 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator12 = kafkaSpoutMessageIdComparatorConsumerRecord5.key();
        java.lang.String str13 = kafkaSpoutMessageIdComparatorConsumerRecord5.toString();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertNotNull(headers9);
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator12);
    }

    @Test
    public void test1712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1712");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        int int6 = kafkaSpoutMessageIdComparatorConsumerRecord5.partition();
        org.apache.kafka.common.header.Headers headers7 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertNotNull(headers7);
    }

    @Test
    public void test1713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1713");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        java.lang.String str6 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator7 = kafkaSpoutMessageIdComparatorConsumerRecord5.key();
        int int8 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedKeySize();
        long long9 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        java.lang.String str10 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        long long11 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        int int12 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test1714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1714");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator7 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator7, "");
        org.apache.kafka.common.record.TimestampType timestampType10 = kafkaSpoutMessageIdComparatorConsumerRecord9.timestampType();
        int int11 = kafkaSpoutMessageIdComparatorConsumerRecord9.serializedValueSize();
        java.lang.String str12 = kafkaSpoutMessageIdComparatorConsumerRecord9.value();
        long long13 = kafkaSpoutMessageIdComparatorConsumerRecord9.checksum();
        org.apache.kafka.common.record.TimestampType timestampType14 = kafkaSpoutMessageIdComparatorConsumerRecord9.timestampType();
        java.lang.String str15 = kafkaSpoutMessageIdComparatorConsumerRecord9.toString();
        long long16 = kafkaSpoutMessageIdComparatorConsumerRecord9.timestamp();
        int int17 = kafkaSpoutMessageIdComparatorConsumerRecord9.partition();
        org.apache.kafka.common.record.TimestampType timestampType18 = kafkaSpoutMessageIdComparatorConsumerRecord9.timestampType();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator22 = null;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator27 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator27, "");
        org.apache.kafka.common.record.TimestampType timestampType30 = kafkaSpoutMessageIdComparatorConsumerRecord29.timestampType();
        int int31 = kafkaSpoutMessageIdComparatorConsumerRecord29.serializedValueSize();
        java.lang.String str32 = kafkaSpoutMessageIdComparatorConsumerRecord29.value();
        int int33 = kafkaSpoutMessageIdComparatorConsumerRecord29.serializedKeySize();
        org.apache.kafka.common.header.Headers headers34 = kafkaSpoutMessageIdComparatorConsumerRecord29.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("hi!", 32, (long) (byte) 1, (long) 10, timestampType18, (java.lang.Long) 32L, 32, 97, kafkaSpoutMessageIdComparator22, "", headers34);
        org.apache.kafka.common.record.TimestampType timestampType36 = kafkaSpoutMessageIdComparatorConsumerRecord35.timestampType();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType30 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType30.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(headers34);
        org.junit.Assert.assertTrue("'" + timestampType36 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType36.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test1715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1715");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.kafka.common.record.TimestampType, java.util.AbstractList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> timestampTypeKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.kafka.common.record.TimestampType, java.util.AbstractList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>();
    }

    @Test
    public void test1716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1716");
        org.apache.storm.kafka.spout.KafkaSpout<java.util.RandomAccess, org.apache.kafka.common.record.TimestampType> randomAccessKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.util.RandomAccess, org.apache.kafka.common.record.TimestampType>();
    }

    @Test
    public void test1717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1717");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        java.lang.String str7 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        int int8 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        int int9 = kafkaSpoutMessageIdComparatorConsumerRecord5.partition();
        java.util.Optional<java.lang.Integer> intOptional10 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        org.apache.kafka.common.header.Headers headers11 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        int int12 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertNotNull(headers11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test1718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1718");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        java.lang.String str6 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator7 = kafkaSpoutMessageIdComparatorConsumerRecord5.key();
        int int8 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedKeySize();
        int int9 = kafkaSpoutMessageIdComparatorConsumerRecord5.partition();
        java.lang.String str10 = kafkaSpoutMessageIdComparatorConsumerRecord5.toString();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
    }

    @Test
    public void test1719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1719");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        int int6 = kafkaSpoutMessageIdComparatorConsumerRecord5.partition();
        long long7 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        long long8 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        java.util.Optional<java.lang.Integer> intOptional9 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        int int10 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional11 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        long long12 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        long long13 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator14 = kafkaSpoutMessageIdComparatorConsumerRecord5.key();
        java.lang.String str15 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str16 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertNotNull(intOptional9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(intOptional11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test1720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1720");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        long long6 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        java.lang.String str7 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        long long8 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        org.apache.kafka.common.header.Headers headers9 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        java.util.Optional<java.lang.Integer> intOptional10 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        long long11 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertNotNull(headers9);
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
    }

    @Test
    public void test1721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1721");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.io.Serializable, java.lang.reflect.Type> serializableKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.io.Serializable, java.lang.reflect.Type> serializableKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<java.io.Serializable, java.lang.reflect.Type>(serializableKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1722");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.lang.reflect.GenericDeclaration, java.util.Optional<java.lang.Integer>> genericDeclarationKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.util.Optional<java.lang.Integer>> genericDeclarationKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.util.Optional<java.lang.Integer>>(genericDeclarationKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1723");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator0 = org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator12 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord14 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator12, "");
        org.apache.kafka.common.record.TimestampType timestampType15 = kafkaSpoutMessageIdComparatorConsumerRecord14.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator26 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator26, "");
        org.apache.kafka.common.record.TimestampType timestampType29 = kafkaSpoutMessageIdComparatorConsumerRecord28.timestampType();
        java.lang.Object obj33 = new java.lang.Object();
        java.lang.Class<?> wildcardClass34 = obj33.getClass();
        java.lang.Object obj35 = new java.lang.Object();
        java.lang.Class<?> wildcardClass36 = obj35.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType29, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass34, (java.lang.reflect.GenericDeclaration) wildcardClass36);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator45 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator45, "");
        org.apache.kafka.common.record.TimestampType timestampType48 = kafkaSpoutMessageIdComparatorConsumerRecord47.timestampType();
        java.lang.Object obj52 = new java.lang.Object();
        java.lang.Class<?> wildcardClass53 = obj52.getClass();
        java.lang.Object obj54 = new java.lang.Object();
        java.lang.Class<?> wildcardClass55 = obj54.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType48, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass53, (java.lang.reflect.GenericDeclaration) wildcardClass55);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("hi!", (int) (byte) 0, (long) (byte) 10, 10L, timestampType15, (long) (short) 10, (int) (short) 0, (int) (byte) 0, (java.lang.reflect.Type) wildcardClass34, timestampType48);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator61 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=null}", (int) (short) 0, (long) (byte) 1, (long) (short) 100, timestampType48, 0L, (int) (byte) 10, (int) (short) 100, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator61, "hi!");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator64 = offsetComparator61.reversed();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator65 = kafkaSpoutMessageIdComparator0.thenComparing(kafkaSpoutMessageIdComparator64);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator65;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator67 = kafkaSpoutMessageIdComparator65.reversed();
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator0);
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType29 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType29.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertTrue("'" + timestampType48 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType48.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator64);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator65);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator67);
    }

    @Test
    public void test1724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1724");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        java.lang.String str6 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        org.apache.kafka.common.header.Headers headers7 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        org.apache.kafka.common.header.Headers headers8 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        long long9 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        int int10 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        long long11 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        long long12 = kafkaSpoutMessageIdComparatorConsumerRecord5.offset();
        long long13 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        java.lang.String str14 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(headers7);
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test1725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1725");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator11 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator11, "");
        org.apache.kafka.common.record.TimestampType timestampType14 = kafkaSpoutMessageIdComparatorConsumerRecord13.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator25 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator25, "");
        org.apache.kafka.common.record.TimestampType timestampType28 = kafkaSpoutMessageIdComparatorConsumerRecord27.timestampType();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        java.lang.Object obj34 = new java.lang.Object();
        java.lang.Class<?> wildcardClass35 = obj34.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType28, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass33, (java.lang.reflect.GenericDeclaration) wildcardClass35);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator44 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator44, "");
        org.apache.kafka.common.record.TimestampType timestampType47 = kafkaSpoutMessageIdComparatorConsumerRecord46.timestampType();
        java.lang.Object obj51 = new java.lang.Object();
        java.lang.Class<?> wildcardClass52 = obj51.getClass();
        java.lang.Object obj53 = new java.lang.Object();
        java.lang.Class<?> wildcardClass54 = obj53.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType47, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass52, (java.lang.reflect.GenericDeclaration) wildcardClass54);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("hi!", (int) (byte) 0, (long) (byte) 10, 10L, timestampType14, (long) (short) 10, (int) (short) 0, (int) (byte) 0, (java.lang.reflect.Type) wildcardClass33, timestampType47);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator60 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=null}", (int) (short) 0, (long) (byte) 1, (long) (short) 100, timestampType47, 0L, (int) (byte) 10, (int) (short) 100, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator60, "hi!");
        int int63 = kafkaSpoutMessageIdComparatorConsumerRecord62.serializedKeySize();
        int int64 = kafkaSpoutMessageIdComparatorConsumerRecord62.serializedKeySize();
        int int65 = kafkaSpoutMessageIdComparatorConsumerRecord62.partition();
        java.lang.String str66 = kafkaSpoutMessageIdComparatorConsumerRecord62.topic();
        java.util.Optional<java.lang.Integer> intOptional67 = kafkaSpoutMessageIdComparatorConsumerRecord62.leaderEpoch();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "KafkaSpout{acked=null, emitted=null}" + "'", str66, "KafkaSpout{acked=null, emitted=null}");
        org.junit.Assert.assertNotNull(intOptional67);
    }

    @Test
    public void test1726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1726");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        long long7 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        long long8 = kafkaSpoutMessageIdComparatorConsumerRecord5.offset();
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        org.apache.kafka.common.header.Headers headers10 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        long long11 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        org.apache.kafka.common.header.Headers headers12 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        int int13 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedKeySize();
        int int14 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType15 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType16 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int17 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(headers12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test1727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1727");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.topology.IComponent, org.apache.storm.kafka.spout.KafkaSpout<java.lang.String, java.lang.CharSequence>.Timer> iComponentKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, org.apache.storm.kafka.spout.KafkaSpout<java.lang.String, java.lang.CharSequence>.Timer> iComponentKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, org.apache.storm.kafka.spout.KafkaSpout<java.lang.String, java.lang.CharSequence>.Timer>(iComponentKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1728");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator11 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator11, "");
        java.lang.String str14 = kafkaSpoutMessageIdComparatorConsumerRecord13.topic();
        org.apache.kafka.common.header.Headers headers15 = kafkaSpoutMessageIdComparatorConsumerRecord13.headers();
        java.lang.String str16 = kafkaSpoutMessageIdComparatorConsumerRecord13.toString();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator17 = kafkaSpoutMessageIdComparatorConsumerRecord13.key();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator18 = kafkaSpoutMessageIdComparator17.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator25 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator25, "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (short) 100, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator25, "");
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator25;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator31 = offsetComparator25.reversed();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator32 = kafkaSpoutMessageIdComparator17.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator25);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) '#', (long) (short) 10, (long) 0, timestampType4, (long) (byte) 100, (int) (byte) 1, (int) (short) 100, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator25, "KafkaSpout{acked=null, emitted=[]}");
        org.apache.kafka.common.header.Headers headers35 = kafkaSpoutMessageIdComparatorConsumerRecord34.headers();
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator17);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator18);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator31);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator32);
        org.junit.Assert.assertNotNull(headers35);
    }

    @Test
    public void test1729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1729");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        long long7 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        long long8 = kafkaSpoutMessageIdComparatorConsumerRecord5.offset();
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        long long10 = kafkaSpoutMessageIdComparatorConsumerRecord5.offset();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test1730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1730");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str10 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        int int11 = kafkaSpoutMessageIdComparatorConsumerRecord5.partition();
        java.lang.String str12 = kafkaSpoutMessageIdComparatorConsumerRecord5.toString();
        java.lang.String str13 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        int int14 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        int int15 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test1731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1731");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator9 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord11 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator9, "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", 10, (long) (-1), (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator9, "");
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator9;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) 35, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator9, "KafkaSpout{acked=null, emitted=[]}");
        java.util.Optional<java.lang.Integer> intOptional17 = kafkaSpoutMessageIdComparatorConsumerRecord16.leaderEpoch();
        org.junit.Assert.assertNotNull(intOptional17);
    }

    @Test
    public void test1732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1732");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        long long7 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        long long8 = kafkaSpoutMessageIdComparatorConsumerRecord5.offset();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator9 = kafkaSpoutMessageIdComparatorConsumerRecord5.key();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator10 = kafkaSpoutMessageIdComparator9.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator17 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator17, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator20 = offsetComparator17.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator17;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator22 = offsetComparator17.reversed();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=null}", (int) (byte) -1, (long) 100, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator17, "hi!");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator25 = kafkaSpoutMessageIdComparator9.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator17);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator9;
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator9);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator10);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator20);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator22);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator25);
    }

    @Test
    public void test1733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1733");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator10 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator10, "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord14 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (short) 100, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator10, "");
        int int15 = kafkaSpoutMessageIdComparatorConsumerRecord14.serializedValueSize();
        java.lang.String str16 = kafkaSpoutMessageIdComparatorConsumerRecord14.topic();
        int int17 = kafkaSpoutMessageIdComparatorConsumerRecord14.serializedValueSize();
        org.apache.kafka.common.header.Headers headers18 = kafkaSpoutMessageIdComparatorConsumerRecord14.headers();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator19 = kafkaSpoutMessageIdComparatorConsumerRecord14.key();
        org.apache.kafka.common.record.TimestampType timestampType20 = kafkaSpoutMessageIdComparatorConsumerRecord14.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator27 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator27, "");
        java.lang.String str30 = kafkaSpoutMessageIdComparatorConsumerRecord29.topic();
        java.util.Optional<java.lang.Integer> intOptional31 = kafkaSpoutMessageIdComparatorConsumerRecord29.leaderEpoch();
        long long32 = kafkaSpoutMessageIdComparatorConsumerRecord29.checksum();
        int int33 = kafkaSpoutMessageIdComparatorConsumerRecord29.serializedValueSize();
        int int34 = kafkaSpoutMessageIdComparatorConsumerRecord29.serializedKeySize();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator35 = kafkaSpoutMessageIdComparatorConsumerRecord29.key();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator40 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator40, "");
        int int43 = kafkaSpoutMessageIdComparatorConsumerRecord42.partition();
        long long44 = kafkaSpoutMessageIdComparatorConsumerRecord42.checksum();
        long long45 = kafkaSpoutMessageIdComparatorConsumerRecord42.timestamp();
        java.util.Optional<java.lang.Integer> intOptional46 = kafkaSpoutMessageIdComparatorConsumerRecord42.leaderEpoch();
        long long47 = kafkaSpoutMessageIdComparatorConsumerRecord42.timestamp();
        java.lang.String str48 = kafkaSpoutMessageIdComparatorConsumerRecord42.toString();
        org.apache.kafka.common.header.Headers headers49 = kafkaSpoutMessageIdComparatorConsumerRecord42.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("ConsumerRecord(topic = KafkaSpout{acked=null, emitted=[]}, partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = 1, serialized key size = 97, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = KafkaSpout{acked=null, emitted=[]})", (int) (short) 100, (long) (short) 0, (long) 10, timestampType20, (java.lang.Long) 0L, 97, 0, kafkaSpoutMessageIdComparator35, "KafkaSpout{acked=null, emitted=null}", headers49);
        java.lang.String str51 = kafkaSpoutMessageIdComparatorConsumerRecord50.toString();
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(headers18);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator19);
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(intOptional31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator35);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-1L) + "'", long45 == (-1L));
        org.junit.Assert.assertNotNull(intOptional46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-1L) + "'", long47 == (-1L));
        org.junit.Assert.assertNotNull(headers49);
    }

    @Test
    public void test1734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1734");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        org.apache.kafka.common.record.TimestampType timestampType10 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int11 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedKeySize();
        long long12 = kafkaSpoutMessageIdComparatorConsumerRecord5.offset();
        long long13 = kafkaSpoutMessageIdComparatorConsumerRecord5.offset();
        org.apache.kafka.common.record.TimestampType timestampType14 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator15 = kafkaSpoutMessageIdComparatorConsumerRecord5.key();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator15);
    }

    @Test
    public void test1735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1735");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator7 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator7, "");
        org.apache.kafka.common.record.TimestampType timestampType10 = kafkaSpoutMessageIdComparatorConsumerRecord9.timestampType();
        int int11 = kafkaSpoutMessageIdComparatorConsumerRecord9.serializedValueSize();
        java.lang.String str12 = kafkaSpoutMessageIdComparatorConsumerRecord9.value();
        long long13 = kafkaSpoutMessageIdComparatorConsumerRecord9.checksum();
        org.apache.kafka.common.record.TimestampType timestampType14 = kafkaSpoutMessageIdComparatorConsumerRecord9.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator21 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator21, "");
        org.apache.kafka.common.record.TimestampType timestampType24 = kafkaSpoutMessageIdComparatorConsumerRecord23.timestampType();
        int int25 = kafkaSpoutMessageIdComparatorConsumerRecord23.serializedValueSize();
        java.lang.String str26 = kafkaSpoutMessageIdComparatorConsumerRecord23.value();
        java.lang.String str27 = kafkaSpoutMessageIdComparatorConsumerRecord23.value();
        int int28 = kafkaSpoutMessageIdComparatorConsumerRecord23.partition();
        java.lang.String str29 = kafkaSpoutMessageIdComparatorConsumerRecord23.value();
        java.util.Optional<java.lang.Integer> intOptional30 = kafkaSpoutMessageIdComparatorConsumerRecord23.leaderEpoch();
        java.lang.Class<?> wildcardClass31 = intOptional30.getClass();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator35 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator35, "");
        org.apache.kafka.common.record.TimestampType timestampType38 = kafkaSpoutMessageIdComparatorConsumerRecord37.timestampType();
        long long39 = kafkaSpoutMessageIdComparatorConsumerRecord37.timestamp();
        long long40 = kafkaSpoutMessageIdComparatorConsumerRecord37.offset();
        java.lang.String str41 = kafkaSpoutMessageIdComparatorConsumerRecord37.value();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator45 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator45, "");
        java.lang.String str48 = kafkaSpoutMessageIdComparatorConsumerRecord47.topic();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator49 = kafkaSpoutMessageIdComparatorConsumerRecord47.key();
        org.apache.kafka.common.header.Headers headers50 = kafkaSpoutMessageIdComparatorConsumerRecord47.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.Object> typeConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.Object>("KafkaSpout{acked=null, emitted=null}", (int) (byte) 0, (long) '4', (long) (short) 1, timestampType14, (java.lang.Long) 10L, (int) (short) 10, (int) ' ', (java.lang.reflect.Type) wildcardClass31, (java.lang.Object) kafkaSpoutMessageIdComparatorConsumerRecord37, headers50);
        java.lang.String str52 = kafkaSpoutMessageIdComparatorConsumerRecord37.toString();
        java.lang.String str53 = kafkaSpoutMessageIdComparatorConsumerRecord37.toString();
        long long54 = kafkaSpoutMessageIdComparatorConsumerRecord37.offset();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType24 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType24.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(intOptional30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertTrue("'" + timestampType38 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType38.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-1L) + "'", long39 == (-1L));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator49);
        org.junit.Assert.assertNotNull(headers50);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
    }

    @Test
    public void test1736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1736");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator7 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator7, "");
        org.apache.kafka.common.record.TimestampType timestampType10 = kafkaSpoutMessageIdComparatorConsumerRecord9.timestampType();
        int int11 = kafkaSpoutMessageIdComparatorConsumerRecord9.serializedValueSize();
        java.lang.String str12 = kafkaSpoutMessageIdComparatorConsumerRecord9.value();
        long long13 = kafkaSpoutMessageIdComparatorConsumerRecord9.checksum();
        org.apache.kafka.common.record.TimestampType timestampType14 = kafkaSpoutMessageIdComparatorConsumerRecord9.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator24 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator24, "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (short) 100, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator24, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator29 = offsetComparator24.reversed();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("hi!", (int) (byte) 1, 10L, (long) (short) 1, timestampType14, (long) 100, (-1), 0, kafkaSpoutMessageIdComparator29, "KafkaSpout{acked=null, emitted=null}");
        int int32 = kafkaSpoutMessageIdComparatorConsumerRecord31.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional33 = kafkaSpoutMessageIdComparatorConsumerRecord31.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional34 = kafkaSpoutMessageIdComparatorConsumerRecord31.leaderEpoch();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(intOptional33);
        org.junit.Assert.assertNotNull(intOptional34);
    }

    @Test
    public void test1737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1737");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator11 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator11, "");
        org.apache.kafka.common.record.TimestampType timestampType14 = kafkaSpoutMessageIdComparatorConsumerRecord13.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator25 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator25, "");
        org.apache.kafka.common.record.TimestampType timestampType28 = kafkaSpoutMessageIdComparatorConsumerRecord27.timestampType();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        java.lang.Object obj34 = new java.lang.Object();
        java.lang.Class<?> wildcardClass35 = obj34.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType28, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass33, (java.lang.reflect.GenericDeclaration) wildcardClass35);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator44 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator44, "");
        org.apache.kafka.common.record.TimestampType timestampType47 = kafkaSpoutMessageIdComparatorConsumerRecord46.timestampType();
        java.lang.Object obj51 = new java.lang.Object();
        java.lang.Class<?> wildcardClass52 = obj51.getClass();
        java.lang.Object obj53 = new java.lang.Object();
        java.lang.Class<?> wildcardClass54 = obj53.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType47, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass52, (java.lang.reflect.GenericDeclaration) wildcardClass54);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("hi!", (int) (byte) 0, (long) (byte) 10, 10L, timestampType14, (long) (short) 10, (int) (short) 0, (int) (byte) 0, (java.lang.reflect.Type) wildcardClass33, timestampType47);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator60 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=null}", (int) (short) 0, (long) (byte) 1, (long) (short) 100, timestampType47, 0L, (int) (byte) 10, (int) (short) 100, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator60, "hi!");
        int int63 = kafkaSpoutMessageIdComparatorConsumerRecord62.serializedKeySize();
        long long64 = kafkaSpoutMessageIdComparatorConsumerRecord62.checksum();
        long long65 = kafkaSpoutMessageIdComparatorConsumerRecord62.checksum();
        org.apache.kafka.common.header.Headers headers66 = kafkaSpoutMessageIdComparatorConsumerRecord62.headers();
        int int67 = kafkaSpoutMessageIdComparatorConsumerRecord62.serializedValueSize();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator68 = kafkaSpoutMessageIdComparatorConsumerRecord62.key();
        int int69 = kafkaSpoutMessageIdComparatorConsumerRecord62.serializedKeySize();
        java.lang.String str70 = kafkaSpoutMessageIdComparatorConsumerRecord62.toString();
        java.lang.String str71 = kafkaSpoutMessageIdComparatorConsumerRecord62.toString();
        org.apache.kafka.common.record.TimestampType timestampType72 = kafkaSpoutMessageIdComparatorConsumerRecord62.timestampType();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertNotNull(headers66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 100 + "'", int67 == 100);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 10 + "'", int69 == 10);
        org.junit.Assert.assertTrue("'" + timestampType72 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType72.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test1738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1738");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>();
        org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy firstPollOffsetStrategy1 = null;
        genericDeclarationKafkaSpout0.firstPollOffsetStrategy = firstPollOffsetStrategy1;
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>.Timer timer3 = genericDeclarationKafkaSpout0.commitTimer;
        // The following exception was thrown during execution in test generation
        try {
            genericDeclarationKafkaSpout0.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(timer3);
    }

    @Test
    public void test1739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1739");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator6 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator6, "");
        org.apache.kafka.common.record.TimestampType timestampType9 = kafkaSpoutMessageIdComparatorConsumerRecord8.timestampType();
        long long10 = kafkaSpoutMessageIdComparatorConsumerRecord8.timestamp();
        java.lang.String str11 = kafkaSpoutMessageIdComparatorConsumerRecord8.value();
        java.lang.String str12 = kafkaSpoutMessageIdComparatorConsumerRecord8.toString();
        long long13 = kafkaSpoutMessageIdComparatorConsumerRecord8.timestamp();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator14 = kafkaSpoutMessageIdComparatorConsumerRecord8.key();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("ConsumerRecord(topic = KafkaSpout{acked=null, emitted=null}, partition = -1, leaderEpoch = null, offset = 97, NoTimestampType = 32, serialized key size = 100, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = )", (int) (byte) -1, (long) ' ', kafkaSpoutMessageIdComparator14, "hi!");
        java.lang.String str17 = kafkaSpoutMessageIdComparatorConsumerRecord16.value();
        java.lang.String str18 = kafkaSpoutMessageIdComparatorConsumerRecord16.toString();
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
    }

    @Test
    public void test1740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1740");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator11 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator11, "");
        org.apache.kafka.common.record.TimestampType timestampType14 = kafkaSpoutMessageIdComparatorConsumerRecord13.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator25 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator25, "");
        org.apache.kafka.common.record.TimestampType timestampType28 = kafkaSpoutMessageIdComparatorConsumerRecord27.timestampType();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        java.lang.Object obj34 = new java.lang.Object();
        java.lang.Class<?> wildcardClass35 = obj34.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType28, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass33, (java.lang.reflect.GenericDeclaration) wildcardClass35);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator44 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator44, "");
        org.apache.kafka.common.record.TimestampType timestampType47 = kafkaSpoutMessageIdComparatorConsumerRecord46.timestampType();
        java.lang.Object obj51 = new java.lang.Object();
        java.lang.Class<?> wildcardClass52 = obj51.getClass();
        java.lang.Object obj53 = new java.lang.Object();
        java.lang.Class<?> wildcardClass54 = obj53.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType47, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass52, (java.lang.reflect.GenericDeclaration) wildcardClass54);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("hi!", (int) (byte) 0, (long) (byte) 10, 10L, timestampType14, (long) (short) 10, (int) (short) 0, (int) (byte) 0, (java.lang.reflect.Type) wildcardClass33, timestampType47);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator63 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord65 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (-1), (long) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator63, "");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator70 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator70, "");
        java.lang.String str73 = kafkaSpoutMessageIdComparatorConsumerRecord72.topic();
        org.apache.kafka.common.header.Headers headers74 = kafkaSpoutMessageIdComparatorConsumerRecord72.headers();
        org.apache.kafka.common.header.Headers headers75 = kafkaSpoutMessageIdComparatorConsumerRecord72.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=null}", 100, (long) (byte) -1, (long) (byte) 1, timestampType14, (java.lang.Long) 100L, 0, (int) (byte) 10, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator63, "KafkaSpout{acked=null, emitted=null}", headers75);
        org.apache.kafka.common.record.TimestampType timestampType77 = kafkaSpoutMessageIdComparatorConsumerRecord76.timestampType();
        int int78 = kafkaSpoutMessageIdComparatorConsumerRecord76.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType79 = kafkaSpoutMessageIdComparatorConsumerRecord76.timestampType();
        long long80 = kafkaSpoutMessageIdComparatorConsumerRecord76.timestamp();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator81 = kafkaSpoutMessageIdComparatorConsumerRecord76.key();
        int int82 = kafkaSpoutMessageIdComparatorConsumerRecord76.partition();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(headers74);
        org.junit.Assert.assertNotNull(headers75);
        org.junit.Assert.assertTrue("'" + timestampType77 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType77.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 10 + "'", int78 == 10);
        org.junit.Assert.assertTrue("'" + timestampType79 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType79.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 1L + "'", long80 == 1L);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 100 + "'", int82 == 100);
    }

    @Test
    public void test1741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1741");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        java.lang.String str6 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        org.apache.kafka.common.header.Headers headers7 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        org.apache.kafka.common.header.Headers headers8 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord5.toString();
        org.apache.kafka.common.header.Headers headers10 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator11 = kafkaSpoutMessageIdComparatorConsumerRecord5.key();
        java.lang.String str12 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(headers7);
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test1742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1742");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        java.lang.String str6 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator7 = kafkaSpoutMessageIdComparatorConsumerRecord5.key();
        org.apache.kafka.common.header.Headers headers8 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        long long9 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator10 = kafkaSpoutMessageIdComparatorConsumerRecord5.key();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator11 = kafkaSpoutMessageIdComparatorConsumerRecord5.key();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator12 = kafkaSpoutMessageIdComparatorConsumerRecord5.key();
        java.util.Optional<java.lang.Integer> intOptional13 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator7);
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator10);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator11);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator12);
        org.junit.Assert.assertNotNull(intOptional13);
    }

    @Test
    public void test1743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1743");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        long long7 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.util.Optional<java.lang.Integer> intOptional9 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator10 = kafkaSpoutMessageIdComparatorConsumerRecord5.key();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator11 = kafkaSpoutMessageIdComparator10.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator18 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator18, "");
        java.lang.String str21 = kafkaSpoutMessageIdComparatorConsumerRecord20.topic();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator22 = kafkaSpoutMessageIdComparatorConsumerRecord20.key();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("hi!", (int) '4', 100L, kafkaSpoutMessageIdComparator22, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator25 = kafkaSpoutMessageIdComparator11.thenComparing(kafkaSpoutMessageIdComparator22);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator26 = kafkaSpoutMessageIdComparator25.reversed();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator27 = kafkaSpoutMessageIdComparator25.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator27;
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(intOptional9);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator10);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator11);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator22);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator25);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator26);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator27);
    }

    @Test
    public void test1744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1744");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.topology.base.BaseRichSpout, java.util.AbstractList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> baseRichSpoutKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.base.BaseRichSpout, java.util.AbstractList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> baseRichSpoutKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.base.BaseRichSpout, java.util.AbstractList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>(baseRichSpoutKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1745");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        org.apache.kafka.common.record.TimestampType timestampType10 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int11 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedKeySize();
        long long12 = kafkaSpoutMessageIdComparatorConsumerRecord5.offset();
        long long13 = kafkaSpoutMessageIdComparatorConsumerRecord5.offset();
        int int14 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedKeySize();
        long long15 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        java.util.Optional<java.lang.Integer> intOptional16 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        int int17 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertNotNull(intOptional16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test1746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1746");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>();
        org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy firstPollOffsetStrategy1 = null;
        genericDeclarationKafkaSpout0.firstPollOffsetStrategy = firstPollOffsetStrategy1;
        java.util.Set<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet3 = null;
        genericDeclarationKafkaSpout0.emitted = kafkaSpoutMessageIdSet3;
        java.util.Set<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet5 = genericDeclarationKafkaSpout0.emitted;
        // The following exception was thrown during execution in test generation
        try {
            genericDeclarationKafkaSpout0.activate();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(kafkaSpoutMessageIdSet5);
    }

    @Test
    public void test1747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1747");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator11 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator11, "");
        org.apache.kafka.common.record.TimestampType timestampType14 = kafkaSpoutMessageIdComparatorConsumerRecord13.timestampType();
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Object obj20 = new java.lang.Object();
        java.lang.Class<?> wildcardClass21 = obj20.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord22 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType14, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass19, (java.lang.reflect.GenericDeclaration) wildcardClass21);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator29 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator29, "");
        org.apache.kafka.common.record.TimestampType timestampType32 = kafkaSpoutMessageIdComparatorConsumerRecord31.timestampType();
        int int33 = kafkaSpoutMessageIdComparatorConsumerRecord31.serializedValueSize();
        java.lang.String str34 = kafkaSpoutMessageIdComparatorConsumerRecord31.value();
        java.lang.String str35 = kafkaSpoutMessageIdComparatorConsumerRecord31.value();
        org.apache.kafka.common.record.TimestampType timestampType36 = kafkaSpoutMessageIdComparatorConsumerRecord31.timestampType();
        int int37 = kafkaSpoutMessageIdComparatorConsumerRecord31.serializedKeySize();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator38 = kafkaSpoutMessageIdComparatorConsumerRecord31.key();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator45 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator45, "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (short) 100, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator45, "");
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator45;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator51 = kafkaSpoutMessageIdComparator38.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator45);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator52 = kafkaSpoutMessageIdComparator51.reversed();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", 52, (long) (short) 10, 1L, timestampType14, (long) 'a', 52, (int) '#', kafkaSpoutMessageIdComparator52, "KafkaSpout{acked=null, emitted=null}");
        int int55 = kafkaSpoutMessageIdComparatorConsumerRecord54.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional56 = kafkaSpoutMessageIdComparatorConsumerRecord54.leaderEpoch();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + timestampType32 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType32.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + timestampType36 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType36.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator38);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator51);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator52);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 52 + "'", int55 == 52);
        org.junit.Assert.assertNotNull(intOptional56);
    }

    @Test
    public void test1748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1748");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>();
        genericDeclarationKafkaSpout0.maxRetries = (byte) -1;
        org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy firstPollOffsetStrategy3 = genericDeclarationKafkaSpout0.firstPollOffsetStrategy;
        org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy firstPollOffsetStrategy4 = genericDeclarationKafkaSpout0.firstPollOffsetStrategy;
        org.apache.storm.kafka.spout.KafkaSpoutTuplesBuilder<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpoutTuplesBuilder5 = null;
        genericDeclarationKafkaSpout0.tuplesBuilder = genericDeclarationKafkaSpoutTuplesBuilder5;
        org.apache.storm.kafka.spout.KafkaSpoutTuplesBuilder<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpoutTuplesBuilder7 = null;
        genericDeclarationKafkaSpout0.tuplesBuilder = genericDeclarationKafkaSpoutTuplesBuilder7;
        org.apache.kafka.clients.consumer.KafkaConsumer<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaConsumer9 = null;
        genericDeclarationKafkaSpout0.kafkaConsumer = genericDeclarationKafkaConsumer9;
        org.junit.Assert.assertNull(firstPollOffsetStrategy3);
        org.junit.Assert.assertNull(firstPollOffsetStrategy4);
    }

    @Test
    public void test1749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1749");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        long long7 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord5.toString();
        long long10 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        int int11 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedKeySize();
        long long12 = kafkaSpoutMessageIdComparatorConsumerRecord5.offset();
        org.apache.kafka.common.header.Headers headers13 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        java.lang.String str14 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        org.apache.kafka.common.header.Headers headers15 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        long long16 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(headers13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
    }

    @Test
    public void test1750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1750");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.lang.Object, java.io.Serializable> objKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.lang.Object, java.io.Serializable> objKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.Object, java.io.Serializable>(objKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1751");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator6 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator6, "");
        org.apache.kafka.common.record.TimestampType timestampType9 = kafkaSpoutMessageIdComparatorConsumerRecord8.timestampType();
        int int10 = kafkaSpoutMessageIdComparatorConsumerRecord8.serializedValueSize();
        java.lang.String str11 = kafkaSpoutMessageIdComparatorConsumerRecord8.value();
        int int12 = kafkaSpoutMessageIdComparatorConsumerRecord8.partition();
        int int13 = kafkaSpoutMessageIdComparatorConsumerRecord8.partition();
        long long14 = kafkaSpoutMessageIdComparatorConsumerRecord8.offset();
        java.util.Optional<java.lang.Integer> intOptional15 = kafkaSpoutMessageIdComparatorConsumerRecord8.leaderEpoch();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator16 = kafkaSpoutMessageIdComparatorConsumerRecord8.key();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator28 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator28, "");
        org.apache.kafka.common.record.TimestampType timestampType31 = kafkaSpoutMessageIdComparatorConsumerRecord30.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator42 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator42, "");
        org.apache.kafka.common.record.TimestampType timestampType45 = kafkaSpoutMessageIdComparatorConsumerRecord44.timestampType();
        java.lang.Object obj49 = new java.lang.Object();
        java.lang.Class<?> wildcardClass50 = obj49.getClass();
        java.lang.Object obj51 = new java.lang.Object();
        java.lang.Class<?> wildcardClass52 = obj51.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType45, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass50, (java.lang.reflect.GenericDeclaration) wildcardClass52);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator61 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator61, "");
        org.apache.kafka.common.record.TimestampType timestampType64 = kafkaSpoutMessageIdComparatorConsumerRecord63.timestampType();
        java.lang.Object obj68 = new java.lang.Object();
        java.lang.Class<?> wildcardClass69 = obj68.getClass();
        java.lang.Object obj70 = new java.lang.Object();
        java.lang.Class<?> wildcardClass71 = obj70.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType64, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass69, (java.lang.reflect.GenericDeclaration) wildcardClass71);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord73 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("hi!", (int) (byte) 0, (long) (byte) 10, 10L, timestampType31, (long) (short) 10, (int) (short) 0, (int) (byte) 0, (java.lang.reflect.Type) wildcardClass50, timestampType64);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator80 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord82 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (-1), (long) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator80, "");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator87 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord89 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator87, "");
        java.lang.String str90 = kafkaSpoutMessageIdComparatorConsumerRecord89.topic();
        org.apache.kafka.common.header.Headers headers91 = kafkaSpoutMessageIdComparatorConsumerRecord89.headers();
        org.apache.kafka.common.header.Headers headers92 = kafkaSpoutMessageIdComparatorConsumerRecord89.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord93 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=null}", 100, (long) (byte) -1, (long) (byte) 1, timestampType31, (java.lang.Long) 100L, 0, (int) (byte) 10, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator80, "KafkaSpout{acked=null, emitted=null}", headers92);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator94 = offsetComparator80.reversed();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator95 = offsetComparator80.reversed();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator96 = kafkaSpoutMessageIdComparator16.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator80);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord98 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("ConsumerRecord(topic = KafkaSpout{acked=null, emitted=null}, partition = -1, leaderEpoch = null, offset = 97, NoTimestampType = 32, serialized key size = 100, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = )", (int) ' ', 0L, kafkaSpoutMessageIdComparator96, "KafkaSpout{acked=null, emitted=null}");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator99 = kafkaSpoutMessageIdComparator96.reversed();
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator16);
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType45 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType45.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertTrue("'" + timestampType64 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType64.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertNotNull(headers91);
        org.junit.Assert.assertNotNull(headers92);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator94);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator95);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator96);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator99);
    }

    @Test
    public void test1752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1752");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        java.lang.String str6 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator7 = kafkaSpoutMessageIdComparatorConsumerRecord5.key();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord5.toString();
        long long10 = kafkaSpoutMessageIdComparatorConsumerRecord5.offset();
        org.apache.kafka.common.header.Headers headers11 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        java.util.Optional<java.lang.Integer> intOptional12 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        java.lang.String str13 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str14 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        int int15 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        long long16 = kafkaSpoutMessageIdComparatorConsumerRecord5.offset();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(headers11);
        org.junit.Assert.assertNotNull(intOptional12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test1753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1753");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator6 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator6, "");
        org.apache.kafka.common.record.TimestampType timestampType9 = kafkaSpoutMessageIdComparatorConsumerRecord8.timestampType();
        int int10 = kafkaSpoutMessageIdComparatorConsumerRecord8.serializedValueSize();
        java.lang.String str11 = kafkaSpoutMessageIdComparatorConsumerRecord8.value();
        java.lang.String str12 = kafkaSpoutMessageIdComparatorConsumerRecord8.value();
        org.apache.kafka.common.record.TimestampType timestampType13 = kafkaSpoutMessageIdComparatorConsumerRecord8.timestampType();
        int int14 = kafkaSpoutMessageIdComparatorConsumerRecord8.serializedKeySize();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator15 = kafkaSpoutMessageIdComparatorConsumerRecord8.key();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator22 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator22, "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (short) 100, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator22, "");
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator22;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator28 = kafkaSpoutMessageIdComparator15.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator22);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator29 = offsetComparator22.reversed();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator30 = kafkaSpoutMessageIdComparator29.reversed();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("ConsumerRecord(topic = KafkaSpout{acked=null, emitted=null}, partition = -1, leaderEpoch = null, offset = 97, NoTimestampType = 32, serialized key size = 100, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = )", (int) (byte) 100, 0L, kafkaSpoutMessageIdComparator30, "");
        org.apache.kafka.common.record.TimestampType timestampType33 = kafkaSpoutMessageIdComparatorConsumerRecord32.timestampType();
        int int34 = kafkaSpoutMessageIdComparatorConsumerRecord32.serializedKeySize();
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator15);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator28);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator29);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator30);
        org.junit.Assert.assertTrue("'" + timestampType33 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType33.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
    }

    @Test
    public void test1754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1754");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator6 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator6, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator9 = offsetComparator6.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator6;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator11 = offsetComparator6.reversed();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", 32, (long) 0, kafkaSpoutMessageIdComparator11, "KafkaSpout{acked=null, emitted=null}");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator14 = kafkaSpoutMessageIdComparatorConsumerRecord13.key();
        int int15 = kafkaSpoutMessageIdComparatorConsumerRecord13.partition();
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator9);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator11);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 32 + "'", int15 == 32);
    }

    @Test
    public void test1755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1755");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>, org.apache.storm.spout.ISpout> genericDeclarationKafkaSpoutKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>, org.apache.storm.spout.ISpout>();
    }

    @Test
    public void test1756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1756");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.io.Serializable> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.io.Serializable>();
    }

    @Test
    public void test1757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1757");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str10 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.util.Optional<java.lang.Integer> intOptional11 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType12 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int13 = kafkaSpoutMessageIdComparatorConsumerRecord5.partition();
        long long14 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(intOptional11);
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
    }

    @Test
    public void test1758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1758");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        java.lang.String str6 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        org.apache.kafka.common.header.Headers headers7 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator8 = kafkaSpoutMessageIdComparatorConsumerRecord5.key();
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(headers7);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test1759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1759");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        long long7 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        long long8 = kafkaSpoutMessageIdComparatorConsumerRecord5.offset();
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        org.apache.kafka.common.header.Headers headers10 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        org.apache.kafka.common.record.TimestampType timestampType11 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int12 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test1760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1760");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator11 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator11, "");
        org.apache.kafka.common.record.TimestampType timestampType14 = kafkaSpoutMessageIdComparatorConsumerRecord13.timestampType();
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Object obj20 = new java.lang.Object();
        java.lang.Class<?> wildcardClass21 = obj20.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord22 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType14, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass19, (java.lang.reflect.GenericDeclaration) wildcardClass21);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator29 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator29, "");
        org.apache.kafka.common.record.TimestampType timestampType32 = kafkaSpoutMessageIdComparatorConsumerRecord31.timestampType();
        int int33 = kafkaSpoutMessageIdComparatorConsumerRecord31.serializedValueSize();
        java.lang.String str34 = kafkaSpoutMessageIdComparatorConsumerRecord31.value();
        java.lang.String str35 = kafkaSpoutMessageIdComparatorConsumerRecord31.value();
        org.apache.kafka.common.record.TimestampType timestampType36 = kafkaSpoutMessageIdComparatorConsumerRecord31.timestampType();
        int int37 = kafkaSpoutMessageIdComparatorConsumerRecord31.serializedKeySize();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator38 = kafkaSpoutMessageIdComparatorConsumerRecord31.key();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator45 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator45, "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (short) 100, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator45, "");
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator45;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator51 = kafkaSpoutMessageIdComparator38.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator45);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator52 = kafkaSpoutMessageIdComparator51.reversed();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", 52, (long) (short) 10, 1L, timestampType14, (long) 'a', 52, (int) '#', kafkaSpoutMessageIdComparator52, "KafkaSpout{acked=null, emitted=null}");
        java.lang.String str55 = kafkaSpoutMessageIdComparatorConsumerRecord54.value();
        int int56 = kafkaSpoutMessageIdComparatorConsumerRecord54.serializedKeySize();
        long long57 = kafkaSpoutMessageIdComparatorConsumerRecord54.offset();
        java.util.Optional<java.lang.Integer> intOptional58 = kafkaSpoutMessageIdComparatorConsumerRecord54.leaderEpoch();
        long long59 = kafkaSpoutMessageIdComparatorConsumerRecord54.timestamp();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + timestampType32 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType32.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + timestampType36 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType36.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator38);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator51);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator52);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "KafkaSpout{acked=null, emitted=null}" + "'", str55, "KafkaSpout{acked=null, emitted=null}");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 52 + "'", int56 == 52);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 10L + "'", long57 == 10L);
        org.junit.Assert.assertNotNull(intOptional58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L + "'", long59 == 1L);
    }

    @Test
    public void test1761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1761");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, org.apache.storm.topology.base.BaseComponent> genericDeclarationKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, org.apache.storm.topology.base.BaseComponent>();
    }

    @Test
    public void test1762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1762");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator6 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (-1), (long) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator6, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator9 = offsetComparator6.reversed();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator10 = offsetComparator6.reversed();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("hi!", (int) (byte) -1, (long) ' ', kafkaSpoutMessageIdComparator10, "KafkaSpout{acked=null, emitted=null}");
        java.lang.String str13 = kafkaSpoutMessageIdComparatorConsumerRecord12.value();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator14 = kafkaSpoutMessageIdComparatorConsumerRecord12.key();
        java.lang.String str15 = kafkaSpoutMessageIdComparatorConsumerRecord12.toString();
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator9);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "KafkaSpout{acked=null, emitted=null}" + "'", str13, "KafkaSpout{acked=null, emitted=null}");
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator14);
    }

    @Test
    public void test1763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1763");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        int int6 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.partition();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
    }

    @Test
    public void test1764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1764");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator9 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord11 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator9, "");
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator9;
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator9;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator14 = offsetComparator9.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator9;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("ConsumerRecord(topic = KafkaSpout{acked=null, emitted=[]}, partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = 1, serialized key size = 97, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = KafkaSpout{acked=null, emitted=[]})", (int) (byte) 0, (long) (short) 1, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator9, "KafkaSpout{acked=null, emitted=null}");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("hi!", (int) (byte) 0, (long) 'a', (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator9, "hi!");
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId20 = null;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId21 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int22 = offsetComparator9.compare(kafkaSpoutMessageId20, kafkaSpoutMessageId21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator14);
    }

    @Test
    public void test1765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1765");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator7 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator7, "");
        org.apache.kafka.common.record.TimestampType timestampType10 = kafkaSpoutMessageIdComparatorConsumerRecord9.timestampType();
        long long11 = kafkaSpoutMessageIdComparatorConsumerRecord9.timestamp();
        long long12 = kafkaSpoutMessageIdComparatorConsumerRecord9.offset();
        org.apache.kafka.common.header.Headers headers13 = kafkaSpoutMessageIdComparatorConsumerRecord9.headers();
        long long14 = kafkaSpoutMessageIdComparatorConsumerRecord9.offset();
        long long15 = kafkaSpoutMessageIdComparatorConsumerRecord9.offset();
        long long16 = kafkaSpoutMessageIdComparatorConsumerRecord9.timestamp();
        long long17 = kafkaSpoutMessageIdComparatorConsumerRecord9.timestamp();
        long long18 = kafkaSpoutMessageIdComparatorConsumerRecord9.checksum();
        org.apache.kafka.common.record.TimestampType timestampType19 = kafkaSpoutMessageIdComparatorConsumerRecord9.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator30 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator30, "");
        org.apache.kafka.common.record.TimestampType timestampType33 = kafkaSpoutMessageIdComparatorConsumerRecord32.timestampType();
        int int34 = kafkaSpoutMessageIdComparatorConsumerRecord32.serializedValueSize();
        java.lang.String str35 = kafkaSpoutMessageIdComparatorConsumerRecord32.value();
        int int36 = kafkaSpoutMessageIdComparatorConsumerRecord32.serializedValueSize();
        long long37 = kafkaSpoutMessageIdComparatorConsumerRecord32.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType38 = kafkaSpoutMessageIdComparatorConsumerRecord32.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator48 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator48, "");
        java.lang.String str51 = kafkaSpoutMessageIdComparatorConsumerRecord50.topic();
        org.apache.kafka.common.header.Headers headers52 = kafkaSpoutMessageIdComparatorConsumerRecord50.headers();
        org.apache.kafka.common.header.Headers headers53 = kafkaSpoutMessageIdComparatorConsumerRecord50.headers();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator54 = kafkaSpoutMessageIdComparatorConsumerRecord50.key();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator54;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("hi!", 0, (long) 10, kafkaSpoutMessageIdComparator54, "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("hi!", (int) (short) 10, 32L, (long) '#', timestampType38, (long) (short) -1, (int) (byte) -1, (int) '4', kafkaSpoutMessageIdComparator54, "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("ConsumerRecord(topic = KafkaSpout{acked=null, emitted=null}, partition = -1, leaderEpoch = null, offset = 97, NoTimestampType = 32, serialized key size = 100, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = )", 97, (long) 52, (long) (-1), timestampType19, 52L, (int) '4', (-1), kafkaSpoutMessageIdComparator54, "KafkaSpout{acked=null, emitted=null}");
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator54;
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(headers13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType33 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType33.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1L) + "'", long37 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType38 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType38.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(headers52);
        org.junit.Assert.assertNotNull(headers53);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator54);
    }

    @Test
    public void test1766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1766");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        int int9 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str10 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        int int11 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedKeySize();
        org.apache.kafka.common.header.Headers headers12 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        java.lang.String str13 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        int int14 = kafkaSpoutMessageIdComparatorConsumerRecord5.partition();
        java.lang.String str15 = kafkaSpoutMessageIdComparatorConsumerRecord5.toString();
        org.apache.kafka.common.record.TimestampType timestampType16 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        java.lang.String str17 = kafkaSpoutMessageIdComparatorConsumerRecord5.toString();
        java.lang.String str18 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(headers12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test1767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1767");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator6 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator6, "");
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord8.topic();
        org.apache.kafka.common.header.Headers headers10 = kafkaSpoutMessageIdComparatorConsumerRecord8.headers();
        org.apache.kafka.common.header.Headers headers11 = kafkaSpoutMessageIdComparatorConsumerRecord8.headers();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator12 = kafkaSpoutMessageIdComparatorConsumerRecord8.key();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord14 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=[]}", (int) (short) 100, (long) (-1), kafkaSpoutMessageIdComparator12, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator15 = kafkaSpoutMessageIdComparatorConsumerRecord14.key();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator15;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator20 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord22 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator20, "");
        org.apache.kafka.common.record.TimestampType timestampType23 = kafkaSpoutMessageIdComparatorConsumerRecord22.timestampType();
        int int24 = kafkaSpoutMessageIdComparatorConsumerRecord22.serializedValueSize();
        java.lang.String str25 = kafkaSpoutMessageIdComparatorConsumerRecord22.value();
        int int26 = kafkaSpoutMessageIdComparatorConsumerRecord22.serializedValueSize();
        java.lang.String str27 = kafkaSpoutMessageIdComparatorConsumerRecord22.topic();
        int int28 = kafkaSpoutMessageIdComparatorConsumerRecord22.serializedKeySize();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator29 = kafkaSpoutMessageIdComparatorConsumerRecord22.key();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator30 = kafkaSpoutMessageIdComparatorConsumerRecord22.key();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator31 = kafkaSpoutMessageIdComparator15.thenComparing(kafkaSpoutMessageIdComparator30);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertNotNull(headers11);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator12);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator15);
        org.junit.Assert.assertTrue("'" + timestampType23 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType23.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator29);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator30);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator31);
    }

    @Test
    public void test1768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1768");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>();
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService1 = null;
        genericDeclarationKafkaSpout0.retryService = kafkaSpoutRetryService1;
        long long3 = genericDeclarationKafkaSpout0.numUncommittedOffsets;
        org.apache.kafka.common.TopicPartition topicPartition4 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection5 = genericDeclarationKafkaSpout0.toArrayList(topicPartition4);
        boolean boolean6 = genericDeclarationKafkaSpout0.waitingToEmit();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>> genericDeclarationConsumerRecordItor7 = null;
        genericDeclarationKafkaSpout0.waitingToEmit = genericDeclarationConsumerRecordItor7;
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(topicPartitionCollection5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1769");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>();
        org.apache.kafka.clients.consumer.KafkaConsumer<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaConsumer1 = genericDeclarationKafkaSpout0.kafkaConsumer;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>> genericDeclarationConsumerRecordItor2 = genericDeclarationKafkaSpout0.waitingToEmit;
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpoutConfig3 = genericDeclarationKafkaSpout0.kafkaSpoutConfig;
        org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy firstPollOffsetStrategy4 = null;
        genericDeclarationKafkaSpout0.firstPollOffsetStrategy = firstPollOffsetStrategy4;
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService6 = genericDeclarationKafkaSpout0.retryService;
        org.apache.kafka.clients.consumer.KafkaConsumer<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaConsumer7 = genericDeclarationKafkaSpout0.kafkaConsumer;
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService8 = null;
        genericDeclarationKafkaSpout0.retryService = kafkaSpoutRetryService8;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.kafka.clients.consumer.ConsumerRecords<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationConsumerRecords10 = genericDeclarationKafkaSpout0.pollKafkaBroker();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(genericDeclarationKafkaConsumer1);
        org.junit.Assert.assertNull(genericDeclarationConsumerRecordItor2);
        org.junit.Assert.assertNull(genericDeclarationKafkaSpoutConfig3);
        org.junit.Assert.assertNull(kafkaSpoutRetryService6);
        org.junit.Assert.assertNull(genericDeclarationKafkaConsumer7);
    }

    @Test
    public void test1770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1770");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator6 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator6, "");
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator6;
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator6;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("hi!", 10, (long) (short) 10, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator6, "ConsumerRecord(topic = KafkaSpout{acked=null, emitted=[]}, partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = 1, serialized key size = 97, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = KafkaSpout{acked=null, emitted=[]})");
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId13 = null;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId14 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int15 = offsetComparator6.compare(kafkaSpoutMessageId13, kafkaSpoutMessageId14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1771");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        org.apache.kafka.common.record.TimestampType timestampType10 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        java.lang.String str11 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        int int12 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test1772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1772");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator17 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator17, "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (short) 100, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator17, "");
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator17;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator23 = offsetComparator17.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator32 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator32, "");
        org.apache.kafka.common.record.TimestampType timestampType35 = kafkaSpoutMessageIdComparatorConsumerRecord34.timestampType();
        long long36 = kafkaSpoutMessageIdComparatorConsumerRecord34.timestamp();
        long long37 = kafkaSpoutMessageIdComparatorConsumerRecord34.offset();
        java.lang.String str38 = kafkaSpoutMessageIdComparatorConsumerRecord34.value();
        org.apache.kafka.common.record.TimestampType timestampType39 = kafkaSpoutMessageIdComparatorConsumerRecord34.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator46 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator46, "");
        org.apache.kafka.common.record.TimestampType timestampType49 = kafkaSpoutMessageIdComparatorConsumerRecord48.timestampType();
        int int50 = kafkaSpoutMessageIdComparatorConsumerRecord48.serializedValueSize();
        java.lang.String str51 = kafkaSpoutMessageIdComparatorConsumerRecord48.value();
        java.lang.String str52 = kafkaSpoutMessageIdComparatorConsumerRecord48.value();
        org.apache.kafka.common.record.TimestampType timestampType53 = kafkaSpoutMessageIdComparatorConsumerRecord48.timestampType();
        int int54 = kafkaSpoutMessageIdComparatorConsumerRecord48.serializedKeySize();
        long long55 = kafkaSpoutMessageIdComparatorConsumerRecord48.offset();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator56 = kafkaSpoutMessageIdComparatorConsumerRecord48.key();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator56;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator62 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator62, "");
        java.lang.String str65 = kafkaSpoutMessageIdComparatorConsumerRecord64.topic();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator66 = kafkaSpoutMessageIdComparatorConsumerRecord64.key();
        java.lang.String str67 = kafkaSpoutMessageIdComparatorConsumerRecord64.topic();
        java.lang.String str68 = kafkaSpoutMessageIdComparatorConsumerRecord64.toString();
        long long69 = kafkaSpoutMessageIdComparatorConsumerRecord64.offset();
        org.apache.kafka.common.header.Headers headers70 = kafkaSpoutMessageIdComparatorConsumerRecord64.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("hi!", (int) (short) -1, (long) 97, (long) 32, timestampType39, (java.lang.Long) 10L, (int) (short) 100, (-1), kafkaSpoutMessageIdComparator56, "hi!", headers70);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("hi!", 10, 1L, (long) (short) 0, timestampType7, (java.lang.Long) 35L, (int) (short) 10, 35, kafkaSpoutMessageIdComparator23, "hi!", headers70);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=null}", 100, (-1L), kafkaSpoutMessageIdComparator23, "");
        int int75 = kafkaSpoutMessageIdComparatorConsumerRecord74.serializedKeySize();
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator23);
        org.junit.Assert.assertTrue("'" + timestampType35 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType35.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + timestampType39 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType39.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType49 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType49.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertTrue("'" + timestampType53 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType53.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator56);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertNotNull(headers70);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
    }

    @Test
    public void test1773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1773");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        long long7 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        long long8 = kafkaSpoutMessageIdComparatorConsumerRecord5.offset();
        org.apache.kafka.common.header.Headers headers9 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        long long10 = kafkaSpoutMessageIdComparatorConsumerRecord5.offset();
        long long11 = kafkaSpoutMessageIdComparatorConsumerRecord5.offset();
        long long12 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        long long13 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        int int14 = kafkaSpoutMessageIdComparatorConsumerRecord5.partition();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator15 = kafkaSpoutMessageIdComparatorConsumerRecord5.key();
        java.lang.String str16 = kafkaSpoutMessageIdComparatorConsumerRecord5.toString();
        int int17 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(headers9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test1774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1774");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator11 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator11, "");
        org.apache.kafka.common.record.TimestampType timestampType14 = kafkaSpoutMessageIdComparatorConsumerRecord13.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator25 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator25, "");
        org.apache.kafka.common.record.TimestampType timestampType28 = kafkaSpoutMessageIdComparatorConsumerRecord27.timestampType();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        java.lang.Object obj34 = new java.lang.Object();
        java.lang.Class<?> wildcardClass35 = obj34.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType28, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass33, (java.lang.reflect.GenericDeclaration) wildcardClass35);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator44 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator44, "");
        org.apache.kafka.common.record.TimestampType timestampType47 = kafkaSpoutMessageIdComparatorConsumerRecord46.timestampType();
        java.lang.Object obj51 = new java.lang.Object();
        java.lang.Class<?> wildcardClass52 = obj51.getClass();
        java.lang.Object obj53 = new java.lang.Object();
        java.lang.Class<?> wildcardClass54 = obj53.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType47, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass52, (java.lang.reflect.GenericDeclaration) wildcardClass54);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("hi!", (int) (byte) 0, (long) (byte) 10, 10L, timestampType14, (long) (short) 10, (int) (short) 0, (int) (byte) 0, (java.lang.reflect.Type) wildcardClass33, timestampType47);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator60 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=null}", (int) (short) 0, (long) (byte) 1, (long) (short) 100, timestampType47, 0L, (int) (byte) 10, (int) (short) 100, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator60, "hi!");
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator60;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator64 = offsetComparator60.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator60;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator66 = offsetComparator60.reversed();
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId67 = null;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId68 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int69 = offsetComparator60.compare(kafkaSpoutMessageId67, kafkaSpoutMessageId68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator64);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator66);
    }

    @Test
    public void test1775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1775");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.util.AbstractCollection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.util.Set<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> kafkaSpoutMessageIdCollectionKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.util.AbstractCollection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.util.Set<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> kafkaSpoutMessageIdCollectionKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<java.util.AbstractCollection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.util.Set<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>(kafkaSpoutMessageIdCollectionKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1776");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout<org.apache.kafka.common.record.TimestampType, org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>>.KafkaSpoutConsumerRebalanceListener, org.apache.kafka.clients.consumer.ConsumerRebalanceListener>.Timer timer1 = kafkaSpout0.new Timer();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$Timer with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1777");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.util.Optional<java.lang.Integer> intOptional10 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        int int11 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        int int12 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedKeySize();
        org.apache.kafka.common.header.Headers headers13 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        java.util.Optional<java.lang.Integer> intOptional14 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(headers13);
        org.junit.Assert.assertNotNull(intOptional14);
    }

    @Test
    public void test1778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1778");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.lang.String, java.lang.Cloneable> strKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.lang.String, java.lang.Cloneable> strKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.String, java.lang.Cloneable>(strKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1779");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>.KafkaSpoutConsumerRebalanceListener kafkaSpoutConsumerRebalanceListener1 = kafkaSpout0.new KafkaSpoutConsumerRebalanceListener();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$KafkaSpoutConsumerRebalanceListener with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1780");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.util.RandomAccess, java.util.AbstractCollection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> randomAccessKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.util.RandomAccess, java.util.AbstractCollection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> randomAccessKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<java.util.RandomAccess, java.util.AbstractCollection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>(randomAccessKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1781");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (-1), (long) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator6 = offsetComparator3.reversed();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator7 = kafkaSpoutMessageIdComparator6.reversed();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator8 = kafkaSpoutMessageIdComparator7.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator16 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord18 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator16, "");
        org.apache.kafka.common.record.TimestampType timestampType19 = kafkaSpoutMessageIdComparatorConsumerRecord18.timestampType();
        int int20 = kafkaSpoutMessageIdComparatorConsumerRecord18.serializedValueSize();
        java.lang.String str21 = kafkaSpoutMessageIdComparatorConsumerRecord18.value();
        java.lang.String str22 = kafkaSpoutMessageIdComparatorConsumerRecord18.value();
        org.apache.kafka.common.record.TimestampType timestampType23 = kafkaSpoutMessageIdComparatorConsumerRecord18.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator30 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (-1), (long) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator30, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator33 = offsetComparator30.reversed();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator34 = offsetComparator30.reversed();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=null}", (int) (short) -1, (long) 0, (long) (-1), timestampType23, (long) 100, (int) (byte) 10, (int) '#', kafkaSpoutMessageIdComparator34, "KafkaSpout{acked=null, emitted=null}");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator37 = kafkaSpoutMessageIdComparator8.thenComparing(kafkaSpoutMessageIdComparator34);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator34;
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator6);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator7);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator8);
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + timestampType23 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType23.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator33);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator34);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator37);
    }

    @Test
    public void test1782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1782");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator6 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (-1), (long) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator6, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator9 = offsetComparator6.reversed();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord11 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=[]}", (int) '#', (long) '4', kafkaSpoutMessageIdComparator9, "KafkaSpout{acked=null, emitted=[]}");
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator9);
    }

    @Test
    public void test1783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1783");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>();
        org.apache.kafka.clients.consumer.KafkaConsumer<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaConsumer1 = genericDeclarationKafkaSpout0.kafkaConsumer;
        org.apache.storm.kafka.spout.KafkaSpoutStreams kafkaSpoutStreams2 = genericDeclarationKafkaSpout0.kafkaSpoutStreams;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>> genericDeclarationConsumerRecordItor3 = genericDeclarationKafkaSpout0.waitingToEmit;
        boolean boolean4 = genericDeclarationKafkaSpout0.waitingToEmit();
        boolean boolean5 = genericDeclarationKafkaSpout0.initialized;
        genericDeclarationKafkaSpout0.initialized = false;
        boolean boolean8 = genericDeclarationKafkaSpout0.waitingToEmit();
        org.junit.Assert.assertNull(genericDeclarationKafkaConsumer1);
        org.junit.Assert.assertNull(kafkaSpoutStreams2);
        org.junit.Assert.assertNull(genericDeclarationConsumerRecordItor3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1784");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, java.lang.Object>.KafkaSpoutConsumerRebalanceListener kafkaSpoutConsumerRebalanceListener1 = kafkaSpout0.new KafkaSpoutConsumerRebalanceListener();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$KafkaSpoutConsumerRebalanceListener with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1785");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>, java.lang.reflect.Type> kafkaSpoutMessageIdComparatorConsumerRecordKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>, java.lang.reflect.Type> kafkaSpoutMessageIdComparatorConsumerRecordKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>, java.lang.reflect.Type>(kafkaSpoutMessageIdComparatorConsumerRecordKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1786");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator7 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator7, "");
        java.lang.String str10 = kafkaSpoutMessageIdComparatorConsumerRecord9.topic();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator11 = kafkaSpoutMessageIdComparatorConsumerRecord9.key();
        java.lang.String str12 = kafkaSpoutMessageIdComparatorConsumerRecord9.topic();
        java.lang.String str13 = kafkaSpoutMessageIdComparatorConsumerRecord9.toString();
        long long14 = kafkaSpoutMessageIdComparatorConsumerRecord9.offset();
        org.apache.kafka.common.header.Headers headers15 = kafkaSpoutMessageIdComparatorConsumerRecord9.headers();
        org.apache.kafka.common.record.TimestampType timestampType16 = kafkaSpoutMessageIdComparatorConsumerRecord9.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator23 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator23, "");
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator23;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator39 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator39, "");
        org.apache.kafka.common.record.TimestampType timestampType42 = kafkaSpoutMessageIdComparatorConsumerRecord41.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator53 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator53, "");
        org.apache.kafka.common.record.TimestampType timestampType56 = kafkaSpoutMessageIdComparatorConsumerRecord55.timestampType();
        java.lang.Object obj60 = new java.lang.Object();
        java.lang.Class<?> wildcardClass61 = obj60.getClass();
        java.lang.Object obj62 = new java.lang.Object();
        java.lang.Class<?> wildcardClass63 = obj62.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType56, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass61, (java.lang.reflect.GenericDeclaration) wildcardClass63);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator72 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator72, "");
        org.apache.kafka.common.record.TimestampType timestampType75 = kafkaSpoutMessageIdComparatorConsumerRecord74.timestampType();
        java.lang.Object obj79 = new java.lang.Object();
        java.lang.Class<?> wildcardClass80 = obj79.getClass();
        java.lang.Object obj81 = new java.lang.Object();
        java.lang.Class<?> wildcardClass82 = obj81.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord83 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType75, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass80, (java.lang.reflect.GenericDeclaration) wildcardClass82);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord84 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("hi!", (int) (byte) 0, (long) (byte) 10, 10L, timestampType42, (long) (short) 10, (int) (short) 0, (int) (byte) 0, (java.lang.reflect.Type) wildcardClass61, timestampType75);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator88 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord90 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=null}", (int) (short) 0, (long) (byte) 1, (long) (short) 100, timestampType75, 0L, (int) (byte) 10, (int) (short) 100, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator88, "hi!");
        int int91 = kafkaSpoutMessageIdComparatorConsumerRecord90.serializedKeySize();
        long long92 = kafkaSpoutMessageIdComparatorConsumerRecord90.checksum();
        long long93 = kafkaSpoutMessageIdComparatorConsumerRecord90.checksum();
        org.apache.kafka.common.header.Headers headers94 = kafkaSpoutMessageIdComparatorConsumerRecord90.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord95 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("hi!", (int) (byte) -1, (long) 35, (long) (byte) 10, timestampType16, (java.lang.Long) 100L, 52, (int) (short) -1, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator23, "hi!", headers94);
        java.lang.Class<?> wildcardClass96 = timestampType16.getClass();
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType42 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType42.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType56 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType56.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertTrue("'" + timestampType75 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType75.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass80);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 10 + "'", int91 == 10);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 0L + "'", long92 == 0L);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
        org.junit.Assert.assertNotNull(headers94);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test1787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1787");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        long long6 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.partition();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        long long9 = kafkaSpoutMessageIdComparatorConsumerRecord5.offset();
        org.apache.kafka.common.header.Headers headers10 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        org.apache.kafka.common.header.Headers headers11 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        java.lang.String str12 = kafkaSpoutMessageIdComparatorConsumerRecord5.toString();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertNotNull(headers11);
    }

    @Test
    public void test1788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1788");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator10 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator10, "");
        java.lang.String str13 = kafkaSpoutMessageIdComparatorConsumerRecord12.topic();
        java.util.Optional<java.lang.Integer> intOptional14 = kafkaSpoutMessageIdComparatorConsumerRecord12.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType15 = kafkaSpoutMessageIdComparatorConsumerRecord12.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator19 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator24 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator24, "");
        org.apache.kafka.common.record.TimestampType timestampType27 = kafkaSpoutMessageIdComparatorConsumerRecord26.timestampType();
        long long28 = kafkaSpoutMessageIdComparatorConsumerRecord26.timestamp();
        long long29 = kafkaSpoutMessageIdComparatorConsumerRecord26.offset();
        java.lang.String str30 = kafkaSpoutMessageIdComparatorConsumerRecord26.topic();
        org.apache.kafka.common.header.Headers headers31 = kafkaSpoutMessageIdComparatorConsumerRecord26.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=null}", (int) '#', 0L, (long) ' ', timestampType15, (java.lang.Long) 1L, (int) (byte) 1, 10, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator19, "hi!", headers31);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("ConsumerRecord(topic = KafkaSpout{acked=null, emitted=[]}, partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = 1, serialized key size = 97, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = KafkaSpout{acked=null, emitted=[]})", (int) 'a', 0L, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator19, "KafkaSpout{acked=null, emitted=null}");
        long long35 = kafkaSpoutMessageIdComparatorConsumerRecord34.timestamp();
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(intOptional14);
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType27 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType27.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(headers31);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
    }

    @Test
    public void test1789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1789");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        java.lang.String str6 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        org.apache.kafka.common.header.Headers headers7 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        org.apache.kafka.common.header.Headers headers8 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord5.toString();
        int int10 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedKeySize();
        long long11 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        org.apache.kafka.common.header.Headers headers12 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        long long13 = kafkaSpoutMessageIdComparatorConsumerRecord5.offset();
        java.lang.String str14 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator15 = kafkaSpoutMessageIdComparatorConsumerRecord5.key();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(headers7);
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(headers12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator15);
    }

    @Test
    public void test1790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1790");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.lang.Object, org.apache.storm.topology.base.BaseComponent> objKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.lang.Object, org.apache.storm.topology.base.BaseComponent> objKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.Object, org.apache.storm.topology.base.BaseComponent>(objKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1791");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.Class<?>, java.util.List<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> wildcardClassKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.Class<?>, java.util.List<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>();
    }

    @Test
    public void test1792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1792");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>();
        org.apache.kafka.clients.consumer.KafkaConsumer<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaConsumer1 = genericDeclarationKafkaSpout0.kafkaConsumer;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>> genericDeclarationConsumerRecordItor2 = genericDeclarationKafkaSpout0.waitingToEmit;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>> genericDeclarationConsumerRecordItor3 = genericDeclarationKafkaSpout0.waitingToEmit;
        org.apache.kafka.clients.consumer.KafkaConsumer<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaConsumer4 = null;
        genericDeclarationKafkaSpout0.kafkaConsumer = genericDeclarationKafkaConsumer4;
        boolean boolean6 = genericDeclarationKafkaSpout0.waitingToEmit();
        genericDeclarationKafkaSpout0.numUncommittedOffsets = (short) 100;
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpoutConfig9 = null;
        genericDeclarationKafkaSpout0.kafkaSpoutConfig = genericDeclarationKafkaSpoutConfig9;
        genericDeclarationKafkaSpout0.consumerAutoCommitMode = true;
        org.junit.Assert.assertNull(genericDeclarationKafkaConsumer1);
        org.junit.Assert.assertNull(genericDeclarationConsumerRecordItor2);
        org.junit.Assert.assertNull(genericDeclarationConsumerRecordItor3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1793");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>();
        org.apache.kafka.clients.consumer.KafkaConsumer<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaConsumer1 = genericDeclarationKafkaSpout0.kafkaConsumer;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>> genericDeclarationConsumerRecordItor2 = genericDeclarationKafkaSpout0.waitingToEmit;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>> genericDeclarationConsumerRecordItor3 = genericDeclarationKafkaSpout0.waitingToEmit;
        java.util.Set<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet4 = genericDeclarationKafkaSpout0.emitted;
        genericDeclarationKafkaSpout0.initialized = true;
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService7 = genericDeclarationKafkaSpout0.retryService;
        boolean boolean8 = genericDeclarationKafkaSpout0.waitingToEmit();
        org.junit.Assert.assertNull(genericDeclarationKafkaConsumer1);
        org.junit.Assert.assertNull(genericDeclarationConsumerRecordItor2);
        org.junit.Assert.assertNull(genericDeclarationConsumerRecordItor3);
        org.junit.Assert.assertNull(kafkaSpoutMessageIdSet4);
        org.junit.Assert.assertNull(kafkaSpoutRetryService7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1794");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        int int6 = kafkaSpoutMessageIdComparatorConsumerRecord5.partition();
        long long7 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        long long8 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        java.util.Optional<java.lang.Integer> intOptional9 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        long long10 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        java.lang.String str11 = kafkaSpoutMessageIdComparatorConsumerRecord5.toString();
        org.apache.kafka.common.header.Headers headers12 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        long long13 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertNotNull(intOptional9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(headers12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
    }

    @Test
    public void test1795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1795");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator15 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator15, "");
        org.apache.kafka.common.record.TimestampType timestampType18 = kafkaSpoutMessageIdComparatorConsumerRecord17.timestampType();
        int int19 = kafkaSpoutMessageIdComparatorConsumerRecord17.serializedValueSize();
        java.lang.String str20 = kafkaSpoutMessageIdComparatorConsumerRecord17.value();
        long long21 = kafkaSpoutMessageIdComparatorConsumerRecord17.checksum();
        org.apache.kafka.common.record.TimestampType timestampType22 = kafkaSpoutMessageIdComparatorConsumerRecord17.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator29 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator29, "");
        org.apache.kafka.common.record.TimestampType timestampType32 = kafkaSpoutMessageIdComparatorConsumerRecord31.timestampType();
        int int33 = kafkaSpoutMessageIdComparatorConsumerRecord31.serializedValueSize();
        java.lang.String str34 = kafkaSpoutMessageIdComparatorConsumerRecord31.value();
        java.lang.String str35 = kafkaSpoutMessageIdComparatorConsumerRecord31.value();
        int int36 = kafkaSpoutMessageIdComparatorConsumerRecord31.partition();
        java.lang.String str37 = kafkaSpoutMessageIdComparatorConsumerRecord31.value();
        java.util.Optional<java.lang.Integer> intOptional38 = kafkaSpoutMessageIdComparatorConsumerRecord31.leaderEpoch();
        java.lang.Class<?> wildcardClass39 = intOptional38.getClass();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator43 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator43, "");
        org.apache.kafka.common.record.TimestampType timestampType46 = kafkaSpoutMessageIdComparatorConsumerRecord45.timestampType();
        long long47 = kafkaSpoutMessageIdComparatorConsumerRecord45.timestamp();
        long long48 = kafkaSpoutMessageIdComparatorConsumerRecord45.offset();
        java.lang.String str49 = kafkaSpoutMessageIdComparatorConsumerRecord45.value();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator53 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator53, "");
        java.lang.String str56 = kafkaSpoutMessageIdComparatorConsumerRecord55.topic();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator57 = kafkaSpoutMessageIdComparatorConsumerRecord55.key();
        org.apache.kafka.common.header.Headers headers58 = kafkaSpoutMessageIdComparatorConsumerRecord55.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.Object> typeConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.Object>("KafkaSpout{acked=null, emitted=null}", (int) (byte) 0, (long) '4', (long) (short) 1, timestampType22, (java.lang.Long) 10L, (int) (short) 10, (int) ' ', (java.lang.reflect.Type) wildcardClass39, (java.lang.Object) kafkaSpoutMessageIdComparatorConsumerRecord45, headers58);
        java.lang.String str60 = kafkaSpoutMessageIdComparatorConsumerRecord45.toString();
        org.apache.kafka.common.record.TimestampType timestampType61 = kafkaSpoutMessageIdComparatorConsumerRecord45.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator68 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord70 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (-1), (long) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator68, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator71 = offsetComparator68.reversed();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator72 = kafkaSpoutMessageIdComparator71.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator71;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord75 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=[]}", (int) (short) -1, (long) (byte) 1, (long) (-1), timestampType61, (long) (byte) 10, 100, (int) (short) 10, kafkaSpoutMessageIdComparator71, "");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator82 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord84 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (-1), (long) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator82, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator85 = offsetComparator82.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator89 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord91 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator89, "");
        java.lang.String str92 = kafkaSpoutMessageIdComparatorConsumerRecord91.topic();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator93 = kafkaSpoutMessageIdComparatorConsumerRecord91.key();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator94 = kafkaSpoutMessageIdComparator85.thenComparing(kafkaSpoutMessageIdComparator93);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator93;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord97 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (short) 100, (-1L), 32L, timestampType61, (long) (byte) 10, (int) 'a', 52, kafkaSpoutMessageIdComparator93, "KafkaSpout{acked=null, emitted=null}");
        java.util.Optional<java.lang.Integer> intOptional98 = kafkaSpoutMessageIdComparatorConsumerRecord97.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional99 = kafkaSpoutMessageIdComparatorConsumerRecord97.leaderEpoch();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType32 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType32.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(intOptional38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertTrue("'" + timestampType46 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType46.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-1L) + "'", long47 == (-1L));
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator57);
        org.junit.Assert.assertNotNull(headers58);
        org.junit.Assert.assertTrue("'" + timestampType61 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType61.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator71);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator72);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator85);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator93);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator94);
        org.junit.Assert.assertNotNull(intOptional98);
        org.junit.Assert.assertNotNull(intOptional99);
    }

    @Test
    public void test1796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1796");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>();
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService1 = null;
        genericDeclarationKafkaSpout0.retryService = kafkaSpoutRetryService1;
        long long3 = genericDeclarationKafkaSpout0.numUncommittedOffsets;
        org.apache.storm.spout.SpoutOutputCollector spoutOutputCollector4 = genericDeclarationKafkaSpout0.collector;
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService5 = null;
        genericDeclarationKafkaSpout0.retryService = kafkaSpoutRetryService5;
        genericDeclarationKafkaSpout0.maxRetries = ' ';
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNull(spoutOutputCollector4);
    }

    @Test
    public void test1797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1797");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.kafka.common.header.Headers, org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>> headersKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.kafka.common.header.Headers, org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>>();
    }

    @Test
    public void test1798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1798");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        org.apache.kafka.common.record.TimestampType timestampType10 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int11 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedKeySize();
        long long12 = kafkaSpoutMessageIdComparatorConsumerRecord5.offset();
        long long13 = kafkaSpoutMessageIdComparatorConsumerRecord5.offset();
        long long14 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        org.apache.kafka.common.header.Headers headers15 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        java.lang.String str16 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        java.util.Optional<java.lang.Integer> intOptional17 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        org.apache.kafka.common.header.Headers headers18 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        java.lang.String str19 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(intOptional17);
        org.junit.Assert.assertNotNull(headers18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test1799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1799");
        org.apache.storm.kafka.spout.KafkaSpout<java.util.AbstractList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.kafka.spout.KafkaSpout<org.apache.kafka.common.record.TimestampType, org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>>.KafkaSpoutConsumerRebalanceListener> kafkaSpoutMessageIdListKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.util.AbstractList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.kafka.spout.KafkaSpout<org.apache.kafka.common.record.TimestampType, org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>>.KafkaSpoutConsumerRebalanceListener>();
    }

    @Test
    public void test1800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1800");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>();
        org.apache.kafka.clients.consumer.KafkaConsumer<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaConsumer1 = genericDeclarationKafkaSpout0.kafkaConsumer;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>> genericDeclarationConsumerRecordItor2 = genericDeclarationKafkaSpout0.waitingToEmit;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>> genericDeclarationConsumerRecordItor3 = genericDeclarationKafkaSpout0.waitingToEmit;
        org.apache.kafka.clients.consumer.KafkaConsumer<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaConsumer4 = null;
        genericDeclarationKafkaSpout0.kafkaConsumer = genericDeclarationKafkaConsumer4;
        java.util.Set<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = genericDeclarationKafkaSpout0.emitted;
        long long7 = genericDeclarationKafkaSpout0.numUncommittedOffsets;
        org.junit.Assert.assertNull(genericDeclarationKafkaConsumer1);
        org.junit.Assert.assertNull(genericDeclarationConsumerRecordItor2);
        org.junit.Assert.assertNull(genericDeclarationConsumerRecordItor3);
        org.junit.Assert.assertNull(kafkaSpoutMessageIdSet6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    public void test1801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1801");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        int int6 = kafkaSpoutMessageIdComparatorConsumerRecord5.partition();
        long long7 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        int int8 = kafkaSpoutMessageIdComparatorConsumerRecord5.partition();
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        org.apache.kafka.common.record.TimestampType timestampType10 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        long long11 = kafkaSpoutMessageIdComparatorConsumerRecord5.offset();
        java.util.Optional<java.lang.Integer> intOptional12 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(intOptional12);
    }

    @Test
    public void test1802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1802");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator6 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator6, "");
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord8.topic();
        org.apache.kafka.common.header.Headers headers10 = kafkaSpoutMessageIdComparatorConsumerRecord8.headers();
        org.apache.kafka.common.header.Headers headers11 = kafkaSpoutMessageIdComparatorConsumerRecord8.headers();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator12 = kafkaSpoutMessageIdComparatorConsumerRecord8.key();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator12;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord15 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("hi!", 0, (long) 10, kafkaSpoutMessageIdComparator12, "hi!");
        java.util.Optional<java.lang.Integer> intOptional16 = kafkaSpoutMessageIdComparatorConsumerRecord15.leaderEpoch();
        int int17 = kafkaSpoutMessageIdComparatorConsumerRecord15.serializedKeySize();
        int int18 = kafkaSpoutMessageIdComparatorConsumerRecord15.partition();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator19 = kafkaSpoutMessageIdComparatorConsumerRecord15.key();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator20 = kafkaSpoutMessageIdComparator19.reversed();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertNotNull(headers11);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator12);
        org.junit.Assert.assertNotNull(intOptional16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator19);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator20);
    }

    @Test
    public void test1803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1803");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        int int10 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator11 = kafkaSpoutMessageIdComparatorConsumerRecord5.key();
        java.lang.String str12 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str13 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        java.lang.String str14 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.util.Optional<java.lang.Integer> intOptional15 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(intOptional15);
    }

    @Test
    public void test1804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1804");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator15 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator15, "");
        org.apache.kafka.common.record.TimestampType timestampType18 = kafkaSpoutMessageIdComparatorConsumerRecord17.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator29 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator29, "");
        org.apache.kafka.common.record.TimestampType timestampType32 = kafkaSpoutMessageIdComparatorConsumerRecord31.timestampType();
        java.lang.Object obj36 = new java.lang.Object();
        java.lang.Class<?> wildcardClass37 = obj36.getClass();
        java.lang.Object obj38 = new java.lang.Object();
        java.lang.Class<?> wildcardClass39 = obj38.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType32, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass37, (java.lang.reflect.GenericDeclaration) wildcardClass39);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator48 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator48, "");
        org.apache.kafka.common.record.TimestampType timestampType51 = kafkaSpoutMessageIdComparatorConsumerRecord50.timestampType();
        java.lang.Object obj55 = new java.lang.Object();
        java.lang.Class<?> wildcardClass56 = obj55.getClass();
        java.lang.Object obj57 = new java.lang.Object();
        java.lang.Class<?> wildcardClass58 = obj57.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType51, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass56, (java.lang.reflect.GenericDeclaration) wildcardClass58);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("hi!", (int) (byte) 0, (long) (byte) 10, 10L, timestampType18, (long) (short) 10, (int) (short) 0, (int) (byte) 0, (java.lang.reflect.Type) wildcardClass37, timestampType51);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator67 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord69 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (-1), (long) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator67, "");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator74 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator74, "");
        java.lang.String str77 = kafkaSpoutMessageIdComparatorConsumerRecord76.topic();
        org.apache.kafka.common.header.Headers headers78 = kafkaSpoutMessageIdComparatorConsumerRecord76.headers();
        org.apache.kafka.common.header.Headers headers79 = kafkaSpoutMessageIdComparatorConsumerRecord76.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=null}", 100, (long) (byte) -1, (long) (byte) 1, timestampType18, (java.lang.Long) 100L, 0, (int) (byte) 10, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator67, "KafkaSpout{acked=null, emitted=null}", headers79);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator90 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator90, "");
        java.lang.String str93 = kafkaSpoutMessageIdComparatorConsumerRecord92.topic();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator94 = kafkaSpoutMessageIdComparatorConsumerRecord92.key();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord96 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("hi!", (int) '4', 100L, kafkaSpoutMessageIdComparator94, "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord98 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("hi!", (int) (short) 0, (long) ' ', (-1L), timestampType18, (long) (byte) -1, (int) (short) 1, (int) '4', kafkaSpoutMessageIdComparator94, "KafkaSpout{acked=null, emitted=null}");
        java.lang.String str99 = kafkaSpoutMessageIdComparatorConsumerRecord98.topic();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType32 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType32.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertTrue("'" + timestampType51 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType51.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(headers78);
        org.junit.Assert.assertNotNull(headers79);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator94);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "hi!" + "'", str99, "hi!");
    }

    @Test
    public void test1805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1805");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>();
        int int1 = genericDeclarationKafkaSpout0.maxRetries;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>> genericDeclarationConsumerRecordItor2 = genericDeclarationKafkaSpout0.waitingToEmit;
        org.apache.kafka.clients.consumer.KafkaConsumer<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaConsumer3 = genericDeclarationKafkaSpout0.kafkaConsumer;
        genericDeclarationKafkaSpout0.maxRetries = 97;
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(genericDeclarationConsumerRecordItor2);
        org.junit.Assert.assertNull(genericDeclarationKafkaConsumer3);
    }

    @Test
    public void test1806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1806");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>();
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService1 = null;
        genericDeclarationKafkaSpout0.retryService = kafkaSpoutRetryService1;
        org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy firstPollOffsetStrategy3 = genericDeclarationKafkaSpout0.firstPollOffsetStrategy;
        java.lang.String str4 = genericDeclarationKafkaSpout0.toString();
        org.apache.storm.kafka.spout.KafkaSpoutStreams kafkaSpoutStreams5 = genericDeclarationKafkaSpout0.kafkaSpoutStreams;
        genericDeclarationKafkaSpout0.numUncommittedOffsets = (short) 100;
        boolean boolean8 = genericDeclarationKafkaSpout0.waitingToEmit();
        org.junit.Assert.assertNull(firstPollOffsetStrategy3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "KafkaSpout{acked=null, emitted=null}" + "'", str4, "KafkaSpout{acked=null, emitted=null}");
        org.junit.Assert.assertNull(kafkaSpoutStreams5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1807");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator11 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator11, "");
        org.apache.kafka.common.record.TimestampType timestampType14 = kafkaSpoutMessageIdComparatorConsumerRecord13.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator21 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator21, "");
        org.apache.kafka.common.record.TimestampType timestampType24 = kafkaSpoutMessageIdComparatorConsumerRecord23.timestampType();
        int int25 = kafkaSpoutMessageIdComparatorConsumerRecord23.serializedValueSize();
        java.lang.String str26 = kafkaSpoutMessageIdComparatorConsumerRecord23.value();
        int int27 = kafkaSpoutMessageIdComparatorConsumerRecord23.partition();
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpout28 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>();
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService29 = null;
        genericDeclarationKafkaSpout28.retryService = kafkaSpoutRetryService29;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray31 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet32 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet32, kafkaSpoutMessageIdArray31);
        genericDeclarationKafkaSpout28.emitted = kafkaSpoutMessageIdSet32;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> objConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>("", (int) (byte) -1, 1L, 0L, timestampType14, (long) (short) -1, (int) 'a', (int) (short) 0, (java.lang.Object) int27, (java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet32);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator42 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator42, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator45 = offsetComparator42.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator42;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=[]}", (-1), (long) ' ', (long) '#', timestampType14, 10L, 0, 32, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator42, "KafkaSpout{acked=null, emitted=null}");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator49 = kafkaSpoutMessageIdComparatorConsumerRecord48.key();
        int int50 = kafkaSpoutMessageIdComparatorConsumerRecord48.serializedKeySize();
        org.apache.kafka.common.header.Headers headers51 = kafkaSpoutMessageIdComparatorConsumerRecord48.headers();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType24 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType24.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator45);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(headers51);
    }

    @Test
    public void test1808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1808");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        java.lang.String str6 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        org.apache.kafka.common.header.Headers headers7 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.toString();
        long long9 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        long long10 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator11 = kafkaSpoutMessageIdComparatorConsumerRecord5.key();
        int int12 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedKeySize();
        java.lang.Class<?> wildcardClass13 = kafkaSpoutMessageIdComparatorConsumerRecord5.getClass();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(headers7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1809");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        int int10 = kafkaSpoutMessageIdComparatorConsumerRecord5.partition();
        java.lang.String str11 = kafkaSpoutMessageIdComparatorConsumerRecord5.toString();
        int int12 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test1810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1810");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str10 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str11 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str12 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        org.apache.kafka.common.record.TimestampType timestampType13 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        java.lang.String str14 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        org.apache.kafka.common.record.TimestampType timestampType15 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test1811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1811");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator11 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator11, "");
        org.apache.kafka.common.record.TimestampType timestampType14 = kafkaSpoutMessageIdComparatorConsumerRecord13.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator25 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator25, "");
        org.apache.kafka.common.record.TimestampType timestampType28 = kafkaSpoutMessageIdComparatorConsumerRecord27.timestampType();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        java.lang.Object obj34 = new java.lang.Object();
        java.lang.Class<?> wildcardClass35 = obj34.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType28, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass33, (java.lang.reflect.GenericDeclaration) wildcardClass35);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator44 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator44, "");
        org.apache.kafka.common.record.TimestampType timestampType47 = kafkaSpoutMessageIdComparatorConsumerRecord46.timestampType();
        java.lang.Object obj51 = new java.lang.Object();
        java.lang.Class<?> wildcardClass52 = obj51.getClass();
        java.lang.Object obj53 = new java.lang.Object();
        java.lang.Class<?> wildcardClass54 = obj53.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType47, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass52, (java.lang.reflect.GenericDeclaration) wildcardClass54);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("hi!", (int) (byte) 0, (long) (byte) 10, 10L, timestampType14, (long) (short) 10, (int) (short) 0, (int) (byte) 0, (java.lang.reflect.Type) wildcardClass33, timestampType47);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator60 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=null}", (int) (short) 0, (long) (byte) 1, (long) (short) 100, timestampType47, 0L, (int) (byte) 10, (int) (short) 100, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator60, "hi!");
        java.lang.String str63 = kafkaSpoutMessageIdComparatorConsumerRecord62.toString();
        int int64 = kafkaSpoutMessageIdComparatorConsumerRecord62.partition();
        int int65 = kafkaSpoutMessageIdComparatorConsumerRecord62.serializedKeySize();
        long long66 = kafkaSpoutMessageIdComparatorConsumerRecord62.timestamp();
        java.lang.String str67 = kafkaSpoutMessageIdComparatorConsumerRecord62.value();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10 + "'", int65 == 10);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 100L + "'", long66 == 100L);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "hi!" + "'", str67, "hi!");
    }

    @Test
    public void test1812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1812");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator11 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator11, "");
        org.apache.kafka.common.record.TimestampType timestampType14 = kafkaSpoutMessageIdComparatorConsumerRecord13.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator25 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator25, "");
        org.apache.kafka.common.record.TimestampType timestampType28 = kafkaSpoutMessageIdComparatorConsumerRecord27.timestampType();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        java.lang.Object obj34 = new java.lang.Object();
        java.lang.Class<?> wildcardClass35 = obj34.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType28, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass33, (java.lang.reflect.GenericDeclaration) wildcardClass35);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator44 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator44, "");
        org.apache.kafka.common.record.TimestampType timestampType47 = kafkaSpoutMessageIdComparatorConsumerRecord46.timestampType();
        java.lang.Object obj51 = new java.lang.Object();
        java.lang.Class<?> wildcardClass52 = obj51.getClass();
        java.lang.Object obj53 = new java.lang.Object();
        java.lang.Class<?> wildcardClass54 = obj53.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType47, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass52, (java.lang.reflect.GenericDeclaration) wildcardClass54);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("hi!", (int) (byte) 0, (long) (byte) 10, 10L, timestampType14, (long) (short) 10, (int) (short) 0, (int) (byte) 0, (java.lang.reflect.Type) wildcardClass33, timestampType47);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator60 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=null}", (int) (short) 0, (long) (byte) 1, (long) (short) 100, timestampType47, 0L, (int) (byte) 10, (int) (short) 100, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator60, "hi!");
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator60;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator64 = offsetComparator60.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator60;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator66 = offsetComparator60.reversed();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator67 = offsetComparator60.reversed();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator68 = offsetComparator60.reversed();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator64);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator66);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator67);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator68);
    }

    @Test
    public void test1813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1813");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator11 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator11, "");
        org.apache.kafka.common.record.TimestampType timestampType14 = kafkaSpoutMessageIdComparatorConsumerRecord13.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator25 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator25, "");
        org.apache.kafka.common.record.TimestampType timestampType28 = kafkaSpoutMessageIdComparatorConsumerRecord27.timestampType();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        java.lang.Object obj34 = new java.lang.Object();
        java.lang.Class<?> wildcardClass35 = obj34.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType28, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass33, (java.lang.reflect.GenericDeclaration) wildcardClass35);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator44 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator44, "");
        org.apache.kafka.common.record.TimestampType timestampType47 = kafkaSpoutMessageIdComparatorConsumerRecord46.timestampType();
        java.lang.Object obj51 = new java.lang.Object();
        java.lang.Class<?> wildcardClass52 = obj51.getClass();
        java.lang.Object obj53 = new java.lang.Object();
        java.lang.Class<?> wildcardClass54 = obj53.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType47, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass52, (java.lang.reflect.GenericDeclaration) wildcardClass54);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("hi!", (int) (byte) 0, (long) (byte) 10, 10L, timestampType14, (long) (short) 10, (int) (short) 0, (int) (byte) 0, (java.lang.reflect.Type) wildcardClass33, timestampType47);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator60 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=null}", (int) (short) 0, (long) (byte) 1, (long) (short) 100, timestampType47, 0L, (int) (byte) 10, (int) (short) 100, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator60, "hi!");
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator60;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator64 = offsetComparator60.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator60;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator66 = offsetComparator60.reversed();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator67 = offsetComparator60.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator67;
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator64);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator66);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator67);
    }

    @Test
    public void test1814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1814");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.kafka.clients.consumer.ConsumerRebalanceListener, org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator> consumerRebalanceListenerKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.kafka.clients.consumer.ConsumerRebalanceListener, org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator>();
    }

    @Test
    public void test1815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1815");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator6 = offsetComparator3.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator6;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator8 = kafkaSpoutMessageIdComparator6.reversed();
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator6);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator8);
    }

    @Test
    public void test1816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1816");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        int int9 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional10 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        int int11 = kafkaSpoutMessageIdComparatorConsumerRecord5.partition();
        int int12 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        int int13 = kafkaSpoutMessageIdComparatorConsumerRecord5.partition();
        int int14 = kafkaSpoutMessageIdComparatorConsumerRecord5.partition();
        long long15 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        long long16 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
    }

    @Test
    public void test1817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1817");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>();
        genericDeclarationKafkaSpout0.maxRetries = (byte) -1;
        org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy firstPollOffsetStrategy3 = genericDeclarationKafkaSpout0.firstPollOffsetStrategy;
        org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy firstPollOffsetStrategy4 = null;
        genericDeclarationKafkaSpout0.firstPollOffsetStrategy = firstPollOffsetStrategy4;
        genericDeclarationKafkaSpout0.initialized = true;
        org.junit.Assert.assertNull(firstPollOffsetStrategy3);
    }

    @Test
    public void test1818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1818");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.topology.IRichSpout, org.apache.storm.topology.base.BaseRichSpout> iRichSpoutKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IRichSpout, org.apache.storm.topology.base.BaseRichSpout> iRichSpoutKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IRichSpout, org.apache.storm.topology.base.BaseRichSpout>(iRichSpoutKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1819");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (-1), (long) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator6 = offsetComparator3.reversed();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator7 = kafkaSpoutMessageIdComparator6.reversed();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator8 = kafkaSpoutMessageIdComparator7.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator16 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord18 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator16, "");
        org.apache.kafka.common.record.TimestampType timestampType19 = kafkaSpoutMessageIdComparatorConsumerRecord18.timestampType();
        int int20 = kafkaSpoutMessageIdComparatorConsumerRecord18.serializedValueSize();
        java.lang.String str21 = kafkaSpoutMessageIdComparatorConsumerRecord18.value();
        java.lang.String str22 = kafkaSpoutMessageIdComparatorConsumerRecord18.value();
        org.apache.kafka.common.record.TimestampType timestampType23 = kafkaSpoutMessageIdComparatorConsumerRecord18.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator30 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (-1), (long) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator30, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator33 = offsetComparator30.reversed();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator34 = offsetComparator30.reversed();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=null}", (int) (short) -1, (long) 0, (long) (-1), timestampType23, (long) 100, (int) (byte) 10, (int) '#', kafkaSpoutMessageIdComparator34, "KafkaSpout{acked=null, emitted=null}");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator37 = kafkaSpoutMessageIdComparator8.thenComparing(kafkaSpoutMessageIdComparator34);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator8;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator45 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator45, "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (short) 100, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator45, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator50 = offsetComparator45.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator54 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator54, "");
        java.lang.String str57 = kafkaSpoutMessageIdComparatorConsumerRecord56.topic();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator58 = kafkaSpoutMessageIdComparatorConsumerRecord56.key();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator59 = kafkaSpoutMessageIdComparator58.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator63 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord65 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator63, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator66 = offsetComparator63.reversed();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator67 = kafkaSpoutMessageIdComparator59.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator63);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator71 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord73 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator71, "");
        java.lang.String str74 = kafkaSpoutMessageIdComparatorConsumerRecord73.topic();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator75 = kafkaSpoutMessageIdComparatorConsumerRecord73.key();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator76 = kafkaSpoutMessageIdComparator59.thenComparing(kafkaSpoutMessageIdComparator75);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator77 = kafkaSpoutMessageIdComparator50.thenComparing(kafkaSpoutMessageIdComparator59);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator78 = kafkaSpoutMessageIdComparator77.reversed();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator79 = kafkaSpoutMessageIdComparator78.reversed();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator80 = kafkaSpoutMessageIdComparator8.thenComparing(kafkaSpoutMessageIdComparator79);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator81 = kafkaSpoutMessageIdComparator8.reversed();
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator6);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator7);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator8);
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + timestampType23 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType23.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator33);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator34);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator37);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator50);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator58);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator59);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator66);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator67);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator75);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator76);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator77);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator78);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator79);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator80);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator81);
    }

    @Test
    public void test1820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1820");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        int int9 = kafkaSpoutMessageIdComparatorConsumerRecord5.partition();
        int int10 = kafkaSpoutMessageIdComparatorConsumerRecord5.partition();
        long long11 = kafkaSpoutMessageIdComparatorConsumerRecord5.offset();
        java.util.Optional<java.lang.Integer> intOptional12 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator13 = kafkaSpoutMessageIdComparatorConsumerRecord5.key();
        org.apache.kafka.common.header.Headers headers14 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        int int15 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedKeySize();
        java.lang.String str16 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        org.apache.kafka.common.header.Headers headers17 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        long long18 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(intOptional12);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator13);
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(headers17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
    }

    @Test
    public void test1821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1821");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>();
        org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy firstPollOffsetStrategy1 = null;
        genericDeclarationKafkaSpout0.firstPollOffsetStrategy = firstPollOffsetStrategy1;
        java.util.Set<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet3 = null;
        genericDeclarationKafkaSpout0.emitted = kafkaSpoutMessageIdSet3;
        java.util.Set<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet5 = genericDeclarationKafkaSpout0.emitted;
        org.apache.kafka.clients.consumer.KafkaConsumer<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaConsumer6 = genericDeclarationKafkaSpout0.kafkaConsumer;
        org.junit.Assert.assertNull(kafkaSpoutMessageIdSet5);
        org.junit.Assert.assertNull(genericDeclarationKafkaConsumer6);
    }

    @Test
    public void test1822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1822");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.lang.reflect.Type, java.lang.Comparable<java.lang.String>> typeKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.Type, java.lang.Comparable<java.lang.String>> typeKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.Type, java.lang.Comparable<java.lang.String>>(typeKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1823");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>();
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService1 = null;
        genericDeclarationKafkaSpout0.retryService = kafkaSpoutRetryService1;
        org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy firstPollOffsetStrategy3 = genericDeclarationKafkaSpout0.firstPollOffsetStrategy;
        java.lang.String str4 = genericDeclarationKafkaSpout0.toString();
        org.apache.storm.kafka.spout.KafkaSpoutStreams kafkaSpoutStreams5 = genericDeclarationKafkaSpout0.kafkaSpoutStreams;
        genericDeclarationKafkaSpout0.numUncommittedOffsets = (short) 100;
        int int8 = genericDeclarationKafkaSpout0.maxRetries;
        org.junit.Assert.assertNull(firstPollOffsetStrategy3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "KafkaSpout{acked=null, emitted=null}" + "'", str4, "KafkaSpout{acked=null, emitted=null}");
        org.junit.Assert.assertNull(kafkaSpoutStreams5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test1824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1824");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> iComponentKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>();
    }

    @Test
    public void test1825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1825");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator7 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator7, "");
        org.apache.kafka.common.record.TimestampType timestampType10 = kafkaSpoutMessageIdComparatorConsumerRecord9.timestampType();
        int int11 = kafkaSpoutMessageIdComparatorConsumerRecord9.serializedValueSize();
        java.lang.String str12 = kafkaSpoutMessageIdComparatorConsumerRecord9.value();
        java.lang.String str13 = kafkaSpoutMessageIdComparatorConsumerRecord9.value();
        java.lang.String str14 = kafkaSpoutMessageIdComparatorConsumerRecord9.value();
        java.util.Optional<java.lang.Integer> intOptional15 = kafkaSpoutMessageIdComparatorConsumerRecord9.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType16 = kafkaSpoutMessageIdComparatorConsumerRecord9.timestampType();
        long long17 = kafkaSpoutMessageIdComparatorConsumerRecord9.timestamp();
        int int18 = kafkaSpoutMessageIdComparatorConsumerRecord9.serializedValueSize();
        int int19 = kafkaSpoutMessageIdComparatorConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType20 = kafkaSpoutMessageIdComparatorConsumerRecord9.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator30 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (-1), (long) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator30, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator33 = offsetComparator30.reversed();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("hi!", 0, (long) 1, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator30, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator36 = org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator37 = kafkaSpoutMessageIdComparator36.reversed();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator38 = offsetComparator30.thenComparing(kafkaSpoutMessageIdComparator36);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator39 = kafkaSpoutMessageIdComparator36.reversed();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("ConsumerRecord(topic = KafkaSpout{acked=null, emitted=null}, partition = -1, leaderEpoch = null, offset = 97, NoTimestampType = 32, serialized key size = 100, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = )", (int) '4', 0L, 0L, timestampType20, (long) (byte) 1, (int) (short) 1, (int) (byte) 100, kafkaSpoutMessageIdComparator36, "");
        int int42 = kafkaSpoutMessageIdComparatorConsumerRecord41.serializedKeySize();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator33);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator36);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator37);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator38);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator39);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
    }

    @Test
    public void test1826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1826");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>();
        genericDeclarationKafkaSpout0.maxRetries = (byte) -1;
        boolean boolean3 = genericDeclarationKafkaSpout0.waitingToEmit();
        org.apache.storm.spout.SpoutOutputCollector spoutOutputCollector4 = null;
        genericDeclarationKafkaSpout0.collector = spoutOutputCollector4;
        org.apache.storm.spout.SpoutOutputCollector spoutOutputCollector6 = genericDeclarationKafkaSpout0.collector;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = genericDeclarationKafkaSpout0.getNamedTopics();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(spoutOutputCollector6);
    }

    @Test
    public void test1827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1827");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator11 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator11, "");
        org.apache.kafka.common.record.TimestampType timestampType14 = kafkaSpoutMessageIdComparatorConsumerRecord13.timestampType();
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Object obj20 = new java.lang.Object();
        java.lang.Class<?> wildcardClass21 = obj20.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord22 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType14, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass19, (java.lang.reflect.GenericDeclaration) wildcardClass21);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator29 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator29, "");
        org.apache.kafka.common.record.TimestampType timestampType32 = kafkaSpoutMessageIdComparatorConsumerRecord31.timestampType();
        int int33 = kafkaSpoutMessageIdComparatorConsumerRecord31.serializedValueSize();
        java.lang.String str34 = kafkaSpoutMessageIdComparatorConsumerRecord31.value();
        java.lang.String str35 = kafkaSpoutMessageIdComparatorConsumerRecord31.value();
        org.apache.kafka.common.record.TimestampType timestampType36 = kafkaSpoutMessageIdComparatorConsumerRecord31.timestampType();
        int int37 = kafkaSpoutMessageIdComparatorConsumerRecord31.serializedKeySize();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator38 = kafkaSpoutMessageIdComparatorConsumerRecord31.key();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator45 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator45, "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (short) 100, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator45, "");
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator45;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator51 = kafkaSpoutMessageIdComparator38.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator45);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator52 = kafkaSpoutMessageIdComparator51.reversed();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", 52, (long) (short) 10, 1L, timestampType14, (long) 'a', 52, (int) '#', kafkaSpoutMessageIdComparator52, "KafkaSpout{acked=null, emitted=null}");
        java.lang.String str55 = kafkaSpoutMessageIdComparatorConsumerRecord54.value();
        long long56 = kafkaSpoutMessageIdComparatorConsumerRecord54.timestamp();
        long long57 = kafkaSpoutMessageIdComparatorConsumerRecord54.offset();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + timestampType32 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType32.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + timestampType36 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType36.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator38);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator51);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator52);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "KafkaSpout{acked=null, emitted=null}" + "'", str55, "KafkaSpout{acked=null, emitted=null}");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1L + "'", long56 == 1L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 10L + "'", long57 == 10L);
    }

    @Test
    public void test1828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1828");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator7 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator7, "");
        org.apache.kafka.common.record.TimestampType timestampType10 = kafkaSpoutMessageIdComparatorConsumerRecord9.timestampType();
        int int11 = kafkaSpoutMessageIdComparatorConsumerRecord9.serializedValueSize();
        java.lang.String str12 = kafkaSpoutMessageIdComparatorConsumerRecord9.value();
        java.lang.String str13 = kafkaSpoutMessageIdComparatorConsumerRecord9.value();
        org.apache.kafka.common.record.TimestampType timestampType14 = kafkaSpoutMessageIdComparatorConsumerRecord9.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator21 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (-1), (long) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator21, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator24 = offsetComparator21.reversed();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator25 = offsetComparator21.reversed();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=null}", (int) (short) -1, (long) 0, (long) (-1), timestampType14, (long) 100, (int) (byte) 10, (int) '#', kafkaSpoutMessageIdComparator25, "KafkaSpout{acked=null, emitted=null}");
        org.apache.kafka.common.header.Headers headers28 = kafkaSpoutMessageIdComparatorConsumerRecord27.headers();
        long long29 = kafkaSpoutMessageIdComparatorConsumerRecord27.checksum();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator24);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator25);
        org.junit.Assert.assertNotNull(headers28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 100L + "'", long29 == 100L);
    }

    @Test
    public void test1829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1829");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator6 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator6, "");
        org.apache.kafka.common.record.TimestampType timestampType9 = kafkaSpoutMessageIdComparatorConsumerRecord8.timestampType();
        int int10 = kafkaSpoutMessageIdComparatorConsumerRecord8.serializedValueSize();
        java.lang.String str11 = kafkaSpoutMessageIdComparatorConsumerRecord8.value();
        java.lang.String str12 = kafkaSpoutMessageIdComparatorConsumerRecord8.value();
        org.apache.kafka.common.record.TimestampType timestampType13 = kafkaSpoutMessageIdComparatorConsumerRecord8.timestampType();
        int int14 = kafkaSpoutMessageIdComparatorConsumerRecord8.serializedKeySize();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator15 = kafkaSpoutMessageIdComparatorConsumerRecord8.key();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator22 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator22, "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (short) 100, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator22, "");
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator22;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator28 = kafkaSpoutMessageIdComparator15.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator22);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator29 = kafkaSpoutMessageIdComparator28.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator29;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator31 = kafkaSpoutMessageIdComparator29.reversed();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator32 = kafkaSpoutMessageIdComparator31.reversed();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("hi!", 1, (long) (short) -1, kafkaSpoutMessageIdComparator32, "");
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator15);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator28);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator29);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator31);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator32);
    }

    @Test
    public void test1830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1830");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator17 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator17, "");
        org.apache.kafka.common.record.TimestampType timestampType20 = kafkaSpoutMessageIdComparatorConsumerRecord19.timestampType();
        java.lang.Object obj24 = new java.lang.Object();
        java.lang.Class<?> wildcardClass25 = obj24.getClass();
        java.lang.Object obj26 = new java.lang.Object();
        java.lang.Class<?> wildcardClass27 = obj26.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType20, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass25, (java.lang.reflect.GenericDeclaration) wildcardClass27);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator35 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator35, "");
        org.apache.kafka.common.record.TimestampType timestampType38 = kafkaSpoutMessageIdComparatorConsumerRecord37.timestampType();
        int int39 = kafkaSpoutMessageIdComparatorConsumerRecord37.serializedValueSize();
        java.lang.String str40 = kafkaSpoutMessageIdComparatorConsumerRecord37.value();
        java.lang.String str41 = kafkaSpoutMessageIdComparatorConsumerRecord37.value();
        org.apache.kafka.common.record.TimestampType timestampType42 = kafkaSpoutMessageIdComparatorConsumerRecord37.timestampType();
        int int43 = kafkaSpoutMessageIdComparatorConsumerRecord37.serializedKeySize();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator44 = kafkaSpoutMessageIdComparatorConsumerRecord37.key();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator51 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator51, "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (short) 100, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator51, "");
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator51;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator57 = kafkaSpoutMessageIdComparator44.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator51);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator58 = kafkaSpoutMessageIdComparator57.reversed();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", 52, (long) (short) 10, 1L, timestampType20, (long) 'a', 52, (int) '#', kafkaSpoutMessageIdComparator58, "KafkaSpout{acked=null, emitted=null}");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("hi!", (int) '4', (long) (byte) 1, kafkaSpoutMessageIdComparator58, "");
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator58;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord65 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=null}", (int) 'a', (long) '4', kafkaSpoutMessageIdComparator58, "");
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + timestampType38 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType38.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertTrue("'" + timestampType42 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType42.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator44);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator57);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator58);
    }

    @Test
    public void test1831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1831");
        org.apache.storm.kafka.spout.KafkaSpout<java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> kafkaSpoutMessageIdCollectionKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>();
    }

    @Test
    public void test1832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1832");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator9 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord11 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (-1), (long) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator9, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator12 = offsetComparator9.reversed();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord14 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("hi!", 0, (long) 1, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator9, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator15 = org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator16 = kafkaSpoutMessageIdComparator15.reversed();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator17 = offsetComparator9.thenComparing(kafkaSpoutMessageIdComparator15);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("hi!", 10, (long) (byte) 1, kafkaSpoutMessageIdComparator15, "KafkaSpout{acked=null, emitted=null}");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator20 = kafkaSpoutMessageIdComparator15.reversed();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator21 = kafkaSpoutMessageIdComparator15.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator15;
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator15;
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator12);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator15);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator16);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator17);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator20);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator21);
    }

    @Test
    public void test1833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1833");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.lang.String, java.util.ArrayList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> strKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.lang.String, java.util.ArrayList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> strKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.String, java.util.ArrayList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>(strKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1834");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        long long7 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord5.toString();
        long long10 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator11 = kafkaSpoutMessageIdComparatorConsumerRecord5.key();
        java.lang.String str12 = kafkaSpoutMessageIdComparatorConsumerRecord5.toString();
        int int13 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedKeySize();
        long long14 = kafkaSpoutMessageIdComparatorConsumerRecord5.offset();
        java.lang.Class<?> wildcardClass15 = kafkaSpoutMessageIdComparatorConsumerRecord5.getClass();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1835");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        org.apache.kafka.common.record.TimestampType timestampType10 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int11 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedKeySize();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator12 = kafkaSpoutMessageIdComparatorConsumerRecord5.key();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator13 = kafkaSpoutMessageIdComparatorConsumerRecord5.key();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator14 = kafkaSpoutMessageIdComparatorConsumerRecord5.key();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator21 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (-1), (long) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator21, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator24 = offsetComparator21.reversed();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("hi!", 0, (long) 1, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator21, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator27 = kafkaSpoutMessageIdComparator14.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator21);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator31 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator31, "");
        int int34 = kafkaSpoutMessageIdComparatorConsumerRecord33.partition();
        java.util.Optional<java.lang.Integer> intOptional35 = kafkaSpoutMessageIdComparatorConsumerRecord33.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional36 = kafkaSpoutMessageIdComparatorConsumerRecord33.leaderEpoch();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator37 = kafkaSpoutMessageIdComparatorConsumerRecord33.key();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator38 = offsetComparator21.thenComparing(kafkaSpoutMessageIdComparator37);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator39 = offsetComparator21.reversed();
        java.lang.Class<?> wildcardClass40 = offsetComparator21.getClass();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator12);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator13);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator14);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator24);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator27);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertNotNull(intOptional35);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator37);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator38);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator39);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test1836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1836");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        long long7 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        long long8 = kafkaSpoutMessageIdComparatorConsumerRecord5.offset();
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        org.apache.kafka.common.header.Headers headers10 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        org.apache.kafka.common.record.TimestampType timestampType11 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int12 = kafkaSpoutMessageIdComparatorConsumerRecord5.partition();
        int int13 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedKeySize();
        long long14 = kafkaSpoutMessageIdComparatorConsumerRecord5.offset();
        org.apache.kafka.common.header.Headers headers15 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        long long16 = kafkaSpoutMessageIdComparatorConsumerRecord5.offset();
        org.apache.kafka.common.record.TimestampType timestampType17 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test1837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1837");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.lang.String, java.io.Serializable> strKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.lang.String, java.io.Serializable> strKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.String, java.io.Serializable>(strKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1838");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>();
        genericDeclarationKafkaSpout0.maxRetries = (byte) -1;
        org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy firstPollOffsetStrategy3 = genericDeclarationKafkaSpout0.firstPollOffsetStrategy;
        org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy firstPollOffsetStrategy4 = null;
        genericDeclarationKafkaSpout0.firstPollOffsetStrategy = firstPollOffsetStrategy4;
        org.apache.storm.kafka.spout.KafkaSpoutStreams kafkaSpoutStreams6 = null;
        genericDeclarationKafkaSpout0.kafkaSpoutStreams = kafkaSpoutStreams6;
        org.apache.storm.kafka.spout.KafkaSpoutStreams kafkaSpoutStreams8 = genericDeclarationKafkaSpout0.kafkaSpoutStreams;
        org.apache.storm.kafka.spout.KafkaSpoutStreams kafkaSpoutStreams9 = genericDeclarationKafkaSpout0.kafkaSpoutStreams;
        org.apache.kafka.common.TopicPartition topicPartition10 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection11 = genericDeclarationKafkaSpout0.toArrayList(topicPartition10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean12 = genericDeclarationKafkaSpout0.commit();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(firstPollOffsetStrategy3);
        org.junit.Assert.assertNull(kafkaSpoutStreams8);
        org.junit.Assert.assertNull(kafkaSpoutStreams9);
        org.junit.Assert.assertNotNull(topicPartitionCollection11);
    }

    @Test
    public void test1839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1839");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator9 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord11 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator9, "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (short) 100, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator9, "");
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator9;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator15 = offsetComparator9.reversed();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=null}", (int) (byte) 0, (long) (byte) 1, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator9, "KafkaSpout{acked=null, emitted=[]}");
        long long18 = kafkaSpoutMessageIdComparatorConsumerRecord17.timestamp();
        int int19 = kafkaSpoutMessageIdComparatorConsumerRecord17.serializedKeySize();
        long long20 = kafkaSpoutMessageIdComparatorConsumerRecord17.timestamp();
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
    }

    @Test
    public void test1840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1840");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator15 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator15, "");
        org.apache.kafka.common.record.TimestampType timestampType18 = kafkaSpoutMessageIdComparatorConsumerRecord17.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator25 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator25, "");
        org.apache.kafka.common.record.TimestampType timestampType28 = kafkaSpoutMessageIdComparatorConsumerRecord27.timestampType();
        int int29 = kafkaSpoutMessageIdComparatorConsumerRecord27.serializedValueSize();
        java.lang.String str30 = kafkaSpoutMessageIdComparatorConsumerRecord27.value();
        int int31 = kafkaSpoutMessageIdComparatorConsumerRecord27.partition();
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpout32 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>();
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService33 = null;
        genericDeclarationKafkaSpout32.retryService = kafkaSpoutRetryService33;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray35 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet36 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet36, kafkaSpoutMessageIdArray35);
        genericDeclarationKafkaSpout32.emitted = kafkaSpoutMessageIdSet36;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> objConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>("", (int) (byte) -1, 1L, 0L, timestampType18, (long) (short) -1, (int) 'a', (int) (short) 0, (java.lang.Object) int31, (java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet36);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator46 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator46, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator49 = offsetComparator46.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator46;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord52 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=[]}", (-1), (long) ' ', (long) '#', timestampType18, 10L, 0, 32, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator46, "KafkaSpout{acked=null, emitted=null}");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator62 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (-1), (long) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator62, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator65 = offsetComparator62.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator69 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator69, "");
        java.lang.String str72 = kafkaSpoutMessageIdComparatorConsumerRecord71.topic();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator73 = kafkaSpoutMessageIdComparatorConsumerRecord71.key();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator74 = kafkaSpoutMessageIdComparator65.thenComparing(kafkaSpoutMessageIdComparator73);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("hi!", (int) ' ', (long) 'a', kafkaSpoutMessageIdComparator74, "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord78 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (short) -1, (long) 'a', 1L, timestampType18, (long) (-1), (int) (byte) 0, 0, kafkaSpoutMessageIdComparator74, "KafkaSpout{acked=null, emitted=[]}");
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator74;
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator49);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator65);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator73);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator74);
    }

    @Test
    public void test1841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1841");
        org.apache.storm.kafka.spout.KafkaSpout<java.util.List<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.topology.IComponent> kafkaSpoutMessageIdListKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.util.List<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.topology.IComponent>();
    }

    @Test
    public void test1842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1842");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        long long7 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.util.Optional<java.lang.Integer> intOptional9 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator10 = kafkaSpoutMessageIdComparatorConsumerRecord5.key();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator11 = kafkaSpoutMessageIdComparator10.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator18 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator18, "");
        java.lang.String str21 = kafkaSpoutMessageIdComparatorConsumerRecord20.topic();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator22 = kafkaSpoutMessageIdComparatorConsumerRecord20.key();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("hi!", (int) '4', 100L, kafkaSpoutMessageIdComparator22, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator25 = kafkaSpoutMessageIdComparator11.thenComparing(kafkaSpoutMessageIdComparator22);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator26 = kafkaSpoutMessageIdComparator22.reversed();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator27 = kafkaSpoutMessageIdComparator22.reversed();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(intOptional9);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator10);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator11);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator22);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator25);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator26);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator27);
    }

    @Test
    public void test1843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1843");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator7 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator7, "");
        int int10 = kafkaSpoutMessageIdComparatorConsumerRecord9.partition();
        long long11 = kafkaSpoutMessageIdComparatorConsumerRecord9.checksum();
        int int12 = kafkaSpoutMessageIdComparatorConsumerRecord9.partition();
        java.lang.String str13 = kafkaSpoutMessageIdComparatorConsumerRecord9.topic();
        org.apache.kafka.common.record.TimestampType timestampType14 = kafkaSpoutMessageIdComparatorConsumerRecord9.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator21 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator21, "");
        org.apache.kafka.common.record.TimestampType timestampType24 = kafkaSpoutMessageIdComparatorConsumerRecord23.timestampType();
        long long25 = kafkaSpoutMessageIdComparatorConsumerRecord23.timestamp();
        long long26 = kafkaSpoutMessageIdComparatorConsumerRecord23.offset();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator27 = kafkaSpoutMessageIdComparatorConsumerRecord23.key();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator28 = kafkaSpoutMessageIdComparator27.reversed();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", 35, 97L, (long) (short) -1, timestampType14, 35L, (int) (byte) 100, (int) (short) 10, kafkaSpoutMessageIdComparator28, "KafkaSpout{acked=null, emitted=[]}");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType24 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType24.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator27);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator28);
    }

    @Test
    public void test1844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1844");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator6 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator6, "");
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord8.topic();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator10 = kafkaSpoutMessageIdComparatorConsumerRecord8.key();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator11 = kafkaSpoutMessageIdComparator10.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator15 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator15, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator18 = offsetComparator15.reversed();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator19 = kafkaSpoutMessageIdComparator11.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator15);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator20 = kafkaSpoutMessageIdComparator19.reversed();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord22 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=null}", 100, (long) (short) -1, kafkaSpoutMessageIdComparator20, "");
        int int23 = kafkaSpoutMessageIdComparatorConsumerRecord22.serializedValueSize();
        org.apache.kafka.common.header.Headers headers24 = kafkaSpoutMessageIdComparatorConsumerRecord22.headers();
        int int25 = kafkaSpoutMessageIdComparatorConsumerRecord22.partition();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator10);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator11);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator18);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator19);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(headers24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
    }

    @Test
    public void test1845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1845");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator10 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator10, "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord14 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (short) 100, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator10, "");
        int int15 = kafkaSpoutMessageIdComparatorConsumerRecord14.serializedValueSize();
        int int16 = kafkaSpoutMessageIdComparatorConsumerRecord14.serializedKeySize();
        long long17 = kafkaSpoutMessageIdComparatorConsumerRecord14.timestamp();
        java.util.Optional<java.lang.Integer> intOptional18 = kafkaSpoutMessageIdComparatorConsumerRecord14.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType19 = kafkaSpoutMessageIdComparatorConsumerRecord14.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator29 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator29, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator32 = offsetComparator29.reversed();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", 0, 0L, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator29, "hi!");
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator29;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=[]}", (int) '4', (long) 97, (long) 10, timestampType19, 1L, (int) (short) -1, 10, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator29, "KafkaSpout{acked=null, emitted=[]}");
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId38 = null;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId39 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int40 = offsetComparator29.compare(kafkaSpoutMessageId38, kafkaSpoutMessageId39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNotNull(intOptional18);
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator32);
    }

    @Test
    public void test1846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1846");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        long long6 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        java.lang.String str7 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        org.apache.kafka.common.header.Headers headers8 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        int int9 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        int int10 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test1847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1847");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator22 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator22, "");
        org.apache.kafka.common.record.TimestampType timestampType25 = kafkaSpoutMessageIdComparatorConsumerRecord24.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator36 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator36, "");
        org.apache.kafka.common.record.TimestampType timestampType39 = kafkaSpoutMessageIdComparatorConsumerRecord38.timestampType();
        java.lang.Object obj43 = new java.lang.Object();
        java.lang.Class<?> wildcardClass44 = obj43.getClass();
        java.lang.Object obj45 = new java.lang.Object();
        java.lang.Class<?> wildcardClass46 = obj45.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType39, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass44, (java.lang.reflect.GenericDeclaration) wildcardClass46);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator55 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator55, "");
        org.apache.kafka.common.record.TimestampType timestampType58 = kafkaSpoutMessageIdComparatorConsumerRecord57.timestampType();
        java.lang.Object obj62 = new java.lang.Object();
        java.lang.Class<?> wildcardClass63 = obj62.getClass();
        java.lang.Object obj64 = new java.lang.Object();
        java.lang.Class<?> wildcardClass65 = obj64.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType58, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass63, (java.lang.reflect.GenericDeclaration) wildcardClass65);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("hi!", (int) (byte) 0, (long) (byte) 10, 10L, timestampType25, (long) (short) 10, (int) (short) 0, (int) (byte) 0, (java.lang.reflect.Type) wildcardClass44, timestampType58);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator74 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator74, "");
        int int77 = kafkaSpoutMessageIdComparatorConsumerRecord76.partition();
        java.util.Optional<java.lang.Integer> intOptional78 = kafkaSpoutMessageIdComparatorConsumerRecord76.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional79 = kafkaSpoutMessageIdComparatorConsumerRecord76.leaderEpoch();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator80 = kafkaSpoutMessageIdComparatorConsumerRecord76.key();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord82 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 1, (long) 1, (long) (byte) -1, timestampType58, 32L, 0, (int) (short) 10, kafkaSpoutMessageIdComparator80, "KafkaSpout{acked=null, emitted=null}");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord84 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=[]}", (int) (short) 10, (long) '#', (long) (short) 100, timestampType7, (long) (byte) -1, 52, 100, kafkaSpoutMessageIdComparator80, "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("ConsumerRecord(topic = KafkaSpout{acked=null, emitted=null}, partition = -1, leaderEpoch = null, offset = 97, NoTimestampType = 32, serialized key size = 100, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = )", 35, (long) (-1), kafkaSpoutMessageIdComparator80, "ConsumerRecord(topic = KafkaSpout{acked=null, emitted=null}, partition = -1, leaderEpoch = null, offset = 97, NoTimestampType = 32, serialized key size = 100, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = )");
        org.junit.Assert.assertTrue("'" + timestampType25 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType25.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType39 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType39.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertTrue("'" + timestampType58 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType58.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 10 + "'", int77 == 10);
        org.junit.Assert.assertNotNull(intOptional78);
        org.junit.Assert.assertNotNull(intOptional79);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator80);
    }

    @Test
    public void test1848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1848");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        long long7 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord5.toString();
        long long10 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        int int11 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedKeySize();
        long long12 = kafkaSpoutMessageIdComparatorConsumerRecord5.offset();
        long long13 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        long long14 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        java.util.Optional<java.lang.Integer> intOptional15 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        org.apache.kafka.common.header.Headers headers16 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        long long17 = kafkaSpoutMessageIdComparatorConsumerRecord5.offset();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertNotNull(headers16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test1849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1849");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.util.Set<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> kafkaSpoutMessageIdSetKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.util.Set<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> kafkaSpoutMessageIdSetKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<java.util.Set<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>(kafkaSpoutMessageIdSetKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1850");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator14 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator14, "");
        org.apache.kafka.common.record.TimestampType timestampType17 = kafkaSpoutMessageIdComparatorConsumerRecord16.timestampType();
        java.lang.Object obj21 = new java.lang.Object();
        java.lang.Class<?> wildcardClass22 = obj21.getClass();
        java.lang.Object obj23 = new java.lang.Object();
        java.lang.Class<?> wildcardClass24 = obj23.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType17, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass22, (java.lang.reflect.GenericDeclaration) wildcardClass24);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator32 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator32, "");
        org.apache.kafka.common.record.TimestampType timestampType35 = kafkaSpoutMessageIdComparatorConsumerRecord34.timestampType();
        int int36 = kafkaSpoutMessageIdComparatorConsumerRecord34.serializedValueSize();
        java.lang.String str37 = kafkaSpoutMessageIdComparatorConsumerRecord34.value();
        java.lang.String str38 = kafkaSpoutMessageIdComparatorConsumerRecord34.value();
        org.apache.kafka.common.record.TimestampType timestampType39 = kafkaSpoutMessageIdComparatorConsumerRecord34.timestampType();
        int int40 = kafkaSpoutMessageIdComparatorConsumerRecord34.serializedKeySize();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator41 = kafkaSpoutMessageIdComparatorConsumerRecord34.key();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator48 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator48, "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord52 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (short) 100, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator48, "");
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator48;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator54 = kafkaSpoutMessageIdComparator41.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator48);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator55 = kafkaSpoutMessageIdComparator54.reversed();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", 52, (long) (short) 10, 1L, timestampType17, (long) 'a', 52, (int) '#', kafkaSpoutMessageIdComparator55, "KafkaSpout{acked=null, emitted=null}");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("hi!", (int) '4', (long) (byte) 1, kafkaSpoutMessageIdComparator55, "");
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator55;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator61 = kafkaSpoutMessageIdComparator55.reversed();
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + timestampType35 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType35.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + timestampType39 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType39.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator41);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator54);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator55);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator61);
    }

    @Test
    public void test1851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1851");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        int int6 = kafkaSpoutMessageIdComparatorConsumerRecord5.partition();
        long long7 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        long long8 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        java.util.Optional<java.lang.Integer> intOptional9 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        int int10 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional11 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        java.lang.String str12 = kafkaSpoutMessageIdComparatorConsumerRecord5.toString();
        long long13 = kafkaSpoutMessageIdComparatorConsumerRecord5.offset();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertNotNull(intOptional9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(intOptional11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test1852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1852");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        java.lang.String str6 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        org.apache.kafka.common.header.Headers headers7 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.toString();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator9 = kafkaSpoutMessageIdComparatorConsumerRecord5.key();
        java.lang.String str10 = kafkaSpoutMessageIdComparatorConsumerRecord5.toString();
        long long11 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        long long12 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        int int13 = kafkaSpoutMessageIdComparatorConsumerRecord5.partition();
        long long14 = kafkaSpoutMessageIdComparatorConsumerRecord5.offset();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(headers7);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test1853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1853");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        org.apache.kafka.common.record.TimestampType timestampType10 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int11 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedKeySize();
        long long12 = kafkaSpoutMessageIdComparatorConsumerRecord5.offset();
        long long13 = kafkaSpoutMessageIdComparatorConsumerRecord5.offset();
        org.apache.kafka.common.record.TimestampType timestampType14 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int15 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        long long16 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
    }

    @Test
    public void test1854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1854");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator9 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord11 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator9, "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (short) 100, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator9, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator14 = offsetComparator9.reversed();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("ConsumerRecord(topic = KafkaSpout{acked=null, emitted=null}, partition = -1, leaderEpoch = null, offset = 97, NoTimestampType = 32, serialized key size = 100, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = )", (int) (short) -1, (long) (byte) 100, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator9, "KafkaSpout{acked=null, emitted=null}");
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator14);
    }

    @Test
    public void test1855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1855");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        org.apache.kafka.common.record.TimestampType timestampType10 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int11 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedKeySize();
        long long12 = kafkaSpoutMessageIdComparatorConsumerRecord5.offset();
        long long13 = kafkaSpoutMessageIdComparatorConsumerRecord5.offset();
        org.apache.kafka.common.record.TimestampType timestampType14 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        java.util.Optional<java.lang.Integer> intOptional15 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional15);
    }

    @Test
    public void test1856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1856");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>();
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService1 = null;
        genericDeclarationKafkaSpout0.retryService = kafkaSpoutRetryService1;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray3 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet4 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet4, kafkaSpoutMessageIdArray3);
        genericDeclarationKafkaSpout0.emitted = kafkaSpoutMessageIdSet4;
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>.Timer timer7 = genericDeclarationKafkaSpout0.commitTimer;
        org.apache.storm.kafka.spout.KafkaSpoutStreams kafkaSpoutStreams8 = genericDeclarationKafkaSpout0.kafkaSpoutStreams;
        // The following exception was thrown during execution in test generation
        try {
            genericDeclarationKafkaSpout0.commitOffsetsForAckedTuples();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(timer7);
        org.junit.Assert.assertNull(kafkaSpoutStreams8);
    }

    @Test
    public void test1857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1857");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>();
        org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy firstPollOffsetStrategy1 = null;
        genericDeclarationKafkaSpout0.firstPollOffsetStrategy = firstPollOffsetStrategy1;
        java.util.Set<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet3 = null;
        genericDeclarationKafkaSpout0.emitted = kafkaSpoutMessageIdSet3;
        boolean boolean5 = genericDeclarationKafkaSpout0.waitingToEmit();
        boolean boolean6 = genericDeclarationKafkaSpout0.initialized;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = genericDeclarationKafkaSpout0.getWildCardTopics();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1858");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>();
        org.apache.kafka.clients.consumer.KafkaConsumer<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaConsumer1 = genericDeclarationKafkaSpout0.kafkaConsumer;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>> genericDeclarationConsumerRecordItor2 = genericDeclarationKafkaSpout0.waitingToEmit;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>> genericDeclarationConsumerRecordItor3 = genericDeclarationKafkaSpout0.waitingToEmit;
        java.util.Set<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet4 = genericDeclarationKafkaSpout0.emitted;
        genericDeclarationKafkaSpout0.initialized = true;
        org.apache.storm.kafka.spout.KafkaSpoutStreams kafkaSpoutStreams7 = null;
        genericDeclarationKafkaSpout0.kafkaSpoutStreams = kafkaSpoutStreams7;
        org.apache.storm.kafka.spout.KafkaSpoutStreams kafkaSpoutStreams9 = null;
        genericDeclarationKafkaSpout0.kafkaSpoutStreams = kafkaSpoutStreams9;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>> genericDeclarationConsumerRecordItor11 = genericDeclarationKafkaSpout0.waitingToEmit;
        genericDeclarationKafkaSpout0.consumerAutoCommitMode = true;
        org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy firstPollOffsetStrategy14 = genericDeclarationKafkaSpout0.firstPollOffsetStrategy;
        org.junit.Assert.assertNull(genericDeclarationKafkaConsumer1);
        org.junit.Assert.assertNull(genericDeclarationConsumerRecordItor2);
        org.junit.Assert.assertNull(genericDeclarationConsumerRecordItor3);
        org.junit.Assert.assertNull(kafkaSpoutMessageIdSet4);
        org.junit.Assert.assertNull(genericDeclarationConsumerRecordItor11);
        org.junit.Assert.assertNull(firstPollOffsetStrategy14);
    }

    @Test
    public void test1859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1859");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        java.util.concurrent.TimeUnit timeUnit3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.lang.Object, org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>>.Timer timer4 = kafkaSpout0.new Timer((long) (short) 100, (long) (short) 1, timeUnit3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$Timer with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1860");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator6 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (-1), (long) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator6, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator9 = offsetComparator6.reversed();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord11 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("hi!", 0, (long) 1, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator6, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator12 = offsetComparator6.reversed();
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId13 = null;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId14 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int15 = offsetComparator6.compare(kafkaSpoutMessageId13, kafkaSpoutMessageId14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator9);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator12);
    }

    @Test
    public void test1861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1861");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator11 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator11, "");
        org.apache.kafka.common.record.TimestampType timestampType14 = kafkaSpoutMessageIdComparatorConsumerRecord13.timestampType();
        int int15 = kafkaSpoutMessageIdComparatorConsumerRecord13.serializedValueSize();
        java.lang.String str16 = kafkaSpoutMessageIdComparatorConsumerRecord13.value();
        int int17 = kafkaSpoutMessageIdComparatorConsumerRecord13.serializedValueSize();
        java.lang.String str18 = kafkaSpoutMessageIdComparatorConsumerRecord13.topic();
        int int19 = kafkaSpoutMessageIdComparatorConsumerRecord13.serializedKeySize();
        long long20 = kafkaSpoutMessageIdComparatorConsumerRecord13.checksum();
        org.apache.kafka.common.record.TimestampType timestampType21 = kafkaSpoutMessageIdComparatorConsumerRecord13.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator28 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator28, "");
        org.apache.kafka.common.record.TimestampType timestampType31 = kafkaSpoutMessageIdComparatorConsumerRecord30.timestampType();
        int int32 = kafkaSpoutMessageIdComparatorConsumerRecord30.serializedValueSize();
        java.lang.String str33 = kafkaSpoutMessageIdComparatorConsumerRecord30.value();
        int int34 = kafkaSpoutMessageIdComparatorConsumerRecord30.partition();
        long long35 = kafkaSpoutMessageIdComparatorConsumerRecord30.timestamp();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator36 = kafkaSpoutMessageIdComparatorConsumerRecord30.key();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator41 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator41, "");
        int int44 = kafkaSpoutMessageIdComparatorConsumerRecord43.partition();
        long long45 = kafkaSpoutMessageIdComparatorConsumerRecord43.checksum();
        long long46 = kafkaSpoutMessageIdComparatorConsumerRecord43.timestamp();
        java.util.Optional<java.lang.Integer> intOptional47 = kafkaSpoutMessageIdComparatorConsumerRecord43.leaderEpoch();
        int int48 = kafkaSpoutMessageIdComparatorConsumerRecord43.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional49 = kafkaSpoutMessageIdComparatorConsumerRecord43.leaderEpoch();
        org.apache.kafka.common.header.Headers headers50 = kafkaSpoutMessageIdComparatorConsumerRecord43.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) '4', (long) 1, 0L, timestampType21, (java.lang.Long) (-1L), (-1), (int) (byte) 0, kafkaSpoutMessageIdComparator36, "hi!", headers50);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator61 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator61, "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord65 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (short) 100, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator61, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator66 = offsetComparator61.reversed();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator67 = offsetComparator61.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator67;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator69 = kafkaSpoutMessageIdComparator67.reversed();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=null}", (int) (short) 0, (long) 10, 35L, timestampType21, (long) (byte) -1, 10, 32, kafkaSpoutMessageIdComparator67, "hi!");
        java.lang.String str72 = kafkaSpoutMessageIdComparatorConsumerRecord71.toString();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator36);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-1L) + "'", long45 == (-1L));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1L) + "'", long46 == (-1L));
        org.junit.Assert.assertNotNull(intOptional47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(intOptional49);
        org.junit.Assert.assertNotNull(headers50);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator66);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator67);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator69);
    }

    @Test
    public void test1862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1862");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator10 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator10, "");
        java.lang.String str13 = kafkaSpoutMessageIdComparatorConsumerRecord12.topic();
        java.util.Optional<java.lang.Integer> intOptional14 = kafkaSpoutMessageIdComparatorConsumerRecord12.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType15 = kafkaSpoutMessageIdComparatorConsumerRecord12.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator19 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator24 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator24, "");
        org.apache.kafka.common.record.TimestampType timestampType27 = kafkaSpoutMessageIdComparatorConsumerRecord26.timestampType();
        long long28 = kafkaSpoutMessageIdComparatorConsumerRecord26.timestamp();
        long long29 = kafkaSpoutMessageIdComparatorConsumerRecord26.offset();
        java.lang.String str30 = kafkaSpoutMessageIdComparatorConsumerRecord26.topic();
        org.apache.kafka.common.header.Headers headers31 = kafkaSpoutMessageIdComparatorConsumerRecord26.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=null}", (int) '#', 0L, (long) ' ', timestampType15, (java.lang.Long) 1L, (int) (byte) 1, 10, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator19, "hi!", headers31);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("ConsumerRecord(topic = KafkaSpout{acked=null, emitted=[]}, partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = 1, serialized key size = 97, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = KafkaSpout{acked=null, emitted=[]})", (int) 'a', 0L, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator19, "KafkaSpout{acked=null, emitted=null}");
        int int35 = kafkaSpoutMessageIdComparatorConsumerRecord34.partition();
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(intOptional14);
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType27 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType27.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(headers31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 97 + "'", int35 == 97);
    }

    @Test
    public void test1863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1863");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str10 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str11 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str12 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str13 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        long long14 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
    }

    @Test
    public void test1864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1864");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator6 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator6, "");
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord8.topic();
        org.apache.kafka.common.header.Headers headers10 = kafkaSpoutMessageIdComparatorConsumerRecord8.headers();
        org.apache.kafka.common.header.Headers headers11 = kafkaSpoutMessageIdComparatorConsumerRecord8.headers();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator12 = kafkaSpoutMessageIdComparatorConsumerRecord8.key();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord14 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=[]}", (int) (short) 100, (long) (-1), kafkaSpoutMessageIdComparator12, "");
        java.lang.String str15 = kafkaSpoutMessageIdComparatorConsumerRecord14.value();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator16 = kafkaSpoutMessageIdComparatorConsumerRecord14.key();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertNotNull(headers11);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator16);
    }

    @Test
    public void test1865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1865");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str10 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.util.Optional<java.lang.Integer> intOptional11 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType12 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        java.lang.String str13 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str14 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        long long15 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(intOptional11);
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
    }

    @Test
    public void test1866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1866");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator11 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator11, "");
        org.apache.kafka.common.record.TimestampType timestampType14 = kafkaSpoutMessageIdComparatorConsumerRecord13.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator25 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator25, "");
        org.apache.kafka.common.record.TimestampType timestampType28 = kafkaSpoutMessageIdComparatorConsumerRecord27.timestampType();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        java.lang.Object obj34 = new java.lang.Object();
        java.lang.Class<?> wildcardClass35 = obj34.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType28, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass33, (java.lang.reflect.GenericDeclaration) wildcardClass35);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator44 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator44, "");
        org.apache.kafka.common.record.TimestampType timestampType47 = kafkaSpoutMessageIdComparatorConsumerRecord46.timestampType();
        java.lang.Object obj51 = new java.lang.Object();
        java.lang.Class<?> wildcardClass52 = obj51.getClass();
        java.lang.Object obj53 = new java.lang.Object();
        java.lang.Class<?> wildcardClass54 = obj53.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType47, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass52, (java.lang.reflect.GenericDeclaration) wildcardClass54);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("hi!", (int) (byte) 0, (long) (byte) 10, 10L, timestampType14, (long) (short) 10, (int) (short) 0, (int) (byte) 0, (java.lang.reflect.Type) wildcardClass33, timestampType47);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator63 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord65 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (-1), (long) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator63, "");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator70 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator70, "");
        java.lang.String str73 = kafkaSpoutMessageIdComparatorConsumerRecord72.topic();
        org.apache.kafka.common.header.Headers headers74 = kafkaSpoutMessageIdComparatorConsumerRecord72.headers();
        org.apache.kafka.common.header.Headers headers75 = kafkaSpoutMessageIdComparatorConsumerRecord72.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=null}", 100, (long) (byte) -1, (long) (byte) 1, timestampType14, (java.lang.Long) 100L, 0, (int) (byte) 10, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator63, "KafkaSpout{acked=null, emitted=null}", headers75);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator77 = kafkaSpoutMessageIdComparatorConsumerRecord76.key();
        org.apache.kafka.common.record.TimestampType timestampType78 = kafkaSpoutMessageIdComparatorConsumerRecord76.timestampType();
        java.util.Optional<java.lang.Integer> intOptional79 = kafkaSpoutMessageIdComparatorConsumerRecord76.leaderEpoch();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(headers74);
        org.junit.Assert.assertNotNull(headers75);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator77);
        org.junit.Assert.assertTrue("'" + timestampType78 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType78.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional79);
    }

    @Test
    public void test1867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1867");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator6 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator6, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator9 = offsetComparator6.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator6;
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator6;
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator6;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord14 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("ConsumerRecord(topic = KafkaSpout{acked=null, emitted=[]}, partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = 1, serialized key size = 97, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = KafkaSpout{acked=null, emitted=[]})", (int) ' ', (long) '4', (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator6, "KafkaSpout{acked=null, emitted=[]}");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator15 = kafkaSpoutMessageIdComparatorConsumerRecord14.key();
        java.lang.String str16 = kafkaSpoutMessageIdComparatorConsumerRecord14.toString();
        java.lang.String str17 = kafkaSpoutMessageIdComparatorConsumerRecord14.topic();
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator9);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = KafkaSpout{acked=null, emitted=[]}, partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = 1, serialized key size = 97, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = KafkaSpout{acked=null, emitted=[]})" + "'", str17, "ConsumerRecord(topic = KafkaSpout{acked=null, emitted=[]}, partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = 1, serialized key size = 97, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = KafkaSpout{acked=null, emitted=[]})");
    }

    @Test
    public void test1868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1868");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        int int9 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str10 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        int int11 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedKeySize();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator12 = kafkaSpoutMessageIdComparatorConsumerRecord5.key();
        long long13 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
    }

    @Test
    public void test1869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1869");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        int int9 = kafkaSpoutMessageIdComparatorConsumerRecord5.partition();
        int int10 = kafkaSpoutMessageIdComparatorConsumerRecord5.partition();
        long long11 = kafkaSpoutMessageIdComparatorConsumerRecord5.offset();
        int int12 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.Class<?> wildcardClass13 = kafkaSpoutMessageIdComparatorConsumerRecord5.getClass();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1870");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator7 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator7, "");
        org.apache.kafka.common.record.TimestampType timestampType10 = kafkaSpoutMessageIdComparatorConsumerRecord9.timestampType();
        int int11 = kafkaSpoutMessageIdComparatorConsumerRecord9.serializedValueSize();
        java.lang.String str12 = kafkaSpoutMessageIdComparatorConsumerRecord9.value();
        long long13 = kafkaSpoutMessageIdComparatorConsumerRecord9.checksum();
        org.apache.kafka.common.record.TimestampType timestampType14 = kafkaSpoutMessageIdComparatorConsumerRecord9.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator21 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator21, "");
        org.apache.kafka.common.record.TimestampType timestampType24 = kafkaSpoutMessageIdComparatorConsumerRecord23.timestampType();
        int int25 = kafkaSpoutMessageIdComparatorConsumerRecord23.serializedValueSize();
        java.lang.String str26 = kafkaSpoutMessageIdComparatorConsumerRecord23.value();
        java.lang.String str27 = kafkaSpoutMessageIdComparatorConsumerRecord23.value();
        int int28 = kafkaSpoutMessageIdComparatorConsumerRecord23.partition();
        java.lang.String str29 = kafkaSpoutMessageIdComparatorConsumerRecord23.value();
        java.util.Optional<java.lang.Integer> intOptional30 = kafkaSpoutMessageIdComparatorConsumerRecord23.leaderEpoch();
        java.lang.Class<?> wildcardClass31 = intOptional30.getClass();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator35 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator35, "");
        org.apache.kafka.common.record.TimestampType timestampType38 = kafkaSpoutMessageIdComparatorConsumerRecord37.timestampType();
        long long39 = kafkaSpoutMessageIdComparatorConsumerRecord37.timestamp();
        long long40 = kafkaSpoutMessageIdComparatorConsumerRecord37.offset();
        java.lang.String str41 = kafkaSpoutMessageIdComparatorConsumerRecord37.value();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator45 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator45, "");
        java.lang.String str48 = kafkaSpoutMessageIdComparatorConsumerRecord47.topic();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator49 = kafkaSpoutMessageIdComparatorConsumerRecord47.key();
        org.apache.kafka.common.header.Headers headers50 = kafkaSpoutMessageIdComparatorConsumerRecord47.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.Object> typeConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.Object>("KafkaSpout{acked=null, emitted=null}", (int) (byte) 0, (long) '4', (long) (short) 1, timestampType14, (java.lang.Long) 10L, (int) (short) 10, (int) ' ', (java.lang.reflect.Type) wildcardClass31, (java.lang.Object) kafkaSpoutMessageIdComparatorConsumerRecord37, headers50);
        java.lang.String str52 = kafkaSpoutMessageIdComparatorConsumerRecord37.toString();
        java.lang.String str53 = kafkaSpoutMessageIdComparatorConsumerRecord37.toString();
        long long54 = kafkaSpoutMessageIdComparatorConsumerRecord37.checksum();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType24 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType24.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(intOptional30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertTrue("'" + timestampType38 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType38.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-1L) + "'", long39 == (-1L));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator49);
        org.junit.Assert.assertNotNull(headers50);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-1L) + "'", long54 == (-1L));
    }

    @Test
    public void test1871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1871");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator9 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord11 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator9, "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (short) 100, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator9, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator14 = offsetComparator9.reversed();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator15 = offsetComparator9.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator15;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator17 = kafkaSpoutMessageIdComparator15.reversed();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=[]}", 10, (long) 100, kafkaSpoutMessageIdComparator17, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator20 = kafkaSpoutMessageIdComparatorConsumerRecord19.key();
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator14);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator15);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator17);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator20);
    }

    @Test
    public void test1872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1872");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>();
        genericDeclarationKafkaSpout0.maxRetries = (byte) -1;
        boolean boolean3 = genericDeclarationKafkaSpout0.waitingToEmit();
        org.apache.kafka.clients.consumer.KafkaConsumer<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaConsumer4 = null;
        genericDeclarationKafkaSpout0.kafkaConsumer = genericDeclarationKafkaConsumer4;
        org.apache.storm.kafka.spout.KafkaSpoutTuplesBuilder<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpoutTuplesBuilder6 = null;
        genericDeclarationKafkaSpout0.tuplesBuilder = genericDeclarationKafkaSpoutTuplesBuilder6;
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService8 = null;
        genericDeclarationKafkaSpout0.retryService = kafkaSpoutRetryService8;
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService10 = null;
        genericDeclarationKafkaSpout0.retryService = kafkaSpoutRetryService10;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1873");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        org.apache.kafka.common.record.TimestampType timestampType10 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int11 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedKeySize();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator12 = kafkaSpoutMessageIdComparatorConsumerRecord5.key();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator13 = kafkaSpoutMessageIdComparatorConsumerRecord5.key();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator14 = kafkaSpoutMessageIdComparatorConsumerRecord5.key();
        java.lang.String str15 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        int int16 = kafkaSpoutMessageIdComparatorConsumerRecord5.partition();
        int int17 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator12);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator13);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test1874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1874");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        long long7 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        long long8 = kafkaSpoutMessageIdComparatorConsumerRecord5.offset();
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        org.apache.kafka.common.header.Headers headers10 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator11 = kafkaSpoutMessageIdComparatorConsumerRecord5.key();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator11;
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator11);
    }

    @Test
    public void test1875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1875");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.Class<?>, java.util.RandomAccess> wildcardClassKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.Class<?>, java.util.RandomAccess>();
    }

    @Test
    public void test1876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1876");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.util.ArrayList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.Object>.KafkaSpoutConsumerRebalanceListener kafkaSpoutConsumerRebalanceListener1 = kafkaSpout0.new KafkaSpoutConsumerRebalanceListener();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$KafkaSpoutConsumerRebalanceListener with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1877");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator6 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator6, "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (short) 100, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator6, "");
        java.util.Optional<java.lang.Integer> intOptional11 = kafkaSpoutMessageIdComparatorConsumerRecord10.leaderEpoch();
        long long12 = kafkaSpoutMessageIdComparatorConsumerRecord10.offset();
        long long13 = kafkaSpoutMessageIdComparatorConsumerRecord10.offset();
        int int14 = kafkaSpoutMessageIdComparatorConsumerRecord10.serializedKeySize();
        org.junit.Assert.assertNotNull(intOptional11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test1878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1878");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>();
        org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy firstPollOffsetStrategy1 = null;
        genericDeclarationKafkaSpout0.firstPollOffsetStrategy = firstPollOffsetStrategy1;
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService3 = genericDeclarationKafkaSpout0.retryService;
        boolean boolean4 = genericDeclarationKafkaSpout0.consumerAutoCommitMode;
        java.util.Set<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet5 = genericDeclarationKafkaSpout0.emitted;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.kafka.clients.consumer.ConsumerRecords<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationConsumerRecords6 = genericDeclarationKafkaSpout0.pollKafkaBroker();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(kafkaSpoutRetryService3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(kafkaSpoutMessageIdSet5);
    }

    @Test
    public void test1879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1879");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator11 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator11, "");
        org.apache.kafka.common.record.TimestampType timestampType14 = kafkaSpoutMessageIdComparatorConsumerRecord13.timestampType();
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Object obj20 = new java.lang.Object();
        java.lang.Class<?> wildcardClass21 = obj20.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord22 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType14, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass19, (java.lang.reflect.GenericDeclaration) wildcardClass21);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator29 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator29, "");
        org.apache.kafka.common.record.TimestampType timestampType32 = kafkaSpoutMessageIdComparatorConsumerRecord31.timestampType();
        int int33 = kafkaSpoutMessageIdComparatorConsumerRecord31.serializedValueSize();
        java.lang.String str34 = kafkaSpoutMessageIdComparatorConsumerRecord31.value();
        java.lang.String str35 = kafkaSpoutMessageIdComparatorConsumerRecord31.value();
        org.apache.kafka.common.record.TimestampType timestampType36 = kafkaSpoutMessageIdComparatorConsumerRecord31.timestampType();
        int int37 = kafkaSpoutMessageIdComparatorConsumerRecord31.serializedKeySize();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator38 = kafkaSpoutMessageIdComparatorConsumerRecord31.key();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator45 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator45, "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (short) 100, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator45, "");
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator45;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator51 = kafkaSpoutMessageIdComparator38.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator45);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator52 = kafkaSpoutMessageIdComparator51.reversed();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", 52, (long) (short) 10, 1L, timestampType14, (long) 'a', 52, (int) '#', kafkaSpoutMessageIdComparator52, "KafkaSpout{acked=null, emitted=null}");
        java.lang.String str55 = kafkaSpoutMessageIdComparatorConsumerRecord54.value();
        java.util.Optional<java.lang.Integer> intOptional56 = kafkaSpoutMessageIdComparatorConsumerRecord54.leaderEpoch();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + timestampType32 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType32.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + timestampType36 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType36.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator38);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator51);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator52);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "KafkaSpout{acked=null, emitted=null}" + "'", str55, "KafkaSpout{acked=null, emitted=null}");
        org.junit.Assert.assertNotNull(intOptional56);
    }

    @Test
    public void test1880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1880");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        java.lang.String str6 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator7 = kafkaSpoutMessageIdComparatorConsumerRecord5.key();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord5.toString();
        long long10 = kafkaSpoutMessageIdComparatorConsumerRecord5.offset();
        org.apache.kafka.common.header.Headers headers11 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        java.util.Optional<java.lang.Integer> intOptional12 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        long long13 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        int int14 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        long long15 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        long long16 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(headers11);
        org.junit.Assert.assertNotNull(intOptional12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
    }

    @Test
    public void test1881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1881");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.util.List<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.topology.base.BaseComponent> kafkaSpoutMessageIdListKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.util.List<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.topology.base.BaseComponent> kafkaSpoutMessageIdListKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<java.util.List<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.topology.base.BaseComponent>(kafkaSpoutMessageIdListKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1882");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator11 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator11, "");
        org.apache.kafka.common.record.TimestampType timestampType14 = kafkaSpoutMessageIdComparatorConsumerRecord13.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator25 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator25, "");
        org.apache.kafka.common.record.TimestampType timestampType28 = kafkaSpoutMessageIdComparatorConsumerRecord27.timestampType();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        java.lang.Object obj34 = new java.lang.Object();
        java.lang.Class<?> wildcardClass35 = obj34.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType28, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass33, (java.lang.reflect.GenericDeclaration) wildcardClass35);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator44 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator44, "");
        org.apache.kafka.common.record.TimestampType timestampType47 = kafkaSpoutMessageIdComparatorConsumerRecord46.timestampType();
        java.lang.Object obj51 = new java.lang.Object();
        java.lang.Class<?> wildcardClass52 = obj51.getClass();
        java.lang.Object obj53 = new java.lang.Object();
        java.lang.Class<?> wildcardClass54 = obj53.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType47, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass52, (java.lang.reflect.GenericDeclaration) wildcardClass54);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("hi!", (int) (byte) 0, (long) (byte) 10, 10L, timestampType14, (long) (short) 10, (int) (short) 0, (int) (byte) 0, (java.lang.reflect.Type) wildcardClass33, timestampType47);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator60 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=null}", (int) (short) 0, (long) (byte) 1, (long) (short) 100, timestampType47, 0L, (int) (byte) 10, (int) (short) 100, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator60, "hi!");
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator60;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator64 = offsetComparator60.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator71 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord73 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator71, "");
        java.lang.String str74 = kafkaSpoutMessageIdComparatorConsumerRecord73.topic();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator75 = kafkaSpoutMessageIdComparatorConsumerRecord73.key();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("hi!", (int) '4', 100L, kafkaSpoutMessageIdComparator75, "");
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator75;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator79 = kafkaSpoutMessageIdComparator64.thenComparing(kafkaSpoutMessageIdComparator75);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator83 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord85 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (-1), (long) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator83, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator86 = offsetComparator83.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator90 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator90, "");
        java.lang.String str93 = kafkaSpoutMessageIdComparatorConsumerRecord92.topic();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator94 = kafkaSpoutMessageIdComparatorConsumerRecord92.key();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator95 = kafkaSpoutMessageIdComparator86.thenComparing(kafkaSpoutMessageIdComparator94);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator94;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator97 = kafkaSpoutMessageIdComparator64.thenComparing(kafkaSpoutMessageIdComparator94);
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator64);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator75);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator79);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator86);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator94);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator95);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator97);
    }

    @Test
    public void test1883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1883");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.Cloneable, java.lang.reflect.AnnotatedElement> cloneableKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.Cloneable, java.lang.reflect.AnnotatedElement>();
    }

    @Test
    public void test1884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1884");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator17 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator17, "");
        org.apache.kafka.common.record.TimestampType timestampType20 = kafkaSpoutMessageIdComparatorConsumerRecord19.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator31 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator31, "");
        org.apache.kafka.common.record.TimestampType timestampType34 = kafkaSpoutMessageIdComparatorConsumerRecord33.timestampType();
        java.lang.Object obj38 = new java.lang.Object();
        java.lang.Class<?> wildcardClass39 = obj38.getClass();
        java.lang.Object obj40 = new java.lang.Object();
        java.lang.Class<?> wildcardClass41 = obj40.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType34, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass39, (java.lang.reflect.GenericDeclaration) wildcardClass41);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator50 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord52 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator50, "");
        org.apache.kafka.common.record.TimestampType timestampType53 = kafkaSpoutMessageIdComparatorConsumerRecord52.timestampType();
        java.lang.Object obj57 = new java.lang.Object();
        java.lang.Class<?> wildcardClass58 = obj57.getClass();
        java.lang.Object obj59 = new java.lang.Object();
        java.lang.Class<?> wildcardClass60 = obj59.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType53, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass58, (java.lang.reflect.GenericDeclaration) wildcardClass60);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("hi!", (int) (byte) 0, (long) (byte) 10, 10L, timestampType20, (long) (short) 10, (int) (short) 0, (int) (byte) 0, (java.lang.reflect.Type) wildcardClass39, timestampType53);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator66 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=null}", (int) (short) 0, (long) (byte) 1, (long) (short) 100, timestampType53, 0L, (int) (byte) 10, (int) (short) 100, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator66, "hi!");
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator66;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator70 = offsetComparator66.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator66;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord73 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("hi!", (int) '4', (long) (short) 100, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator66, "KafkaSpout{acked=null, emitted=null}");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord75 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("ConsumerRecord(topic = KafkaSpout{acked=null, emitted=null}, partition = -1, leaderEpoch = null, offset = 97, NoTimestampType = 32, serialized key size = 100, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = )", 0, 1L, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator66, "hi!");
        long long76 = kafkaSpoutMessageIdComparatorConsumerRecord75.checksum();
        org.apache.kafka.common.record.TimestampType timestampType77 = kafkaSpoutMessageIdComparatorConsumerRecord75.timestampType();
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType34 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType34.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + timestampType53 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType53.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator70);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + (-1L) + "'", long76 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType77 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType77.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test1885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1885");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str10 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.util.Optional<java.lang.Integer> intOptional11 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        java.lang.String str12 = kafkaSpoutMessageIdComparatorConsumerRecord5.toString();
        long long13 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        java.lang.String str14 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(intOptional11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test1886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1886");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>();
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService1 = null;
        genericDeclarationKafkaSpout0.retryService = kafkaSpoutRetryService1;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray3 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet4 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet4, kafkaSpoutMessageIdArray3);
        genericDeclarationKafkaSpout0.emitted = kafkaSpoutMessageIdSet4;
        genericDeclarationKafkaSpout0.maxRetries = '#';
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpoutConfig9 = genericDeclarationKafkaSpout0.kafkaSpoutConfig;
        org.apache.kafka.common.TopicPartition topicPartition10 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection11 = genericDeclarationKafkaSpout0.toArrayList(topicPartition10);
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService12 = genericDeclarationKafkaSpout0.retryService;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = genericDeclarationKafkaSpout0.getNamedTopics();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(genericDeclarationKafkaSpoutConfig9);
        org.junit.Assert.assertNotNull(topicPartitionCollection11);
        org.junit.Assert.assertNull(kafkaSpoutRetryService12);
    }

    @Test
    public void test1887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1887");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator6 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator6, "");
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord8.topic();
        org.apache.kafka.common.header.Headers headers10 = kafkaSpoutMessageIdComparatorConsumerRecord8.headers();
        org.apache.kafka.common.header.Headers headers11 = kafkaSpoutMessageIdComparatorConsumerRecord8.headers();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator12 = kafkaSpoutMessageIdComparatorConsumerRecord8.key();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator12;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord15 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("hi!", 0, (long) 10, kafkaSpoutMessageIdComparator12, "hi!");
        java.util.Optional<java.lang.Integer> intOptional16 = kafkaSpoutMessageIdComparatorConsumerRecord15.leaderEpoch();
        int int17 = kafkaSpoutMessageIdComparatorConsumerRecord15.serializedKeySize();
        long long18 = kafkaSpoutMessageIdComparatorConsumerRecord15.checksum();
        int int19 = kafkaSpoutMessageIdComparatorConsumerRecord15.partition();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator20 = kafkaSpoutMessageIdComparatorConsumerRecord15.key();
        int int21 = kafkaSpoutMessageIdComparatorConsumerRecord15.serializedValueSize();
        java.lang.String str22 = kafkaSpoutMessageIdComparatorConsumerRecord15.topic();
        long long23 = kafkaSpoutMessageIdComparatorConsumerRecord15.timestamp();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertNotNull(headers11);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator12);
        org.junit.Assert.assertNotNull(intOptional16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
    }

    @Test
    public void test1888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1888");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator7 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator7, "");
        org.apache.kafka.common.record.TimestampType timestampType10 = kafkaSpoutMessageIdComparatorConsumerRecord9.timestampType();
        int int11 = kafkaSpoutMessageIdComparatorConsumerRecord9.serializedValueSize();
        java.lang.String str12 = kafkaSpoutMessageIdComparatorConsumerRecord9.value();
        long long13 = kafkaSpoutMessageIdComparatorConsumerRecord9.checksum();
        org.apache.kafka.common.record.TimestampType timestampType14 = kafkaSpoutMessageIdComparatorConsumerRecord9.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator24 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator24, "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (short) 100, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator24, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator29 = offsetComparator24.reversed();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("hi!", (int) (byte) 1, 10L, (long) (short) 1, timestampType14, (long) 100, (-1), 0, kafkaSpoutMessageIdComparator29, "KafkaSpout{acked=null, emitted=null}");
        int int32 = kafkaSpoutMessageIdComparatorConsumerRecord31.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional33 = kafkaSpoutMessageIdComparatorConsumerRecord31.leaderEpoch();
        int int34 = kafkaSpoutMessageIdComparatorConsumerRecord31.serializedValueSize();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(intOptional33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test1889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1889");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        org.apache.kafka.common.record.TimestampType timestampType10 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int11 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedKeySize();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator12 = kafkaSpoutMessageIdComparatorConsumerRecord5.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator12);
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test1890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1890");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        java.lang.String str6 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        org.apache.kafka.common.header.Headers headers7 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.toString();
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord5.toString();
        int int10 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        int int11 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(headers7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test1891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1891");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        java.lang.String str6 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        org.apache.kafka.common.header.Headers headers7 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.toString();
        long long9 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        long long10 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator11 = kafkaSpoutMessageIdComparatorConsumerRecord5.key();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator12 = kafkaSpoutMessageIdComparatorConsumerRecord5.key();
        long long13 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(headers7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator11);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
    }

    @Test
    public void test1892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1892");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout<org.apache.kafka.common.record.TimestampType, org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>>.KafkaSpoutConsumerRebalanceListener, java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> kafkaSpoutConsumerRebalanceListenerKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout<org.apache.kafka.common.record.TimestampType, org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>>.KafkaSpoutConsumerRebalanceListener, java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>();
    }

    @Test
    public void test1893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1893");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.lang.String, java.util.ArrayList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>.KafkaSpoutConsumerRebalanceListener kafkaSpoutConsumerRebalanceListener1 = kafkaSpout0.new KafkaSpoutConsumerRebalanceListener();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$KafkaSpoutConsumerRebalanceListener with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1894");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator11 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator11, "");
        org.apache.kafka.common.record.TimestampType timestampType14 = kafkaSpoutMessageIdComparatorConsumerRecord13.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator25 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator25, "");
        org.apache.kafka.common.record.TimestampType timestampType28 = kafkaSpoutMessageIdComparatorConsumerRecord27.timestampType();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        java.lang.Object obj34 = new java.lang.Object();
        java.lang.Class<?> wildcardClass35 = obj34.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType28, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass33, (java.lang.reflect.GenericDeclaration) wildcardClass35);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator44 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator44, "");
        org.apache.kafka.common.record.TimestampType timestampType47 = kafkaSpoutMessageIdComparatorConsumerRecord46.timestampType();
        java.lang.Object obj51 = new java.lang.Object();
        java.lang.Class<?> wildcardClass52 = obj51.getClass();
        java.lang.Object obj53 = new java.lang.Object();
        java.lang.Class<?> wildcardClass54 = obj53.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType47, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass52, (java.lang.reflect.GenericDeclaration) wildcardClass54);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("hi!", (int) (byte) 0, (long) (byte) 10, 10L, timestampType14, (long) (short) 10, (int) (short) 0, (int) (byte) 0, (java.lang.reflect.Type) wildcardClass33, timestampType47);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator60 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=null}", (int) (short) 0, (long) (byte) 1, (long) (short) 100, timestampType47, 0L, (int) (byte) 10, (int) (short) 100, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator60, "hi!");
        java.util.Optional<java.lang.Integer> intOptional63 = kafkaSpoutMessageIdComparatorConsumerRecord62.leaderEpoch();
        int int64 = kafkaSpoutMessageIdComparatorConsumerRecord62.partition();
        long long65 = kafkaSpoutMessageIdComparatorConsumerRecord62.offset();
        int int66 = kafkaSpoutMessageIdComparatorConsumerRecord62.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType67 = kafkaSpoutMessageIdComparatorConsumerRecord62.timestampType();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(intOptional63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1L + "'", long65 == 1L);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10 + "'", int66 == 10);
        org.junit.Assert.assertTrue("'" + timestampType67 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType67.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test1895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1895");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator6 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator6, "");
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord8.topic();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator10 = kafkaSpoutMessageIdComparatorConsumerRecord8.key();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator11 = kafkaSpoutMessageIdComparator10.reversed();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (short) 10, 0L, kafkaSpoutMessageIdComparator11, "hi!");
        java.lang.String str14 = kafkaSpoutMessageIdComparatorConsumerRecord13.toString();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator10);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator11);
    }

    @Test
    public void test1896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1896");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>, java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> kafkaSpoutMessageIdComparatorConsumerRecordKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>, java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> kafkaSpoutMessageIdComparatorConsumerRecordKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>, java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>(kafkaSpoutMessageIdComparatorConsumerRecordKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1897");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.lang.reflect.AnnotatedElement, java.lang.reflect.GenericDeclaration> annotatedElementKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.AnnotatedElement, java.lang.reflect.GenericDeclaration> annotatedElementKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.AnnotatedElement, java.lang.reflect.GenericDeclaration>(annotatedElementKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1898");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.util.Optional<java.lang.Integer> intOptional10 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        int int11 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        int int12 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedKeySize();
        long long13 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
    }

    @Test
    public void test1899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1899");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator7 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator7, "");
        org.apache.kafka.common.record.TimestampType timestampType10 = kafkaSpoutMessageIdComparatorConsumerRecord9.timestampType();
        int int11 = kafkaSpoutMessageIdComparatorConsumerRecord9.serializedValueSize();
        java.lang.String str12 = kafkaSpoutMessageIdComparatorConsumerRecord9.value();
        int int13 = kafkaSpoutMessageIdComparatorConsumerRecord9.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional14 = kafkaSpoutMessageIdComparatorConsumerRecord9.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType15 = kafkaSpoutMessageIdComparatorConsumerRecord9.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator25 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator25, "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (short) 100, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator25, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator30 = offsetComparator25.reversed();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator31 = offsetComparator25.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator38 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator38, "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (short) 100, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator38, "");
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator38;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator44 = offsetComparator38.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator48 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (-1), (long) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator48, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator51 = offsetComparator48.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator48;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator53 = offsetComparator38.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator48);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator54 = kafkaSpoutMessageIdComparator31.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator38);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator59 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator59, "");
        java.lang.String str62 = kafkaSpoutMessageIdComparatorConsumerRecord61.topic();
        org.apache.kafka.common.header.Headers headers63 = kafkaSpoutMessageIdComparatorConsumerRecord61.headers();
        org.apache.kafka.common.header.Headers headers64 = kafkaSpoutMessageIdComparatorConsumerRecord61.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord65 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("hi!", (int) (byte) -1, (long) (short) 0, (long) ' ', timestampType15, (java.lang.Long) 1L, (-1), 32, kafkaSpoutMessageIdComparator54, "KafkaSpout{acked=null, emitted=null}", headers64);
        long long66 = kafkaSpoutMessageIdComparatorConsumerRecord65.offset();
        long long67 = kafkaSpoutMessageIdComparatorConsumerRecord65.timestamp();
        java.lang.String str68 = kafkaSpoutMessageIdComparatorConsumerRecord65.toString();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(intOptional14);
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator30);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator31);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator44);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator51);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator53);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator54);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(headers63);
        org.junit.Assert.assertNotNull(headers64);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 32L + "'", long67 == 32L);
    }

    @Test
    public void test1900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1900");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        int int9 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        long long10 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType11 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        long long12 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        java.lang.String str13 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator14 = kafkaSpoutMessageIdComparatorConsumerRecord5.key();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator14);
    }

    @Test
    public void test1901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1901");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator11 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator11, "");
        org.apache.kafka.common.record.TimestampType timestampType14 = kafkaSpoutMessageIdComparatorConsumerRecord13.timestampType();
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Object obj20 = new java.lang.Object();
        java.lang.Class<?> wildcardClass21 = obj20.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord22 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType14, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass19, (java.lang.reflect.GenericDeclaration) wildcardClass21);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator29 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator29, "");
        org.apache.kafka.common.record.TimestampType timestampType32 = kafkaSpoutMessageIdComparatorConsumerRecord31.timestampType();
        int int33 = kafkaSpoutMessageIdComparatorConsumerRecord31.serializedValueSize();
        java.lang.String str34 = kafkaSpoutMessageIdComparatorConsumerRecord31.value();
        java.lang.String str35 = kafkaSpoutMessageIdComparatorConsumerRecord31.value();
        org.apache.kafka.common.record.TimestampType timestampType36 = kafkaSpoutMessageIdComparatorConsumerRecord31.timestampType();
        int int37 = kafkaSpoutMessageIdComparatorConsumerRecord31.serializedKeySize();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator38 = kafkaSpoutMessageIdComparatorConsumerRecord31.key();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator45 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator45, "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (short) 100, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator45, "");
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator45;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator51 = kafkaSpoutMessageIdComparator38.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator45);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator52 = kafkaSpoutMessageIdComparator51.reversed();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", 52, (long) (short) 10, 1L, timestampType14, (long) 'a', 52, (int) '#', kafkaSpoutMessageIdComparator52, "KafkaSpout{acked=null, emitted=null}");
        java.lang.String str55 = kafkaSpoutMessageIdComparatorConsumerRecord54.value();
        int int56 = kafkaSpoutMessageIdComparatorConsumerRecord54.serializedKeySize();
        java.lang.String str57 = kafkaSpoutMessageIdComparatorConsumerRecord54.value();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + timestampType32 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType32.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + timestampType36 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType36.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator38);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator51);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator52);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "KafkaSpout{acked=null, emitted=null}" + "'", str55, "KafkaSpout{acked=null, emitted=null}");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 52 + "'", int56 == 52);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "KafkaSpout{acked=null, emitted=null}" + "'", str57, "KafkaSpout{acked=null, emitted=null}");
    }

    @Test
    public void test1902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1902");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>();
        org.apache.kafka.clients.consumer.KafkaConsumer<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaConsumer1 = genericDeclarationKafkaSpout0.kafkaConsumer;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>> genericDeclarationConsumerRecordItor2 = genericDeclarationKafkaSpout0.waitingToEmit;
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpoutConfig3 = genericDeclarationKafkaSpout0.kafkaSpoutConfig;
        org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy firstPollOffsetStrategy4 = null;
        genericDeclarationKafkaSpout0.firstPollOffsetStrategy = firstPollOffsetStrategy4;
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService6 = genericDeclarationKafkaSpout0.retryService;
        org.apache.kafka.clients.consumer.KafkaConsumer<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaConsumer7 = genericDeclarationKafkaSpout0.kafkaConsumer;
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService8 = null;
        genericDeclarationKafkaSpout0.retryService = kafkaSpoutRetryService8;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = genericDeclarationKafkaSpout0.getWildCardTopics();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(genericDeclarationKafkaConsumer1);
        org.junit.Assert.assertNull(genericDeclarationConsumerRecordItor2);
        org.junit.Assert.assertNull(genericDeclarationKafkaSpoutConfig3);
        org.junit.Assert.assertNull(kafkaSpoutRetryService6);
        org.junit.Assert.assertNull(genericDeclarationKafkaConsumer7);
    }

    @Test
    public void test1903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1903");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        int int6 = kafkaSpoutMessageIdComparatorConsumerRecord5.partition();
        java.util.Optional<java.lang.Integer> intOptional7 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional8 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator9 = kafkaSpoutMessageIdComparatorConsumerRecord5.key();
        long long10 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        long long11 = kafkaSpoutMessageIdComparatorConsumerRecord5.offset();
        java.util.Optional<java.lang.Integer> intOptional12 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        long long13 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator14 = kafkaSpoutMessageIdComparatorConsumerRecord5.key();
        long long15 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertNotNull(intOptional7);
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(intOptional12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
    }

    @Test
    public void test1904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1904");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        java.lang.String str6 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator7 = kafkaSpoutMessageIdComparatorConsumerRecord5.key();
        int int8 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedKeySize();
        long long9 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        java.lang.String str10 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        long long11 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
    }

    @Test
    public void test1905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1905");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>();
        org.apache.kafka.clients.consumer.KafkaConsumer<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaConsumer1 = genericDeclarationKafkaSpout0.kafkaConsumer;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>> genericDeclarationConsumerRecordItor2 = genericDeclarationKafkaSpout0.waitingToEmit;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>> genericDeclarationConsumerRecordItor3 = genericDeclarationKafkaSpout0.waitingToEmit;
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService4 = genericDeclarationKafkaSpout0.retryService;
        org.apache.storm.spout.SpoutOutputCollector spoutOutputCollector5 = null;
        genericDeclarationKafkaSpout0.collector = spoutOutputCollector5;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Object> strMap7 = genericDeclarationKafkaSpout0.getComponentConfiguration();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(genericDeclarationKafkaConsumer1);
        org.junit.Assert.assertNull(genericDeclarationConsumerRecordItor2);
        org.junit.Assert.assertNull(genericDeclarationConsumerRecordItor3);
        org.junit.Assert.assertNull(kafkaSpoutRetryService4);
    }

    @Test
    public void test1906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1906");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator6 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator6, "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (short) 100, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator6, "");
        int int11 = kafkaSpoutMessageIdComparatorConsumerRecord10.serializedValueSize();
        long long12 = kafkaSpoutMessageIdComparatorConsumerRecord10.timestamp();
        java.util.Optional<java.lang.Integer> intOptional13 = kafkaSpoutMessageIdComparatorConsumerRecord10.leaderEpoch();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(intOptional13);
    }

    @Test
    public void test1907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1907");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator6 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator6, "");
        org.apache.kafka.common.record.TimestampType timestampType9 = kafkaSpoutMessageIdComparatorConsumerRecord8.timestampType();
        long long10 = kafkaSpoutMessageIdComparatorConsumerRecord8.timestamp();
        long long11 = kafkaSpoutMessageIdComparatorConsumerRecord8.offset();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator12 = kafkaSpoutMessageIdComparatorConsumerRecord8.key();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator13 = kafkaSpoutMessageIdComparator12.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator20 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord22 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator20, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator23 = offsetComparator20.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator20;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator25 = offsetComparator20.reversed();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=null}", (int) (byte) -1, (long) 100, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator20, "hi!");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator28 = kafkaSpoutMessageIdComparator12.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator20);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator35 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator35, "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (short) 100, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator35, "");
        int int40 = kafkaSpoutMessageIdComparatorConsumerRecord39.serializedValueSize();
        java.lang.String str41 = kafkaSpoutMessageIdComparatorConsumerRecord39.topic();
        int int42 = kafkaSpoutMessageIdComparatorConsumerRecord39.serializedValueSize();
        org.apache.kafka.common.header.Headers headers43 = kafkaSpoutMessageIdComparatorConsumerRecord39.headers();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator44 = kafkaSpoutMessageIdComparatorConsumerRecord39.key();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator45 = kafkaSpoutMessageIdComparator12.thenComparing(kafkaSpoutMessageIdComparator44);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", 32, 100L, kafkaSpoutMessageIdComparator44, "");
        int int48 = kafkaSpoutMessageIdComparatorConsumerRecord47.serializedValueSize();
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator12);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator13);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator23);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator25);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator28);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(headers43);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator44);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
    }

    @Test
    public void test1908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1908");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>();
        org.apache.kafka.clients.consumer.KafkaConsumer<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaConsumer1 = genericDeclarationKafkaSpout0.kafkaConsumer;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>> genericDeclarationConsumerRecordItor2 = genericDeclarationKafkaSpout0.waitingToEmit;
        org.apache.storm.kafka.spout.KafkaSpoutTuplesBuilder<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpoutTuplesBuilder3 = null;
        genericDeclarationKafkaSpout0.tuplesBuilder = genericDeclarationKafkaSpoutTuplesBuilder3;
        java.util.Set<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet5 = genericDeclarationKafkaSpout0.emitted;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>> genericDeclarationConsumerRecordItor6 = genericDeclarationKafkaSpout0.waitingToEmit;
        // The following exception was thrown during execution in test generation
        try {
            genericDeclarationKafkaSpout0.emit();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(genericDeclarationKafkaConsumer1);
        org.junit.Assert.assertNull(genericDeclarationConsumerRecordItor2);
        org.junit.Assert.assertNull(kafkaSpoutMessageIdSet5);
        org.junit.Assert.assertNull(genericDeclarationConsumerRecordItor6);
    }

    @Test
    public void test1909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1909");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>();
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService1 = null;
        genericDeclarationKafkaSpout0.retryService = kafkaSpoutRetryService1;
        long long3 = genericDeclarationKafkaSpout0.numUncommittedOffsets;
        org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy firstPollOffsetStrategy4 = null;
        genericDeclarationKafkaSpout0.firstPollOffsetStrategy = firstPollOffsetStrategy4;
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpoutConfig6 = genericDeclarationKafkaSpout0.kafkaSpoutConfig;
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNull(genericDeclarationKafkaSpoutConfig6);
    }

    @Test
    public void test1910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1910");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        int int9 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str10 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        int int11 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedKeySize();
        org.apache.kafka.common.header.Headers headers12 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        java.lang.String str13 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        int int14 = kafkaSpoutMessageIdComparatorConsumerRecord5.partition();
        long long15 = kafkaSpoutMessageIdComparatorConsumerRecord5.offset();
        org.apache.kafka.common.record.TimestampType timestampType16 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int17 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(headers12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test1911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1911");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator6 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (-1), (long) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator6, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator9 = offsetComparator6.reversed();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord11 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("hi!", 0, (long) 1, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator6, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator12 = org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator13 = kafkaSpoutMessageIdComparator12.reversed();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator14 = offsetComparator6.thenComparing(kafkaSpoutMessageIdComparator12);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator15 = kafkaSpoutMessageIdComparator14.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator19 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator19, "");
        java.lang.String str22 = kafkaSpoutMessageIdComparatorConsumerRecord21.topic();
        java.util.Optional<java.lang.Integer> intOptional23 = kafkaSpoutMessageIdComparatorConsumerRecord21.leaderEpoch();
        long long24 = kafkaSpoutMessageIdComparatorConsumerRecord21.checksum();
        java.lang.String str25 = kafkaSpoutMessageIdComparatorConsumerRecord21.topic();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator26 = kafkaSpoutMessageIdComparatorConsumerRecord21.key();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator27 = kafkaSpoutMessageIdComparator14.thenComparing(kafkaSpoutMessageIdComparator26);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator28 = kafkaSpoutMessageIdComparator27.reversed();
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator9);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator12);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator13);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator14);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator15);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(intOptional23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator26);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator27);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator28);
    }

    @Test
    public void test1912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1912");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator11 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator11, "");
        org.apache.kafka.common.record.TimestampType timestampType14 = kafkaSpoutMessageIdComparatorConsumerRecord13.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator25 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator25, "");
        org.apache.kafka.common.record.TimestampType timestampType28 = kafkaSpoutMessageIdComparatorConsumerRecord27.timestampType();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        java.lang.Object obj34 = new java.lang.Object();
        java.lang.Class<?> wildcardClass35 = obj34.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType28, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass33, (java.lang.reflect.GenericDeclaration) wildcardClass35);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator44 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator44, "");
        org.apache.kafka.common.record.TimestampType timestampType47 = kafkaSpoutMessageIdComparatorConsumerRecord46.timestampType();
        java.lang.Object obj51 = new java.lang.Object();
        java.lang.Class<?> wildcardClass52 = obj51.getClass();
        java.lang.Object obj53 = new java.lang.Object();
        java.lang.Class<?> wildcardClass54 = obj53.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType47, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass52, (java.lang.reflect.GenericDeclaration) wildcardClass54);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("hi!", (int) (byte) 0, (long) (byte) 10, 10L, timestampType14, (long) (short) 10, (int) (short) 0, (int) (byte) 0, (java.lang.reflect.Type) wildcardClass33, timestampType47);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator60 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=null}", (int) (short) 0, (long) (byte) 1, (long) (short) 100, timestampType47, 0L, (int) (byte) 10, (int) (short) 100, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator60, "hi!");
        java.lang.String str63 = kafkaSpoutMessageIdComparatorConsumerRecord62.toString();
        int int64 = kafkaSpoutMessageIdComparatorConsumerRecord62.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional65 = kafkaSpoutMessageIdComparatorConsumerRecord62.leaderEpoch();
        java.lang.String str66 = kafkaSpoutMessageIdComparatorConsumerRecord62.toString();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 100 + "'", int64 == 100);
        org.junit.Assert.assertNotNull(intOptional65);
    }

    @Test
    public void test1913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1913");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>();
        org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy firstPollOffsetStrategy1 = genericDeclarationKafkaSpout0.firstPollOffsetStrategy;
        java.util.Set<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet2 = genericDeclarationKafkaSpout0.emitted;
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService3 = null;
        genericDeclarationKafkaSpout0.retryService = kafkaSpoutRetryService3;
        boolean boolean5 = genericDeclarationKafkaSpout0.initialized;
        // The following exception was thrown during execution in test generation
        try {
            genericDeclarationKafkaSpout0.deactivate();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(firstPollOffsetStrategy1);
        org.junit.Assert.assertNull(kafkaSpoutMessageIdSet2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1914");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        java.lang.String str6 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        org.apache.kafka.common.header.Headers headers7 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        org.apache.kafka.common.header.Headers headers8 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord5.toString();
        java.lang.String str10 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        int int11 = kafkaSpoutMessageIdComparatorConsumerRecord5.partition();
        java.util.Optional<java.lang.Integer> intOptional12 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        java.lang.String str13 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str14 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        long long15 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(headers7);
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNotNull(intOptional12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
    }

    @Test
    public void test1915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1915");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        java.lang.String str6 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator7 = kafkaSpoutMessageIdComparatorConsumerRecord5.key();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord5.toString();
        long long10 = kafkaSpoutMessageIdComparatorConsumerRecord5.offset();
        org.apache.kafka.common.header.Headers headers11 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        java.util.Optional<java.lang.Integer> intOptional12 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional13 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(headers11);
        org.junit.Assert.assertNotNull(intOptional12);
        org.junit.Assert.assertNotNull(intOptional13);
    }

    @Test
    public void test1916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1916");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.Class<?>, java.lang.reflect.GenericDeclaration> wildcardClassKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.Class<?>, java.lang.reflect.GenericDeclaration>();
    }

    @Test
    public void test1917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1917");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        java.util.concurrent.TimeUnit timeUnit3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.reflect.AnnotatedElement>.Timer timer4 = kafkaSpout0.new Timer(10L, 0L, timeUnit3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$Timer with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1918");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.kafka.clients.consumer.ConsumerRebalanceListener, java.util.AbstractList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> consumerRebalanceListenerKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.kafka.clients.consumer.ConsumerRebalanceListener, java.util.AbstractList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>();
    }

    @Test
    public void test1919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1919");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        org.apache.kafka.common.header.Headers headers9 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        org.apache.kafka.common.header.Headers headers10 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        java.util.Optional<java.lang.Integer> intOptional11 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        java.lang.Class<?> wildcardClass12 = intOptional11.getClass();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(headers9);
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertNotNull(intOptional11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1920");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.Type, org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator> typeKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.Type, org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator>();
    }

    @Test
    public void test1921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1921");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        java.util.concurrent.TimeUnit timeUnit3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.base.BaseRichSpout, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>.Timer timer4 = kafkaSpout0.new Timer(0L, (long) ' ', timeUnit3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$Timer with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1922");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (-1), (long) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator6 = offsetComparator3.reversed();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator7 = kafkaSpoutMessageIdComparator6.reversed();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator8 = kafkaSpoutMessageIdComparator7.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator16 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord18 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator16, "");
        org.apache.kafka.common.record.TimestampType timestampType19 = kafkaSpoutMessageIdComparatorConsumerRecord18.timestampType();
        int int20 = kafkaSpoutMessageIdComparatorConsumerRecord18.serializedValueSize();
        java.lang.String str21 = kafkaSpoutMessageIdComparatorConsumerRecord18.value();
        java.lang.String str22 = kafkaSpoutMessageIdComparatorConsumerRecord18.value();
        org.apache.kafka.common.record.TimestampType timestampType23 = kafkaSpoutMessageIdComparatorConsumerRecord18.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator30 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (-1), (long) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator30, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator33 = offsetComparator30.reversed();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator34 = offsetComparator30.reversed();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=null}", (int) (short) -1, (long) 0, (long) (-1), timestampType23, (long) 100, (int) (byte) 10, (int) '#', kafkaSpoutMessageIdComparator34, "KafkaSpout{acked=null, emitted=null}");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator37 = kafkaSpoutMessageIdComparator8.thenComparing(kafkaSpoutMessageIdComparator34);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator38 = kafkaSpoutMessageIdComparator8.reversed();
        java.lang.Class<?> wildcardClass39 = kafkaSpoutMessageIdComparator8.getClass();
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator6);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator7);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator8);
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + timestampType23 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType23.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator33);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator34);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator37);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator38);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test1923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1923");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>();
        org.apache.kafka.clients.consumer.KafkaConsumer<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaConsumer1 = genericDeclarationKafkaSpout0.kafkaConsumer;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>> genericDeclarationConsumerRecordItor2 = genericDeclarationKafkaSpout0.waitingToEmit;
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpoutConfig3 = genericDeclarationKafkaSpout0.kafkaSpoutConfig;
        org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy firstPollOffsetStrategy4 = null;
        genericDeclarationKafkaSpout0.firstPollOffsetStrategy = firstPollOffsetStrategy4;
        java.util.Set<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = genericDeclarationKafkaSpout0.emitted;
        org.junit.Assert.assertNull(genericDeclarationKafkaConsumer1);
        org.junit.Assert.assertNull(genericDeclarationConsumerRecordItor2);
        org.junit.Assert.assertNull(genericDeclarationKafkaSpoutConfig3);
        org.junit.Assert.assertNull(kafkaSpoutMessageIdSet6);
    }

    @Test
    public void test1924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1924");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator9 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord11 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator9, "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (short) 100, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator9, "");
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator9;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator15 = offsetComparator9.reversed();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("hi!", (int) 'a', (long) 1, kafkaSpoutMessageIdComparator15, "");
        org.apache.kafka.common.record.TimestampType timestampType18 = kafkaSpoutMessageIdComparatorConsumerRecord17.timestampType();
        long long19 = kafkaSpoutMessageIdComparatorConsumerRecord17.timestamp();
        java.lang.String str20 = kafkaSpoutMessageIdComparatorConsumerRecord17.topic();
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator15);
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
    }

    @Test
    public void test1925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1925");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>();
        org.apache.kafka.clients.consumer.KafkaConsumer<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaConsumer1 = genericDeclarationKafkaSpout0.kafkaConsumer;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>> genericDeclarationConsumerRecordItor2 = genericDeclarationKafkaSpout0.waitingToEmit;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>> genericDeclarationConsumerRecordItor3 = genericDeclarationKafkaSpout0.waitingToEmit;
        java.util.Set<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet4 = genericDeclarationKafkaSpout0.emitted;
        genericDeclarationKafkaSpout0.initialized = true;
        org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy firstPollOffsetStrategy7 = null;
        genericDeclarationKafkaSpout0.firstPollOffsetStrategy = firstPollOffsetStrategy7;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>> genericDeclarationConsumerRecordItor9 = null;
        genericDeclarationKafkaSpout0.waitingToEmit = genericDeclarationConsumerRecordItor9;
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpoutConfig11 = genericDeclarationKafkaSpout0.kafkaSpoutConfig;
        org.junit.Assert.assertNull(genericDeclarationKafkaConsumer1);
        org.junit.Assert.assertNull(genericDeclarationConsumerRecordItor2);
        org.junit.Assert.assertNull(genericDeclarationConsumerRecordItor3);
        org.junit.Assert.assertNull(kafkaSpoutMessageIdSet4);
        org.junit.Assert.assertNull(genericDeclarationKafkaSpoutConfig11);
    }

    @Test
    public void test1926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1926");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator11 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator11, "");
        org.apache.kafka.common.record.TimestampType timestampType14 = kafkaSpoutMessageIdComparatorConsumerRecord13.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator25 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator25, "");
        org.apache.kafka.common.record.TimestampType timestampType28 = kafkaSpoutMessageIdComparatorConsumerRecord27.timestampType();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        java.lang.Object obj34 = new java.lang.Object();
        java.lang.Class<?> wildcardClass35 = obj34.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType28, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass33, (java.lang.reflect.GenericDeclaration) wildcardClass35);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator44 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator44, "");
        org.apache.kafka.common.record.TimestampType timestampType47 = kafkaSpoutMessageIdComparatorConsumerRecord46.timestampType();
        java.lang.Object obj51 = new java.lang.Object();
        java.lang.Class<?> wildcardClass52 = obj51.getClass();
        java.lang.Object obj53 = new java.lang.Object();
        java.lang.Class<?> wildcardClass54 = obj53.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType47, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass52, (java.lang.reflect.GenericDeclaration) wildcardClass54);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("hi!", (int) (byte) 0, (long) (byte) 10, 10L, timestampType14, (long) (short) 10, (int) (short) 0, (int) (byte) 0, (java.lang.reflect.Type) wildcardClass33, timestampType47);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator60 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=null}", (int) (short) 0, (long) (byte) 1, (long) (short) 100, timestampType47, 0L, (int) (byte) 10, (int) (short) 100, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator60, "hi!");
        java.util.Optional<java.lang.Integer> intOptional63 = kafkaSpoutMessageIdComparatorConsumerRecord62.leaderEpoch();
        int int64 = kafkaSpoutMessageIdComparatorConsumerRecord62.partition();
        long long65 = kafkaSpoutMessageIdComparatorConsumerRecord62.offset();
        long long66 = kafkaSpoutMessageIdComparatorConsumerRecord62.checksum();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(intOptional63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1L + "'", long65 == 1L);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
    }

    @Test
    public void test1927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1927");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator6 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator6, "");
        org.apache.kafka.common.record.TimestampType timestampType9 = kafkaSpoutMessageIdComparatorConsumerRecord8.timestampType();
        long long10 = kafkaSpoutMessageIdComparatorConsumerRecord8.timestamp();
        java.lang.String str11 = kafkaSpoutMessageIdComparatorConsumerRecord8.value();
        java.lang.String str12 = kafkaSpoutMessageIdComparatorConsumerRecord8.toString();
        long long13 = kafkaSpoutMessageIdComparatorConsumerRecord8.checksum();
        int int14 = kafkaSpoutMessageIdComparatorConsumerRecord8.serializedKeySize();
        java.lang.String str15 = kafkaSpoutMessageIdComparatorConsumerRecord8.topic();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator16 = kafkaSpoutMessageIdComparatorConsumerRecord8.key();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord18 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=[]}", (int) (short) -1, (long) ' ', kafkaSpoutMessageIdComparator16, "");
        org.apache.kafka.common.record.TimestampType timestampType19 = kafkaSpoutMessageIdComparatorConsumerRecord18.timestampType();
        long long20 = kafkaSpoutMessageIdComparatorConsumerRecord18.checksum();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator21 = kafkaSpoutMessageIdComparatorConsumerRecord18.key();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator22 = kafkaSpoutMessageIdComparatorConsumerRecord18.key();
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator16);
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator21);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator22);
    }

    @Test
    public void test1928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1928");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>, java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> kafkaSpoutMessageIdComparatorConsumerRecordKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>, java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>();
        java.lang.Class<?> wildcardClass1 = kafkaSpoutMessageIdComparatorConsumerRecordKafkaSpout0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test1929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1929");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator14 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator14, "");
        org.apache.kafka.common.record.TimestampType timestampType17 = kafkaSpoutMessageIdComparatorConsumerRecord16.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator28 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator28, "");
        org.apache.kafka.common.record.TimestampType timestampType31 = kafkaSpoutMessageIdComparatorConsumerRecord30.timestampType();
        java.lang.Object obj35 = new java.lang.Object();
        java.lang.Class<?> wildcardClass36 = obj35.getClass();
        java.lang.Object obj37 = new java.lang.Object();
        java.lang.Class<?> wildcardClass38 = obj37.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType31, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass36, (java.lang.reflect.GenericDeclaration) wildcardClass38);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator47 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator47, "");
        org.apache.kafka.common.record.TimestampType timestampType50 = kafkaSpoutMessageIdComparatorConsumerRecord49.timestampType();
        java.lang.Object obj54 = new java.lang.Object();
        java.lang.Class<?> wildcardClass55 = obj54.getClass();
        java.lang.Object obj56 = new java.lang.Object();
        java.lang.Class<?> wildcardClass57 = obj56.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType50, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass55, (java.lang.reflect.GenericDeclaration) wildcardClass57);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("hi!", (int) (byte) 0, (long) (byte) 10, 10L, timestampType17, (long) (short) 10, (int) (short) 0, (int) (byte) 0, (java.lang.reflect.Type) wildcardClass36, timestampType50);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator66 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (-1), (long) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator66, "");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator73 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord75 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator73, "");
        java.lang.String str76 = kafkaSpoutMessageIdComparatorConsumerRecord75.topic();
        org.apache.kafka.common.header.Headers headers77 = kafkaSpoutMessageIdComparatorConsumerRecord75.headers();
        org.apache.kafka.common.header.Headers headers78 = kafkaSpoutMessageIdComparatorConsumerRecord75.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=null}", 100, (long) (byte) -1, (long) (byte) 1, timestampType17, (java.lang.Long) 100L, 0, (int) (byte) 10, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator66, "KafkaSpout{acked=null, emitted=null}", headers78);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator80 = offsetComparator66.reversed();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator81 = offsetComparator66.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator85 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator85, "");
        org.apache.kafka.common.record.TimestampType timestampType88 = kafkaSpoutMessageIdComparatorConsumerRecord87.timestampType();
        int int89 = kafkaSpoutMessageIdComparatorConsumerRecord87.serializedValueSize();
        java.lang.String str90 = kafkaSpoutMessageIdComparatorConsumerRecord87.value();
        java.lang.String str91 = kafkaSpoutMessageIdComparatorConsumerRecord87.value();
        int int92 = kafkaSpoutMessageIdComparatorConsumerRecord87.partition();
        java.lang.String str93 = kafkaSpoutMessageIdComparatorConsumerRecord87.value();
        java.util.Optional<java.lang.Integer> intOptional94 = kafkaSpoutMessageIdComparatorConsumerRecord87.leaderEpoch();
        int int95 = kafkaSpoutMessageIdComparatorConsumerRecord87.partition();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>> kafkaSpoutMessageIdComparatorConsumerRecord96 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>>("", (int) (short) 100, (long) (byte) -1, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator66, kafkaSpoutMessageIdComparatorConsumerRecord87);
        int int97 = kafkaSpoutMessageIdComparatorConsumerRecord87.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional98 = kafkaSpoutMessageIdComparatorConsumerRecord87.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType99 = kafkaSpoutMessageIdComparatorConsumerRecord87.timestampType();
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertTrue("'" + timestampType50 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType50.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(headers77);
        org.junit.Assert.assertNotNull(headers78);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator80);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator81);
        org.junit.Assert.assertTrue("'" + timestampType88 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType88.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 10 + "'", int92 == 10);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertNotNull(intOptional94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 10 + "'", int95 == 10);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + (-1) + "'", int97 == (-1));
        org.junit.Assert.assertNotNull(intOptional98);
        org.junit.Assert.assertTrue("'" + timestampType99 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType99.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test1930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1930");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator14 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator14, "");
        org.apache.kafka.common.record.TimestampType timestampType17 = kafkaSpoutMessageIdComparatorConsumerRecord16.timestampType();
        int int18 = kafkaSpoutMessageIdComparatorConsumerRecord16.serializedValueSize();
        java.lang.String str19 = kafkaSpoutMessageIdComparatorConsumerRecord16.value();
        java.lang.String str20 = kafkaSpoutMessageIdComparatorConsumerRecord16.value();
        org.apache.kafka.common.record.TimestampType timestampType21 = kafkaSpoutMessageIdComparatorConsumerRecord16.timestampType();
        int int22 = kafkaSpoutMessageIdComparatorConsumerRecord16.serializedKeySize();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator23 = kafkaSpoutMessageIdComparatorConsumerRecord16.key();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator30 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator30, "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (short) 100, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator30, "");
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator30;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator36 = kafkaSpoutMessageIdComparator23.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator30);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator41 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator41, "");
        int int44 = kafkaSpoutMessageIdComparatorConsumerRecord43.partition();
        long long45 = kafkaSpoutMessageIdComparatorConsumerRecord43.checksum();
        long long46 = kafkaSpoutMessageIdComparatorConsumerRecord43.timestamp();
        java.util.Optional<java.lang.Integer> intOptional47 = kafkaSpoutMessageIdComparatorConsumerRecord43.leaderEpoch();
        int int48 = kafkaSpoutMessageIdComparatorConsumerRecord43.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional49 = kafkaSpoutMessageIdComparatorConsumerRecord43.leaderEpoch();
        org.apache.kafka.common.header.Headers headers50 = kafkaSpoutMessageIdComparatorConsumerRecord43.headers();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator51 = kafkaSpoutMessageIdComparatorConsumerRecord43.key();
        org.apache.kafka.common.header.Headers headers52 = kafkaSpoutMessageIdComparatorConsumerRecord43.headers();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator56 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator56, "");
        java.lang.String str59 = kafkaSpoutMessageIdComparatorConsumerRecord58.topic();
        org.apache.kafka.common.header.Headers headers60 = kafkaSpoutMessageIdComparatorConsumerRecord58.headers();
        org.apache.kafka.common.header.Headers headers61 = kafkaSpoutMessageIdComparatorConsumerRecord58.headers();
        long long62 = kafkaSpoutMessageIdComparatorConsumerRecord58.timestamp();
        int int63 = kafkaSpoutMessageIdComparatorConsumerRecord58.serializedKeySize();
        java.lang.String str64 = kafkaSpoutMessageIdComparatorConsumerRecord58.topic();
        long long65 = kafkaSpoutMessageIdComparatorConsumerRecord58.offset();
        java.util.Optional<java.lang.Integer> intOptional66 = kafkaSpoutMessageIdComparatorConsumerRecord58.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("hi!", 35, 0L, (long) (short) -1, timestampType7, (java.lang.Long) (-1L), (int) (short) 100, 10, kafkaSpoutMessageIdComparator36, "hi!", headers52, intOptional66);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord69 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", 52, (long) '#', kafkaSpoutMessageIdComparator36, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator23);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator36);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-1L) + "'", long45 == (-1L));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1L) + "'", long46 == (-1L));
        org.junit.Assert.assertNotNull(intOptional47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(intOptional49);
        org.junit.Assert.assertNotNull(headers50);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator51);
        org.junit.Assert.assertNotNull(headers52);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(headers60);
        org.junit.Assert.assertNotNull(headers61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-1L) + "'", long62 == (-1L));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertNotNull(intOptional66);
    }

    @Test
    public void test1931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1931");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>();
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService1 = null;
        genericDeclarationKafkaSpout0.retryService = kafkaSpoutRetryService1;
        org.apache.kafka.clients.consumer.KafkaConsumer<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaConsumer3 = genericDeclarationKafkaSpout0.kafkaConsumer;
        org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy firstPollOffsetStrategy4 = null;
        genericDeclarationKafkaSpout0.firstPollOffsetStrategy = firstPollOffsetStrategy4;
        org.apache.kafka.clients.consumer.KafkaConsumer<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaConsumer6 = null;
        genericDeclarationKafkaSpout0.kafkaConsumer = genericDeclarationKafkaConsumer6;
        boolean boolean8 = genericDeclarationKafkaSpout0.consumerAutoCommitMode;
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>.Timer timer9 = genericDeclarationKafkaSpout0.commitTimer;
        org.apache.kafka.clients.consumer.ConsumerRecords<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationConsumerRecords10 = null;
        // The following exception was thrown during execution in test generation
        try {
            genericDeclarationKafkaSpout0.setWaitingToEmit(genericDeclarationConsumerRecords10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(genericDeclarationKafkaConsumer3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(timer9);
    }

    @Test
    public void test1932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1932");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>();
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService1 = null;
        genericDeclarationKafkaSpout0.retryService = kafkaSpoutRetryService1;
        long long3 = genericDeclarationKafkaSpout0.numUncommittedOffsets;
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService4 = null;
        genericDeclarationKafkaSpout0.retryService = kafkaSpoutRetryService4;
        org.apache.kafka.clients.consumer.KafkaConsumer<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaConsumer6 = null;
        genericDeclarationKafkaSpout0.kafkaConsumer = genericDeclarationKafkaConsumer6;
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>.Timer timer8 = genericDeclarationKafkaSpout0.commitTimer;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = genericDeclarationKafkaSpout0.getWildCardTopics();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNull(timer8);
    }

    @Test
    public void test1933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1933");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        java.util.concurrent.TimeUnit timeUnit3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout<java.lang.String, java.lang.CharSequence>.Timer, java.lang.reflect.Type>.Timer timer4 = kafkaSpout0.new Timer((long) 'a', 1L, timeUnit3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$Timer with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1934");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.spout.ISpout, java.util.Optional<java.lang.Integer>> iSpoutKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.spout.ISpout, java.util.Optional<java.lang.Integer>> iSpoutKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.spout.ISpout, java.util.Optional<java.lang.Integer>>(iSpoutKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1935");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>> genericDeclarationConsumerRecordItor1 = genericDeclarationKafkaSpout0.waitingToEmit;
        genericDeclarationKafkaSpout0.numUncommittedOffsets = (short) 10;
        org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy firstPollOffsetStrategy4 = genericDeclarationKafkaSpout0.firstPollOffsetStrategy;
        org.junit.Assert.assertNull(genericDeclarationConsumerRecordItor1);
        org.junit.Assert.assertNull(firstPollOffsetStrategy4);
    }

    @Test
    public void test1936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1936");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        org.apache.kafka.common.record.TimestampType timestampType10 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        java.lang.String str11 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str12 = kafkaSpoutMessageIdComparatorConsumerRecord5.toString();
        java.util.Optional<java.lang.Integer> intOptional13 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        int int14 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        int int15 = kafkaSpoutMessageIdComparatorConsumerRecord5.partition();
        long long16 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
    }

    @Test
    public void test1937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1937");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        int int9 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str10 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        java.lang.String str11 = kafkaSpoutMessageIdComparatorConsumerRecord5.toString();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test1938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1938");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        long long9 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        java.lang.String str10 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator11 = kafkaSpoutMessageIdComparatorConsumerRecord5.key();
        int int12 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        long long13 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        int int14 = kafkaSpoutMessageIdComparatorConsumerRecord5.partition();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
    }

    @Test
    public void test1939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1939");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>();
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService1 = null;
        genericDeclarationKafkaSpout0.retryService = kafkaSpoutRetryService1;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray3 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet4 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet4, kafkaSpoutMessageIdArray3);
        genericDeclarationKafkaSpout0.emitted = kafkaSpoutMessageIdSet4;
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>.Timer timer7 = genericDeclarationKafkaSpout0.commitTimer;
        org.apache.storm.kafka.spout.KafkaSpoutStreams kafkaSpoutStreams8 = genericDeclarationKafkaSpout0.kafkaSpoutStreams;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>> genericDeclarationConsumerRecordItor9 = genericDeclarationKafkaSpout0.waitingToEmit;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.kafka.clients.consumer.ConsumerRecords<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationConsumerRecords10 = genericDeclarationKafkaSpout0.pollKafkaBroker();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(timer7);
        org.junit.Assert.assertNull(kafkaSpoutStreams8);
        org.junit.Assert.assertNull(genericDeclarationConsumerRecordItor9);
    }

    @Test
    public void test1940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1940");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        org.apache.kafka.common.record.TimestampType timestampType10 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        java.lang.String str11 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str12 = kafkaSpoutMessageIdComparatorConsumerRecord5.toString();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator13 = kafkaSpoutMessageIdComparatorConsumerRecord5.key();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator13);
    }

    @Test
    public void test1941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1941");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>();
        org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy firstPollOffsetStrategy1 = genericDeclarationKafkaSpout0.firstPollOffsetStrategy;
        java.util.Set<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet2 = genericDeclarationKafkaSpout0.emitted;
        genericDeclarationKafkaSpout0.numUncommittedOffsets = (byte) 100;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>> genericDeclarationConsumerRecordItor5 = null;
        genericDeclarationKafkaSpout0.waitingToEmit = genericDeclarationConsumerRecordItor5;
        // The following exception was thrown during execution in test generation
        try {
            genericDeclarationKafkaSpout0.deactivate();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(firstPollOffsetStrategy1);
        org.junit.Assert.assertNull(kafkaSpoutMessageIdSet2);
    }

    @Test
    public void test1942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1942");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator9 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord11 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator9, "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (short) 100, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator9, "");
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator9;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator15 = offsetComparator9.reversed();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("hi!", (int) 'a', (long) 1, kafkaSpoutMessageIdComparator15, "");
        org.apache.kafka.common.record.TimestampType timestampType18 = kafkaSpoutMessageIdComparatorConsumerRecord17.timestampType();
        long long19 = kafkaSpoutMessageIdComparatorConsumerRecord17.timestamp();
        java.lang.String str20 = kafkaSpoutMessageIdComparatorConsumerRecord17.value();
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator15);
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test1943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1943");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        java.lang.String str6 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator7 = kafkaSpoutMessageIdComparatorConsumerRecord5.key();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator8 = kafkaSpoutMessageIdComparator7.reversed();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator9 = kafkaSpoutMessageIdComparator7.reversed();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator10 = kafkaSpoutMessageIdComparator7.reversed();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator7);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator8);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator9);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator10);
    }

    @Test
    public void test1944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1944");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        int int6 = kafkaSpoutMessageIdComparatorConsumerRecord5.partition();
        long long7 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        long long8 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        java.util.Optional<java.lang.Integer> intOptional9 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        long long10 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        long long11 = kafkaSpoutMessageIdComparatorConsumerRecord5.offset();
        org.apache.kafka.common.record.TimestampType timestampType12 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int13 = kafkaSpoutMessageIdComparatorConsumerRecord5.partition();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator14 = kafkaSpoutMessageIdComparatorConsumerRecord5.key();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertNotNull(intOptional9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator14);
    }

    @Test
    public void test1945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1945");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        java.lang.String str6 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        org.apache.kafka.common.header.Headers headers7 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        org.apache.kafka.common.header.Headers headers8 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord5.toString();
        int int10 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedKeySize();
        int int11 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedKeySize();
        long long12 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(headers7);
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
    }

    @Test
    public void test1946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1946");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        long long6 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        java.lang.String str7 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        long long8 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        org.apache.kafka.common.header.Headers headers9 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        org.apache.kafka.common.header.Headers headers10 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        org.apache.kafka.common.record.TimestampType timestampType11 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertNotNull(headers9);
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test1947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1947");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        int int6 = kafkaSpoutMessageIdComparatorConsumerRecord5.partition();
        long long7 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        long long8 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        java.util.Optional<java.lang.Integer> intOptional9 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        long long10 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        org.apache.kafka.common.record.TimestampType timestampType11 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator12 = kafkaSpoutMessageIdComparatorConsumerRecord5.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        java.lang.String str14 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertNotNull(intOptional9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator12);
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test1948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1948");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator7 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator7, "");
        org.apache.kafka.common.record.TimestampType timestampType10 = kafkaSpoutMessageIdComparatorConsumerRecord9.timestampType();
        long long11 = kafkaSpoutMessageIdComparatorConsumerRecord9.timestamp();
        long long12 = kafkaSpoutMessageIdComparatorConsumerRecord9.offset();
        java.lang.String str13 = kafkaSpoutMessageIdComparatorConsumerRecord9.value();
        org.apache.kafka.common.record.TimestampType timestampType14 = kafkaSpoutMessageIdComparatorConsumerRecord9.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator21 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator21, "");
        org.apache.kafka.common.record.TimestampType timestampType24 = kafkaSpoutMessageIdComparatorConsumerRecord23.timestampType();
        int int25 = kafkaSpoutMessageIdComparatorConsumerRecord23.serializedValueSize();
        java.lang.String str26 = kafkaSpoutMessageIdComparatorConsumerRecord23.value();
        java.lang.String str27 = kafkaSpoutMessageIdComparatorConsumerRecord23.value();
        org.apache.kafka.common.record.TimestampType timestampType28 = kafkaSpoutMessageIdComparatorConsumerRecord23.timestampType();
        int int29 = kafkaSpoutMessageIdComparatorConsumerRecord23.serializedKeySize();
        long long30 = kafkaSpoutMessageIdComparatorConsumerRecord23.offset();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator31 = kafkaSpoutMessageIdComparatorConsumerRecord23.key();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator31;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator37 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator37, "");
        java.lang.String str40 = kafkaSpoutMessageIdComparatorConsumerRecord39.topic();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator41 = kafkaSpoutMessageIdComparatorConsumerRecord39.key();
        java.lang.String str42 = kafkaSpoutMessageIdComparatorConsumerRecord39.topic();
        java.lang.String str43 = kafkaSpoutMessageIdComparatorConsumerRecord39.toString();
        long long44 = kafkaSpoutMessageIdComparatorConsumerRecord39.offset();
        org.apache.kafka.common.header.Headers headers45 = kafkaSpoutMessageIdComparatorConsumerRecord39.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("hi!", (int) (short) -1, (long) 97, (long) 32, timestampType14, (java.lang.Long) 10L, (int) (short) 100, (-1), kafkaSpoutMessageIdComparator31, "hi!", headers45);
        int int47 = kafkaSpoutMessageIdComparatorConsumerRecord46.serializedKeySize();
        int int48 = kafkaSpoutMessageIdComparatorConsumerRecord46.serializedKeySize();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType24 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType24.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator31);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(headers45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 100 + "'", int48 == 100);
    }

    @Test
    public void test1949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1949");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout<java.lang.String, java.lang.CharSequence>.Timer, org.apache.storm.topology.base.BaseRichSpout>.Timer timer1 = kafkaSpout0.new Timer();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$Timer with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1950");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.Type, java.lang.Comparable<java.lang.String>> typeKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.Type, java.lang.Comparable<java.lang.String>>();
    }

    @Test
    public void test1951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1951");
        org.apache.storm.kafka.spout.KafkaSpout<java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> kafkaSpoutMessageIdSetKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>();
    }

    @Test
    public void test1952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1952");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        org.apache.kafka.common.record.TimestampType timestampType10 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int11 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedKeySize();
        long long12 = kafkaSpoutMessageIdComparatorConsumerRecord5.offset();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator13 = kafkaSpoutMessageIdComparatorConsumerRecord5.key();
        long long14 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        long long15 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
    }

    @Test
    public void test1953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1953");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IRichSpout, java.util.ArrayList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> iRichSpoutKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IRichSpout, java.util.ArrayList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>();
    }

    @Test
    public void test1954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1954");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator6 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator6, "");
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord8.topic();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator10 = kafkaSpoutMessageIdComparatorConsumerRecord8.key();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator11 = kafkaSpoutMessageIdComparator10.reversed();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (short) 10, 0L, kafkaSpoutMessageIdComparator11, "hi!");
        long long14 = kafkaSpoutMessageIdComparatorConsumerRecord13.checksum();
        java.util.Optional<java.lang.Integer> intOptional15 = kafkaSpoutMessageIdComparatorConsumerRecord13.leaderEpoch();
        java.lang.String str16 = kafkaSpoutMessageIdComparatorConsumerRecord13.value();
        int int17 = kafkaSpoutMessageIdComparatorConsumerRecord13.partition();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator10);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
    }

    @Test
    public void test1955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1955");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        long long7 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        long long8 = kafkaSpoutMessageIdComparatorConsumerRecord5.offset();
        org.apache.kafka.common.header.Headers headers9 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        org.apache.kafka.common.header.Headers headers10 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        java.lang.String str11 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        org.apache.kafka.common.header.Headers headers12 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        long long13 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(headers9);
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(headers12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
    }

    @Test
    public void test1956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1956");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        org.apache.kafka.common.record.TimestampType timestampType10 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int11 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedKeySize();
        long long12 = kafkaSpoutMessageIdComparatorConsumerRecord5.offset();
        long long13 = kafkaSpoutMessageIdComparatorConsumerRecord5.offset();
        org.apache.kafka.common.record.TimestampType timestampType14 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int15 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType16 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test1957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1957");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.Object, java.lang.reflect.AnnotatedElement> objKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.Object, java.lang.reflect.AnnotatedElement>();
    }

    @Test
    public void test1958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1958");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator6 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator6, "");
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord8.topic();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator10 = kafkaSpoutMessageIdComparatorConsumerRecord8.key();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator11 = kafkaSpoutMessageIdComparator10.reversed();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=[]}", (int) (byte) -1, (long) 0, kafkaSpoutMessageIdComparator10, "");
        java.util.Optional<java.lang.Integer> intOptional14 = kafkaSpoutMessageIdComparatorConsumerRecord13.leaderEpoch();
        java.lang.Class<?> wildcardClass15 = kafkaSpoutMessageIdComparatorConsumerRecord13.getClass();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator10);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator11);
        org.junit.Assert.assertNotNull(intOptional14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1959");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator11 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator11, "");
        org.apache.kafka.common.record.TimestampType timestampType14 = kafkaSpoutMessageIdComparatorConsumerRecord13.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator21 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator21, "");
        org.apache.kafka.common.record.TimestampType timestampType24 = kafkaSpoutMessageIdComparatorConsumerRecord23.timestampType();
        int int25 = kafkaSpoutMessageIdComparatorConsumerRecord23.serializedValueSize();
        java.lang.String str26 = kafkaSpoutMessageIdComparatorConsumerRecord23.value();
        int int27 = kafkaSpoutMessageIdComparatorConsumerRecord23.partition();
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpout28 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>();
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService29 = null;
        genericDeclarationKafkaSpout28.retryService = kafkaSpoutRetryService29;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray31 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet32 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet32, kafkaSpoutMessageIdArray31);
        genericDeclarationKafkaSpout28.emitted = kafkaSpoutMessageIdSet32;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> objConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>("", (int) (byte) -1, 1L, 0L, timestampType14, (long) (short) -1, (int) 'a', (int) (short) 0, (java.lang.Object) int27, (java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet32);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator42 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator42, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator45 = offsetComparator42.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator42;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=[]}", (-1), (long) ' ', (long) '#', timestampType14, 10L, 0, 32, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator42, "KafkaSpout{acked=null, emitted=null}");
        org.apache.kafka.common.header.Headers headers49 = kafkaSpoutMessageIdComparatorConsumerRecord48.headers();
        java.lang.String str50 = kafkaSpoutMessageIdComparatorConsumerRecord48.topic();
        org.apache.kafka.common.record.TimestampType timestampType51 = kafkaSpoutMessageIdComparatorConsumerRecord48.timestampType();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType24 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType24.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator45);
        org.junit.Assert.assertNotNull(headers49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "KafkaSpout{acked=null, emitted=[]}" + "'", str50, "KafkaSpout{acked=null, emitted=[]}");
        org.junit.Assert.assertTrue("'" + timestampType51 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType51.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test1960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1960");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        org.apache.kafka.common.record.TimestampType timestampType10 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int11 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedKeySize();
        long long12 = kafkaSpoutMessageIdComparatorConsumerRecord5.offset();
        long long13 = kafkaSpoutMessageIdComparatorConsumerRecord5.offset();
        long long14 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        org.apache.kafka.common.header.Headers headers15 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        int int16 = kafkaSpoutMessageIdComparatorConsumerRecord5.partition();
        long long17 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
    }

    @Test
    public void test1961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1961");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.topology.base.BaseRichSpout, java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> baseRichSpoutKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.base.BaseRichSpout, java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> baseRichSpoutKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.base.BaseRichSpout, java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>(baseRichSpoutKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1962");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator7 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator7, "");
        org.apache.kafka.common.record.TimestampType timestampType10 = kafkaSpoutMessageIdComparatorConsumerRecord9.timestampType();
        long long11 = kafkaSpoutMessageIdComparatorConsumerRecord9.timestamp();
        java.lang.String str12 = kafkaSpoutMessageIdComparatorConsumerRecord9.value();
        java.lang.String str13 = kafkaSpoutMessageIdComparatorConsumerRecord9.toString();
        long long14 = kafkaSpoutMessageIdComparatorConsumerRecord9.checksum();
        int int15 = kafkaSpoutMessageIdComparatorConsumerRecord9.serializedKeySize();
        java.lang.String str16 = kafkaSpoutMessageIdComparatorConsumerRecord9.topic();
        long long17 = kafkaSpoutMessageIdComparatorConsumerRecord9.timestamp();
        int int18 = kafkaSpoutMessageIdComparatorConsumerRecord9.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType19 = kafkaSpoutMessageIdComparatorConsumerRecord9.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator29 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (-1), (long) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator29, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator32 = offsetComparator29.reversed();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("hi!", 0, (long) 1, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator29, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator35 = org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator36 = kafkaSpoutMessageIdComparator35.reversed();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator37 = offsetComparator29.thenComparing(kafkaSpoutMessageIdComparator35);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator38 = kafkaSpoutMessageIdComparator37.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator42 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator42, "");
        java.lang.String str45 = kafkaSpoutMessageIdComparatorConsumerRecord44.topic();
        java.util.Optional<java.lang.Integer> intOptional46 = kafkaSpoutMessageIdComparatorConsumerRecord44.leaderEpoch();
        long long47 = kafkaSpoutMessageIdComparatorConsumerRecord44.checksum();
        java.lang.String str48 = kafkaSpoutMessageIdComparatorConsumerRecord44.topic();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator49 = kafkaSpoutMessageIdComparatorConsumerRecord44.key();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator50 = kafkaSpoutMessageIdComparator37.thenComparing(kafkaSpoutMessageIdComparator49);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord52 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("hi!", (int) (byte) 10, 97L, 10L, timestampType19, (long) (byte) 10, 100, 32, kafkaSpoutMessageIdComparator50, "ConsumerRecord(topic = KafkaSpout{acked=null, emitted=[]}, partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = 1, serialized key size = 97, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = KafkaSpout{acked=null, emitted=[]})");
        long long53 = kafkaSpoutMessageIdComparatorConsumerRecord52.timestamp();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator32);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator35);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator36);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator37);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator38);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(intOptional46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-1L) + "'", long47 == (-1L));
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator49);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator50);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 10L + "'", long53 == 10L);
    }

    @Test
    public void test1963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1963");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        int int9 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str10 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        int int11 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedKeySize();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator12 = kafkaSpoutMessageIdComparatorConsumerRecord5.key();
        java.lang.String str13 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator14 = kafkaSpoutMessageIdComparatorConsumerRecord5.key();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator14);
    }

    @Test
    public void test1964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1964");
        org.apache.storm.kafka.spout.KafkaSpout<java.io.Serializable, org.apache.storm.topology.IRichSpout> serializableKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.io.Serializable, org.apache.storm.topology.IRichSpout>();
    }

    @Test
    public void test1965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1965");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator11 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator11, "");
        org.apache.kafka.common.record.TimestampType timestampType14 = kafkaSpoutMessageIdComparatorConsumerRecord13.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator25 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator25, "");
        org.apache.kafka.common.record.TimestampType timestampType28 = kafkaSpoutMessageIdComparatorConsumerRecord27.timestampType();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        java.lang.Object obj34 = new java.lang.Object();
        java.lang.Class<?> wildcardClass35 = obj34.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType28, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass33, (java.lang.reflect.GenericDeclaration) wildcardClass35);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator44 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator44, "");
        org.apache.kafka.common.record.TimestampType timestampType47 = kafkaSpoutMessageIdComparatorConsumerRecord46.timestampType();
        java.lang.Object obj51 = new java.lang.Object();
        java.lang.Class<?> wildcardClass52 = obj51.getClass();
        java.lang.Object obj53 = new java.lang.Object();
        java.lang.Class<?> wildcardClass54 = obj53.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType47, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass52, (java.lang.reflect.GenericDeclaration) wildcardClass54);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("hi!", (int) (byte) 0, (long) (byte) 10, 10L, timestampType14, (long) (short) 10, (int) (short) 0, (int) (byte) 0, (java.lang.reflect.Type) wildcardClass33, timestampType47);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator63 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord65 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (-1), (long) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator63, "");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator70 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator70, "");
        java.lang.String str73 = kafkaSpoutMessageIdComparatorConsumerRecord72.topic();
        org.apache.kafka.common.header.Headers headers74 = kafkaSpoutMessageIdComparatorConsumerRecord72.headers();
        org.apache.kafka.common.header.Headers headers75 = kafkaSpoutMessageIdComparatorConsumerRecord72.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=null}", 100, (long) (byte) -1, (long) (byte) 1, timestampType14, (java.lang.Long) 100L, 0, (int) (byte) 10, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator63, "KafkaSpout{acked=null, emitted=null}", headers75);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator77 = offsetComparator63.reversed();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator78 = kafkaSpoutMessageIdComparator77.reversed();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(headers74);
        org.junit.Assert.assertNotNull(headers75);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator77);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator78);
    }

    @Test
    public void test1966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1966");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout<java.lang.String, java.lang.CharSequence>.Timer, java.util.AbstractCollection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> timerKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout<java.lang.String, java.lang.CharSequence>.Timer, java.util.AbstractCollection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>();
    }

    @Test
    public void test1967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1967");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        java.util.concurrent.TimeUnit timeUnit3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.lang.Cloneable, org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>>.Timer timer4 = kafkaSpout0.new Timer(100L, (long) (-1), timeUnit3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$Timer with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1968");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdCollectionKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdCollectionKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>(kafkaSpoutMessageIdCollectionKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1969");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator6 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator6, "");
        org.apache.kafka.common.record.TimestampType timestampType9 = kafkaSpoutMessageIdComparatorConsumerRecord8.timestampType();
        java.lang.String str10 = kafkaSpoutMessageIdComparatorConsumerRecord8.value();
        int int11 = kafkaSpoutMessageIdComparatorConsumerRecord8.serializedValueSize();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator12 = kafkaSpoutMessageIdComparatorConsumerRecord8.key();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord14 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=null}", (int) (byte) 0, (long) (short) 1, kafkaSpoutMessageIdComparator12, "KafkaSpout{acked=null, emitted=[]}");
        int int15 = kafkaSpoutMessageIdComparatorConsumerRecord14.serializedValueSize();
        long long16 = kafkaSpoutMessageIdComparatorConsumerRecord14.timestamp();
        java.lang.String str17 = kafkaSpoutMessageIdComparatorConsumerRecord14.topic();
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "KafkaSpout{acked=null, emitted=null}" + "'", str17, "KafkaSpout{acked=null, emitted=null}");
    }

    @Test
    public void test1970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1970");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator6 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator6, "");
        org.apache.kafka.common.record.TimestampType timestampType9 = kafkaSpoutMessageIdComparatorConsumerRecord8.timestampType();
        long long10 = kafkaSpoutMessageIdComparatorConsumerRecord8.timestamp();
        java.lang.String str11 = kafkaSpoutMessageIdComparatorConsumerRecord8.value();
        java.lang.String str12 = kafkaSpoutMessageIdComparatorConsumerRecord8.toString();
        long long13 = kafkaSpoutMessageIdComparatorConsumerRecord8.checksum();
        int int14 = kafkaSpoutMessageIdComparatorConsumerRecord8.serializedKeySize();
        java.lang.String str15 = kafkaSpoutMessageIdComparatorConsumerRecord8.topic();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator16 = kafkaSpoutMessageIdComparatorConsumerRecord8.key();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord18 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=[]}", (int) (short) -1, (long) ' ', kafkaSpoutMessageIdComparator16, "");
        org.apache.kafka.common.record.TimestampType timestampType19 = kafkaSpoutMessageIdComparatorConsumerRecord18.timestampType();
        java.lang.String str20 = kafkaSpoutMessageIdComparatorConsumerRecord18.topic();
        int int21 = kafkaSpoutMessageIdComparatorConsumerRecord18.serializedKeySize();
        long long22 = kafkaSpoutMessageIdComparatorConsumerRecord18.timestamp();
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator16);
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "KafkaSpout{acked=null, emitted=[]}" + "'", str20, "KafkaSpout{acked=null, emitted=[]}");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
    }

    @Test
    public void test1971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1971");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        java.lang.String str6 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        java.util.Optional<java.lang.Integer> intOptional7 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        long long8 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        java.lang.String str10 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        java.util.Optional<java.lang.Integer> intOptional11 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType12 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int13 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(intOptional7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(intOptional11);
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test1972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1972");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator11 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator11, "");
        org.apache.kafka.common.record.TimestampType timestampType14 = kafkaSpoutMessageIdComparatorConsumerRecord13.timestampType();
        int int15 = kafkaSpoutMessageIdComparatorConsumerRecord13.serializedValueSize();
        java.lang.String str16 = kafkaSpoutMessageIdComparatorConsumerRecord13.value();
        java.lang.String str17 = kafkaSpoutMessageIdComparatorConsumerRecord13.value();
        org.apache.kafka.common.record.TimestampType timestampType18 = kafkaSpoutMessageIdComparatorConsumerRecord13.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator25 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (-1), (long) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator25, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator28 = offsetComparator25.reversed();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator29 = offsetComparator25.reversed();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=null}", (int) (short) -1, (long) 0, (long) (-1), timestampType18, (long) 100, (int) (byte) 10, (int) '#', kafkaSpoutMessageIdComparator29, "KafkaSpout{acked=null, emitted=null}");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator40 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator40, "");
        org.apache.kafka.common.record.TimestampType timestampType43 = kafkaSpoutMessageIdComparatorConsumerRecord42.timestampType();
        int int44 = kafkaSpoutMessageIdComparatorConsumerRecord42.serializedValueSize();
        java.lang.String str45 = kafkaSpoutMessageIdComparatorConsumerRecord42.value();
        long long46 = kafkaSpoutMessageIdComparatorConsumerRecord42.checksum();
        long long47 = kafkaSpoutMessageIdComparatorConsumerRecord42.timestamp();
        org.apache.kafka.common.header.Headers headers48 = kafkaSpoutMessageIdComparatorConsumerRecord42.headers();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator52 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator52, "");
        int int55 = kafkaSpoutMessageIdComparatorConsumerRecord54.partition();
        long long56 = kafkaSpoutMessageIdComparatorConsumerRecord54.checksum();
        int int57 = kafkaSpoutMessageIdComparatorConsumerRecord54.partition();
        java.lang.String str58 = kafkaSpoutMessageIdComparatorConsumerRecord54.topic();
        java.lang.String str59 = kafkaSpoutMessageIdComparatorConsumerRecord54.topic();
        org.apache.kafka.common.header.Headers headers60 = kafkaSpoutMessageIdComparatorConsumerRecord54.headers();
        java.util.Optional<java.lang.Integer> intOptional61 = kafkaSpoutMessageIdComparatorConsumerRecord54.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.CharSequence> strConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.CharSequence>("KafkaSpout{acked=null, emitted=[]}", 0, (long) (short) 1, 1L, timestampType18, (java.lang.Long) 97L, 35, 32, "hi!", (java.lang.CharSequence) "ConsumerRecord(topic = KafkaSpout{acked=null, emitted=[]}, partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = 1, serialized key size = 97, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = KafkaSpout{acked=null, emitted=[]})", headers48, intOptional61);
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator28);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator29);
        org.junit.Assert.assertTrue("'" + timestampType43 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType43.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1L) + "'", long46 == (-1L));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-1L) + "'", long47 == (-1L));
        org.junit.Assert.assertNotNull(headers48);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-1L) + "'", long56 == (-1L));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(headers60);
        org.junit.Assert.assertNotNull(intOptional61);
    }

    @Test
    public void test1973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1973");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        int int9 = kafkaSpoutMessageIdComparatorConsumerRecord5.partition();
        int int10 = kafkaSpoutMessageIdComparatorConsumerRecord5.partition();
        long long11 = kafkaSpoutMessageIdComparatorConsumerRecord5.offset();
        int int12 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        int int13 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test1974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1974");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.lang.CharSequence, java.lang.reflect.GenericDeclaration> charSequenceKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.lang.CharSequence, java.lang.reflect.GenericDeclaration> charSequenceKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.CharSequence, java.lang.reflect.GenericDeclaration>(charSequenceKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1975");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        int int6 = kafkaSpoutMessageIdComparatorConsumerRecord5.partition();
        long long7 = kafkaSpoutMessageIdComparatorConsumerRecord5.checksum();
        long long8 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        java.util.Optional<java.lang.Integer> intOptional9 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        int int10 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator11 = kafkaSpoutMessageIdComparatorConsumerRecord5.key();
        long long12 = kafkaSpoutMessageIdComparatorConsumerRecord5.offset();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertNotNull(intOptional9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test1976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1976");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator9 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord11 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator9, "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (short) 100, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator9, "");
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator9;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator15 = offsetComparator9.reversed();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=null}", (int) (byte) 0, (long) (byte) 1, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator9, "KafkaSpout{acked=null, emitted=[]}");
        long long18 = kafkaSpoutMessageIdComparatorConsumerRecord17.timestamp();
        int int19 = kafkaSpoutMessageIdComparatorConsumerRecord17.serializedKeySize();
        long long20 = kafkaSpoutMessageIdComparatorConsumerRecord17.checksum();
        long long21 = kafkaSpoutMessageIdComparatorConsumerRecord17.timestamp();
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
    }

    @Test
    public void test1977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1977");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        java.lang.String str6 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        org.apache.kafka.common.header.Headers headers7 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.toString();
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        java.lang.String str10 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(headers7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test1978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1978");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator11 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator11, "");
        org.apache.kafka.common.record.TimestampType timestampType14 = kafkaSpoutMessageIdComparatorConsumerRecord13.timestampType();
        int int15 = kafkaSpoutMessageIdComparatorConsumerRecord13.serializedValueSize();
        java.lang.String str16 = kafkaSpoutMessageIdComparatorConsumerRecord13.value();
        java.lang.String str17 = kafkaSpoutMessageIdComparatorConsumerRecord13.value();
        java.lang.String str18 = kafkaSpoutMessageIdComparatorConsumerRecord13.value();
        org.apache.kafka.common.record.TimestampType timestampType19 = kafkaSpoutMessageIdComparatorConsumerRecord13.timestampType();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator23 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=null}", (int) (short) -1, (long) 97, 32L, timestampType19, (long) (byte) 0, 100, (int) '4', kafkaSpoutMessageIdComparator23, "");
        int int26 = kafkaSpoutMessageIdComparatorConsumerRecord25.partition();
        org.apache.kafka.common.record.TimestampType timestampType27 = kafkaSpoutMessageIdComparatorConsumerRecord25.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator37 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator37, "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (short) 100, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator37, "");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator46 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator46, "");
        long long49 = kafkaSpoutMessageIdComparatorConsumerRecord48.checksum();
        java.lang.String str50 = kafkaSpoutMessageIdComparatorConsumerRecord48.topic();
        long long51 = kafkaSpoutMessageIdComparatorConsumerRecord48.timestamp();
        org.apache.kafka.common.header.Headers headers52 = kafkaSpoutMessageIdComparatorConsumerRecord48.headers();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator56 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator56, "");
        org.apache.kafka.common.record.TimestampType timestampType59 = kafkaSpoutMessageIdComparatorConsumerRecord58.timestampType();
        int int60 = kafkaSpoutMessageIdComparatorConsumerRecord58.serializedValueSize();
        java.lang.String str61 = kafkaSpoutMessageIdComparatorConsumerRecord58.value();
        java.lang.String str62 = kafkaSpoutMessageIdComparatorConsumerRecord58.value();
        java.lang.String str63 = kafkaSpoutMessageIdComparatorConsumerRecord58.value();
        java.lang.String str64 = kafkaSpoutMessageIdComparatorConsumerRecord58.value();
        java.lang.String str65 = kafkaSpoutMessageIdComparatorConsumerRecord58.topic();
        java.lang.String str66 = kafkaSpoutMessageIdComparatorConsumerRecord58.toString();
        org.apache.kafka.common.record.TimestampType timestampType67 = kafkaSpoutMessageIdComparatorConsumerRecord58.timestampType();
        long long68 = kafkaSpoutMessageIdComparatorConsumerRecord58.offset();
        java.lang.String str69 = kafkaSpoutMessageIdComparatorConsumerRecord58.toString();
        java.util.Optional<java.lang.Integer> intOptional70 = kafkaSpoutMessageIdComparatorConsumerRecord58.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=[]}", 32, (long) (-1), 1L, timestampType27, (java.lang.Long) (-1L), 1, (-1), (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator37, "hi!", headers52, intOptional70);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId72 = null;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId73 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int74 = offsetComparator37.compare(kafkaSpoutMessageId72, kafkaSpoutMessageId73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType27 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType27.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-1L) + "'", long49 == (-1L));
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-1L) + "'", long51 == (-1L));
        org.junit.Assert.assertNotNull(headers52);
        org.junit.Assert.assertTrue("'" + timestampType59 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType59.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertTrue("'" + timestampType67 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType67.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertNotNull(intOptional70);
    }

    @Test
    public void test1979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1979");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.CharSequence, java.lang.Iterable<org.apache.kafka.common.header.Header>> charSequenceKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.CharSequence, java.lang.Iterable<org.apache.kafka.common.header.Header>>();
    }

    @Test
    public void test1980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1980");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>();
        org.apache.kafka.clients.consumer.KafkaConsumer<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaConsumer1 = genericDeclarationKafkaSpout0.kafkaConsumer;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>> genericDeclarationConsumerRecordItor2 = genericDeclarationKafkaSpout0.waitingToEmit;
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpoutConfig3 = genericDeclarationKafkaSpout0.kafkaSpoutConfig;
        org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy firstPollOffsetStrategy4 = null;
        genericDeclarationKafkaSpout0.firstPollOffsetStrategy = firstPollOffsetStrategy4;
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService6 = genericDeclarationKafkaSpout0.retryService;
        org.apache.kafka.clients.consumer.KafkaConsumer<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaConsumer7 = genericDeclarationKafkaSpout0.kafkaConsumer;
        // The following exception was thrown during execution in test generation
        try {
            genericDeclarationKafkaSpout0.subscribeKafkaConsumer();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(genericDeclarationKafkaConsumer1);
        org.junit.Assert.assertNull(genericDeclarationConsumerRecordItor2);
        org.junit.Assert.assertNull(genericDeclarationKafkaSpoutConfig3);
        org.junit.Assert.assertNull(kafkaSpoutRetryService6);
        org.junit.Assert.assertNull(genericDeclarationKafkaConsumer7);
    }

    @Test
    public void test1981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1981");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, java.util.Optional<java.lang.Integer>> iComponentKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, java.util.Optional<java.lang.Integer>>();
    }

    @Test
    public void test1982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1982");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator9 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord11 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator9, "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", 10, (long) (-1), (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator9, "");
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator9;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) 35, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator9, "KafkaSpout{acked=null, emitted=[]}");
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId17 = null;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId18 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int19 = offsetComparator9.compare(kafkaSpoutMessageId17, kafkaSpoutMessageId18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1983");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        int int9 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str10 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        int int11 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedKeySize();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator12 = kafkaSpoutMessageIdComparatorConsumerRecord5.key();
        long long13 = kafkaSpoutMessageIdComparatorConsumerRecord5.offset();
        java.lang.String str14 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        int int15 = kafkaSpoutMessageIdComparatorConsumerRecord5.partition();
        int int16 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test1984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1984");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator6 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator6, "");
        org.apache.kafka.common.record.TimestampType timestampType9 = kafkaSpoutMessageIdComparatorConsumerRecord8.timestampType();
        long long10 = kafkaSpoutMessageIdComparatorConsumerRecord8.timestamp();
        java.lang.String str11 = kafkaSpoutMessageIdComparatorConsumerRecord8.value();
        java.lang.String str12 = kafkaSpoutMessageIdComparatorConsumerRecord8.toString();
        long long13 = kafkaSpoutMessageIdComparatorConsumerRecord8.timestamp();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator14 = kafkaSpoutMessageIdComparatorConsumerRecord8.key();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator15 = kafkaSpoutMessageIdComparator14.reversed();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("hi!", (int) '4', 35L, kafkaSpoutMessageIdComparator15, "");
        int int18 = kafkaSpoutMessageIdComparatorConsumerRecord17.serializedValueSize();
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator14);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test1985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1985");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> headerIterableKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>();
    }

    @Test
    public void test1986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1986");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        int int9 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str10 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        int int11 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedKeySize();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator12 = kafkaSpoutMessageIdComparatorConsumerRecord5.key();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator13 = kafkaSpoutMessageIdComparatorConsumerRecord5.key();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator13;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator15 = kafkaSpoutMessageIdComparator13.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator19 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator19, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator22 = offsetComparator19.reversed();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator23 = kafkaSpoutMessageIdComparator13.thenComparing(kafkaSpoutMessageIdComparator22);
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator12);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator13);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator15);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator22);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator23);
    }

    @Test
    public void test1987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1987");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>();
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService1 = null;
        genericDeclarationKafkaSpout0.retryService = kafkaSpoutRetryService1;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray3 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet4 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet4, kafkaSpoutMessageIdArray3);
        genericDeclarationKafkaSpout0.emitted = kafkaSpoutMessageIdSet4;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>> genericDeclarationConsumerRecordItor7 = null;
        genericDeclarationKafkaSpout0.waitingToEmit = genericDeclarationConsumerRecordItor7;
        int int9 = genericDeclarationKafkaSpout0.maxRetries;
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test1988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1988");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator11 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator11, "");
        org.apache.kafka.common.record.TimestampType timestampType14 = kafkaSpoutMessageIdComparatorConsumerRecord13.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator25 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator25, "");
        org.apache.kafka.common.record.TimestampType timestampType28 = kafkaSpoutMessageIdComparatorConsumerRecord27.timestampType();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        java.lang.Object obj34 = new java.lang.Object();
        java.lang.Class<?> wildcardClass35 = obj34.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType28, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass33, (java.lang.reflect.GenericDeclaration) wildcardClass35);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator44 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator44, "");
        org.apache.kafka.common.record.TimestampType timestampType47 = kafkaSpoutMessageIdComparatorConsumerRecord46.timestampType();
        java.lang.Object obj51 = new java.lang.Object();
        java.lang.Class<?> wildcardClass52 = obj51.getClass();
        java.lang.Object obj53 = new java.lang.Object();
        java.lang.Class<?> wildcardClass54 = obj53.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType47, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass52, (java.lang.reflect.GenericDeclaration) wildcardClass54);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("hi!", (int) (byte) 0, (long) (byte) 10, 10L, timestampType14, (long) (short) 10, (int) (short) 0, (int) (byte) 0, (java.lang.reflect.Type) wildcardClass33, timestampType47);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator60 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=null}", (int) (short) 0, (long) (byte) 1, (long) (short) 100, timestampType47, 0L, (int) (byte) 10, (int) (short) 100, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator60, "hi!");
        int int63 = kafkaSpoutMessageIdComparatorConsumerRecord62.serializedKeySize();
        long long64 = kafkaSpoutMessageIdComparatorConsumerRecord62.checksum();
        long long65 = kafkaSpoutMessageIdComparatorConsumerRecord62.checksum();
        long long66 = kafkaSpoutMessageIdComparatorConsumerRecord62.timestamp();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 100L + "'", long66 == 100L);
    }

    @Test
    public void test1989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1989");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator11 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator11, "");
        org.apache.kafka.common.record.TimestampType timestampType14 = kafkaSpoutMessageIdComparatorConsumerRecord13.timestampType();
        int int15 = kafkaSpoutMessageIdComparatorConsumerRecord13.serializedValueSize();
        java.lang.String str16 = kafkaSpoutMessageIdComparatorConsumerRecord13.value();
        java.lang.String str17 = kafkaSpoutMessageIdComparatorConsumerRecord13.value();
        java.lang.String str18 = kafkaSpoutMessageIdComparatorConsumerRecord13.value();
        java.lang.String str19 = kafkaSpoutMessageIdComparatorConsumerRecord13.value();
        org.apache.kafka.common.record.TimestampType timestampType20 = kafkaSpoutMessageIdComparatorConsumerRecord13.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator27 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator27, "");
        java.lang.String str30 = kafkaSpoutMessageIdComparatorConsumerRecord29.topic();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator31 = kafkaSpoutMessageIdComparatorConsumerRecord29.key();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator32 = kafkaSpoutMessageIdComparator31.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator36 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator36, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator39 = offsetComparator36.reversed();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator40 = kafkaSpoutMessageIdComparator31.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator36);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator36;
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator36;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("hi!", (int) 'a', (long) (short) 10, 0L, timestampType20, 10L, 1, 10, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator36, "");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator51 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator51, "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=[]}", (int) '#', 35L, (long) '4', timestampType20, (long) 0, (int) 'a', (int) (byte) 100, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator51, "");
        long long56 = kafkaSpoutMessageIdComparatorConsumerRecord55.checksum();
        int int57 = kafkaSpoutMessageIdComparatorConsumerRecord55.serializedKeySize();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator31);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator32);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator39);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator40);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 97 + "'", int57 == 97);
    }

    @Test
    public void test1990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1990");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.Comparable<java.lang.String>, org.apache.kafka.common.header.Headers> strComparableKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.Comparable<java.lang.String>, org.apache.kafka.common.header.Headers>();
    }

    @Test
    public void test1991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1991");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator7 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator7, "");
        org.apache.kafka.common.record.TimestampType timestampType10 = kafkaSpoutMessageIdComparatorConsumerRecord9.timestampType();
        long long11 = kafkaSpoutMessageIdComparatorConsumerRecord9.timestamp();
        java.lang.String str12 = kafkaSpoutMessageIdComparatorConsumerRecord9.value();
        java.lang.String str13 = kafkaSpoutMessageIdComparatorConsumerRecord9.toString();
        long long14 = kafkaSpoutMessageIdComparatorConsumerRecord9.checksum();
        int int15 = kafkaSpoutMessageIdComparatorConsumerRecord9.serializedKeySize();
        java.lang.String str16 = kafkaSpoutMessageIdComparatorConsumerRecord9.topic();
        long long17 = kafkaSpoutMessageIdComparatorConsumerRecord9.timestamp();
        int int18 = kafkaSpoutMessageIdComparatorConsumerRecord9.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType19 = kafkaSpoutMessageIdComparatorConsumerRecord9.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator29 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (-1), (long) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator29, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator32 = offsetComparator29.reversed();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("hi!", 0, (long) 1, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator29, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator35 = org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator36 = kafkaSpoutMessageIdComparator35.reversed();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator37 = offsetComparator29.thenComparing(kafkaSpoutMessageIdComparator35);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator38 = kafkaSpoutMessageIdComparator37.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator42 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator42, "");
        java.lang.String str45 = kafkaSpoutMessageIdComparatorConsumerRecord44.topic();
        java.util.Optional<java.lang.Integer> intOptional46 = kafkaSpoutMessageIdComparatorConsumerRecord44.leaderEpoch();
        long long47 = kafkaSpoutMessageIdComparatorConsumerRecord44.checksum();
        java.lang.String str48 = kafkaSpoutMessageIdComparatorConsumerRecord44.topic();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator49 = kafkaSpoutMessageIdComparatorConsumerRecord44.key();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator50 = kafkaSpoutMessageIdComparator37.thenComparing(kafkaSpoutMessageIdComparator49);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord52 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("hi!", (int) (byte) 10, 97L, 10L, timestampType19, (long) (byte) 10, 100, 32, kafkaSpoutMessageIdComparator50, "ConsumerRecord(topic = KafkaSpout{acked=null, emitted=[]}, partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = 1, serialized key size = 97, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = KafkaSpout{acked=null, emitted=[]})");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator59 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator59, "");
        org.apache.kafka.common.record.TimestampType timestampType62 = kafkaSpoutMessageIdComparatorConsumerRecord61.timestampType();
        int int63 = kafkaSpoutMessageIdComparatorConsumerRecord61.serializedValueSize();
        java.lang.String str64 = kafkaSpoutMessageIdComparatorConsumerRecord61.value();
        java.lang.String str65 = kafkaSpoutMessageIdComparatorConsumerRecord61.value();
        org.apache.kafka.common.record.TimestampType timestampType66 = kafkaSpoutMessageIdComparatorConsumerRecord61.timestampType();
        int int67 = kafkaSpoutMessageIdComparatorConsumerRecord61.serializedKeySize();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator68 = kafkaSpoutMessageIdComparatorConsumerRecord61.key();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator75 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator75, "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (short) 100, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator75, "");
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator75;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator81 = kafkaSpoutMessageIdComparator68.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator75);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator82 = offsetComparator75.reversed();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord84 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (short) 1, (long) 'a', kafkaSpoutMessageIdComparator82, "");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator85 = kafkaSpoutMessageIdComparator50.thenComparing(kafkaSpoutMessageIdComparator82);
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator32);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator35);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator36);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator37);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator38);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(intOptional46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-1L) + "'", long47 == (-1L));
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator49);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator50);
        org.junit.Assert.assertTrue("'" + timestampType62 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType62.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertTrue("'" + timestampType66 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType66.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator68);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator81);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator82);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator85);
    }

    @Test
    public void test1992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1992");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator11 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator11, "");
        org.apache.kafka.common.record.TimestampType timestampType14 = kafkaSpoutMessageIdComparatorConsumerRecord13.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator25 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator25, "");
        org.apache.kafka.common.record.TimestampType timestampType28 = kafkaSpoutMessageIdComparatorConsumerRecord27.timestampType();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        java.lang.Object obj34 = new java.lang.Object();
        java.lang.Class<?> wildcardClass35 = obj34.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType28, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass33, (java.lang.reflect.GenericDeclaration) wildcardClass35);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator44 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator44, "");
        org.apache.kafka.common.record.TimestampType timestampType47 = kafkaSpoutMessageIdComparatorConsumerRecord46.timestampType();
        java.lang.Object obj51 = new java.lang.Object();
        java.lang.Class<?> wildcardClass52 = obj51.getClass();
        java.lang.Object obj53 = new java.lang.Object();
        java.lang.Class<?> wildcardClass54 = obj53.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType47, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass52, (java.lang.reflect.GenericDeclaration) wildcardClass54);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("hi!", (int) (byte) 0, (long) (byte) 10, 10L, timestampType14, (long) (short) 10, (int) (short) 0, (int) (byte) 0, (java.lang.reflect.Type) wildcardClass33, timestampType47);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator60 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=null}", (int) (short) 0, (long) (byte) 1, (long) (short) 100, timestampType47, 0L, (int) (byte) 10, (int) (short) 100, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator60, "hi!");
        int int63 = kafkaSpoutMessageIdComparatorConsumerRecord62.serializedKeySize();
        int int64 = kafkaSpoutMessageIdComparatorConsumerRecord62.serializedKeySize();
        int int65 = kafkaSpoutMessageIdComparatorConsumerRecord62.partition();
        org.apache.kafka.common.header.Headers headers66 = kafkaSpoutMessageIdComparatorConsumerRecord62.headers();
        int int67 = kafkaSpoutMessageIdComparatorConsumerRecord62.partition();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(headers66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
    }

    @Test
    public void test1993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1993");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str9 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.lang.String str10 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        java.util.Optional<java.lang.Integer> intOptional11 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        org.apache.kafka.common.header.Headers headers12 = kafkaSpoutMessageIdComparatorConsumerRecord5.headers();
        long long13 = kafkaSpoutMessageIdComparatorConsumerRecord5.offset();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(intOptional11);
        org.junit.Assert.assertNotNull(headers12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test1994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1994");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, java.lang.reflect.AnnotatedElement> iComponentKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, java.lang.reflect.AnnotatedElement>();
    }

    @Test
    public void test1995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1995");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>();
        org.apache.kafka.clients.consumer.KafkaConsumer<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaConsumer1 = genericDeclarationKafkaSpout0.kafkaConsumer;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>> genericDeclarationConsumerRecordItor2 = genericDeclarationKafkaSpout0.waitingToEmit;
        org.apache.storm.kafka.spout.KafkaSpoutTuplesBuilder<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpoutTuplesBuilder3 = null;
        genericDeclarationKafkaSpout0.tuplesBuilder = genericDeclarationKafkaSpoutTuplesBuilder3;
        java.util.Set<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet5 = genericDeclarationKafkaSpout0.emitted;
        org.apache.kafka.clients.consumer.KafkaConsumer<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaConsumer6 = genericDeclarationKafkaSpout0.kafkaConsumer;
        long long7 = genericDeclarationKafkaSpout0.numUncommittedOffsets;
        org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy firstPollOffsetStrategy8 = null;
        genericDeclarationKafkaSpout0.firstPollOffsetStrategy = firstPollOffsetStrategy8;
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService10 = genericDeclarationKafkaSpout0.retryService;
        org.junit.Assert.assertNull(genericDeclarationKafkaConsumer1);
        org.junit.Assert.assertNull(genericDeclarationConsumerRecordItor2);
        org.junit.Assert.assertNull(kafkaSpoutMessageIdSet5);
        org.junit.Assert.assertNull(genericDeclarationKafkaConsumer6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNull(kafkaSpoutRetryService10);
    }

    @Test
    public void test1996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1996");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.kafka.common.record.TimestampType, java.lang.String> timestampTypeKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.kafka.common.record.TimestampType, java.lang.String>();
    }

    @Test
    public void test1997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1997");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3, "");
        org.apache.kafka.common.record.TimestampType timestampType6 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        int int7 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        java.lang.String str8 = kafkaSpoutMessageIdComparatorConsumerRecord5.value();
        int int9 = kafkaSpoutMessageIdComparatorConsumerRecord5.serializedValueSize();
        long long10 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType11 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        java.lang.String str12 = kafkaSpoutMessageIdComparatorConsumerRecord5.topic();
        org.apache.kafka.common.record.TimestampType timestampType13 = kafkaSpoutMessageIdComparatorConsumerRecord5.timestampType();
        java.util.Optional<java.lang.Integer> intOptional14 = kafkaSpoutMessageIdComparatorConsumerRecord5.leaderEpoch();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional14);
    }

    @Test
    public void test1998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1998");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> genericDeclarationKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>();
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService1 = null;
        genericDeclarationKafkaSpout0.retryService = kafkaSpoutRetryService1;
        long long3 = genericDeclarationKafkaSpout0.numUncommittedOffsets;
        org.apache.kafka.common.TopicPartition topicPartition4 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection5 = genericDeclarationKafkaSpout0.toArrayList(topicPartition4);
        boolean boolean6 = genericDeclarationKafkaSpout0.waitingToEmit();
        // The following exception was thrown during execution in test generation
        try {
            genericDeclarationKafkaSpout0.doSeekRetriableTopicPartitions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(topicPartitionCollection5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1999");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator11 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator11, "");
        org.apache.kafka.common.record.TimestampType timestampType14 = kafkaSpoutMessageIdComparatorConsumerRecord13.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator25 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator25, "");
        org.apache.kafka.common.record.TimestampType timestampType28 = kafkaSpoutMessageIdComparatorConsumerRecord27.timestampType();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        java.lang.Object obj34 = new java.lang.Object();
        java.lang.Class<?> wildcardClass35 = obj34.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType28, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass33, (java.lang.reflect.GenericDeclaration) wildcardClass35);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator44 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator44, "");
        org.apache.kafka.common.record.TimestampType timestampType47 = kafkaSpoutMessageIdComparatorConsumerRecord46.timestampType();
        java.lang.Object obj51 = new java.lang.Object();
        java.lang.Class<?> wildcardClass52 = obj51.getClass();
        java.lang.Object obj53 = new java.lang.Object();
        java.lang.Class<?> wildcardClass54 = obj53.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType47, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass52, (java.lang.reflect.GenericDeclaration) wildcardClass54);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("hi!", (int) (byte) 0, (long) (byte) 10, 10L, timestampType14, (long) (short) 10, (int) (short) 0, (int) (byte) 0, (java.lang.reflect.Type) wildcardClass33, timestampType47);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator60 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=null}", (int) (short) 0, (long) (byte) 1, (long) (short) 100, timestampType47, 0L, (int) (byte) 10, (int) (short) 100, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator60, "hi!");
        int int63 = kafkaSpoutMessageIdComparatorConsumerRecord62.serializedKeySize();
        long long64 = kafkaSpoutMessageIdComparatorConsumerRecord62.checksum();
        java.lang.String str65 = kafkaSpoutMessageIdComparatorConsumerRecord62.value();
        java.lang.String str66 = kafkaSpoutMessageIdComparatorConsumerRecord62.toString();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "hi!" + "'", str65, "hi!");
    }

    @Test
    public void test2000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test2000");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator11 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator11, "");
        org.apache.kafka.common.record.TimestampType timestampType14 = kafkaSpoutMessageIdComparatorConsumerRecord13.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator25 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator25, "");
        org.apache.kafka.common.record.TimestampType timestampType28 = kafkaSpoutMessageIdComparatorConsumerRecord27.timestampType();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        java.lang.Object obj34 = new java.lang.Object();
        java.lang.Class<?> wildcardClass35 = obj34.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType28, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass33, (java.lang.reflect.GenericDeclaration) wildcardClass35);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator44 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("", (int) (byte) 10, (long) (short) 0, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator44, "");
        org.apache.kafka.common.record.TimestampType timestampType47 = kafkaSpoutMessageIdComparatorConsumerRecord46.timestampType();
        java.lang.Object obj51 = new java.lang.Object();
        java.lang.Class<?> wildcardClass52 = obj51.getClass();
        java.lang.Object obj53 = new java.lang.Object();
        java.lang.Class<?> wildcardClass54 = obj53.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("", 100, 10L, (long) 10, timestampType47, (long) (short) 10, (int) (short) -1, (int) '#', (java.lang.reflect.GenericDeclaration) wildcardClass52, (java.lang.reflect.GenericDeclaration) wildcardClass54);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("hi!", (int) (byte) 0, (long) (byte) 10, 10L, timestampType14, (long) (short) 10, (int) (short) 0, (int) (byte) 0, (java.lang.reflect.Type) wildcardClass33, timestampType47);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator60 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("KafkaSpout{acked=null, emitted=null}", (int) (short) 0, (long) (byte) 1, (long) (short) 100, timestampType47, 0L, (int) (byte) 10, (int) (short) 100, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator60, "hi!");
        java.lang.String str63 = kafkaSpoutMessageIdComparatorConsumerRecord62.toString();
        int int64 = kafkaSpoutMessageIdComparatorConsumerRecord62.partition();
        int int65 = kafkaSpoutMessageIdComparatorConsumerRecord62.serializedKeySize();
        long long66 = kafkaSpoutMessageIdComparatorConsumerRecord62.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType67 = kafkaSpoutMessageIdComparatorConsumerRecord62.timestampType();
        long long68 = kafkaSpoutMessageIdComparatorConsumerRecord62.checksum();
        int int69 = kafkaSpoutMessageIdComparatorConsumerRecord62.serializedKeySize();
        int int70 = kafkaSpoutMessageIdComparatorConsumerRecord62.serializedKeySize();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10 + "'", int65 == 10);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 100L + "'", long66 == 100L);
        org.junit.Assert.assertTrue("'" + timestampType67 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType67.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 10 + "'", int69 == 10);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 10 + "'", int70 == 10);
    }
}
