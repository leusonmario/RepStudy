/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 01 00:17:42 GMT 2021
 */

package org.apache.storm.kafka.spout;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import clojure.lang.APersistentMap;
import clojure.lang.EnumerationSeq;
import clojure.lang.IPersistentMap;
import clojure.lang.ISeq;
import clojure.lang.IteratorSeq;
import clojure.lang.Keyword;
import clojure.lang.LongRange;
import clojure.lang.PersistentArrayMap;
import clojure.lang.PersistentHashMap;
import clojure.lang.PersistentHashSet;
import clojure.lang.PersistentList;
import clojure.lang.PersistentTreeMap;
import clojure.lang.PersistentTreeSet;
import clojure.lang.PersistentVector;
import clojure.lang.Range;
import clojure.lang.Repeat;
import clojure.lang.StringSeq;
import clojure.lang.Symbol;
import java.io.StringWriter;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.sql.SQLDataException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.NavigableSet;
import java.util.NoSuchElementException;
import java.util.Optional;
import java.util.Set;
import java.util.Spliterator;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.concurrent.DelayQueue;
import java.util.concurrent.Delayed;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.function.Function;
import java.util.function.ToIntFunction;
import java.util.function.ToLongFunction;
import java.util.regex.Pattern;
import org.apache.http.client.HttpClient;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.apache.kafka.clients.consumer.OffsetAndMetadata;
import org.apache.kafka.common.TopicPartition;
import org.apache.kafka.common.header.Header;
import org.apache.kafka.common.header.Headers;
import org.apache.kafka.common.header.internals.RecordHeader;
import org.apache.kafka.common.header.internals.RecordHeaders;
import org.apache.kafka.common.record.TimestampType;
import org.apache.kafka.common.serialization.Deserializer;
import org.apache.kafka.common.serialization.LongDeserializer;
import org.apache.storm.generated.SpecificAggregateStats;
import org.apache.storm.generated.StormTopology;
import org.apache.storm.kafka.spout.KafkaSpout;
import org.apache.storm.kafka.spout.KafkaSpoutConfig;
import org.apache.storm.kafka.spout.KafkaSpoutMessageId;
import org.apache.storm.kafka.spout.KafkaSpoutRetryService;
import org.apache.storm.kafka.spout.KafkaSpoutStream;
import org.apache.storm.kafka.spout.KafkaSpoutStreams;
import org.apache.storm.kafka.spout.KafkaSpoutStreamsNamedTopics;
import org.apache.storm.kafka.spout.KafkaSpoutStreamsWildcardTopics;
import org.apache.storm.kafka.spout.KafkaSpoutTuplesBuilder;
import org.apache.storm.metric.api.IMetric;
import org.apache.storm.spout.SpoutOutputCollector;
import org.apache.storm.task.GeneralTopologyContext;
import org.apache.storm.task.TopologyContext;
import org.apache.storm.topology.OutputFieldsGetter;
import org.apache.storm.tuple.Fields;
import org.apache.storm.tuple.TupleImpl;
import org.apache.thrift.protocol.TJSONProtocol;
import org.apache.thrift.protocol.TSimpleJSONProtocol;
import org.apache.thrift.transport.TFastFramedTransport;
import org.apache.thrift.transport.THttpClient;
import org.apache.thrift.transport.TMemoryBuffer;
import org.apache.thrift.transport.TSocket;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class KafkaSpout_ESTest extends KafkaSpout_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      KafkaSpoutConfig<Integer, Object> kafkaSpoutConfig0 = (KafkaSpoutConfig<Integer, Object>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<Integer, Object> kafkaSpout0 = new KafkaSpout<Integer, Object>(kafkaSpoutConfig0);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertNotNull(kafkaSpout0);
      
      boolean boolean0 = false;
      String string0 = kafkaSpout0.toString();
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals("KafkaSpout{acked=null, emitted=null}", string0);
      assertNotNull(string0);
      
      kafkaSpout0.consumerAutoCommitMode = boolean0;
      // Undeclared exception!
      try { 
        kafkaSpout0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Fields fields0 = new Fields(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, fields0.size());
      assertNotNull(fields0);
      
      String string0 = "<jbrnD>=^";
      Pattern pattern0 = Pattern.compile(string0);
      assertEquals("<jbrnD>=^", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("<jbrnD>=^", pattern0.toString());
      assertNotNull(pattern0);
      
      KafkaSpoutStream kafkaSpoutStream0 = new KafkaSpoutStream(fields0, string0, pattern0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, fields0.size());
      assertEquals("<jbrnD>=^", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("<jbrnD>=^", pattern0.toString());
      assertNull(kafkaSpoutStream0.getTopic());
      assertNotNull(kafkaSpoutStream0);
      
      KafkaSpoutStreamsWildcardTopics kafkaSpoutStreamsWildcardTopics0 = new KafkaSpoutStreamsWildcardTopics(kafkaSpoutStream0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, fields0.size());
      assertEquals("<jbrnD>=^", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("<jbrnD>=^", pattern0.toString());
      assertNull(kafkaSpoutStream0.getTopic());
      assertNotNull(kafkaSpoutStreamsWildcardTopics0);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(string0));
      assertNotNull(stack0);
      
      KafkaSpoutConfig<TopicPartition, TopicPartition> kafkaSpoutConfig0 = (KafkaSpoutConfig<TopicPartition, TopicPartition>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn(kafkaSpoutStreamsWildcardTopics0).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      doReturn(stack0).when(kafkaSpoutConfig0).getSubscribedTopics();
      KafkaSpout<TopicPartition, TopicPartition> kafkaSpout0 = new KafkaSpout<TopicPartition, TopicPartition>(kafkaSpoutConfig0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, fields0.size());
      assertEquals("<jbrnD>=^", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("<jbrnD>=^", pattern0.toString());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(stack0.contains(string0));
      assertNotNull(kafkaSpout0);
      
      String string1 = "Offsets successfully committed to Kafka [{}]";
      int int0 = 2;
      TopicPartition topicPartition0 = new TopicPartition(string1, int0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Offsets successfully committed to Kafka [{}]", topicPartition0.topic());
      assertEquals(2, topicPartition0.partition());
      assertNotNull(topicPartition0);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout0.new OffsetEntry(topicPartition0, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, stringArray0.length);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, fields0.size());
      assertEquals("<jbrnD>=^", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("<jbrnD>=^", pattern0.toString());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals("Offsets successfully committed to Kafka [{}]", topicPartition0.topic());
      assertEquals(2, topicPartition0.partition());
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(stack0.contains(string0));
      assertNotNull(kafkaSpout_OffsetEntry0);
      
      TopicPartition topicPartition1 = new TopicPartition(string0, kafkaSpoutConfig0.DEFAULT_MAX_RETRIES);
      assertEquals(0, stringArray0.length);
      assertFalse(string0.equals((Object)string1));
      assertFalse(topicPartition1.equals((Object)topicPartition0));
      assertEquals(0, fields0.size());
      assertEquals("<jbrnD>=^", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("<jbrnD>=^", pattern0.toString());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(Integer.MAX_VALUE, topicPartition1.partition());
      assertEquals("<jbrnD>=^", topicPartition1.topic());
      assertFalse(stack0.contains(string0));
      assertNotNull(topicPartition1);
      
      long long0 = 0L;
      OffsetAndMetadata offsetAndMetadata0 = new OffsetAndMetadata(long0);
      assertEquals(0L, offsetAndMetadata0.offset());
      assertEquals("", offsetAndMetadata0.metadata());
      assertNotNull(offsetAndMetadata0);
      
      Object object0 = null;
      boolean boolean0 = offsetAndMetadata0.equals(object0);
      assertEquals(0L, offsetAndMetadata0.offset());
      assertEquals("", offsetAndMetadata0.metadata());
      assertFalse(boolean0);
      
      String string2 = topicPartition0.toString();
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(topicPartition0.equals((Object)topicPartition1));
      assertEquals("Offsets successfully committed to Kafka [{}]", topicPartition0.topic());
      assertEquals(2, topicPartition0.partition());
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(topicPartition0, topicPartition1);
      assertEquals("Offsets successfully committed to Kafka [{}]-2", string2);
      assertNotNull(string2);
      
      Optional<Integer> optional0 = offsetAndMetadata0.leaderEpoch();
      assertEquals(0L, offsetAndMetadata0.offset());
      assertEquals("", offsetAndMetadata0.metadata());
      assertNotNull(optional0);
      
      kafkaSpout_OffsetEntry0.commit(offsetAndMetadata0);
      assertEquals(0, stringArray0.length);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(topicPartition0.equals((Object)topicPartition1));
      assertEquals(0, fields0.size());
      assertEquals("<jbrnD>=^", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("<jbrnD>=^", pattern0.toString());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals("Offsets successfully committed to Kafka [{}]", topicPartition0.topic());
      assertEquals(2, topicPartition0.partition());
      assertEquals(0L, offsetAndMetadata0.offset());
      assertEquals("", offsetAndMetadata0.metadata());
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals((-1L), kafkaSpout0.numUncommittedOffsets);
      assertFalse(stack0.contains(string2));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(topicPartition0, topicPartition1);
      
      String string3 = kafkaSpoutStream0.getStreamId();
      assertEquals(0, stringArray0.length);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(0, fields0.size());
      assertEquals("<jbrnD>=^", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("<jbrnD>=^", pattern0.toString());
      assertNull(kafkaSpoutStream0.getTopic());
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string0, string3);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(string3, string0);
      assertEquals("<jbrnD>=^", string3);
      assertNotNull(string3);
      
      KafkaSpoutMessageId kafkaSpoutMessageId0 = new KafkaSpoutMessageId(kafkaSpout_OffsetEntry0.tp, kafkaSpoutConfig0.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0, stringArray0.length);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(topicPartition0.equals((Object)topicPartition1));
      assertEquals(0, fields0.size());
      assertEquals("<jbrnD>=^", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("<jbrnD>=^", pattern0.toString());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals(2, kafkaSpoutMessageId0.partition());
      assertEquals(30000L, kafkaSpoutMessageId0.offset());
      assertEquals("Offsets successfully committed to Kafka [{}]", kafkaSpoutMessageId0.topic());
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals("Offsets successfully committed to Kafka [{}]", topicPartition0.topic());
      assertEquals(2, topicPartition0.partition());
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals((-1L), kafkaSpout0.numUncommittedOffsets);
      assertFalse(stack0.contains(string3));
      assertNotNull(kafkaSpoutMessageId0);
      
      boolean boolean1 = kafkaSpout_OffsetEntry0.contains(kafkaSpoutMessageId0);
      assertEquals(0, stringArray0.length);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(topicPartition0.equals((Object)topicPartition1));
      assertTrue(boolean1 == boolean0);
      assertEquals(0, fields0.size());
      assertEquals("<jbrnD>=^", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("<jbrnD>=^", pattern0.toString());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals(2, kafkaSpoutMessageId0.partition());
      assertEquals(30000L, kafkaSpoutMessageId0.offset());
      assertEquals("Offsets successfully committed to Kafka [{}]", kafkaSpoutMessageId0.topic());
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals("Offsets successfully committed to Kafka [{}]", topicPartition0.topic());
      assertEquals(2, topicPartition0.partition());
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals((-1L), kafkaSpout0.numUncommittedOffsets);
      assertFalse(stack0.contains(string3));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string0, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(topicPartition0, topicPartition1);
      assertFalse(boolean1);
      
      Object object1 = null;
      boolean boolean2 = topicPartition0.equals(object1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(topicPartition0.equals((Object)topicPartition1));
      assertEquals("Offsets successfully committed to Kafka [{}]", topicPartition0.topic());
      assertEquals(2, topicPartition0.partition());
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(topicPartition0, topicPartition1);
      assertFalse(boolean2);
      
      kafkaSpout_OffsetEntry0.committedOffset = (long) kafkaSpoutConfig0.DEFAULT_MAX_RETRIES;
      assertEquals(0, fields0.size());
      assertEquals("<jbrnD>=^", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("<jbrnD>=^", pattern0.toString());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals("Offsets successfully committed to Kafka [{}]", topicPartition0.topic());
      assertEquals(2, topicPartition0.partition());
      
      String string4 = topicPartition1.toString();
      assertEquals(0, stringArray0.length);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(topicPartition1.equals((Object)topicPartition0));
      assertEquals(0, fields0.size());
      assertEquals("<jbrnD>=^", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("<jbrnD>=^", pattern0.toString());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(Integer.MAX_VALUE, topicPartition1.partition());
      assertEquals("<jbrnD>=^", topicPartition1.topic());
      assertFalse(stack0.contains(string3));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertSame(string0, string3);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(topicPartition1, topicPartition0);
      assertEquals("<jbrnD>=^-2147483647", string4);
      assertNotNull(string4);
      
      Collection<TopicPartition> collection0 = kafkaSpout0.toArrayList(topicPartition1);
      assertEquals(0, stringArray0.length);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(topicPartition1.equals((Object)topicPartition0));
      assertEquals(0, fields0.size());
      assertEquals("<jbrnD>=^", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("<jbrnD>=^", pattern0.toString());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(Integer.MAX_VALUE, topicPartition1.partition());
      assertEquals("<jbrnD>=^", topicPartition1.topic());
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals((-1L), kafkaSpout0.numUncommittedOffsets);
      assertFalse(stack0.contains(string3));
      assertFalse(collection0.contains(topicPartition0));
      assertTrue(collection0.contains(topicPartition1));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertSame(string0, string3);
      assertNotSame(topicPartition1, topicPartition0);
      assertNotNull(collection0);
      
      String string5 = "NF";
      boolean boolean3 = stack0.add(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[NF]", stack0.toString());
      assertFalse(stack0.contains(string4));
      assertTrue(stack0.contains(string5));
      assertNotSame(string5, string4);
      assertNotSame(string5, string0);
      assertNotSame(string5, string1);
      assertNotSame(string5, string3);
      assertNotSame(string5, string2);
      assertTrue(boolean3);
      
      String string6 = kafkaSpout0.getNamedTopics();
      assertEquals(0, stringArray0.length);
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertEquals(0, fields0.size());
      assertEquals("<jbrnD>=^", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("<jbrnD>=^", pattern0.toString());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[NF]", stack0.toString());
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals((-1L), kafkaSpout0.numUncommittedOffsets);
      assertFalse(stack0.contains(string4));
      assertTrue(stack0.contains(string5));
      assertNotSame(string0, string5);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string6);
      assertSame(string0, string3);
      assertNotSame(string6, string0);
      assertNotSame(string6, string1);
      assertNotSame(string6, string4);
      assertNotSame(string6, string2);
      assertNotSame(string6, string3);
      assertNotSame(string6, string5);
      assertEquals("NF,", string6);
      assertNotNull(string6);
      
      KafkaSpout.KafkaSpoutConsumerRebalanceListener kafkaSpout_KafkaSpoutConsumerRebalanceListener0 = kafkaSpout0.new KafkaSpoutConsumerRebalanceListener();
      assertEquals(0, stringArray0.length);
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string6));
      assertEquals(0, fields0.size());
      assertEquals("<jbrnD>=^", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("<jbrnD>=^", pattern0.toString());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[NF]", stack0.toString());
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals((-1L), kafkaSpout0.numUncommittedOffsets);
      assertFalse(stack0.contains(string4));
      assertTrue(stack0.contains(string5));
      assertNotNull(kafkaSpout_KafkaSpoutConsumerRebalanceListener0);
      
      KafkaSpout<OffsetAndMetadata, AbstractMap.SimpleEntry<Header, Object>> kafkaSpout1 = new KafkaSpout<OffsetAndMetadata, AbstractMap.SimpleEntry<Header, Object>>();
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertNotNull(kafkaSpout1);
      
      KafkaSpout.Timer kafkaSpout_Timer0 = kafkaSpout0.new Timer();
      assertEquals(0, stringArray0.length);
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string6));
      assertEquals(0, fields0.size());
      assertEquals(0L, kafkaSpout_Timer0.delay());
      assertNull(kafkaSpout_Timer0.getTimeUnit());
      assertEquals(0L, kafkaSpout_Timer0.period());
      assertEquals("<jbrnD>=^", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("<jbrnD>=^", pattern0.toString());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[NF]", stack0.toString());
      assertEquals(0L, kafkaSpout_Timer0.start);
      assertEquals(0L, kafkaSpout_Timer0.periodNanos);
      assertEquals(0L, kafkaSpout_Timer0.period);
      assertEquals(0L, kafkaSpout_Timer0.delay);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals((-1L), kafkaSpout0.numUncommittedOffsets);
      assertFalse(stack0.contains(string4));
      assertTrue(stack0.contains(string5));
      assertNotNull(kafkaSpout_Timer0);
      
      boolean boolean4 = kafkaSpout_Timer0.isExpiredResetOnTrue();
      assertEquals(0, stringArray0.length);
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string6));
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertEquals(0, fields0.size());
      assertEquals(0L, kafkaSpout_Timer0.delay());
      assertNull(kafkaSpout_Timer0.getTimeUnit());
      assertEquals(0L, kafkaSpout_Timer0.period());
      assertEquals("<jbrnD>=^", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("<jbrnD>=^", pattern0.toString());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[NF]", stack0.toString());
      assertEquals(0L, kafkaSpout_Timer0.periodNanos);
      assertEquals(0L, kafkaSpout_Timer0.period);
      assertEquals(1392409281320000L, kafkaSpout_Timer0.start);
      assertEquals(0L, kafkaSpout_Timer0.delay);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals((-1L), kafkaSpout0.numUncommittedOffsets);
      assertFalse(stack0.contains(string4));
      assertTrue(stack0.contains(string5));
      assertNotSame(string0, string5);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string6);
      assertSame(string0, string3);
      assertTrue(boolean4);
      
      // Undeclared exception!
      try { 
        kafkaSpout0.deactivate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      KafkaSpout<KafkaSpoutStreamsWildcardTopics, SpecificAggregateStats._Fields> kafkaSpout0 = new KafkaSpout<KafkaSpoutStreamsWildcardTopics, SpecificAggregateStats._Fields>();
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertNotNull(kafkaSpout0);
      
      long long0 = 0L;
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      KafkaSpout.Timer kafkaSpout_Timer0 = kafkaSpout0.new Timer(long0, kafkaSpout0.numUncommittedOffsets, timeUnit0);
      assertEquals(0L, kafkaSpout_Timer0.period());
      assertEquals(TimeUnit.SECONDS, kafkaSpout_Timer0.getTimeUnit());
      assertEquals(0L, kafkaSpout_Timer0.delay());
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout_Timer0.delay);
      assertEquals(1392409281320000L, kafkaSpout_Timer0.start);
      assertEquals(0L, kafkaSpout_Timer0.period);
      assertEquals(0L, kafkaSpout_Timer0.periodNanos);
      assertNotNull(kafkaSpout_Timer0);
      
      long long1 = 2147483647L;
      long long2 = 529L;
      kafkaSpout_Timer0.periodNanos = long2;
      assertEquals(0L, kafkaSpout_Timer0.period());
      assertEquals(TimeUnit.SECONDS, kafkaSpout_Timer0.getTimeUnit());
      assertEquals(0L, kafkaSpout_Timer0.delay());
      
      kafkaSpout_Timer0.delay = long1;
      assertEquals(0L, kafkaSpout_Timer0.period());
      assertEquals(TimeUnit.SECONDS, kafkaSpout_Timer0.getTimeUnit());
      assertEquals(2147483647L, kafkaSpout_Timer0.delay());
      
      kafkaSpout_Timer0.delay = long1;
      assertEquals(0L, kafkaSpout_Timer0.period());
      assertEquals(TimeUnit.SECONDS, kafkaSpout_Timer0.getTimeUnit());
      assertEquals(2147483647L, kafkaSpout_Timer0.delay());
      
      long long3 = kafkaSpout_Timer0.delay();
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(long3 == long2);
      assertFalse(long3 == long0);
      assertTrue(long3 == long1);
      assertEquals(0L, kafkaSpout_Timer0.period());
      assertEquals(TimeUnit.SECONDS, kafkaSpout_Timer0.getTimeUnit());
      assertEquals(2147483647L, kafkaSpout_Timer0.delay());
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(2147483647L, kafkaSpout_Timer0.delay);
      assertEquals(1392409281320000L, kafkaSpout_Timer0.start);
      assertEquals(529L, kafkaSpout_Timer0.periodNanos);
      assertEquals(0L, kafkaSpout_Timer0.period);
      assertEquals(2147483647L, long3);
      
      KafkaSpout.KafkaSpoutConsumerRebalanceListener kafkaSpout_KafkaSpoutConsumerRebalanceListener0 = kafkaSpout0.new KafkaSpoutConsumerRebalanceListener();
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertNotNull(kafkaSpout_KafkaSpoutConsumerRebalanceListener0);
      
      String string0 = "&W0fI~.";
      int int0 = 2429;
      TopicPartition topicPartition0 = new TopicPartition(string0, int0);
      assertEquals(2429, topicPartition0.partition());
      assertEquals("&W0fI~.", topicPartition0.topic());
      assertNotNull(topicPartition0);
      
      long long4 = 1091L;
      OffsetAndMetadata offsetAndMetadata0 = new OffsetAndMetadata(long4);
      assertFalse(long4 == long3);
      assertFalse(long4 == long0);
      assertFalse(long4 == long2);
      assertFalse(long4 == long1);
      assertEquals("", offsetAndMetadata0.metadata());
      assertEquals(1091L, offsetAndMetadata0.offset());
      assertNotNull(offsetAndMetadata0);
      
      // Undeclared exception!
      try { 
        kafkaSpout_KafkaSpoutConsumerRebalanceListener0.doSeek(topicPartition0, offsetAndMetadata0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout$KafkaSpoutConsumerRebalanceListener", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      KafkaSpout<KafkaSpoutStreamsNamedTopics, KafkaSpoutStreamsWildcardTopics> kafkaSpout0 = new KafkaSpout<KafkaSpoutStreamsNamedTopics, KafkaSpoutStreamsWildcardTopics>();
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertNotNull(kafkaSpout0);
      
      KafkaSpoutStreams kafkaSpoutStreams0 = kafkaSpout0.kafkaSpoutStreams;
      assertNull(kafkaSpoutStreams0);
      
      int int0 = 2662;
      KafkaSpoutConfig<String, Delayed> kafkaSpoutConfig0 = (KafkaSpoutConfig<String, Delayed>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn(kafkaSpoutStreams0, kafkaSpout0.kafkaSpoutStreams).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      doReturn(int0).when(kafkaSpoutConfig0).getMaxUncommittedOffsets();
      KafkaSpout<String, Delayed> kafkaSpout1 = new KafkaSpout<String, Delayed>(kafkaSpoutConfig0);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertNotNull(kafkaSpout1);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout1.new OffsetEntry();
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertNotNull(kafkaSpout_OffsetEntry0);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry1 = kafkaSpout1.new OffsetEntry(kafkaSpout_OffsetEntry0.tp, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertNotNull(kafkaSpout_OffsetEntry1);
      
      TopicPartition topicPartition0 = kafkaSpout_OffsetEntry1.tp;
      assertNull(topicPartition0);
      
      long long0 = (-508L);
      String string0 = "K8 itY8";
      int int1 = 2;
      TopicPartition topicPartition1 = new TopicPartition(string0, int1);
      assertFalse(int1 == int0);
      assertEquals("K8 itY8", topicPartition1.topic());
      assertEquals(2, topicPartition1.partition());
      assertNotNull(topicPartition1);
      
      kafkaSpout0.initialized = kafkaSpout1.initialized;
      boolean boolean0 = topicPartition1.equals(kafkaSpout_OffsetEntry1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals("K8 itY8", topicPartition1.topic());
      assertEquals(2, topicPartition1.partition());
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(boolean0);
      
      String string1 = topicPartition1.toString();
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("K8 itY8", topicPartition1.topic());
      assertEquals(2, topicPartition1.partition());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("K8 itY8-2", string1);
      assertNotNull(string1);
      
      boolean boolean1 = kafkaSpout1.poll();
      assertFalse(int0 == int1);
      assertFalse(boolean1 == boolean0);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertTrue(boolean1);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean2 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      KafkaSpout<ConsumerRecord<SpecificAggregateStats._Fields, Object>, SQLTransientConnectionException> kafkaSpout2 = new KafkaSpout<ConsumerRecord<SpecificAggregateStats._Fields, Object>, SQLTransientConnectionException>(kafkaSpoutConfig0);
      assertFalse(int0 == int1);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout2.initialized);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertEquals(0, kafkaSpout2.maxRetries);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      assertNotNull(kafkaSpout2);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry2 = kafkaSpout2.new OffsetEntry(kafkaSpout_OffsetEntry1.tp, kafkaSpout0.maxRetries);
      assertFalse(int0 == int1);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout2.initialized);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertEquals(0, kafkaSpout2.maxRetries);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertNotNull(kafkaSpout_OffsetEntry2);
      
      TopicPartition topicPartition2 = kafkaSpout_OffsetEntry2.tp;
      assertNull(topicPartition2);
      
      // Undeclared exception!
      try { 
        kafkaSpout2.fail(topicPartition2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, KafkaSpout.OffsetEntry> kafkaSpoutConfig0 = (KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, KafkaSpout.OffsetEntry>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<KafkaSpoutStreamsWildcardTopics, KafkaSpout.OffsetEntry> kafkaSpout0 = new KafkaSpout<KafkaSpoutStreamsWildcardTopics, KafkaSpout.OffsetEntry>(kafkaSpoutConfig0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertNotNull(kafkaSpout0);
      
      ConsumerRecords<KafkaSpoutStreamsWildcardTopics, KafkaSpout.OffsetEntry> consumerRecords0 = ConsumerRecords.empty();
      assertTrue(consumerRecords0.isEmpty());
      assertNotNull(consumerRecords0);
      
      kafkaSpout0.setWaitingToEmit(consumerRecords0);
      assertTrue(consumerRecords0.isEmpty());
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      
      KafkaSpout<Header, OffsetAndMetadata> kafkaSpout1 = new KafkaSpout<Header, OffsetAndMetadata>();
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertNotNull(kafkaSpout1);
      
      KafkaSpout.Timer kafkaSpout_Timer0 = kafkaSpout1.new Timer();
      assertEquals(0L, kafkaSpout_Timer0.period());
      assertNull(kafkaSpout_Timer0.getTimeUnit());
      assertEquals(0L, kafkaSpout_Timer0.delay());
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout_Timer0.period);
      assertEquals(0L, kafkaSpout_Timer0.periodNanos);
      assertEquals(0L, kafkaSpout_Timer0.start);
      assertEquals(0L, kafkaSpout_Timer0.delay);
      assertNotNull(kafkaSpout_Timer0);
      
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      kafkaSpout_Timer0.timeUnit = timeUnit0;
      assertEquals(0L, kafkaSpout_Timer0.period());
      assertEquals(0L, kafkaSpout_Timer0.delay());
      assertEquals(TimeUnit.MILLISECONDS, kafkaSpout_Timer0.getTimeUnit());
      
      TimeUnit timeUnit1 = kafkaSpout_Timer0.getTimeUnit();
      assertEquals(0L, kafkaSpout_Timer0.period());
      assertEquals(0L, kafkaSpout_Timer0.delay());
      assertEquals(TimeUnit.MILLISECONDS, kafkaSpout_Timer0.getTimeUnit());
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout_Timer0.period);
      assertEquals(0L, kafkaSpout_Timer0.periodNanos);
      assertEquals(0L, kafkaSpout_Timer0.start);
      assertEquals(0L, kafkaSpout_Timer0.delay);
      assertSame(timeUnit1, timeUnit0);
      
      KafkaSpout<ConsumerRecord<String, KafkaSpoutMessageId>, TopicPartition> kafkaSpout2 = new KafkaSpout<ConsumerRecord<String, KafkaSpoutMessageId>, TopicPartition>();
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout2.maxRetries);
      assertFalse(kafkaSpout2.initialized);
      assertNotNull(kafkaSpout2);
      
      KafkaSpout.KafkaSpoutConsumerRebalanceListener kafkaSpout_KafkaSpoutConsumerRebalanceListener0 = kafkaSpout2.new KafkaSpoutConsumerRebalanceListener();
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout2.maxRetries);
      assertFalse(kafkaSpout2.initialized);
      assertNotNull(kafkaSpout_KafkaSpoutConsumerRebalanceListener0);
      
      PersistentTreeSet persistentTreeSet0 = null;
      try {  
      persistentTreeSet0 = PersistentTreeSet.EMPTY;
      } catch(NoClassDefFoundError e) {}
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, KafkaSpout.OffsetEntry> kafkaSpoutConfig0 = (KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, KafkaSpout.OffsetEntry>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<KafkaSpoutStreamsWildcardTopics, KafkaSpout.OffsetEntry> kafkaSpout0 = new KafkaSpout<KafkaSpoutStreamsWildcardTopics, KafkaSpout.OffsetEntry>(kafkaSpoutConfig0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertNotNull(kafkaSpout0);
      
      ConsumerRecords<KafkaSpoutStreamsWildcardTopics, KafkaSpout.OffsetEntry> consumerRecords0 = ConsumerRecords.empty();
      assertTrue(consumerRecords0.isEmpty());
      assertNotNull(consumerRecords0);
      
      kafkaSpout0.setWaitingToEmit(consumerRecords0);
      assertTrue(consumerRecords0.isEmpty());
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      
      KafkaSpout<Header, OffsetAndMetadata> kafkaSpout1 = new KafkaSpout<Header, OffsetAndMetadata>();
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertNotNull(kafkaSpout1);
      
      KafkaSpout.Timer kafkaSpout_Timer0 = kafkaSpout1.new Timer();
      assertNull(kafkaSpout_Timer0.getTimeUnit());
      assertEquals(0L, kafkaSpout_Timer0.period());
      assertEquals(0L, kafkaSpout_Timer0.delay());
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertEquals(0L, kafkaSpout_Timer0.delay);
      assertEquals(0L, kafkaSpout_Timer0.periodNanos);
      assertEquals(0L, kafkaSpout_Timer0.period);
      assertEquals(0L, kafkaSpout_Timer0.start);
      assertNotNull(kafkaSpout_Timer0);
      
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      kafkaSpout_Timer0.timeUnit = timeUnit0;
      assertEquals(TimeUnit.MILLISECONDS, kafkaSpout_Timer0.getTimeUnit());
      assertEquals(0L, kafkaSpout_Timer0.period());
      assertEquals(0L, kafkaSpout_Timer0.delay());
      
      TimeUnit timeUnit1 = kafkaSpout_Timer0.getTimeUnit();
      assertEquals(TimeUnit.MILLISECONDS, kafkaSpout_Timer0.getTimeUnit());
      assertEquals(0L, kafkaSpout_Timer0.period());
      assertEquals(0L, kafkaSpout_Timer0.delay());
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertEquals(0L, kafkaSpout_Timer0.delay);
      assertEquals(0L, kafkaSpout_Timer0.periodNanos);
      assertEquals(0L, kafkaSpout_Timer0.period);
      assertEquals(0L, kafkaSpout_Timer0.start);
      assertSame(timeUnit1, timeUnit0);
      
      KafkaSpout<ConsumerRecord<String, KafkaSpoutMessageId>, TopicPartition> kafkaSpout2 = new KafkaSpout<ConsumerRecord<String, KafkaSpoutMessageId>, TopicPartition>();
      assertEquals(0, kafkaSpout2.maxRetries);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      assertFalse(kafkaSpout2.initialized);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertNotNull(kafkaSpout2);
      
      KafkaSpout.KafkaSpoutConsumerRebalanceListener kafkaSpout_KafkaSpoutConsumerRebalanceListener0 = kafkaSpout2.new KafkaSpoutConsumerRebalanceListener();
      assertEquals(0, kafkaSpout2.maxRetries);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      assertFalse(kafkaSpout2.initialized);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertNotNull(kafkaSpout_KafkaSpoutConsumerRebalanceListener0);
      
      OutputFieldsGetter outputFieldsGetter0 = new OutputFieldsGetter();
      assertNotNull(outputFieldsGetter0);
      
      // Undeclared exception!
      try { 
        kafkaSpout2.declareOutputFields(outputFieldsGetter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, KafkaSpout.OffsetEntry> kafkaSpoutConfig0 = (KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, KafkaSpout.OffsetEntry>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null, (KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<KafkaSpoutStreamsWildcardTopics, KafkaSpout.OffsetEntry> kafkaSpout0 = new KafkaSpout<KafkaSpoutStreamsWildcardTopics, KafkaSpout.OffsetEntry>(kafkaSpoutConfig0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertNotNull(kafkaSpout0);
      
      kafkaSpout0.nextTuple();
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      
      ConsumerRecords<KafkaSpoutStreamsWildcardTopics, KafkaSpout.OffsetEntry> consumerRecords0 = ConsumerRecords.empty();
      assertTrue(consumerRecords0.isEmpty());
      assertNotNull(consumerRecords0);
      
      Spliterator<ConsumerRecord<KafkaSpoutStreamsWildcardTopics, KafkaSpout.OffsetEntry>> spliterator0 = consumerRecords0.spliterator();
      assertTrue(consumerRecords0.isEmpty());
      assertNotNull(spliterator0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      KafkaSpout<Header, OffsetAndMetadata> kafkaSpout1 = new KafkaSpout<Header, OffsetAndMetadata>(kafkaSpout0.kafkaSpoutConfig);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertNotNull(kafkaSpout1);
      
      KafkaSpout.Timer kafkaSpout_Timer0 = kafkaSpout1.new Timer();
      assertEquals(0L, kafkaSpout_Timer0.period());
      assertEquals(0L, kafkaSpout_Timer0.delay());
      assertNull(kafkaSpout_Timer0.getTimeUnit());
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0L, kafkaSpout_Timer0.period);
      assertEquals(0L, kafkaSpout_Timer0.delay);
      assertEquals(0L, kafkaSpout_Timer0.periodNanos);
      assertEquals(0L, kafkaSpout_Timer0.start);
      assertNotNull(kafkaSpout_Timer0);
      
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      kafkaSpout_Timer0.timeUnit = timeUnit0;
      assertEquals(TimeUnit.MILLISECONDS, kafkaSpout_Timer0.getTimeUnit());
      assertEquals(0L, kafkaSpout_Timer0.period());
      assertEquals(0L, kafkaSpout_Timer0.delay());
      
      TimeUnit timeUnit1 = kafkaSpout_Timer0.getTimeUnit();
      assertEquals(TimeUnit.MILLISECONDS, kafkaSpout_Timer0.getTimeUnit());
      assertEquals(0L, kafkaSpout_Timer0.period());
      assertEquals(0L, kafkaSpout_Timer0.delay());
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0L, kafkaSpout_Timer0.period);
      assertEquals(0L, kafkaSpout_Timer0.delay);
      assertEquals(0L, kafkaSpout_Timer0.periodNanos);
      assertEquals(0L, kafkaSpout_Timer0.start);
      assertSame(timeUnit1, timeUnit0);
      
      KafkaSpout<ConsumerRecord<String, KafkaSpoutMessageId>, TopicPartition> kafkaSpout2 = new KafkaSpout<ConsumerRecord<String, KafkaSpoutMessageId>, TopicPartition>();
      assertFalse(kafkaSpout2.initialized);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertEquals(0, kafkaSpout2.maxRetries);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      assertNotNull(kafkaSpout2);
      
      KafkaSpout.KafkaSpoutConsumerRebalanceListener kafkaSpout_KafkaSpoutConsumerRebalanceListener0 = kafkaSpout2.new KafkaSpoutConsumerRebalanceListener();
      assertFalse(kafkaSpout2.initialized);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertEquals(0, kafkaSpout2.maxRetries);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      assertNotNull(kafkaSpout_KafkaSpoutConsumerRebalanceListener0);
      
      ArrayList<TopicPartition> arrayList0 = new ArrayList<TopicPartition>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      // Undeclared exception!
      try { 
        kafkaSpout_KafkaSpoutConsumerRebalanceListener0.initialize(arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout$KafkaSpoutConsumerRebalanceListener", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      KafkaSpoutConfig<String, Delayed> kafkaSpoutConfig0 = (KafkaSpoutConfig<String, Delayed>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null, (KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      doReturn(0).when(kafkaSpoutConfig0).getMaxUncommittedOffsets();
      KafkaSpout<String, Delayed> kafkaSpout0 = new KafkaSpout<String, Delayed>(kafkaSpoutConfig0);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertNotNull(kafkaSpout0);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout0.new OffsetEntry();
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertNotNull(kafkaSpout_OffsetEntry0);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry1 = kafkaSpout0.new OffsetEntry(kafkaSpout_OffsetEntry0.tp, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertNotNull(kafkaSpout_OffsetEntry1);
      
      TopicPartition topicPartition0 = kafkaSpout_OffsetEntry1.tp;
      assertNull(topicPartition0);
      
      String string0 = "K8 itY8";
      int int0 = 2;
      TopicPartition topicPartition1 = new TopicPartition(string0, int0);
      assertEquals("K8 itY8", topicPartition1.topic());
      assertEquals(2, topicPartition1.partition());
      assertNotNull(topicPartition1);
      
      boolean boolean0 = topicPartition1.equals(kafkaSpout_OffsetEntry1);
      assertEquals("K8 itY8", topicPartition1.topic());
      assertEquals(2, topicPartition1.partition());
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(boolean0);
      
      kafkaSpout_OffsetEntry1.tp = topicPartition1;
      assertEquals("K8 itY8", topicPartition1.topic());
      assertEquals(2, topicPartition1.partition());
      assertEquals(2, kafkaSpout_OffsetEntry1.tp.partition());
      assertEquals("K8 itY8", kafkaSpout_OffsetEntry1.tp.topic());
      
      KafkaSpoutMessageId kafkaSpoutMessageId0 = new KafkaSpoutMessageId(topicPartition0, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(0L, kafkaSpoutMessageId0.offset());
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertNotNull(kafkaSpoutMessageId0);
      
      boolean boolean1 = kafkaSpout0.poll();
      assertTrue(boolean1 == boolean0);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(boolean1);
      
      kafkaSpout_OffsetEntry0.add(kafkaSpoutMessageId0);
      assertEquals(0L, kafkaSpoutMessageId0.offset());
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      
      OffsetAndMetadata offsetAndMetadata0 = kafkaSpout_OffsetEntry0.findNextCommitOffset();
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertNull(offsetAndMetadata0);
      
      KafkaSpout<Object, Object> kafkaSpout1 = new KafkaSpout<Object, Object>(kafkaSpout0.kafkaSpoutConfig);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertNotNull(kafkaSpout1);
      
      KafkaSpout<KafkaSpoutStreamsNamedTopics, Object> kafkaSpout2 = new KafkaSpout<KafkaSpoutStreamsNamedTopics, Object>();
      assertFalse(kafkaSpout2.initialized);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout2.maxRetries);
      assertNotNull(kafkaSpout2);
      
      TreeSet<KafkaSpoutMessageId> treeSet0 = new TreeSet<KafkaSpoutMessageId>();
      assertNotNull(treeSet0);
      
      kafkaSpout_OffsetEntry0.ackedMsgs = (NavigableSet<KafkaSpoutMessageId>) treeSet0;
      assertTrue(kafkaSpout_OffsetEntry0.ackedMsgs.isEmpty());
      assertEquals(0, kafkaSpout_OffsetEntry0.ackedMsgs.size());
      
      boolean boolean2 = topicPartition1.equals(kafkaSpout2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals("K8 itY8", topicPartition1.topic());
      assertEquals(2, topicPartition1.partition());
      assertFalse(kafkaSpout2.initialized);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout2.maxRetries);
      assertFalse(boolean2);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry2 = kafkaSpout0.new OffsetEntry(kafkaSpout_OffsetEntry1.tp, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertNotNull(kafkaSpout_OffsetEntry2);
      
      String string1 = kafkaSpout_OffsetEntry2.toString();
      assertFalse(string1.equals((Object)string0));
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertNotSame(string1, string0);
      assertEquals("OffsetEntry{topic-partition=K8 itY8-2, fetchOffset=0, committedOffset=-1, ackedMsgs=[]}", string1);
      assertNotNull(string1);
      
      KafkaSpoutConfig<Object, SpecificAggregateStats._Fields> kafkaSpoutConfig1 = (KafkaSpoutConfig<Object, SpecificAggregateStats._Fields>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn(kafkaSpout2.kafkaSpoutStreams).when(kafkaSpoutConfig1).getKafkaSpoutStreams();
      KafkaSpout<Object, SpecificAggregateStats._Fields> kafkaSpout3 = new KafkaSpout<Object, SpecificAggregateStats._Fields>(kafkaSpoutConfig1);
      assertFalse(kafkaSpout3.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout3.maxRetries);
      assertFalse(kafkaSpout3.initialized);
      assertEquals(0L, kafkaSpout3.numUncommittedOffsets);
      assertFalse(kafkaSpout2.initialized);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout2.maxRetries);
      assertNotNull(kafkaSpout3);
      
      OutputFieldsGetter outputFieldsGetter0 = new OutputFieldsGetter();
      assertNotNull(outputFieldsGetter0);
      
      long long0 = 356L;
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      KafkaSpout.Timer kafkaSpout_Timer0 = kafkaSpout0.new Timer(long0, kafkaSpout1.numUncommittedOffsets, timeUnit0);
      assertEquals(TimeUnit.MICROSECONDS, kafkaSpout_Timer0.getTimeUnit());
      assertEquals(0L, kafkaSpout_Timer0.period());
      assertEquals(356L, kafkaSpout_Timer0.delay());
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout_Timer0.period);
      assertEquals(1392409281676000L, kafkaSpout_Timer0.start);
      assertEquals(0L, kafkaSpout_Timer0.periodNanos);
      assertEquals(356L, kafkaSpout_Timer0.delay);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertNotNull(kafkaSpout_Timer0);
      
      long long1 = kafkaSpout_Timer0.period();
      assertFalse(long1 == long0);
      assertEquals(TimeUnit.MICROSECONDS, kafkaSpout_Timer0.getTimeUnit());
      assertEquals(0L, kafkaSpout_Timer0.period());
      assertEquals(356L, kafkaSpout_Timer0.delay());
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout_Timer0.period);
      assertEquals(1392409281676000L, kafkaSpout_Timer0.start);
      assertEquals(0L, kafkaSpout_Timer0.periodNanos);
      assertEquals(356L, kafkaSpout_Timer0.delay);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0L, long1);
      
      KafkaSpout<Integer, String> kafkaSpout4 = null;
      try {
        kafkaSpout4 = new KafkaSpout<Integer, String>(kafkaSpout2.kafkaSpoutConfig);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      String string0 = "G";
      PersistentTreeMap persistentTreeMap0 = null;
      try {
        persistentTreeMap0 = new PersistentTreeMap();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      KafkaSpout<AbstractMap.SimpleImmutableEntry<KafkaSpoutMessageId, KafkaSpoutStreamsWildcardTopics>, SpecificAggregateStats._Fields> kafkaSpout0 = new KafkaSpout<AbstractMap.SimpleImmutableEntry<KafkaSpoutMessageId, KafkaSpoutStreamsWildcardTopics>, SpecificAggregateStats._Fields>();
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertNotNull(kafkaSpout0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "gkmN";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      PersistentArrayMap persistentArrayMap0 = PersistentArrayMap.EMPTY;
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(0, persistentArrayMap0.count());
      assertNotNull(persistentArrayMap0);
      
      ConsumerRecords<AbstractMap.SimpleImmutableEntry<KafkaSpoutMessageId, KafkaSpoutStreamsWildcardTopics>, SpecificAggregateStats._Fields> consumerRecords0 = new ConsumerRecords<AbstractMap.SimpleImmutableEntry<KafkaSpoutMessageId, KafkaSpoutStreamsWildcardTopics>, SpecificAggregateStats._Fields>(persistentArrayMap0);
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(0, persistentArrayMap0.count());
      assertTrue(consumerRecords0.isEmpty());
      assertNotNull(consumerRecords0);
      
      kafkaSpout0.setWaitingToEmit(consumerRecords0);
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(0, persistentArrayMap0.count());
      assertTrue(consumerRecords0.isEmpty());
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      
      Object object0 = null;
      // Undeclared exception!
      try { 
        kafkaSpout0.ack(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      KafkaSpoutConfig.FirstPollOffsetStrategy kafkaSpoutConfig_FirstPollOffsetStrategy0 = KafkaSpoutConfig.FirstPollOffsetStrategy.UNCOMMITTED_LATEST;
      KafkaSpoutStreams kafkaSpoutStreams0 = null;
      int int0 = 783;
      KafkaSpoutConfig<SpecificAggregateStats._Fields, Delayed> kafkaSpoutConfig0 = (KafkaSpoutConfig<SpecificAggregateStats._Fields, Delayed>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(kafkaSpoutConfig0).getConsumerGroupId();
      doReturn(kafkaSpoutStreams0).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      doReturn((Pattern) null).when(kafkaSpoutConfig0).getTopicWildcardPattern();
      KafkaSpout<SpecificAggregateStats._Fields, Delayed> kafkaSpout0 = new KafkaSpout<SpecificAggregateStats._Fields, Delayed>(kafkaSpoutConfig0);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertNotNull(kafkaSpout0);
      
      KafkaSpoutRetryService kafkaSpoutRetryService0 = kafkaSpout0.retryService;
      assertNull(kafkaSpoutRetryService0);
      
      boolean boolean0 = false;
      Pattern pattern0 = kafkaSpout0.kafkaSpoutConfig.getTopicWildcardPattern();
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertNull(pattern0);
      
      KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, Integer> kafkaSpoutConfig1 = (KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, Integer>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn(kafkaSpoutConfig_FirstPollOffsetStrategy0).when(kafkaSpoutConfig1).getFirstPollOffsetStrategy();
      doReturn(kafkaSpoutStreams0).when(kafkaSpoutConfig1).getKafkaSpoutStreams();
      doReturn(int0).when(kafkaSpoutConfig1).getMaxTupleRetries();
      doReturn((long)int0).when(kafkaSpoutConfig1).getOffsetsCommitPeriodMs();
      doReturn(kafkaSpoutRetryService0).when(kafkaSpoutConfig1).getRetryService();
      doReturn(pattern0).when(kafkaSpoutConfig1).getTopicWildcardPattern();
      doReturn(kafkaSpout0.tuplesBuilder).when(kafkaSpoutConfig1).getTuplesBuilder();
      doReturn(boolean0).when(kafkaSpoutConfig1).isConsumerAutoCommitMode();
      KafkaSpout<KafkaSpoutStreamsNamedTopics, Integer> kafkaSpout1 = new KafkaSpout<KafkaSpoutStreamsNamedTopics, Integer>(kafkaSpoutConfig1);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertNotNull(kafkaSpout1);
      
      KafkaSpoutStreams kafkaSpoutStreams1 = kafkaSpout1.kafkaSpoutStreams;
      assertNull(kafkaSpoutStreams1);
      
      KafkaSpoutStreams kafkaSpoutStreams2 = null;
      Pattern pattern1 = kafkaSpout1.kafkaSpoutConfig.getTopicWildcardPattern();
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertNull(pattern1);
      
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig2 = (KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsWildcardTopics>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn(kafkaSpoutStreams1, kafkaSpoutStreams2).when(kafkaSpoutConfig2).getKafkaSpoutStreams();
      KafkaSpout<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsWildcardTopics> kafkaSpout2 = new KafkaSpout<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsWildcardTopics>(kafkaSpoutConfig2);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      assertFalse(kafkaSpout2.initialized);
      assertEquals(0, kafkaSpout2.maxRetries);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertNotNull(kafkaSpout2);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout2.new OffsetEntry();
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      assertFalse(kafkaSpout2.initialized);
      assertEquals(0, kafkaSpout2.maxRetries);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertNotNull(kafkaSpout_OffsetEntry0);
      
      TopicPartition topicPartition0 = kafkaSpout_OffsetEntry0.tp;
      assertNull(topicPartition0);
      
      long long0 = 2662L;
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry1 = kafkaSpout2.new OffsetEntry();
      assertFalse(kafkaSpout_OffsetEntry1.equals((Object)kafkaSpout_OffsetEntry0));
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      assertFalse(kafkaSpout2.initialized);
      assertEquals(0, kafkaSpout2.maxRetries);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertNotNull(kafkaSpout_OffsetEntry1);
      
      TopicPartition topicPartition1 = kafkaSpout_OffsetEntry1.tp;
      assertNull(topicPartition1);
      
      long long1 = 10000000L;
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry2 = kafkaSpout2.new OffsetEntry(topicPartition1, long1);
      assertFalse(kafkaSpout_OffsetEntry1.equals((Object)kafkaSpout_OffsetEntry0));
      assertFalse(long1 == long0);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      assertFalse(kafkaSpout2.initialized);
      assertEquals(0, kafkaSpout2.maxRetries);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertNotNull(kafkaSpout_OffsetEntry2);
      
      OffsetAndMetadata offsetAndMetadata0 = kafkaSpout_OffsetEntry2.findNextCommitOffset();
      assertFalse(kafkaSpout_OffsetEntry1.equals((Object)kafkaSpout_OffsetEntry0));
      assertFalse(long1 == long0);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      assertFalse(kafkaSpout2.initialized);
      assertEquals(0, kafkaSpout2.maxRetries);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertNotSame(kafkaSpout_OffsetEntry1, kafkaSpout_OffsetEntry0);
      assertNull(offsetAndMetadata0);
      
      kafkaSpout_OffsetEntry0.commit(offsetAndMetadata0);
      assertFalse(kafkaSpout_OffsetEntry1.equals((Object)kafkaSpout_OffsetEntry0));
      assertFalse(long1 == long0);
      assertFalse(kafkaSpout_OffsetEntry0.equals((Object)kafkaSpout_OffsetEntry1));
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      assertFalse(kafkaSpout2.initialized);
      assertEquals(0, kafkaSpout2.maxRetries);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertNotSame(kafkaSpout_OffsetEntry1, kafkaSpout_OffsetEntry0);
      assertNotSame(kafkaSpout_OffsetEntry0, kafkaSpout_OffsetEntry1);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry3 = kafkaSpout2.new OffsetEntry(topicPartition0, long0);
      assertFalse(long0 == long1);
      assertFalse(kafkaSpout_OffsetEntry0.equals((Object)kafkaSpout_OffsetEntry1));
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      assertFalse(kafkaSpout2.initialized);
      assertEquals(0, kafkaSpout2.maxRetries);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertNotNull(kafkaSpout_OffsetEntry3);
      
      StormTopology stormTopology0 = new StormTopology();
      assertEquals(0, stormTopology0.get_bolts_size());
      assertFalse(stormTopology0.is_set_spouts());
      assertFalse(stormTopology0.is_set_worker_hooks());
      assertFalse(stormTopology0.is_set_state_spouts());
      assertEquals(0, stormTopology0.get_dependency_jars_size());
      assertEquals(0, stormTopology0.get_state_spouts_size());
      assertFalse(stormTopology0.is_set_dependency_jars());
      assertFalse(stormTopology0.is_set_dependency_artifacts());
      assertEquals(0, stormTopology0.get_spouts_size());
      assertEquals(0, stormTopology0.get_worker_hooks_size());
      assertFalse(stormTopology0.is_set_bolts());
      assertEquals(0, stormTopology0.get_dependency_artifacts_size());
      assertNotNull(stormTopology0);
      
      StormTopology stormTopology1 = new StormTopology(stormTopology0);
      assertTrue(stormTopology1.equals((Object)stormTopology0));
      assertEquals(0, stormTopology0.get_bolts_size());
      assertFalse(stormTopology0.is_set_spouts());
      assertFalse(stormTopology0.is_set_worker_hooks());
      assertFalse(stormTopology0.is_set_state_spouts());
      assertEquals(0, stormTopology0.get_dependency_jars_size());
      assertEquals(0, stormTopology0.get_state_spouts_size());
      assertFalse(stormTopology0.is_set_dependency_jars());
      assertFalse(stormTopology0.is_set_dependency_artifacts());
      assertEquals(0, stormTopology0.get_spouts_size());
      assertEquals(0, stormTopology0.get_worker_hooks_size());
      assertFalse(stormTopology0.is_set_bolts());
      assertEquals(0, stormTopology0.get_dependency_artifacts_size());
      assertFalse(stormTopology1.is_set_state_spouts());
      assertEquals(0, stormTopology1.get_worker_hooks_size());
      assertEquals(0, stormTopology1.get_dependency_jars_size());
      assertEquals(0, stormTopology1.get_dependency_artifacts_size());
      assertFalse(stormTopology1.is_set_dependency_jars());
      assertFalse(stormTopology1.is_set_worker_hooks());
      assertFalse(stormTopology1.is_set_bolts());
      assertFalse(stormTopology1.is_set_dependency_artifacts());
      assertEquals(0, stormTopology1.get_spouts_size());
      assertEquals(0, stormTopology1.get_state_spouts_size());
      assertFalse(stormTopology1.is_set_spouts());
      assertEquals(0, stormTopology1.get_bolts_size());
      assertNotNull(stormTopology1);
      
      ISeq iSeq0 = null;
      PersistentHashMap persistentHashMap0 = PersistentHashMap.create(iSeq0);
      assertEquals(0, persistentHashMap0.count());
      assertNotNull(persistentHashMap0);
      
      String string0 = "";
      Integer integer0 = new Integer(kafkaSpout1.maxRetries);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      List<Integer> list0 = null;
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(kafkaSpout1.initialized);
      assertEquals("false", atomicBoolean0.toString());
      assertFalse(atomicBoolean0.get());
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertNotNull(atomicBoolean0);
      
      TopologyContext topologyContext0 = new TopologyContext(stormTopology1, kafkaSpout1.acked, persistentHashMap0, persistentHashMap0, persistentHashMap0, string0, string0, string0, integer0, (Integer) kafkaSpoutConfig2.DEFAULT_MAX_RETRIES, list0, persistentHashMap0, persistentHashMap0, persistentHashMap0, persistentHashMap0, atomicBoolean0);
      assertTrue(stormTopology0.equals((Object)stormTopology1));
      assertTrue(stormTopology1.equals((Object)stormTopology0));
      assertFalse(integer0.equals((Object)int0));
      assertEquals("false", atomicBoolean0.toString());
      assertFalse(atomicBoolean0.get());
      assertNull(topologyContext0.getThisComponentId());
      assertEquals(Integer.MAX_VALUE, (int)topologyContext0.getThisWorkerPort());
      assertEquals("", topologyContext0.getCodeDir());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/storm/bd1f5c54752f67b484a83c26667331234234d3a3/evosuite_6", topologyContext0.getPIDDir());
      assertEquals(0, topologyContext0.getThisTaskId());
      assertEquals("", topologyContext0.getStormId());
      assertEquals(0, stormTopology0.get_bolts_size());
      assertFalse(stormTopology0.is_set_spouts());
      assertFalse(stormTopology0.is_set_worker_hooks());
      assertFalse(stormTopology0.is_set_state_spouts());
      assertEquals(0, stormTopology0.get_dependency_jars_size());
      assertEquals(0, stormTopology0.get_state_spouts_size());
      assertFalse(stormTopology0.is_set_dependency_jars());
      assertFalse(stormTopology0.is_set_dependency_artifacts());
      assertEquals(0, stormTopology0.get_spouts_size());
      assertEquals(0, stormTopology0.get_worker_hooks_size());
      assertFalse(stormTopology0.is_set_bolts());
      assertEquals(0, stormTopology0.get_dependency_artifacts_size());
      assertFalse(stormTopology1.is_set_state_spouts());
      assertEquals(0, stormTopology1.get_worker_hooks_size());
      assertEquals(0, stormTopology1.get_dependency_jars_size());
      assertEquals(0, stormTopology1.get_dependency_artifacts_size());
      assertFalse(stormTopology1.is_set_dependency_jars());
      assertFalse(stormTopology1.is_set_worker_hooks());
      assertFalse(stormTopology1.is_set_bolts());
      assertFalse(stormTopology1.is_set_dependency_artifacts());
      assertEquals(0, stormTopology1.get_spouts_size());
      assertEquals(0, stormTopology1.get_state_spouts_size());
      assertFalse(stormTopology1.is_set_spouts());
      assertEquals(0, stormTopology1.get_bolts_size());
      assertEquals(0, persistentHashMap0.count());
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertNotNull(topologyContext0);
      
      kafkaSpout1.open(kafkaSpout2.acked, topologyContext0, kafkaSpout2.collector);
      assertTrue(stormTopology0.equals((Object)stormTopology1));
      assertTrue(stormTopology1.equals((Object)stormTopology0));
      assertFalse(integer0.equals((Object)int0));
      assertEquals("false", atomicBoolean0.toString());
      assertFalse(atomicBoolean0.get());
      assertNull(topologyContext0.getThisComponentId());
      assertEquals(Integer.MAX_VALUE, (int)topologyContext0.getThisWorkerPort());
      assertEquals("", topologyContext0.getCodeDir());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/storm/bd1f5c54752f67b484a83c26667331234234d3a3/evosuite_6", topologyContext0.getPIDDir());
      assertEquals(0, topologyContext0.getThisTaskId());
      assertEquals("", topologyContext0.getStormId());
      assertEquals(0, stormTopology0.get_bolts_size());
      assertFalse(stormTopology0.is_set_spouts());
      assertFalse(stormTopology0.is_set_worker_hooks());
      assertFalse(stormTopology0.is_set_state_spouts());
      assertEquals(0, stormTopology0.get_dependency_jars_size());
      assertEquals(0, stormTopology0.get_state_spouts_size());
      assertFalse(stormTopology0.is_set_dependency_jars());
      assertFalse(stormTopology0.is_set_dependency_artifacts());
      assertEquals(0, stormTopology0.get_spouts_size());
      assertEquals(0, stormTopology0.get_worker_hooks_size());
      assertFalse(stormTopology0.is_set_bolts());
      assertEquals(0, stormTopology0.get_dependency_artifacts_size());
      assertFalse(stormTopology1.is_set_state_spouts());
      assertEquals(0, stormTopology1.get_worker_hooks_size());
      assertEquals(0, stormTopology1.get_dependency_jars_size());
      assertEquals(0, stormTopology1.get_dependency_artifacts_size());
      assertFalse(stormTopology1.is_set_dependency_jars());
      assertFalse(stormTopology1.is_set_worker_hooks());
      assertFalse(stormTopology1.is_set_bolts());
      assertFalse(stormTopology1.is_set_dependency_artifacts());
      assertEquals(0, stormTopology1.get_spouts_size());
      assertEquals(0, stormTopology1.get_state_spouts_size());
      assertFalse(stormTopology1.is_set_spouts());
      assertEquals(0, stormTopology1.get_bolts_size());
      assertEquals(0, persistentHashMap0.count());
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(783, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      assertFalse(kafkaSpout2.initialized);
      assertEquals(0, kafkaSpout2.maxRetries);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertNotSame(stormTopology0, stormTopology1);
      assertNotSame(stormTopology1, stormTopology0);
      
      boolean boolean1 = kafkaSpout_OffsetEntry3.isEmpty();
      assertFalse(long0 == long1);
      assertFalse(boolean1 == boolean0);
      assertFalse(kafkaSpout_OffsetEntry0.equals((Object)kafkaSpout_OffsetEntry1));
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(783, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      assertFalse(kafkaSpout2.initialized);
      assertEquals(0, kafkaSpout2.maxRetries);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertNotSame(kafkaSpout_OffsetEntry0, kafkaSpout_OffsetEntry1);
      assertTrue(boolean1);
      
      OffsetAndMetadata offsetAndMetadata1 = kafkaSpout_OffsetEntry3.findNextCommitOffset();
      assertFalse(long0 == long1);
      assertFalse(boolean0 == boolean1);
      assertFalse(kafkaSpout_OffsetEntry0.equals((Object)kafkaSpout_OffsetEntry1));
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(783, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      assertFalse(kafkaSpout2.initialized);
      assertEquals(0, kafkaSpout2.maxRetries);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertNotSame(kafkaSpout_OffsetEntry0, kafkaSpout_OffsetEntry1);
      assertNull(offsetAndMetadata1);
      
      KafkaSpout<String, Object> kafkaSpout3 = new KafkaSpout<String, Object>(kafkaSpout2.kafkaSpoutConfig);
      assertFalse(boolean0 == boolean1);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout3.consumerAutoCommitMode);
      assertFalse(kafkaSpout3.initialized);
      assertEquals(0, kafkaSpout3.maxRetries);
      assertEquals(0L, kafkaSpout3.numUncommittedOffsets);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(783, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      assertFalse(kafkaSpout2.initialized);
      assertEquals(0, kafkaSpout2.maxRetries);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertNotNull(kafkaSpout3);
      
      KafkaSpout.KafkaSpoutConsumerRebalanceListener kafkaSpout_KafkaSpoutConsumerRebalanceListener0 = kafkaSpout0.new KafkaSpoutConsumerRebalanceListener();
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertNotNull(kafkaSpout_KafkaSpoutConsumerRebalanceListener0);
      
      HashSet<TopicPartition> hashSet0 = new HashSet<TopicPartition>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      // Undeclared exception!
      try { 
        kafkaSpout_KafkaSpoutConsumerRebalanceListener0.onPartitionsAssigned(hashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout$KafkaSpoutConsumerRebalanceListener", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      KafkaSpout<Object, Object> kafkaSpout0 = new KafkaSpout<Object, Object>();
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertNotNull(kafkaSpout0);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout0.new OffsetEntry();
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertNotNull(kafkaSpout_OffsetEntry0);
      
      String string0 = kafkaSpout_OffsetEntry0.toString();
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals("OffsetEntry{topic-partition=null, fetchOffset=0, committedOffset=0, ackedMsgs=[]}", string0);
      assertNotNull(string0);
      
      String string1 = kafkaSpout_OffsetEntry0.toString();
      assertTrue(string1.equals((Object)string0));
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertNotSame(string1, string0);
      assertEquals("OffsetEntry{topic-partition=null, fetchOffset=0, committedOffset=0, ackedMsgs=[]}", string1);
      assertNotNull(string1);
      
      PersistentList persistentList0 = new PersistentList(kafkaSpout0);
      assertFalse(persistentList0.isEmpty());
      assertEquals(1, persistentList0.count());
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertNotNull(persistentList0);
      
      Object[] objectArray0 = new Object[1];
      String string2 = "Pe|,1,=yk-|+";
      boolean boolean0 = kafkaSpout_OffsetEntry0.isEmpty();
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertTrue(boolean0);
      
      int int0 = 1486;
      long long0 = 493L;
      long long1 = 10000000L;
      TimestampType timestampType0 = TimestampType.NO_TIMESTAMP_TYPE;
      String string3 = "Pe|,1,=yk-|+";
      long long2 = (-2145604833L);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      KafkaSpout.Timer kafkaSpout_Timer0 = kafkaSpout0.new Timer(long2, long1, timeUnit0);
      assertFalse(long1 == long0);
      assertFalse(long1 == long2);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals(TimeUnit.MINUTES, kafkaSpout_Timer0.getTimeUnit());
      assertEquals(10000000L, kafkaSpout_Timer0.period());
      assertEquals((-2145604833L), kafkaSpout_Timer0.delay());
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(600000000000000000L, kafkaSpout_Timer0.periodNanos);
      assertEquals((-9221979627573455808L), kafkaSpout_Timer0.start);
      assertEquals((-2145604833L), kafkaSpout_Timer0.delay);
      assertEquals(10000000L, kafkaSpout_Timer0.period);
      assertNotNull(kafkaSpout_Timer0);
      
      boolean boolean1 = kafkaSpout_Timer0.isExpiredResetOnTrue();
      assertFalse(boolean1 == boolean0);
      assertFalse(long1 == long0);
      assertFalse(long1 == long2);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals(TimeUnit.MINUTES, kafkaSpout_Timer0.getTimeUnit());
      assertEquals(10000000L, kafkaSpout_Timer0.period());
      assertEquals((-2145604833L), kafkaSpout_Timer0.delay());
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(600000000000000000L, kafkaSpout_Timer0.periodNanos);
      assertEquals((-9221979627573455808L), kafkaSpout_Timer0.start);
      assertEquals((-2145604833L), kafkaSpout_Timer0.delay);
      assertEquals(10000000L, kafkaSpout_Timer0.period);
      assertFalse(boolean1);
      
      SpecificAggregateStats._Fields specificAggregateStats__Fields0 = SpecificAggregateStats._Fields.SPOUT;
      kafkaSpout_Timer0.period = long1;
      assertEquals(TimeUnit.MINUTES, kafkaSpout_Timer0.getTimeUnit());
      assertEquals(10000000L, kafkaSpout_Timer0.period());
      assertEquals((-2145604833L), kafkaSpout_Timer0.delay());
      
      long long3 = 234L;
      kafkaSpout_Timer0.periodNanos = long3;
      assertEquals(TimeUnit.MINUTES, kafkaSpout_Timer0.getTimeUnit());
      assertEquals(10000000L, kafkaSpout_Timer0.period());
      assertEquals((-2145604833L), kafkaSpout_Timer0.delay());
      
      KafkaSpoutMessageId kafkaSpoutMessageId0 = new KafkaSpoutMessageId(kafkaSpout_OffsetEntry0.tp, kafkaSpout_Timer0.periodNanos);
      assertFalse(long1 == long3);
      assertFalse(long1 == long0);
      assertFalse(long1 == long2);
      assertFalse(long2 == long0);
      assertFalse(long2 == long3);
      assertFalse(long2 == long1);
      assertEquals(234L, kafkaSpoutMessageId0.offset());
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertEquals(TimeUnit.MINUTES, kafkaSpout_Timer0.getTimeUnit());
      assertEquals(10000000L, kafkaSpout_Timer0.period());
      assertEquals((-2145604833L), kafkaSpout_Timer0.delay());
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals((-9221979627573455808L), kafkaSpout_Timer0.start);
      assertEquals((-2145604833L), kafkaSpout_Timer0.delay);
      assertEquals(234L, kafkaSpout_Timer0.periodNanos);
      assertEquals(10000000L, kafkaSpout_Timer0.period);
      assertNotNull(kafkaSpoutMessageId0);
      
      ConsumerRecord<SpecificAggregateStats._Fields, KafkaSpoutMessageId> consumerRecord0 = new ConsumerRecord<SpecificAggregateStats._Fields, KafkaSpoutMessageId>(string3, kafkaSpout0.maxRetries, long0, specificAggregateStats__Fields0, kafkaSpoutMessageId0);
      assertFalse(long0 == long2);
      assertFalse(long0 == long3);
      assertFalse(long0 == long1);
      assertFalse(long1 == long3);
      assertFalse(long1 == long0);
      assertFalse(long1 == long2);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(long2 == long0);
      assertFalse(long2 == long3);
      assertFalse(long2 == long1);
      assertEquals(234L, kafkaSpoutMessageId0.offset());
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertEquals(TimestampType.NO_TIMESTAMP_TYPE, consumerRecord0.timestampType());
      assertEquals(493L, consumerRecord0.offset());
      assertEquals((-1), consumerRecord0.serializedKeySize());
      assertEquals(0, consumerRecord0.partition());
      assertEquals("Pe|,1,=yk-|+", consumerRecord0.topic());
      assertEquals((-1), consumerRecord0.serializedValueSize());
      assertEquals((-1L), consumerRecord0.timestamp());
      assertEquals(TimeUnit.MINUTES, kafkaSpout_Timer0.getTimeUnit());
      assertEquals(10000000L, kafkaSpout_Timer0.period());
      assertEquals((-2145604833L), kafkaSpout_Timer0.delay());
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals((-1), ConsumerRecord.NULL_CHECKSUM);
      assertEquals((-1L), ConsumerRecord.NO_TIMESTAMP);
      assertEquals((-1), ConsumerRecord.NULL_SIZE);
      assertEquals((-9221979627573455808L), kafkaSpout_Timer0.start);
      assertEquals((-2145604833L), kafkaSpout_Timer0.delay);
      assertEquals(234L, kafkaSpout_Timer0.periodNanos);
      assertEquals(10000000L, kafkaSpout_Timer0.period);
      assertNotNull(consumerRecord0);
      
      boolean boolean2 = kafkaSpout_OffsetEntry0.contains(consumerRecord0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(long0 == long2);
      assertFalse(long0 == long3);
      assertFalse(long0 == long1);
      assertFalse(long1 == long3);
      assertFalse(long1 == long0);
      assertFalse(long1 == long2);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(long2 == long0);
      assertFalse(long2 == long3);
      assertFalse(long2 == long1);
      assertEquals(234L, kafkaSpoutMessageId0.offset());
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertEquals(TimestampType.NO_TIMESTAMP_TYPE, consumerRecord0.timestampType());
      assertEquals(493L, consumerRecord0.offset());
      assertEquals((-1), consumerRecord0.serializedKeySize());
      assertEquals(0, consumerRecord0.partition());
      assertEquals("Pe|,1,=yk-|+", consumerRecord0.topic());
      assertEquals((-1), consumerRecord0.serializedValueSize());
      assertEquals((-1L), consumerRecord0.timestamp());
      assertEquals(TimeUnit.MINUTES, kafkaSpout_Timer0.getTimeUnit());
      assertEquals(10000000L, kafkaSpout_Timer0.period());
      assertEquals((-2145604833L), kafkaSpout_Timer0.delay());
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals((-1), ConsumerRecord.NULL_CHECKSUM);
      assertEquals((-1L), ConsumerRecord.NO_TIMESTAMP);
      assertEquals((-1), ConsumerRecord.NULL_SIZE);
      assertEquals((-9221979627573455808L), kafkaSpout_Timer0.start);
      assertEquals((-2145604833L), kafkaSpout_Timer0.delay);
      assertEquals(234L, kafkaSpout_Timer0.periodNanos);
      assertEquals(10000000L, kafkaSpout_Timer0.period);
      assertNotSame(string3, string0);
      assertSame(string3, string2);
      assertNotSame(string3, string1);
      assertFalse(boolean2);
      
      Long long4 = new Long(kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long0));
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, (long)long4);
      assertNotNull(long4);
      
      RecordHeaders recordHeaders0 = new RecordHeaders();
      assertNotNull(recordHeaders0);
      
      ConsumerRecord<Object, Object> consumerRecord1 = new ConsumerRecord<Object, Object>(string2, int0, long0, long1, timestampType0, long4, kafkaSpout0.maxRetries, int0, string2, kafkaSpout_OffsetEntry0, recordHeaders0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long0));
      assertFalse(long0 == long2);
      assertFalse(long0 == long3);
      assertFalse(long0 == long1);
      assertFalse(long1 == long3);
      assertFalse(long1 == long0);
      assertFalse(long1 == long2);
      assertEquals(TimestampType.NO_TIMESTAMP_TYPE, consumerRecord1.timestampType());
      assertEquals("Pe|,1,=yk-|+", consumerRecord1.topic());
      assertEquals(493L, consumerRecord1.offset());
      assertEquals(10000000L, consumerRecord1.timestamp());
      assertEquals(1486, consumerRecord1.partition());
      assertEquals(0, consumerRecord1.serializedKeySize());
      assertEquals(1486, consumerRecord1.serializedValueSize());
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals((-1), ConsumerRecord.NULL_SIZE);
      assertEquals((-1L), ConsumerRecord.NO_TIMESTAMP);
      assertEquals((-1), ConsumerRecord.NULL_CHECKSUM);
      assertNotNull(consumerRecord1);
      
      // Undeclared exception!
      try { 
        kafkaSpout0.emitTupleIfNotEmitted(consumerRecord1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      KafkaSpout<AbstractMap.SimpleImmutableEntry<KafkaSpoutMessageId, KafkaSpoutStreamsWildcardTopics>, SpecificAggregateStats._Fields> kafkaSpout0 = new KafkaSpout<AbstractMap.SimpleImmutableEntry<KafkaSpoutMessageId, KafkaSpoutStreamsWildcardTopics>, SpecificAggregateStats._Fields>();
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertNotNull(kafkaSpout0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      EvoSuiteFile evoSuiteFile1 = null;
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)74;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-1);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-32);
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-51);
      byteArray0[3] = byte3;
      KafkaSpout.OffsetComparator kafkaSpout_OffsetComparator0 = new KafkaSpout.OffsetComparator();
      assertNotNull(kafkaSpout_OffsetComparator0);
      
      String string0 = "";
      long long0 = 1L;
      TimestampType timestampType0 = TimestampType.LOG_APPEND_TIME;
      int int0 = 5;
      TopicPartition topicPartition0 = new TopicPartition(string0, byte2);
      assertFalse(byte2 == byte3);
      assertFalse(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertEquals("", topicPartition0.topic());
      assertEquals((-32), topicPartition0.partition());
      assertNotNull(topicPartition0);
      
      long long1 = (-595L);
      KafkaSpoutMessageId kafkaSpoutMessageId0 = new KafkaSpoutMessageId(topicPartition0, long1);
      assertFalse(long1 == long0);
      assertFalse(byte2 == byte3);
      assertFalse(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertEquals("", topicPartition0.topic());
      assertEquals((-32), topicPartition0.partition());
      assertEquals((-595L), kafkaSpoutMessageId0.offset());
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertEquals("", kafkaSpoutMessageId0.topic());
      assertEquals((-32), kafkaSpoutMessageId0.partition());
      assertNotNull(kafkaSpoutMessageId0);
      
      String string1 = "}";
      KafkaSpoutStreamsNamedTopics kafkaSpoutStreamsNamedTopics0 = mock(KafkaSpoutStreamsNamedTopics.class, new ViolatedAssumptionAnswer());
      doReturn(string1).when(kafkaSpoutStreamsNamedTopics0).toString();
      ConsumerRecord<KafkaSpoutMessageId, KafkaSpoutStreamsNamedTopics> consumerRecord0 = new ConsumerRecord<KafkaSpoutMessageId, KafkaSpoutStreamsNamedTopics>(string0, byteArray0[1], long0, kafkaSpout0.maxRetries, timestampType0, long0, int0, byteArray0[3], kafkaSpoutMessageId0, kafkaSpoutStreamsNamedTopics0);
      assertEquals(5, byteArray0.length);
      assertFalse(long1 == long0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(byte2 == byte3);
      assertFalse(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(long0 == long1);
      assertEquals("", topicPartition0.topic());
      assertEquals((-32), topicPartition0.partition());
      assertEquals((-595L), kafkaSpoutMessageId0.offset());
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertEquals("", kafkaSpoutMessageId0.topic());
      assertEquals((-32), kafkaSpoutMessageId0.partition());
      assertEquals(5, consumerRecord0.serializedKeySize());
      assertEquals((-1), consumerRecord0.partition());
      assertEquals(1L, consumerRecord0.offset());
      assertEquals((-51), consumerRecord0.serializedValueSize());
      assertEquals("", consumerRecord0.topic());
      assertEquals(TimestampType.LOG_APPEND_TIME, consumerRecord0.timestampType());
      assertEquals(0L, consumerRecord0.timestamp());
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertEquals((-1), ConsumerRecord.NULL_SIZE);
      assertEquals((-1), ConsumerRecord.NULL_CHECKSUM);
      assertEquals((-1L), ConsumerRecord.NO_TIMESTAMP);
      assertArrayEquals(new byte[] {(byte)74, (byte) (-1), (byte) (-32), (byte) (-51), (byte)0}, byteArray0);
      assertNotNull(consumerRecord0);
      
      String string2 = consumerRecord0.toString();
      assertEquals(5, byteArray0.length);
      assertFalse(byte2 == byte3);
      assertFalse(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", topicPartition0.topic());
      assertEquals((-32), topicPartition0.partition());
      assertEquals((-595L), kafkaSpoutMessageId0.offset());
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertEquals("", kafkaSpoutMessageId0.topic());
      assertEquals((-32), kafkaSpoutMessageId0.partition());
      assertEquals(5, consumerRecord0.serializedKeySize());
      assertEquals((-1), consumerRecord0.partition());
      assertEquals(1L, consumerRecord0.offset());
      assertEquals((-51), consumerRecord0.serializedValueSize());
      assertEquals("", consumerRecord0.topic());
      assertEquals(TimestampType.LOG_APPEND_TIME, consumerRecord0.timestampType());
      assertEquals(0L, consumerRecord0.timestamp());
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertEquals((-1), ConsumerRecord.NULL_SIZE);
      assertEquals((-1), ConsumerRecord.NULL_CHECKSUM);
      assertEquals((-1L), ConsumerRecord.NO_TIMESTAMP);
      assertArrayEquals(new byte[] {(byte)74, (byte) (-1), (byte) (-32), (byte) (-51), (byte)0}, byteArray0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertEquals("ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 1, LogAppendTime = 0, serialized key size = 5, serialized value size = -51, headers = RecordHeaders(headers = [], isReadOnly = false), key = {topic-partition=--32, offset=-595, numFails=0}, value = })", string2);
      assertNotNull(string2);
      
      KafkaSpoutMessageId kafkaSpoutMessageId1 = new KafkaSpoutMessageId(consumerRecord0);
      assertEquals(5, byteArray0.length);
      assertFalse(byte2 == byte3);
      assertFalse(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(kafkaSpoutMessageId1.equals((Object)kafkaSpoutMessageId0));
      assertEquals("", topicPartition0.topic());
      assertEquals((-32), topicPartition0.partition());
      assertEquals((-595L), kafkaSpoutMessageId0.offset());
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertEquals("", kafkaSpoutMessageId0.topic());
      assertEquals((-32), kafkaSpoutMessageId0.partition());
      assertEquals(5, consumerRecord0.serializedKeySize());
      assertEquals((-1), consumerRecord0.partition());
      assertEquals(1L, consumerRecord0.offset());
      assertEquals((-51), consumerRecord0.serializedValueSize());
      assertEquals("", consumerRecord0.topic());
      assertEquals(TimestampType.LOG_APPEND_TIME, consumerRecord0.timestampType());
      assertEquals(0L, consumerRecord0.timestamp());
      assertEquals((-1), kafkaSpoutMessageId1.partition());
      assertEquals(0, kafkaSpoutMessageId1.numFails());
      assertEquals(1L, kafkaSpoutMessageId1.offset());
      assertEquals("", kafkaSpoutMessageId1.topic());
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertEquals((-1), ConsumerRecord.NULL_SIZE);
      assertEquals((-1), ConsumerRecord.NULL_CHECKSUM);
      assertEquals((-1L), ConsumerRecord.NO_TIMESTAMP);
      assertArrayEquals(new byte[] {(byte)74, (byte) (-1), (byte) (-32), (byte) (-51), (byte)0}, byteArray0);
      assertNotNull(kafkaSpoutMessageId1);
      
      int int1 = kafkaSpout_OffsetComparator0.compare(kafkaSpoutMessageId1, kafkaSpoutMessageId0);
      assertEquals(5, byteArray0.length);
      assertFalse(byte2 == byte3);
      assertFalse(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertFalse(kafkaSpoutMessageId0.equals((Object)kafkaSpoutMessageId1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(kafkaSpoutMessageId1.equals((Object)kafkaSpoutMessageId0));
      assertFalse(int1 == int0);
      assertEquals("", topicPartition0.topic());
      assertEquals((-32), topicPartition0.partition());
      assertEquals((-595L), kafkaSpoutMessageId0.offset());
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertEquals("", kafkaSpoutMessageId0.topic());
      assertEquals((-32), kafkaSpoutMessageId0.partition());
      assertEquals(5, consumerRecord0.serializedKeySize());
      assertEquals((-1), consumerRecord0.partition());
      assertEquals(1L, consumerRecord0.offset());
      assertEquals((-51), consumerRecord0.serializedValueSize());
      assertEquals("", consumerRecord0.topic());
      assertEquals(TimestampType.LOG_APPEND_TIME, consumerRecord0.timestampType());
      assertEquals(0L, consumerRecord0.timestamp());
      assertEquals((-1), kafkaSpoutMessageId1.partition());
      assertEquals(0, kafkaSpoutMessageId1.numFails());
      assertEquals(1L, kafkaSpoutMessageId1.offset());
      assertEquals("", kafkaSpoutMessageId1.topic());
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertEquals((-1), ConsumerRecord.NULL_SIZE);
      assertEquals((-1), ConsumerRecord.NULL_CHECKSUM);
      assertEquals((-1L), ConsumerRecord.NO_TIMESTAMP);
      assertArrayEquals(new byte[] {(byte)74, (byte) (-1), (byte) (-32), (byte) (-51), (byte)0}, byteArray0);
      assertNotSame(kafkaSpoutMessageId0, kafkaSpoutMessageId1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(kafkaSpoutMessageId1, kafkaSpoutMessageId0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertEquals(1, int1);
      
      byte byte4 = (byte) (-62);
      byteArray0[4] = byte4;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)74, (byte) (-1), (byte) (-32), (byte) (-51), (byte) (-62)}, byteArray0);
      assertFalse(boolean0);
      
      String string3 = "gkmN";
      TopicPartition topicPartition1 = new TopicPartition(string3, kafkaSpout0.maxRetries);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(topicPartition1.equals((Object)topicPartition0));
      assertEquals(0, topicPartition1.partition());
      assertEquals("gkmN", topicPartition1.topic());
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertNotNull(topicPartition1);
      
      // Undeclared exception!
      try { 
        kafkaSpout0.pollKafkaBroker();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      KafkaSpoutConfig<Object, KafkaSpoutMessageId> kafkaSpoutConfig0 = (KafkaSpoutConfig<Object, KafkaSpoutMessageId>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      doReturn((List) null).when(kafkaSpoutConfig0).getSubscribedTopics();
      KafkaSpout<Object, KafkaSpoutMessageId> kafkaSpout0 = new KafkaSpout<Object, KafkaSpoutMessageId>(kafkaSpoutConfig0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertNotNull(kafkaSpout0);
      
      // Undeclared exception!
      try { 
        kafkaSpout0.getNamedTopics();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      String string0 = "";
      Object[] objectArray0 = new Object[0];
      PersistentArrayMap persistentArrayMap0 = PersistentArrayMap.createAsIfByAssoc(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(0, persistentArrayMap0.count());
      assertNotNull(persistentArrayMap0);
      
      KafkaSpoutConfig<Integer, Object> kafkaSpoutConfig0 = (KafkaSpoutConfig<Integer, Object>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(kafkaSpoutConfig0).getConsumerGroupId();
      doReturn((Map) null).when(kafkaSpoutConfig0).getKafkaProps();
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<Integer, Object> kafkaSpout0 = new KafkaSpout<Integer, Object>(kafkaSpoutConfig0);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertNotNull(kafkaSpout0);
      
      long long0 = (-2739L);
      long long1 = (-1L);
      // Undeclared exception!
      try { 
        kafkaSpout0.getComponentConfiguration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      String string0 = "";
      PersistentArrayMap persistentArrayMap0 = PersistentArrayMap.EMPTY;
      assertEquals(0, persistentArrayMap0.count());
      assertEquals(0, persistentArrayMap0.capacity());
      assertNotNull(persistentArrayMap0);
      
      KafkaSpoutConfig<Integer, Object> kafkaSpoutConfig0 = (KafkaSpoutConfig<Integer, Object>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(kafkaSpoutConfig0).getConsumerGroupId();
      doReturn((Map) null).when(kafkaSpoutConfig0).getKafkaProps();
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<Integer, Object> kafkaSpout0 = new KafkaSpout<Integer, Object>(kafkaSpoutConfig0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertNotNull(kafkaSpout0);
      
      long long0 = (-2739L);
      long long1 = (-1L);
      // Undeclared exception!
      try { 
        kafkaSpout0.getComponentConfiguration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      KafkaSpout<KafkaSpoutMessageId, TopicPartition> kafkaSpout0 = new KafkaSpout<KafkaSpoutMessageId, TopicPartition>();
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertNotNull(kafkaSpout0);
      
      // Undeclared exception!
      try { 
        kafkaSpout0.activate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      KafkaSpout<String, OffsetAndMetadata> kafkaSpout0 = new KafkaSpout<String, OffsetAndMetadata>();
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertNotNull(kafkaSpout0);
      
      // Undeclared exception!
      try { 
        kafkaSpout0.emit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      String string0 = "Nu~\"S t";
      String[] stringArray0 = null;
      Fields fields0 = null;
      try {
        fields0 = new Fields(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      KafkaSpoutConfig.FirstPollOffsetStrategy kafkaSpoutConfig_FirstPollOffsetStrategy0 = KafkaSpoutConfig.FirstPollOffsetStrategy.UNCOMMITTED_LATEST;
      Fields fields0 = null;
      String string0 = "CLIENT";
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, String> kafkaSpoutConfig0 = (KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, String>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<KafkaSpoutStreamsWildcardTopics, String> kafkaSpout0 = new KafkaSpout<KafkaSpoutStreamsWildcardTopics, String>(kafkaSpoutConfig0);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertNotNull(kafkaSpout0);
      
      KafkaSpoutStreams kafkaSpoutStreams0 = kafkaSpout0.kafkaSpoutStreams;
      assertNull(kafkaSpoutStreams0);
      
      KafkaSpoutConfig<Header, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig1 = (KafkaSpoutConfig<Header, KafkaSpoutStreamsNamedTopics>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn(kafkaSpoutStreams0).when(kafkaSpoutConfig1).getKafkaSpoutStreams();
      KafkaSpout<Header, KafkaSpoutStreamsNamedTopics> kafkaSpout1 = new KafkaSpout<Header, KafkaSpoutStreamsNamedTopics>(kafkaSpoutConfig1);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertNotNull(kafkaSpout1);
      
      KafkaSpoutStreams kafkaSpoutStreams1 = kafkaSpout1.kafkaSpoutStreams;
      assertNull(kafkaSpoutStreams1);
      
      int int0 = (-209);
      long long0 = (-1889L);
      boolean boolean0 = true;
      KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, Integer> kafkaSpoutConfig2 = (KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, Integer>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn(kafkaSpoutConfig_FirstPollOffsetStrategy0).when(kafkaSpoutConfig2).getFirstPollOffsetStrategy();
      doReturn(kafkaSpoutStreams1).when(kafkaSpoutConfig2).getKafkaSpoutStreams();
      doReturn(int0).when(kafkaSpoutConfig2).getMaxTupleRetries();
      doReturn(kafkaSpout1.retryService).when(kafkaSpoutConfig2).getRetryService();
      doReturn(kafkaSpout1.tuplesBuilder).when(kafkaSpoutConfig2).getTuplesBuilder();
      doReturn(boolean0).when(kafkaSpoutConfig2).isConsumerAutoCommitMode();
      KafkaSpout<KafkaSpoutStreamsNamedTopics, Integer> kafkaSpout2 = new KafkaSpout<KafkaSpoutStreamsNamedTopics, Integer>(kafkaSpoutConfig2);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout2.initialized);
      assertEquals(0, kafkaSpout2.maxRetries);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertNotNull(kafkaSpout2);
      
      KafkaSpoutStreams kafkaSpoutStreams2 = kafkaSpout2.kafkaSpoutStreams;
      assertNull(kafkaSpoutStreams2);
      
      String string1 = "Offsets successfully committed to Kafka [{}]";
      Pattern pattern0 = Pattern.compile(string1, kafkaSpoutConfig1.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Offsets successfully committed to Kafka [{}]", pattern0.pattern());
      assertEquals(10000000, pattern0.flags());
      assertEquals("Offsets successfully committed to Kafka [{}]", pattern0.toString());
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertNotSame(string1, string0);
      assertNotNull(pattern0);
      
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig3 = (KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsWildcardTopics>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn(kafkaSpoutStreams2, kafkaSpoutStreams2).when(kafkaSpoutConfig3).getKafkaSpoutStreams();
      doReturn(pattern0).when(kafkaSpoutConfig3).getTopicWildcardPattern();
      KafkaSpout<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsWildcardTopics> kafkaSpout3 = new KafkaSpout<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsWildcardTopics>(kafkaSpoutConfig3);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Offsets successfully committed to Kafka [{}]", pattern0.pattern());
      assertEquals(10000000, pattern0.flags());
      assertEquals("Offsets successfully committed to Kafka [{}]", pattern0.toString());
      assertFalse(kafkaSpout3.consumerAutoCommitMode);
      assertFalse(kafkaSpout3.initialized);
      assertEquals(0L, kafkaSpout3.numUncommittedOffsets);
      assertEquals(0, kafkaSpout3.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout2.initialized);
      assertEquals(0, kafkaSpout2.maxRetries);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertNotNull(kafkaSpout3);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout3.new OffsetEntry();
      assertFalse(string1.equals((Object)string0));
      assertEquals("Offsets successfully committed to Kafka [{}]", pattern0.pattern());
      assertEquals(10000000, pattern0.flags());
      assertEquals("Offsets successfully committed to Kafka [{}]", pattern0.toString());
      assertFalse(kafkaSpout3.consumerAutoCommitMode);
      assertFalse(kafkaSpout3.initialized);
      assertEquals(0L, kafkaSpout3.numUncommittedOffsets);
      assertEquals(0, kafkaSpout3.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout2.initialized);
      assertEquals(0, kafkaSpout2.maxRetries);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertNotNull(kafkaSpout_OffsetEntry0);
      
      TopicPartition topicPartition0 = kafkaSpout_OffsetEntry0.tp;
      assertNull(topicPartition0);
      
      long long1 = 2662L;
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry1 = kafkaSpout3.new OffsetEntry();
      assertFalse(kafkaSpout_OffsetEntry1.equals((Object)kafkaSpout_OffsetEntry0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("Offsets successfully committed to Kafka [{}]", pattern0.pattern());
      assertEquals(10000000, pattern0.flags());
      assertEquals("Offsets successfully committed to Kafka [{}]", pattern0.toString());
      assertFalse(kafkaSpout3.consumerAutoCommitMode);
      assertFalse(kafkaSpout3.initialized);
      assertEquals(0L, kafkaSpout3.numUncommittedOffsets);
      assertEquals(0, kafkaSpout3.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout2.initialized);
      assertEquals(0, kafkaSpout2.maxRetries);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertNotNull(kafkaSpout_OffsetEntry1);
      
      TopicPartition topicPartition1 = kafkaSpout_OffsetEntry1.tp;
      assertNull(topicPartition1);
      
      long long2 = 10000000L;
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry2 = kafkaSpout3.new OffsetEntry(topicPartition1, long2);
      assertFalse(kafkaSpout_OffsetEntry1.equals((Object)kafkaSpout_OffsetEntry0));
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Offsets successfully committed to Kafka [{}]", pattern0.pattern());
      assertEquals(10000000, pattern0.flags());
      assertEquals("Offsets successfully committed to Kafka [{}]", pattern0.toString());
      assertFalse(kafkaSpout3.consumerAutoCommitMode);
      assertFalse(kafkaSpout3.initialized);
      assertEquals(0L, kafkaSpout3.numUncommittedOffsets);
      assertEquals(0, kafkaSpout3.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout2.initialized);
      assertEquals(0, kafkaSpout2.maxRetries);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertNotNull(kafkaSpout_OffsetEntry2);
      
      OffsetAndMetadata offsetAndMetadata0 = kafkaSpout_OffsetEntry2.findNextCommitOffset();
      assertFalse(kafkaSpout_OffsetEntry1.equals((Object)kafkaSpout_OffsetEntry0));
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Offsets successfully committed to Kafka [{}]", pattern0.pattern());
      assertEquals(10000000, pattern0.flags());
      assertEquals("Offsets successfully committed to Kafka [{}]", pattern0.toString());
      assertFalse(kafkaSpout3.consumerAutoCommitMode);
      assertFalse(kafkaSpout3.initialized);
      assertEquals(0L, kafkaSpout3.numUncommittedOffsets);
      assertEquals(0, kafkaSpout3.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout2.initialized);
      assertEquals(0, kafkaSpout2.maxRetries);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertNotSame(kafkaSpout_OffsetEntry1, kafkaSpout_OffsetEntry0);
      assertNotSame(string1, string0);
      assertNull(offsetAndMetadata0);
      
      kafkaSpout_OffsetEntry0.commit(offsetAndMetadata0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(kafkaSpout_OffsetEntry0.equals((Object)kafkaSpout_OffsetEntry1));
      assertFalse(kafkaSpout_OffsetEntry1.equals((Object)kafkaSpout_OffsetEntry0));
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals("Offsets successfully committed to Kafka [{}]", pattern0.pattern());
      assertEquals(10000000, pattern0.flags());
      assertEquals("Offsets successfully committed to Kafka [{}]", pattern0.toString());
      assertFalse(kafkaSpout3.consumerAutoCommitMode);
      assertFalse(kafkaSpout3.initialized);
      assertEquals(0L, kafkaSpout3.numUncommittedOffsets);
      assertEquals(0, kafkaSpout3.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout2.initialized);
      assertEquals(0, kafkaSpout2.maxRetries);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertNotSame(kafkaSpout_OffsetEntry0, kafkaSpout_OffsetEntry1);
      assertNotSame(kafkaSpout_OffsetEntry1, kafkaSpout_OffsetEntry0);
      assertNotSame(string1, string0);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry3 = kafkaSpout3.new OffsetEntry(topicPartition0, long1);
      assertFalse(kafkaSpout_OffsetEntry0.equals((Object)kafkaSpout_OffsetEntry1));
      assertFalse(long1 == long0);
      assertFalse(long1 == long2);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Offsets successfully committed to Kafka [{}]", pattern0.pattern());
      assertEquals(10000000, pattern0.flags());
      assertEquals("Offsets successfully committed to Kafka [{}]", pattern0.toString());
      assertFalse(kafkaSpout3.consumerAutoCommitMode);
      assertFalse(kafkaSpout3.initialized);
      assertEquals(0L, kafkaSpout3.numUncommittedOffsets);
      assertEquals(0, kafkaSpout3.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout2.initialized);
      assertEquals(0, kafkaSpout2.maxRetries);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertNotNull(kafkaSpout_OffsetEntry3);
      
      StormTopology stormTopology0 = new StormTopology();
      assertFalse(stormTopology0.is_set_state_spouts());
      assertEquals(0, stormTopology0.get_dependency_artifacts_size());
      assertEquals(0, stormTopology0.get_worker_hooks_size());
      assertEquals(0, stormTopology0.get_spouts_size());
      assertEquals(0, stormTopology0.get_dependency_jars_size());
      assertFalse(stormTopology0.is_set_dependency_artifacts());
      assertEquals(0, stormTopology0.get_bolts_size());
      assertEquals(0, stormTopology0.get_state_spouts_size());
      assertFalse(stormTopology0.is_set_spouts());
      assertFalse(stormTopology0.is_set_worker_hooks());
      assertFalse(stormTopology0.is_set_bolts());
      assertFalse(stormTopology0.is_set_dependency_jars());
      assertNotNull(stormTopology0);
      
      StormTopology stormTopology1 = new StormTopology(stormTopology0);
      assertTrue(stormTopology1.equals((Object)stormTopology0));
      assertFalse(stormTopology0.is_set_state_spouts());
      assertEquals(0, stormTopology0.get_dependency_artifacts_size());
      assertEquals(0, stormTopology0.get_worker_hooks_size());
      assertEquals(0, stormTopology0.get_spouts_size());
      assertEquals(0, stormTopology0.get_dependency_jars_size());
      assertFalse(stormTopology0.is_set_dependency_artifacts());
      assertEquals(0, stormTopology0.get_bolts_size());
      assertEquals(0, stormTopology0.get_state_spouts_size());
      assertFalse(stormTopology0.is_set_spouts());
      assertFalse(stormTopology0.is_set_worker_hooks());
      assertFalse(stormTopology0.is_set_bolts());
      assertFalse(stormTopology0.is_set_dependency_jars());
      assertFalse(stormTopology1.is_set_dependency_artifacts());
      assertFalse(stormTopology1.is_set_worker_hooks());
      assertFalse(stormTopology1.is_set_bolts());
      assertEquals(0, stormTopology1.get_dependency_artifacts_size());
      assertEquals(0, stormTopology1.get_worker_hooks_size());
      assertFalse(stormTopology1.is_set_dependency_jars());
      assertFalse(stormTopology1.is_set_state_spouts());
      assertEquals(0, stormTopology1.get_state_spouts_size());
      assertEquals(0, stormTopology1.get_bolts_size());
      assertEquals(0, stormTopology1.get_spouts_size());
      assertEquals(0, stormTopology1.get_dependency_jars_size());
      assertFalse(stormTopology1.is_set_spouts());
      assertNotNull(stormTopology1);
      
      ISeq iSeq0 = null;
      PersistentHashMap persistentHashMap0 = PersistentHashMap.create(iSeq0);
      assertEquals(0, persistentHashMap0.count());
      assertNotNull(persistentHashMap0);
      
      String string2 = "";
      Integer integer0 = new Integer(kafkaSpout2.maxRetries);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout2.initialized);
      assertEquals(0, kafkaSpout2.maxRetries);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      List<Integer> list0 = null;
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(kafkaSpout2.initialized);
      assertEquals("false", atomicBoolean0.toString());
      assertFalse(atomicBoolean0.get());
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout2.initialized);
      assertEquals(0, kafkaSpout2.maxRetries);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertNotNull(atomicBoolean0);
      
      TopologyContext topologyContext0 = new TopologyContext(stormTopology1, kafkaSpout2.acked, persistentHashMap0, persistentHashMap0, persistentHashMap0, string2, string2, string2, integer0, (Integer) kafkaSpoutConfig3.DEFAULT_MAX_RETRIES, list0, persistentHashMap0, persistentHashMap0, persistentHashMap0, persistentHashMap0, atomicBoolean0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertTrue(stormTopology0.equals((Object)stormTopology1));
      assertTrue(stormTopology1.equals((Object)stormTopology0));
      assertEquals(0, persistentHashMap0.count());
      assertEquals("Offsets successfully committed to Kafka [{}]", pattern0.pattern());
      assertEquals(10000000, pattern0.flags());
      assertEquals("Offsets successfully committed to Kafka [{}]", pattern0.toString());
      assertEquals("false", atomicBoolean0.toString());
      assertFalse(atomicBoolean0.get());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/storm/bd1f5c54752f67b484a83c26667331234234d3a3/evosuite_6", topologyContext0.getPIDDir());
      assertEquals(0, topologyContext0.getThisTaskId());
      assertEquals(Integer.MAX_VALUE, (int)topologyContext0.getThisWorkerPort());
      assertEquals("", topologyContext0.getCodeDir());
      assertNull(topologyContext0.getThisComponentId());
      assertEquals("", topologyContext0.getStormId());
      assertFalse(stormTopology0.is_set_state_spouts());
      assertEquals(0, stormTopology0.get_dependency_artifacts_size());
      assertEquals(0, stormTopology0.get_worker_hooks_size());
      assertEquals(0, stormTopology0.get_spouts_size());
      assertEquals(0, stormTopology0.get_dependency_jars_size());
      assertFalse(stormTopology0.is_set_dependency_artifacts());
      assertEquals(0, stormTopology0.get_bolts_size());
      assertEquals(0, stormTopology0.get_state_spouts_size());
      assertFalse(stormTopology0.is_set_spouts());
      assertFalse(stormTopology0.is_set_worker_hooks());
      assertFalse(stormTopology0.is_set_bolts());
      assertFalse(stormTopology0.is_set_dependency_jars());
      assertFalse(stormTopology1.is_set_dependency_artifacts());
      assertFalse(stormTopology1.is_set_worker_hooks());
      assertFalse(stormTopology1.is_set_bolts());
      assertEquals(0, stormTopology1.get_dependency_artifacts_size());
      assertEquals(0, stormTopology1.get_worker_hooks_size());
      assertFalse(stormTopology1.is_set_dependency_jars());
      assertFalse(stormTopology1.is_set_state_spouts());
      assertEquals(0, stormTopology1.get_state_spouts_size());
      assertEquals(0, stormTopology1.get_bolts_size());
      assertEquals(0, stormTopology1.get_spouts_size());
      assertEquals(0, stormTopology1.get_dependency_jars_size());
      assertFalse(stormTopology1.is_set_spouts());
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout2.initialized);
      assertEquals(0, kafkaSpout2.maxRetries);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertNotNull(topologyContext0);
      
      kafkaSpout2.open(kafkaSpout3.acked, topologyContext0, kafkaSpout3.collector);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertTrue(stormTopology0.equals((Object)stormTopology1));
      assertTrue(stormTopology1.equals((Object)stormTopology0));
      assertEquals(0, persistentHashMap0.count());
      assertEquals("false", atomicBoolean0.toString());
      assertFalse(atomicBoolean0.get());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/storm/bd1f5c54752f67b484a83c26667331234234d3a3/evosuite_6", topologyContext0.getPIDDir());
      assertEquals(0, topologyContext0.getThisTaskId());
      assertEquals(Integer.MAX_VALUE, (int)topologyContext0.getThisWorkerPort());
      assertEquals("", topologyContext0.getCodeDir());
      assertNull(topologyContext0.getThisComponentId());
      assertEquals("", topologyContext0.getStormId());
      assertEquals("Offsets successfully committed to Kafka [{}]", pattern0.pattern());
      assertEquals(10000000, pattern0.flags());
      assertEquals("Offsets successfully committed to Kafka [{}]", pattern0.toString());
      assertFalse(stormTopology0.is_set_state_spouts());
      assertEquals(0, stormTopology0.get_dependency_artifacts_size());
      assertEquals(0, stormTopology0.get_worker_hooks_size());
      assertEquals(0, stormTopology0.get_spouts_size());
      assertEquals(0, stormTopology0.get_dependency_jars_size());
      assertFalse(stormTopology0.is_set_dependency_artifacts());
      assertEquals(0, stormTopology0.get_bolts_size());
      assertEquals(0, stormTopology0.get_state_spouts_size());
      assertFalse(stormTopology0.is_set_spouts());
      assertFalse(stormTopology0.is_set_worker_hooks());
      assertFalse(stormTopology0.is_set_bolts());
      assertFalse(stormTopology0.is_set_dependency_jars());
      assertFalse(stormTopology1.is_set_dependency_artifacts());
      assertFalse(stormTopology1.is_set_worker_hooks());
      assertFalse(stormTopology1.is_set_bolts());
      assertEquals(0, stormTopology1.get_dependency_artifacts_size());
      assertEquals(0, stormTopology1.get_worker_hooks_size());
      assertFalse(stormTopology1.is_set_dependency_jars());
      assertFalse(stormTopology1.is_set_state_spouts());
      assertEquals(0, stormTopology1.get_state_spouts_size());
      assertEquals(0, stormTopology1.get_bolts_size());
      assertEquals(0, stormTopology1.get_spouts_size());
      assertEquals(0, stormTopology1.get_dependency_jars_size());
      assertFalse(stormTopology1.is_set_spouts());
      assertFalse(kafkaSpout3.consumerAutoCommitMode);
      assertFalse(kafkaSpout3.initialized);
      assertEquals(0L, kafkaSpout3.numUncommittedOffsets);
      assertEquals(0, kafkaSpout3.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout2.initialized);
      assertTrue(kafkaSpout2.consumerAutoCommitMode);
      assertEquals((-209), kafkaSpout2.maxRetries);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(stormTopology0, stormTopology1);
      assertNotSame(stormTopology1, stormTopology0);
      
      boolean boolean1 = kafkaSpout_OffsetEntry3.isEmpty();
      assertTrue(boolean1 == boolean0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(kafkaSpout_OffsetEntry0.equals((Object)kafkaSpout_OffsetEntry1));
      assertFalse(long1 == long0);
      assertFalse(long1 == long2);
      assertEquals("Offsets successfully committed to Kafka [{}]", pattern0.pattern());
      assertEquals(10000000, pattern0.flags());
      assertEquals("Offsets successfully committed to Kafka [{}]", pattern0.toString());
      assertFalse(kafkaSpout3.consumerAutoCommitMode);
      assertFalse(kafkaSpout3.initialized);
      assertEquals(0L, kafkaSpout3.numUncommittedOffsets);
      assertEquals(0, kafkaSpout3.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout2.initialized);
      assertTrue(kafkaSpout2.consumerAutoCommitMode);
      assertEquals((-209), kafkaSpout2.maxRetries);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertNotSame(kafkaSpout_OffsetEntry0, kafkaSpout_OffsetEntry1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertTrue(boolean1);
      
      OffsetAndMetadata offsetAndMetadata1 = kafkaSpout_OffsetEntry3.findNextCommitOffset();
      assertFalse(kafkaSpout_OffsetEntry0.equals((Object)kafkaSpout_OffsetEntry1));
      assertFalse(long1 == long0);
      assertFalse(long1 == long2);
      assertTrue(boolean0 == boolean1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertEquals("Offsets successfully committed to Kafka [{}]", pattern0.pattern());
      assertEquals(10000000, pattern0.flags());
      assertEquals("Offsets successfully committed to Kafka [{}]", pattern0.toString());
      assertFalse(kafkaSpout3.consumerAutoCommitMode);
      assertFalse(kafkaSpout3.initialized);
      assertEquals(0L, kafkaSpout3.numUncommittedOffsets);
      assertEquals(0, kafkaSpout3.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout2.initialized);
      assertTrue(kafkaSpout2.consumerAutoCommitMode);
      assertEquals((-209), kafkaSpout2.maxRetries);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertNotSame(kafkaSpout_OffsetEntry0, kafkaSpout_OffsetEntry1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNull(offsetAndMetadata1);
      
      KafkaSpout<String, Object> kafkaSpout4 = new KafkaSpout<String, Object>(kafkaSpout3.kafkaSpoutConfig);
      assertTrue(boolean0 == boolean1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertEquals("Offsets successfully committed to Kafka [{}]", pattern0.pattern());
      assertEquals(10000000, pattern0.flags());
      assertEquals("Offsets successfully committed to Kafka [{}]", pattern0.toString());
      assertFalse(kafkaSpout3.consumerAutoCommitMode);
      assertFalse(kafkaSpout3.initialized);
      assertEquals(0L, kafkaSpout3.numUncommittedOffsets);
      assertEquals(0, kafkaSpout3.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout4.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout4.numUncommittedOffsets);
      assertEquals(0, kafkaSpout4.maxRetries);
      assertFalse(kafkaSpout4.initialized);
      assertFalse(kafkaSpout2.initialized);
      assertTrue(kafkaSpout2.consumerAutoCommitMode);
      assertEquals((-209), kafkaSpout2.maxRetries);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertNotNull(kafkaSpout4);
      
      String string3 = kafkaSpout4.getWildCardTopics();
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(boolean0 == boolean1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertEquals("Offsets successfully committed to Kafka [{}]", pattern0.pattern());
      assertEquals(10000000, pattern0.flags());
      assertEquals("Offsets successfully committed to Kafka [{}]", pattern0.toString());
      assertFalse(kafkaSpout3.consumerAutoCommitMode);
      assertFalse(kafkaSpout3.initialized);
      assertEquals(0L, kafkaSpout3.numUncommittedOffsets);
      assertEquals(0, kafkaSpout3.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout4.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout4.numUncommittedOffsets);
      assertEquals(0, kafkaSpout4.maxRetries);
      assertFalse(kafkaSpout4.initialized);
      assertFalse(kafkaSpout2.initialized);
      assertTrue(kafkaSpout2.consumerAutoCommitMode);
      assertEquals((-209), kafkaSpout2.maxRetries);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertEquals("Offsets successfully committed to Kafka [{}]", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      KafkaSpoutConfig<OffsetAndMetadata, OffsetAndMetadata> kafkaSpoutConfig0 = (KafkaSpoutConfig<OffsetAndMetadata, OffsetAndMetadata>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(kafkaSpoutConfig0).getConsumerGroupId();
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<OffsetAndMetadata, OffsetAndMetadata> kafkaSpout0 = new KafkaSpout<OffsetAndMetadata, OffsetAndMetadata>(kafkaSpoutConfig0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertNotNull(kafkaSpout0);
      
      KafkaSpout.KafkaSpoutConsumerRebalanceListener kafkaSpout_KafkaSpoutConsumerRebalanceListener0 = kafkaSpout0.new KafkaSpoutConsumerRebalanceListener();
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertNotNull(kafkaSpout_KafkaSpoutConsumerRebalanceListener0);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout0.new OffsetEntry();
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertNotNull(kafkaSpout_OffsetEntry0);
      
      TopicPartition topicPartition0 = kafkaSpout_OffsetEntry0.tp;
      assertNull(topicPartition0);
      
      long long0 = 500L;
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry1 = kafkaSpout0.new OffsetEntry(topicPartition0, long0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertNotNull(kafkaSpout_OffsetEntry1);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry2 = kafkaSpout0.new OffsetEntry();
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertNotNull(kafkaSpout_OffsetEntry2);
      
      OffsetAndMetadata offsetAndMetadata0 = kafkaSpout_OffsetEntry2.findNextCommitOffset();
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertNull(offsetAndMetadata0);
      
      kafkaSpout_OffsetEntry1.commit(offsetAndMetadata0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      
      KafkaSpout.KafkaSpoutConsumerRebalanceListener kafkaSpout_KafkaSpoutConsumerRebalanceListener1 = kafkaSpout0.new KafkaSpoutConsumerRebalanceListener();
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertNotNull(kafkaSpout_KafkaSpoutConsumerRebalanceListener1);
      
      HashSet<TopicPartition> hashSet0 = new HashSet<TopicPartition>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      kafkaSpout_KafkaSpoutConsumerRebalanceListener1.onPartitionsRevoked(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      
      KafkaSpout.KafkaSpoutConsumerRebalanceListener kafkaSpout_KafkaSpoutConsumerRebalanceListener2 = kafkaSpout0.new KafkaSpoutConsumerRebalanceListener();
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertNotNull(kafkaSpout_KafkaSpoutConsumerRebalanceListener2);
      
      // Undeclared exception!
      try { 
        kafkaSpout_KafkaSpoutConsumerRebalanceListener2.doSeek(kafkaSpout_OffsetEntry2.tp, offsetAndMetadata0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout$KafkaSpoutConsumerRebalanceListener", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      KafkaSpout<KafkaSpoutStreamsNamedTopics, KafkaSpoutStreamsWildcardTopics> kafkaSpout0 = new KafkaSpout<KafkaSpoutStreamsNamedTopics, KafkaSpoutStreamsWildcardTopics>();
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertNotNull(kafkaSpout0);
      
      KafkaSpoutStreams kafkaSpoutStreams0 = kafkaSpout0.kafkaSpoutStreams;
      assertNull(kafkaSpoutStreams0);
      
      int int0 = 2662;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      KafkaSpoutConfig<String, Delayed> kafkaSpoutConfig0 = (KafkaSpoutConfig<String, Delayed>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn(kafkaSpoutStreams0, kafkaSpout0.kafkaSpoutStreams, kafkaSpout0.kafkaSpoutStreams).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      doReturn(int0).when(kafkaSpoutConfig0).getMaxUncommittedOffsets();
      doReturn(arrayList0).when(kafkaSpoutConfig0).getSubscribedTopics();
      KafkaSpout<String, Delayed> kafkaSpout1 = new KafkaSpout<String, Delayed>(kafkaSpoutConfig0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertNotNull(kafkaSpout1);
      
      long long0 = (-508L);
      int int1 = 2;
      boolean boolean0 = kafkaSpout1.poll();
      assertFalse(int0 == int1);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertTrue(boolean0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      KafkaSpout<ConsumerRecord<SpecificAggregateStats._Fields, Object>, SQLTransientConnectionException> kafkaSpout2 = new KafkaSpout<ConsumerRecord<SpecificAggregateStats._Fields, Object>, SQLTransientConnectionException>(kafkaSpoutConfig0);
      assertFalse(int0 == int1);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertEquals(0, kafkaSpout2.maxRetries);
      assertFalse(kafkaSpout2.initialized);
      assertNotNull(kafkaSpout2);
      
      String string0 = kafkaSpout2.getNamedTopics();
      assertFalse(int0 == int1);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertEquals(0, kafkaSpout2.maxRetries);
      assertFalse(kafkaSpout2.initialized);
      assertFalse(arrayList0.contains(string0));
      assertEquals("", string0);
      assertNotNull(string0);
      
      KafkaSpout<Object, Object> kafkaSpout3 = new KafkaSpout<Object, Object>(kafkaSpout1.kafkaSpoutConfig);
      assertFalse(int0 == int1);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout3.initialized);
      assertFalse(kafkaSpout3.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout3.maxRetries);
      assertEquals(0L, kafkaSpout3.numUncommittedOffsets);
      assertFalse(arrayList0.contains(string0));
      assertNotNull(kafkaSpout3);
      
      // Undeclared exception!
      try { 
        kafkaSpout3.commitOffsetsForAckedTuples();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      KafkaSpout<Header, KafkaSpout.OffsetEntry> kafkaSpout0 = new KafkaSpout<Header, KafkaSpout.OffsetEntry>();
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertNotNull(kafkaSpout0);
      
      SpoutOutputCollector spoutOutputCollector0 = new SpoutOutputCollector(kafkaSpout0.collector);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertNotNull(spoutOutputCollector0);
      
      kafkaSpout0.collector = spoutOutputCollector0;
      // Undeclared exception!
      try { 
        kafkaSpout0.activate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      KafkaSpout<String, KafkaSpoutMessageId> kafkaSpout0 = new KafkaSpout<String, KafkaSpoutMessageId>();
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertNotNull(kafkaSpout0);
      
      String string0 = ",";
      int int0 = 325;
      long long0 = (-1262L);
      TimestampType timestampType0 = TimestampType.LOG_APPEND_TIME;
      int int1 = 0;
      int int2 = 2;
      String string1 = "Z%v;SD_t6W";
      int int3 = (-3830);
      TopicPartition topicPartition0 = new TopicPartition(string1, int3);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals("Z%v;SD_t6W", topicPartition0.topic());
      assertEquals((-3830), topicPartition0.partition());
      assertNotNull(topicPartition0);
      
      long long1 = (-1291L);
      KafkaSpoutMessageId kafkaSpoutMessageId0 = new KafkaSpoutMessageId(topicPartition0, long1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(long1 == long0);
      assertEquals("Z%v;SD_t6W", topicPartition0.topic());
      assertEquals((-3830), topicPartition0.partition());
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertEquals("Z%v;SD_t6W", kafkaSpoutMessageId0.topic());
      assertEquals((-1291L), kafkaSpoutMessageId0.offset());
      assertEquals((-3830), kafkaSpoutMessageId0.partition());
      assertNotNull(kafkaSpoutMessageId0);
      
      ConsumerRecord<String, KafkaSpoutMessageId> consumerRecord0 = new ConsumerRecord<String, KafkaSpoutMessageId>(string0, int0, long0, long0, timestampType0, kafkaSpout0.maxRetries, int1, int2, string1, kafkaSpoutMessageId0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(long0 == long1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int2 == int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(long1 == long0);
      assertEquals("Z%v;SD_t6W", topicPartition0.topic());
      assertEquals((-3830), topicPartition0.partition());
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertEquals("Z%v;SD_t6W", kafkaSpoutMessageId0.topic());
      assertEquals((-1291L), kafkaSpoutMessageId0.offset());
      assertEquals((-3830), kafkaSpoutMessageId0.partition());
      assertEquals((-1262L), consumerRecord0.offset());
      assertEquals(2, consumerRecord0.serializedValueSize());
      assertEquals(325, consumerRecord0.partition());
      assertEquals(TimestampType.LOG_APPEND_TIME, consumerRecord0.timestampType());
      assertEquals(0, consumerRecord0.serializedKeySize());
      assertEquals(",", consumerRecord0.topic());
      assertEquals((-1262L), consumerRecord0.timestamp());
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals((-1), ConsumerRecord.NULL_SIZE);
      assertEquals((-1L), ConsumerRecord.NO_TIMESTAMP);
      assertEquals((-1), ConsumerRecord.NULL_CHECKSUM);
      assertNotNull(consumerRecord0);
      
      // Undeclared exception!
      try { 
        kafkaSpout0.emitTupleIfNotEmitted(consumerRecord0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      KafkaSpout<Symbol, KafkaSpoutMessageId> kafkaSpout0 = new KafkaSpout<Symbol, KafkaSpoutMessageId>();
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertNotNull(kafkaSpout0);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout0.new OffsetEntry();
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertNotNull(kafkaSpout_OffsetEntry0);
      
      KafkaSpoutMessageId kafkaSpoutMessageId0 = new KafkaSpoutMessageId(kafkaSpout_OffsetEntry0.tp, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0L, kafkaSpoutMessageId0.offset());
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertNotNull(kafkaSpoutMessageId0);
      
      kafkaSpout_OffsetEntry0.add(kafkaSpoutMessageId0);
      assertEquals(0L, kafkaSpoutMessageId0.offset());
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      KafkaSpout<ConsumerRecord<RecordHeader, String>, TopicPartition> kafkaSpout0 = new KafkaSpout<ConsumerRecord<RecordHeader, String>, TopicPartition>();
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertNotNull(kafkaSpout0);
      
      ConsumerRecords<ConsumerRecord<RecordHeader, String>, TopicPartition> consumerRecords0 = ConsumerRecords.empty();
      assertTrue(consumerRecords0.isEmpty());
      assertNotNull(consumerRecords0);
      
      kafkaSpout0.setWaitingToEmit(consumerRecords0);
      assertTrue(consumerRecords0.isEmpty());
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout0.new OffsetEntry();
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertNotNull(kafkaSpout_OffsetEntry0);
      
      TopicPartition topicPartition0 = kafkaSpout_OffsetEntry0.tp;
      assertNull(topicPartition0);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry1 = kafkaSpout0.new OffsetEntry(topicPartition0, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertNotNull(kafkaSpout_OffsetEntry1);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry2 = kafkaSpout0.new OffsetEntry();
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertNotNull(kafkaSpout_OffsetEntry2);
      
      OffsetAndMetadata offsetAndMetadata0 = kafkaSpout_OffsetEntry2.findNextCommitOffset();
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertNull(offsetAndMetadata0);
      
      kafkaSpout_OffsetEntry1.commit(offsetAndMetadata0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      KafkaSpout<OffsetAndMetadata, String> kafkaSpout0 = new KafkaSpout<OffsetAndMetadata, String>();
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertNotNull(kafkaSpout0);
      
      TopicPartition topicPartition0 = null;
      Collection<TopicPartition> collection0 = kafkaSpout0.toArrayList(topicPartition0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertNotNull(collection0);
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      KafkaSpout<AbstractMap.SimpleImmutableEntry<Integer, KafkaSpoutStreamsNamedTopics>, KafkaSpoutStreamsWildcardTopics> kafkaSpout0 = new KafkaSpout<AbstractMap.SimpleImmutableEntry<Integer, KafkaSpoutStreamsNamedTopics>, KafkaSpoutStreamsWildcardTopics>();
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertNotNull(kafkaSpout0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        kafkaSpout0.ack(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to org.apache.storm.kafka.spout.KafkaSpoutMessageId
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      KafkaSpout<Object, SpecificAggregateStats._Fields> kafkaSpout0 = new KafkaSpout<Object, SpecificAggregateStats._Fields>();
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertNotNull(kafkaSpout0);
      
      // Undeclared exception!
      try { 
        kafkaSpout0.activate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      KafkaSpout<Object, SpecificAggregateStats._Fields> kafkaSpout0 = new KafkaSpout<Object, SpecificAggregateStats._Fields>();
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertNotNull(kafkaSpout0);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout0.new OffsetEntry();
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertNotNull(kafkaSpout_OffsetEntry0);
      
      KafkaSpout<TopicPartition, Integer> kafkaSpout1 = null;
      try {
        kafkaSpout1 = new KafkaSpout<TopicPartition, Integer>(kafkaSpout0.kafkaSpoutConfig);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      KafkaSpoutConfig<Object, TopicPartition> kafkaSpoutConfig0 = (KafkaSpoutConfig<Object, TopicPartition>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null, (KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<Object, TopicPartition> kafkaSpout0 = new KafkaSpout<Object, TopicPartition>(kafkaSpoutConfig0);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertNotNull(kafkaSpout0);
      
      TopicPartition topicPartition0 = null;
      long long0 = 1L;
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout0.new OffsetEntry(topicPartition0, long0);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertNotNull(kafkaSpout_OffsetEntry0);
      
      TopicPartition topicPartition1 = kafkaSpout_OffsetEntry0.tp;
      assertNull(topicPartition1);
      
      Collection<TopicPartition> collection0 = kafkaSpout0.toArrayList(topicPartition1);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertNotNull(collection0);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry1 = kafkaSpout0.new OffsetEntry();
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertNotNull(kafkaSpout_OffsetEntry1);
      
      KafkaSpout<ForkJoinTask<SpecificAggregateStats._Fields>, KafkaSpoutStreamsNamedTopics> kafkaSpout1 = new KafkaSpout<ForkJoinTask<SpecificAggregateStats._Fields>, KafkaSpoutStreamsNamedTopics>(kafkaSpout0.kafkaSpoutConfig);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertNotNull(kafkaSpout1);
      
      String string0 = "";
      int int0 = (-175);
      long long1 = 2270L;
      ConsumerRecord<TopicPartition, String> consumerRecord0 = new ConsumerRecord<TopicPartition, String>(string0, int0, long1, kafkaSpout_OffsetEntry1.tp, string0);
      assertFalse(long1 == long0);
      assertEquals(TimestampType.NO_TIMESTAMP_TYPE, consumerRecord0.timestampType());
      assertEquals(2270L, consumerRecord0.offset());
      assertEquals((-1), consumerRecord0.serializedValueSize());
      assertEquals((-1), consumerRecord0.serializedKeySize());
      assertEquals((-1L), consumerRecord0.timestamp());
      assertEquals("", consumerRecord0.topic());
      assertEquals((-175), consumerRecord0.partition());
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals((-1), ConsumerRecord.NULL_SIZE);
      assertEquals((-1), ConsumerRecord.NULL_CHECKSUM);
      assertEquals((-1L), ConsumerRecord.NO_TIMESTAMP);
      assertNotNull(consumerRecord0);
      
      // Undeclared exception!
      try { 
        kafkaSpout1.ack(consumerRecord0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.kafka.clients.consumer.ConsumerRecord cannot be cast to org.apache.storm.kafka.spout.KafkaSpoutMessageId
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      KafkaSpoutConfig.FirstPollOffsetStrategy[] kafkaSpoutConfig_FirstPollOffsetStrategyArray0 = KafkaSpoutConfig.FirstPollOffsetStrategy.values();
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      assertNotNull(kafkaSpoutConfig_FirstPollOffsetStrategyArray0);
      
      KafkaSpout<String, Integer> kafkaSpout0 = new KafkaSpout<String, Integer>();
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertNotNull(kafkaSpout0);
      
      String string0 = "clojure.lang.AFn";
      int int0 = 0;
      TopicPartition topicPartition0 = new TopicPartition(string0, int0);
      assertEquals(0, topicPartition0.partition());
      assertEquals("clojure.lang.AFn", topicPartition0.topic());
      assertNotNull(topicPartition0);
      
      long long0 = 1058L;
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout0.new OffsetEntry(topicPartition0, long0);
      assertEquals(0, topicPartition0.partition());
      assertEquals("clojure.lang.AFn", topicPartition0.topic());
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertNotNull(kafkaSpout_OffsetEntry0);
      
      TopicPartition topicPartition1 = kafkaSpout_OffsetEntry0.tp;
      assertEquals(0, topicPartition1.partition());
      assertEquals("clojure.lang.AFn", topicPartition1.topic());
      assertSame(topicPartition1, topicPartition0);
      assertNotNull(topicPartition1);
      
      Collection<TopicPartition> collection0 = kafkaSpout0.toArrayList(topicPartition1);
      assertEquals(0, topicPartition0.partition());
      assertEquals("clojure.lang.AFn", topicPartition0.topic());
      assertEquals(0, topicPartition1.partition());
      assertEquals("clojure.lang.AFn", topicPartition1.topic());
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertTrue(collection0.contains(topicPartition1));
      assertSame(topicPartition0, topicPartition1);
      assertSame(topicPartition1, topicPartition0);
      assertNotNull(collection0);
      
      TopicPartition topicPartition2 = null;
      // Undeclared exception!
      try { 
        kafkaSpout0.poll();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      KafkaSpout<Object, Symbol> kafkaSpout0 = new KafkaSpout<Object, Symbol>();
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertNotNull(kafkaSpout0);
      
      String string0 = "rd7x:n4&SNA$x&y6Y";
      int int0 = 5406;
      TopicPartition topicPartition0 = new TopicPartition(string0, int0);
      assertEquals(5406, topicPartition0.partition());
      assertEquals("rd7x:n4&SNA$x&y6Y", topicPartition0.topic());
      assertNotNull(topicPartition0);
      
      boolean boolean0 = topicPartition0.equals(kafkaSpout0);
      assertEquals(5406, topicPartition0.partition());
      assertEquals("rd7x:n4&SNA$x&y6Y", topicPartition0.topic());
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(boolean0);
      
      String string1 = topicPartition0.toString();
      assertFalse(string1.equals((Object)string0));
      assertEquals(5406, topicPartition0.partition());
      assertEquals("rd7x:n4&SNA$x&y6Y", topicPartition0.topic());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("rd7x:n4&SNA$x&y6Y-5406", string1);
      assertNotNull(string1);
      
      String string2 = topicPartition0.toString();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals(5406, topicPartition0.partition());
      assertEquals("rd7x:n4&SNA$x&y6Y", topicPartition0.topic());
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("rd7x:n4&SNA$x&y6Y-5406", string2);
      assertNotNull(string2);
      
      String string3 = topicPartition0.toString();
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(5406, topicPartition0.partition());
      assertEquals("rd7x:n4&SNA$x&y6Y", topicPartition0.topic());
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertEquals("rd7x:n4&SNA$x&y6Y-5406", string3);
      assertNotNull(string3);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout0.new OffsetEntry(topicPartition0, int0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertEquals(5406, topicPartition0.partition());
      assertEquals("rd7x:n4&SNA$x&y6Y", topicPartition0.topic());
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertNotNull(kafkaSpout_OffsetEntry0);
      
      TreeSet<KafkaSpoutMessageId> treeSet0 = new TreeSet<KafkaSpoutMessageId>();
      assertNotNull(treeSet0);
      
      kafkaSpout_OffsetEntry0.ackedMsgs = (NavigableSet<KafkaSpoutMessageId>) treeSet0;
      assertEquals(5406, topicPartition0.partition());
      assertEquals("rd7x:n4&SNA$x&y6Y", topicPartition0.topic());
      assertTrue(kafkaSpout_OffsetEntry0.ackedMsgs.isEmpty());
      assertEquals(0, kafkaSpout_OffsetEntry0.ackedMsgs.size());
      
      String string4 = kafkaSpout_OffsetEntry0.toString();
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals(5406, topicPartition0.partition());
      assertEquals("rd7x:n4&SNA$x&y6Y", topicPartition0.topic());
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertEquals("OffsetEntry{topic-partition=rd7x:n4&SNA$x&y6Y-5406, fetchOffset=5406, committedOffset=5405, ackedMsgs=[]}", string4);
      assertNotNull(string4);
      
      KafkaSpout<Object, SpecificAggregateStats._Fields> kafkaSpout1 = null;
      try {
        kafkaSpout1 = new KafkaSpout<Object, SpecificAggregateStats._Fields>(kafkaSpout0.kafkaSpoutConfig);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      KafkaSpout<String, Symbol> kafkaSpout0 = new KafkaSpout<String, Symbol>();
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertNotNull(kafkaSpout0);
      
      // Undeclared exception!
      try { 
        kafkaSpout0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      KafkaSpout.OffsetComparator kafkaSpout_OffsetComparator0 = new KafkaSpout.OffsetComparator();
      assertNotNull(kafkaSpout_OffsetComparator0);
      
      String string0 = "Ta(EJs;cX@594{w&}9";
      int int0 = (-4);
      TopicPartition topicPartition0 = new TopicPartition(string0, int0);
      assertEquals((-4), topicPartition0.partition());
      assertNotNull(topicPartition0);
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      KafkaSpout.OffsetComparator kafkaSpout_OffsetComparator0 = new KafkaSpout.OffsetComparator();
      assertNotNull(kafkaSpout_OffsetComparator0);
      
      KafkaSpout<Object, KafkaSpout<Object, Object>> kafkaSpout0 = new KafkaSpout<Object, KafkaSpout<Object, Object>>();
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertNotNull(kafkaSpout0);
      
      int int0 = 0;
      LinkedHashSet<KafkaSpoutMessageId> linkedHashSet0 = new LinkedHashSet<KafkaSpoutMessageId>(int0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      kafkaSpout0.emitted = (Set<KafkaSpoutMessageId>) linkedHashSet0;
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(0, kafkaSpout0.emitted.size());
      assertTrue(kafkaSpout0.emitted.isEmpty());
      
      // Undeclared exception!
      try { 
        kafkaSpout0.getNamedTopics();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutMessageId, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig0 = (KafkaSpoutConfig<KafkaSpoutMessageId, KafkaSpoutStreamsWildcardTopics>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      doReturn((List) null).when(kafkaSpoutConfig0).getSubscribedTopics();
      KafkaSpout<KafkaSpoutMessageId, KafkaSpoutStreamsWildcardTopics> kafkaSpout0 = new KafkaSpout<KafkaSpoutMessageId, KafkaSpoutStreamsWildcardTopics>(kafkaSpoutConfig0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertNotNull(kafkaSpout0);
      
      // Undeclared exception!
      try { 
        kafkaSpout0.getNamedTopics();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      KafkaSpoutConfig<String, Delayed> kafkaSpoutConfig0 = (KafkaSpoutConfig<String, Delayed>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<String, Delayed> kafkaSpout0 = new KafkaSpout<String, Delayed>(kafkaSpoutConfig0);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertNotNull(kafkaSpout0);
      
      // Undeclared exception!
      try { 
        kafkaSpout0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      KafkaSpoutConfig<Object, Object> kafkaSpoutConfig0 = (KafkaSpoutConfig<Object, Object>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<Object, Object> kafkaSpout0 = new KafkaSpout<Object, Object>(kafkaSpoutConfig0);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertNotNull(kafkaSpout0);
      
      String string0 = "05LZiqVuY&k@i";
      TopicPartition topicPartition0 = new TopicPartition(string0, kafkaSpoutConfig0.DEFAULT_MAX_RETRIES);
      assertEquals(Integer.MAX_VALUE, topicPartition0.partition());
      assertEquals("05LZiqVuY&k@i", topicPartition0.topic());
      assertNotNull(topicPartition0);
      
      long long0 = 100L;
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout0.new OffsetEntry(topicPartition0, long0);
      assertEquals(Integer.MAX_VALUE, topicPartition0.partition());
      assertEquals("05LZiqVuY&k@i", topicPartition0.topic());
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertNotNull(kafkaSpout_OffsetEntry0);
      
      KafkaSpoutMessageId kafkaSpoutMessageId0 = new KafkaSpoutMessageId(topicPartition0, kafkaSpoutConfig0.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(Integer.MAX_VALUE, topicPartition0.partition());
      assertEquals("05LZiqVuY&k@i", topicPartition0.topic());
      assertEquals(Integer.MAX_VALUE, kafkaSpoutMessageId0.partition());
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertEquals("05LZiqVuY&k@i", kafkaSpoutMessageId0.topic());
      assertEquals(30000L, kafkaSpoutMessageId0.offset());
      assertNotNull(kafkaSpoutMessageId0);
      
      kafkaSpout_OffsetEntry0.add(kafkaSpoutMessageId0);
      assertEquals(Integer.MAX_VALUE, topicPartition0.partition());
      assertEquals("05LZiqVuY&k@i", topicPartition0.topic());
      assertEquals(Integer.MAX_VALUE, kafkaSpoutMessageId0.partition());
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertEquals("05LZiqVuY&k@i", kafkaSpoutMessageId0.topic());
      assertEquals(30000L, kafkaSpoutMessageId0.offset());
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      
      KafkaSpout<KafkaSpout.OffsetEntry, Object> kafkaSpout1 = new KafkaSpout<KafkaSpout.OffsetEntry, Object>();
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertNotNull(kafkaSpout1);
      
      // Undeclared exception!
      try { 
        kafkaSpout1.shutdown();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      KafkaSpout.OffsetComparator kafkaSpout_OffsetComparator0 = new KafkaSpout.OffsetComparator();
      assertNotNull(kafkaSpout_OffsetComparator0);
      
      KafkaSpoutConfig<Integer, KafkaSpout.OffsetEntry> kafkaSpoutConfig0 = (KafkaSpoutConfig<Integer, KafkaSpout.OffsetEntry>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null, (KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      doReturn((List) null).when(kafkaSpoutConfig0).getSubscribedTopics();
      KafkaSpout<Integer, KafkaSpout.OffsetEntry> kafkaSpout0 = new KafkaSpout<Integer, KafkaSpout.OffsetEntry>(kafkaSpoutConfig0);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertNotNull(kafkaSpout0);
      
      KafkaSpout<KafkaSpout<OffsetAndMetadata, TopicPartition>, Integer> kafkaSpout1 = new KafkaSpout<KafkaSpout<OffsetAndMetadata, TopicPartition>, Integer>(kafkaSpout0.kafkaSpoutConfig);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertNotNull(kafkaSpout1);
      
      // Undeclared exception!
      try { 
        kafkaSpout1.getNamedTopics();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      KafkaSpoutConfig<OffsetAndMetadata, Symbol> kafkaSpoutConfig0 = (KafkaSpoutConfig<OffsetAndMetadata, Symbol>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((Map) null).when(kafkaSpoutConfig0).getKafkaProps();
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      doReturn((Deserializer) null).when(kafkaSpoutConfig0).getKeyDeserializer();
      doReturn((Deserializer) null).when(kafkaSpoutConfig0).getValueDeserializer();
      KafkaSpout<OffsetAndMetadata, Symbol> kafkaSpout0 = new KafkaSpout<OffsetAndMetadata, Symbol>(kafkaSpoutConfig0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertNotNull(kafkaSpout0);
      
      // Undeclared exception!
      try { 
        kafkaSpout0.subscribeKafkaConsumer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      KafkaSpout<TopicPartition, String> kafkaSpout0 = new KafkaSpout<TopicPartition, String>();
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertNotNull(kafkaSpout0);
      
      // Undeclared exception!
      try { 
        kafkaSpout0.doSeekRetriableTopicPartitions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      KafkaSpout<TopicPartition, TopicPartition> kafkaSpout0 = new KafkaSpout<TopicPartition, TopicPartition>();
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertNotNull(kafkaSpout0);
      
      // Undeclared exception!
      try { 
        kafkaSpout0.emit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      KafkaSpout<KafkaSpoutStreamsWildcardTopics, ForkJoinTask<String>> kafkaSpout0 = new KafkaSpout<KafkaSpoutStreamsWildcardTopics, ForkJoinTask<String>>();
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertNotNull(kafkaSpout0);
      
      ConsumerRecords<KafkaSpoutStreamsWildcardTopics, ForkJoinTask<String>> consumerRecords0 = ConsumerRecords.empty();
      assertTrue(consumerRecords0.isEmpty());
      assertNotNull(consumerRecords0);
      
      kafkaSpout0.setWaitingToEmit(consumerRecords0);
      assertTrue(consumerRecords0.isEmpty());
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      
      // Undeclared exception!
      try { 
        kafkaSpout0.doSeekRetriableTopicPartitions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      KafkaSpout<String, String> kafkaSpout0 = new KafkaSpout<String, String>();
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertNotNull(kafkaSpout0);
      
      // Undeclared exception!
      try { 
        kafkaSpout0.getComponentConfiguration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      KafkaSpout<Object, Object> kafkaSpout0 = new KafkaSpout<Object, Object>();
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertNotNull(kafkaSpout0);
      
      String string0 = "rUPk{bfZ ";
      // Undeclared exception!
      try { 
        kafkaSpout0.emit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      KafkaSpout<Delayed, KafkaSpoutStreamsWildcardTopics> kafkaSpout0 = new KafkaSpout<Delayed, KafkaSpoutStreamsWildcardTopics>();
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertNotNull(kafkaSpout0);
      
      // Undeclared exception!
      try { 
        kafkaSpout0.pollKafkaBroker();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      KafkaSpout<AbstractMap.SimpleImmutableEntry<String, TopicPartition>, KafkaSpoutMessageId> kafkaSpout0 = new KafkaSpout<AbstractMap.SimpleImmutableEntry<String, TopicPartition>, KafkaSpoutMessageId>();
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertNotNull(kafkaSpout0);
      
      TopicPartition topicPartition0 = null;
      long long0 = (-1125L);
      // Undeclared exception!
      try { 
        kafkaSpout0.setAcked(topicPartition0, long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      KafkaSpout<TopicPartition, KafkaSpoutStreamsWildcardTopics> kafkaSpout0 = new KafkaSpout<TopicPartition, KafkaSpoutStreamsWildcardTopics>();
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertNotNull(kafkaSpout0);
      
      String string0 = ",";
      TopicPartition topicPartition0 = new TopicPartition(string0, kafkaSpout0.maxRetries);
      assertEquals(0, topicPartition0.partition());
      assertEquals(",", topicPartition0.topic());
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertNotNull(topicPartition0);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout0.new OffsetEntry(topicPartition0, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, topicPartition0.partition());
      assertEquals(",", topicPartition0.topic());
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertNotNull(kafkaSpout_OffsetEntry0);
      
      boolean boolean0 = kafkaSpout_OffsetEntry0.isEmpty();
      assertEquals(0, topicPartition0.partition());
      assertEquals(",", topicPartition0.topic());
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertTrue(boolean0);
      
      long long0 = kafkaSpout_OffsetEntry0.getCommittedOffset();
      assertEquals(0, topicPartition0.partition());
      assertEquals(",", topicPartition0.topic());
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals((-1L), long0);
      
      KafkaSpout<KafkaSpoutStreamsNamedTopics, KafkaSpoutStreamsNamedTopics> kafkaSpout1 = null;
      try {
        kafkaSpout1 = new KafkaSpout<KafkaSpoutStreamsNamedTopics, KafkaSpoutStreamsNamedTopics>(kafkaSpout0.kafkaSpoutConfig);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      KafkaSpoutConfig<TopicPartition, TopicPartition> kafkaSpoutConfig0 = (KafkaSpoutConfig<TopicPartition, TopicPartition>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<TopicPartition, TopicPartition> kafkaSpout0 = new KafkaSpout<TopicPartition, TopicPartition>(kafkaSpoutConfig0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertNotNull(kafkaSpout0);
      
      // Undeclared exception!
      try { 
        kafkaSpout0.pollKafkaBroker();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      KafkaSpout<AbstractMap.SimpleImmutableEntry<TopicPartition, SpecificAggregateStats._Fields>, KafkaSpout.OffsetEntry> kafkaSpout0 = new KafkaSpout<AbstractMap.SimpleImmutableEntry<TopicPartition, SpecificAggregateStats._Fields>, KafkaSpout.OffsetEntry>();
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertNotNull(kafkaSpout0);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout0.new OffsetEntry();
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertNotNull(kafkaSpout_OffsetEntry0);
      
      TopicPartition topicPartition0 = kafkaSpout_OffsetEntry0.tp;
      assertNull(topicPartition0);
      
      // Undeclared exception!
      try { 
        kafkaSpout0.setAcked(topicPartition0, kafkaSpout_OffsetEntry0.initialFetchOffset);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      KafkaSpout<OffsetAndMetadata, TopicPartition> kafkaSpout0 = new KafkaSpout<OffsetAndMetadata, TopicPartition>();
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertNotNull(kafkaSpout0);
      
      String string0 = "MEUL";
      int int0 = 42;
      TopicPartition topicPartition0 = new TopicPartition(string0, int0);
      assertEquals("MEUL", topicPartition0.topic());
      assertEquals(42, topicPartition0.partition());
      assertNotNull(topicPartition0);
      
      long long0 = 1368L;
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout0.new OffsetEntry(topicPartition0, long0);
      assertEquals("MEUL", topicPartition0.topic());
      assertEquals(42, topicPartition0.partition());
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertNotNull(kafkaSpout_OffsetEntry0);
      
      String string1 = "";
      int int1 = 0;
      String string2 = "";
      SQLWarning sQLWarning0 = new SQLWarning(string2, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertEquals("java.sql.SQLWarning: ", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("", sQLWarning0.getSQLState());
      assertEquals("", sQLWarning0.getMessage());
      assertNotNull(sQLWarning0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(string1, string2, sQLWarning0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertEquals("java.sql.SQLWarning: ", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("", sQLWarning0.getSQLState());
      assertEquals("", sQLWarning0.getMessage());
      assertEquals("", sQLTransientConnectionException0.getMessage());
      assertEquals("", sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException0.toString());
      assertNotNull(sQLTransientConnectionException0);
      
      String string3 = null;
      ConsumerRecord<SQLTransientConnectionException, String> consumerRecord0 = new ConsumerRecord<SQLTransientConnectionException, String>(string1, int1, kafkaSpout_OffsetEntry0.committedOffset, sQLTransientConnectionException0, string3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(string2.equals((Object)string0));
      assertEquals("MEUL", topicPartition0.topic());
      assertEquals(42, topicPartition0.partition());
      assertEquals("java.sql.SQLWarning: ", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("", sQLWarning0.getSQLState());
      assertEquals("", sQLWarning0.getMessage());
      assertEquals("", sQLTransientConnectionException0.getMessage());
      assertEquals("", sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException0.toString());
      assertEquals((-1L), consumerRecord0.timestamp());
      assertEquals((-1), consumerRecord0.serializedValueSize());
      assertEquals("", consumerRecord0.topic());
      assertEquals(1367L, consumerRecord0.offset());
      assertEquals((-1), consumerRecord0.serializedKeySize());
      assertEquals(TimestampType.NO_TIMESTAMP_TYPE, consumerRecord0.timestampType());
      assertEquals(0, consumerRecord0.partition());
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals((-1), ConsumerRecord.NULL_SIZE);
      assertEquals((-1), ConsumerRecord.NULL_CHECKSUM);
      assertEquals((-1L), ConsumerRecord.NO_TIMESTAMP);
      assertNotNull(consumerRecord0);
      
      boolean boolean0 = kafkaSpout_OffsetEntry0.contains(consumerRecord0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(string2.equals((Object)string0));
      assertEquals("MEUL", topicPartition0.topic());
      assertEquals(42, topicPartition0.partition());
      assertEquals("java.sql.SQLWarning: ", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("", sQLWarning0.getSQLState());
      assertEquals("", sQLWarning0.getMessage());
      assertEquals("", sQLTransientConnectionException0.getMessage());
      assertEquals("", sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException0.toString());
      assertEquals((-1L), consumerRecord0.timestamp());
      assertEquals((-1), consumerRecord0.serializedValueSize());
      assertEquals("", consumerRecord0.topic());
      assertEquals(1367L, consumerRecord0.offset());
      assertEquals((-1), consumerRecord0.serializedKeySize());
      assertEquals(TimestampType.NO_TIMESTAMP_TYPE, consumerRecord0.timestampType());
      assertEquals(0, consumerRecord0.partition());
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals((-1), ConsumerRecord.NULL_SIZE);
      assertEquals((-1), ConsumerRecord.NULL_CHECKSUM);
      assertEquals((-1L), ConsumerRecord.NO_TIMESTAMP);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertFalse(boolean0);
  }

  @Test(timeout = 11000)
  public void test52()  throws Throwable  {
      KafkaSpoutConfig<String, String> kafkaSpoutConfig0 = (KafkaSpoutConfig<String, String>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<String, String> kafkaSpout0 = new KafkaSpout<String, String>(kafkaSpoutConfig0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertNotNull(kafkaSpout0);
      
      String string0 = null;
      int int0 = 525;
      TopicPartition topicPartition0 = new TopicPartition(string0, int0);
      assertNull(topicPartition0.topic());
      assertEquals(525, topicPartition0.partition());
      assertNotNull(topicPartition0);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout0.new OffsetEntry(topicPartition0, kafkaSpout0.maxRetries);
      assertNull(topicPartition0.topic());
      assertEquals(525, topicPartition0.partition());
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertNotNull(kafkaSpout_OffsetEntry0);
      
      KafkaSpoutMessageId kafkaSpoutMessageId0 = new KafkaSpoutMessageId(topicPartition0, kafkaSpoutConfig0.DEFAULT_MAX_RETRIES);
      assertNull(topicPartition0.topic());
      assertEquals(525, topicPartition0.partition());
      assertNull(kafkaSpoutMessageId0.topic());
      assertEquals(525, kafkaSpoutMessageId0.partition());
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertEquals(2147483647L, kafkaSpoutMessageId0.offset());
      assertNotNull(kafkaSpoutMessageId0);
      
      boolean boolean0 = kafkaSpout_OffsetEntry0.contains(kafkaSpoutMessageId0);
      assertNull(topicPartition0.topic());
      assertEquals(525, topicPartition0.partition());
      assertNull(kafkaSpoutMessageId0.topic());
      assertEquals(525, kafkaSpoutMessageId0.partition());
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertEquals(2147483647L, kafkaSpoutMessageId0.offset());
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(boolean0);
      
      boolean boolean1 = kafkaSpout_OffsetEntry0.isEmpty();
      assertFalse(boolean1 == boolean0);
      assertNull(topicPartition0.topic());
      assertEquals(525, topicPartition0.partition());
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertTrue(boolean1);
      
      KafkaSpout<SpecificAggregateStats._Fields, Delayed> kafkaSpout1 = new KafkaSpout<SpecificAggregateStats._Fields, Delayed>();
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertNotNull(kafkaSpout1);
      
      // Undeclared exception!
      try { 
        kafkaSpout1.getNamedTopics();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test53()  throws Throwable  {
      KafkaSpoutConfig<String, Delayed> kafkaSpoutConfig0 = (KafkaSpoutConfig<String, Delayed>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null, (KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      doReturn(0).when(kafkaSpoutConfig0).getMaxUncommittedOffsets();
      KafkaSpout<String, Delayed> kafkaSpout0 = new KafkaSpout<String, Delayed>(kafkaSpoutConfig0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertNotNull(kafkaSpout0);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout0.new OffsetEntry();
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertNotNull(kafkaSpout_OffsetEntry0);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry1 = kafkaSpout0.new OffsetEntry(kafkaSpout_OffsetEntry0.tp, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertNotNull(kafkaSpout_OffsetEntry1);
      
      TopicPartition topicPartition0 = kafkaSpout_OffsetEntry1.tp;
      assertNull(topicPartition0);
      
      long long0 = (-508L);
      String string0 = "K8 itY8";
      int int0 = 2;
      TopicPartition topicPartition1 = new TopicPartition(string0, int0);
      assertEquals("K8 itY8", topicPartition1.topic());
      assertEquals(2, topicPartition1.partition());
      assertNotNull(topicPartition1);
      
      boolean boolean0 = topicPartition1.equals(kafkaSpout_OffsetEntry1);
      assertEquals("K8 itY8", topicPartition1.topic());
      assertEquals(2, topicPartition1.partition());
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(boolean0);
      
      kafkaSpout_OffsetEntry1.tp = topicPartition1;
      assertEquals("K8 itY8", topicPartition1.topic());
      assertEquals(2, topicPartition1.partition());
      assertEquals(2, kafkaSpout_OffsetEntry1.tp.partition());
      assertEquals("K8 itY8", kafkaSpout_OffsetEntry1.tp.topic());
      
      KafkaSpoutMessageId kafkaSpoutMessageId0 = new KafkaSpoutMessageId(topicPartition0, long0);
      assertEquals((-508L), kafkaSpoutMessageId0.offset());
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertNotNull(kafkaSpoutMessageId0);
      
      boolean boolean1 = kafkaSpout0.poll();
      assertTrue(boolean1 == boolean0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(boolean1);
      
      kafkaSpout_OffsetEntry0.add(kafkaSpoutMessageId0);
      assertEquals((-508L), kafkaSpoutMessageId0.offset());
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      
      OffsetAndMetadata offsetAndMetadata0 = kafkaSpout_OffsetEntry0.findNextCommitOffset();
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertNull(offsetAndMetadata0);
      
      KafkaSpout<Object, Object> kafkaSpout1 = new KafkaSpout<Object, Object>(kafkaSpout0.kafkaSpoutConfig);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertNotNull(kafkaSpout1);
      
      // Undeclared exception!
      try { 
        kafkaSpout1.commitOffsetsForAckedTuples();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test54()  throws Throwable  {
      KafkaSpout<KafkaSpoutStreamsNamedTopics, OffsetAndMetadata> kafkaSpout0 = new KafkaSpout<KafkaSpoutStreamsNamedTopics, OffsetAndMetadata>();
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertNotNull(kafkaSpout0);
      
      KafkaSpout.KafkaSpoutConsumerRebalanceListener kafkaSpout_KafkaSpoutConsumerRebalanceListener0 = kafkaSpout0.new KafkaSpoutConsumerRebalanceListener();
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertNotNull(kafkaSpout_KafkaSpoutConsumerRebalanceListener0);
      
      Collection<TopicPartition> collection0 = null;
      // Undeclared exception!
      try { 
        kafkaSpout_KafkaSpoutConsumerRebalanceListener0.onPartitionsAssigned(collection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout$KafkaSpoutConsumerRebalanceListener", e);
      }
  }

  @Test(timeout = 11000)
  public void test55()  throws Throwable  {
      KafkaSpoutConfig<SpecificAggregateStats._Fields, Delayed> kafkaSpoutConfig0 = (KafkaSpoutConfig<SpecificAggregateStats._Fields, Delayed>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<SpecificAggregateStats._Fields, Delayed> kafkaSpout0 = new KafkaSpout<SpecificAggregateStats._Fields, Delayed>(kafkaSpoutConfig0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertNotNull(kafkaSpout0);
      
      KafkaConsumer<SpecificAggregateStats._Fields, Delayed> kafkaConsumer0 = (KafkaConsumer<SpecificAggregateStats._Fields, Delayed>) mock(KafkaConsumer.class, new ViolatedAssumptionAnswer());
      kafkaSpout0.kafkaConsumer = kafkaConsumer0;
      String string0 = "!9DaK@m%'vn(xe&";
      int int0 = 0;
      TopicPartition topicPartition0 = new TopicPartition(string0, int0);
      assertEquals("!9DaK@m%'vn(xe&", topicPartition0.topic());
      assertEquals(0, topicPartition0.partition());
      assertNotNull(topicPartition0);
      
      String string1 = topicPartition0.toString();
      assertFalse(string1.equals((Object)string0));
      assertEquals("!9DaK@m%'vn(xe&", topicPartition0.topic());
      assertEquals(0, topicPartition0.partition());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("!9DaK@m%'vn(xe&-0", string1);
      assertNotNull(string1);
      
      Collection<TopicPartition> collection0 = kafkaSpout0.toArrayList(topicPartition0);
      assertFalse(string0.equals((Object)string1));
      assertEquals("!9DaK@m%'vn(xe&", topicPartition0.topic());
      assertEquals(0, topicPartition0.partition());
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertTrue(collection0.contains(topicPartition0));
      assertNotSame(string0, string1);
      assertNotNull(collection0);
      
      // Undeclared exception!
      try { 
        kafkaSpout0.commit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test56()  throws Throwable  {
      KafkaSpout<Integer, SpecificAggregateStats._Fields> kafkaSpout0 = new KafkaSpout<Integer, SpecificAggregateStats._Fields>();
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertNotNull(kafkaSpout0);
      
      KafkaSpout.KafkaSpoutConsumerRebalanceListener kafkaSpout_KafkaSpoutConsumerRebalanceListener0 = kafkaSpout0.new KafkaSpoutConsumerRebalanceListener();
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertNotNull(kafkaSpout_KafkaSpoutConsumerRebalanceListener0);
      
      Collection<TopicPartition> collection0 = null;
      // Undeclared exception!
      try { 
        kafkaSpout_KafkaSpoutConsumerRebalanceListener0.initialize(collection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout$KafkaSpoutConsumerRebalanceListener", e);
      }
  }

  @Test(timeout = 11000)
  public void test57()  throws Throwable  {
      KafkaSpout<SpecificAggregateStats._Fields, Object> kafkaSpout0 = new KafkaSpout<SpecificAggregateStats._Fields, Object>();
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertNotNull(kafkaSpout0);
      
      boolean boolean0 = true;
      kafkaSpout0.initialized = boolean0;
      KafkaSpout.Timer kafkaSpout_Timer0 = kafkaSpout0.new Timer();
      assertNull(kafkaSpout_Timer0.getTimeUnit());
      assertEquals(0L, kafkaSpout_Timer0.delay());
      assertEquals(0L, kafkaSpout_Timer0.period());
      assertTrue(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout_Timer0.start);
      assertEquals(0L, kafkaSpout_Timer0.periodNanos);
      assertEquals(0L, kafkaSpout_Timer0.delay);
      assertEquals(0L, kafkaSpout_Timer0.period);
      assertNotNull(kafkaSpout_Timer0);
      
      KafkaSpout<RecordHeader, Integer> kafkaSpout1 = new KafkaSpout<RecordHeader, Integer>();
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertNotNull(kafkaSpout1);
      
      OutputFieldsGetter outputFieldsGetter0 = new OutputFieldsGetter();
      assertNotNull(outputFieldsGetter0);
      
      // Undeclared exception!
      try { 
        kafkaSpout1.declareOutputFields(outputFieldsGetter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test58()  throws Throwable  {
      KafkaSpout<TopicPartition, KafkaSpoutStreamsNamedTopics> kafkaSpout0 = new KafkaSpout<TopicPartition, KafkaSpoutStreamsNamedTopics>();
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertNotNull(kafkaSpout0);
      
      String string0 = ". Received a non-empty fetch response from the server, but no complete records were found.";
      int int0 = 2;
      // Undeclared exception!
      try { 
        kafkaSpout0.deactivate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test59()  throws Throwable  {
      KafkaSpout.OffsetComparator kafkaSpout_OffsetComparator0 = new KafkaSpout.OffsetComparator();
      assertNotNull(kafkaSpout_OffsetComparator0);
      
      KafkaSpout<Integer, Symbol> kafkaSpout0 = new KafkaSpout<Integer, Symbol>();
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertNotNull(kafkaSpout0);
      
      String string0 = "~O.w\\4H?1r^<!T";
      TopicPartition topicPartition0 = new TopicPartition(string0, kafkaSpout0.maxRetries);
      assertEquals(0, topicPartition0.partition());
      assertEquals("~O.w\\4H?1r^<!T", topicPartition0.topic());
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertNotNull(topicPartition0);
      
      long long0 = (-128L);
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout0.new OffsetEntry(topicPartition0, long0);
      assertEquals(0, topicPartition0.partition());
      assertEquals("~O.w\\4H?1r^<!T", topicPartition0.topic());
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertNotNull(kafkaSpout_OffsetEntry0);
      
      TopicPartition topicPartition1 = kafkaSpout_OffsetEntry0.tp;
      assertEquals("~O.w\\4H?1r^<!T", topicPartition1.topic());
      assertEquals(0, topicPartition1.partition());
      assertSame(topicPartition1, topicPartition0);
      assertNotNull(topicPartition1);
      
      long long1 = 0L;
      KafkaSpoutMessageId kafkaSpoutMessageId0 = new KafkaSpoutMessageId(topicPartition1, long1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(0, topicPartition0.partition());
      assertEquals("~O.w\\4H?1r^<!T", topicPartition0.topic());
      assertEquals("~O.w\\4H?1r^<!T", topicPartition1.topic());
      assertEquals(0, topicPartition1.partition());
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertEquals(0, kafkaSpoutMessageId0.partition());
      assertEquals("~O.w\\4H?1r^<!T", kafkaSpoutMessageId0.topic());
      assertEquals(0L, kafkaSpoutMessageId0.offset());
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertNotNull(kafkaSpoutMessageId0);
      
      int int0 = kafkaSpout_OffsetComparator0.compare(kafkaSpoutMessageId0, kafkaSpoutMessageId0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(0, topicPartition0.partition());
      assertEquals("~O.w\\4H?1r^<!T", topicPartition0.topic());
      assertEquals("~O.w\\4H?1r^<!T", topicPartition1.topic());
      assertEquals(0, topicPartition1.partition());
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertEquals(0, kafkaSpoutMessageId0.partition());
      assertEquals("~O.w\\4H?1r^<!T", kafkaSpoutMessageId0.topic());
      assertEquals(0L, kafkaSpoutMessageId0.offset());
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertSame(topicPartition0, topicPartition1);
      assertSame(topicPartition1, topicPartition0);
      assertEquals(0, int0);
      
      KafkaSpout<AbstractMap.SimpleEntry<TopicPartition, Symbol>, KafkaSpoutStreamsWildcardTopics> kafkaSpout1 = new KafkaSpout<AbstractMap.SimpleEntry<TopicPartition, Symbol>, KafkaSpoutStreamsWildcardTopics>();
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertNotNull(kafkaSpout1);
      
      OutputFieldsGetter outputFieldsGetter0 = new OutputFieldsGetter();
      assertNotNull(outputFieldsGetter0);
      
      // Undeclared exception!
      try { 
        kafkaSpout1.declareOutputFields(outputFieldsGetter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test60()  throws Throwable  {
      KafkaSpout<KafkaSpoutStreamsNamedTopics, AbstractMap.SimpleEntry<String, OffsetAndMetadata>> kafkaSpout0 = new KafkaSpout<KafkaSpoutStreamsNamedTopics, AbstractMap.SimpleEntry<String, OffsetAndMetadata>>();
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertNotNull(kafkaSpout0);
      
      // Undeclared exception!
      try { 
        kafkaSpout0.deactivate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test61()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpout.OffsetEntry, KafkaSpout<TopicPartition, SpecificAggregateStats._Fields>> kafkaSpoutConfig0 = (KafkaSpoutConfig<KafkaSpout.OffsetEntry, KafkaSpout<TopicPartition, SpecificAggregateStats._Fields>>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<KafkaSpout.OffsetEntry, KafkaSpout<TopicPartition, SpecificAggregateStats._Fields>> kafkaSpout0 = new KafkaSpout<KafkaSpout.OffsetEntry, KafkaSpout<TopicPartition, SpecificAggregateStats._Fields>>(kafkaSpoutConfig0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertNotNull(kafkaSpout0);
      
      Map<TopicPartition, List<ConsumerRecord<KafkaSpout.OffsetEntry, KafkaSpout<TopicPartition, SpecificAggregateStats._Fields>>>> map0 = null;
      KafkaSpoutConfig<KafkaSpout.OffsetEntry, KafkaSpout<TopicPartition, SpecificAggregateStats._Fields>> kafkaSpoutConfig1 = (KafkaSpoutConfig<KafkaSpout.OffsetEntry, KafkaSpout<TopicPartition, SpecificAggregateStats._Fields>>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      kafkaSpout0.kafkaSpoutConfig = kafkaSpoutConfig1;
      assertNull(kafkaSpout0.kafkaSpoutConfig.getConsumerGroupId());
      assertEquals(0, kafkaSpout0.kafkaSpoutConfig.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpout0.kafkaSpoutConfig.getPollTimeoutMs());
      assertNull(kafkaSpout0.kafkaSpoutConfig.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpout0.kafkaSpoutConfig.getMaxTupleRetries());
      assertFalse(kafkaSpout0.kafkaSpoutConfig.isConsumerAutoCommitMode());
      assertEquals(0L, kafkaSpout0.kafkaSpoutConfig.getOffsetsCommitPeriodMs());
      
      ConsumerRecords<KafkaSpout.OffsetEntry, KafkaSpout<TopicPartition, SpecificAggregateStats._Fields>> consumerRecords0 = new ConsumerRecords<KafkaSpout.OffsetEntry, KafkaSpout<TopicPartition, SpecificAggregateStats._Fields>>(map0);
      assertNotNull(consumerRecords0);
      
      // Undeclared exception!
      try { 
        kafkaSpout0.setWaitingToEmit(consumerRecords0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.kafka.clients.consumer.ConsumerRecords", e);
      }
  }

  @Test(timeout = 11000)
  public void test62()  throws Throwable  {
      KafkaSpoutConfig<TopicPartition, Integer> kafkaSpoutConfig0 = (KafkaSpoutConfig<TopicPartition, Integer>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      doReturn((Pattern) null).when(kafkaSpoutConfig0).getTopicWildcardPattern();
      KafkaSpout<TopicPartition, Integer> kafkaSpout0 = new KafkaSpout<TopicPartition, Integer>(kafkaSpoutConfig0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertNotNull(kafkaSpout0);
      
      boolean boolean0 = false;
      kafkaSpout0.consumerAutoCommitMode = boolean0;
      // Undeclared exception!
      try { 
        kafkaSpout0.getWildCardTopics();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test63()  throws Throwable  {
      KafkaSpoutConfig<SpecificAggregateStats._Fields, SpecificAggregateStats._Fields> kafkaSpoutConfig0 = (KafkaSpoutConfig<SpecificAggregateStats._Fields, SpecificAggregateStats._Fields>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      doReturn((Pattern) null).when(kafkaSpoutConfig0).getTopicWildcardPattern();
      KafkaSpout<SpecificAggregateStats._Fields, SpecificAggregateStats._Fields> kafkaSpout0 = new KafkaSpout<SpecificAggregateStats._Fields, SpecificAggregateStats._Fields>(kafkaSpoutConfig0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertNotNull(kafkaSpout0);
      
      // Undeclared exception!
      try { 
        kafkaSpout0.getWildCardTopics();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test64()  throws Throwable  {
      KafkaSpoutConfig<String, TopicPartition> kafkaSpoutConfig0 = (KafkaSpoutConfig<String, TopicPartition>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(kafkaSpoutConfig0).getConsumerGroupId();
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<String, TopicPartition> kafkaSpout0 = new KafkaSpout<String, TopicPartition>(kafkaSpoutConfig0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertNotNull(kafkaSpout0);
      
      KafkaConsumer<String, TopicPartition> kafkaConsumer0 = (KafkaConsumer<String, TopicPartition>) mock(KafkaConsumer.class, new ViolatedAssumptionAnswer());
      kafkaSpout0.kafkaConsumer = kafkaConsumer0;
      KafkaSpout.KafkaSpoutConsumerRebalanceListener kafkaSpout_KafkaSpoutConsumerRebalanceListener0 = kafkaSpout0.new KafkaSpoutConsumerRebalanceListener();
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertNotNull(kafkaSpout_KafkaSpoutConsumerRebalanceListener0);
      
      Collection<TopicPartition> collection0 = null;
      kafkaSpout_KafkaSpoutConsumerRebalanceListener0.onPartitionsRevoked(collection0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
  }

  @Test(timeout = 11000)
  public void test65()  throws Throwable  {
      KafkaSpout<SpecificAggregateStats._Fields, Object> kafkaSpout0 = new KafkaSpout<SpecificAggregateStats._Fields, Object>();
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertNotNull(kafkaSpout0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = false;
      boolean boolean1 = FileSystemHandling.setPermissions(evoSuiteFile0, kafkaSpout0.initialized, kafkaSpout0.initialized, boolean0);
      assertTrue(boolean1 == boolean0);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(boolean1);
      
      boolean boolean2 = true;
      // Undeclared exception!
      try { 
        kafkaSpout0.ack(evoSuiteFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test66()  throws Throwable  {
      KafkaSpout<String, KafkaSpoutMessageId> kafkaSpout0 = new KafkaSpout<String, KafkaSpoutMessageId>();
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertNotNull(kafkaSpout0);
      
      TopicPartition topicPartition0 = null;
      long long0 = 0L;
      // Undeclared exception!
      try { 
        kafkaSpout0.ack(topicPartition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test67()  throws Throwable  {
      long long0 = (-910L);
      System.setCurrentTimeMillis(long0);
      KafkaSpout<OffsetAndMetadata, String> kafkaSpout0 = new KafkaSpout<OffsetAndMetadata, String>();
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertNotNull(kafkaSpout0);
      
      String string0 = "hiccup.page_helpers$html5";
      int int0 = 0;
      TopicPartition topicPartition0 = new TopicPartition(string0, int0);
      assertEquals(0, topicPartition0.partition());
      assertEquals("hiccup.page_helpers$html5", topicPartition0.topic());
      assertNotNull(topicPartition0);
      
      long long1 = 13L;
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout0.new OffsetEntry(topicPartition0, long1);
      assertFalse(long1 == long0);
      assertEquals(0, topicPartition0.partition());
      assertEquals("hiccup.page_helpers$html5", topicPartition0.topic());
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertNotNull(kafkaSpout_OffsetEntry0);
      
      long long2 = 1392409281320000L;
      OffsetAndMetadata offsetAndMetadata0 = new OffsetAndMetadata(long2);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals("", offsetAndMetadata0.metadata());
      assertEquals(1392409281320000L, offsetAndMetadata0.offset());
      assertNotNull(offsetAndMetadata0);
      
      kafkaSpout_OffsetEntry0.commit(offsetAndMetadata0);
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals(0, topicPartition0.partition());
      assertEquals("hiccup.page_helpers$html5", topicPartition0.topic());
      assertEquals("", offsetAndMetadata0.metadata());
      assertEquals(1392409281320000L, offsetAndMetadata0.offset());
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals((-1392409281319988L), kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
  }

  @Test(timeout = 11000)
  public void test68()  throws Throwable  {
      KafkaSpout<SpecificAggregateStats._Fields, KafkaSpoutStreamsWildcardTopics> kafkaSpout0 = new KafkaSpout<SpecificAggregateStats._Fields, KafkaSpoutStreamsWildcardTopics>();
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertNotNull(kafkaSpout0);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout0.new OffsetEntry();
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertNotNull(kafkaSpout_OffsetEntry0);
      
      String string0 = ", emitted=";
      TSocket tSocket0 = new TSocket(string0, kafkaSpout0.maxRetries);
      assertEquals((-1), tSocket0.getBytesRemainingInBuffer());
      assertEquals(0, tSocket0.getBufferPosition());
      assertFalse(tSocket0.isOpen());
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertNotNull(tSocket0);
      
      TSimpleJSONProtocol tSimpleJSONProtocol0 = new TSimpleJSONProtocol(tSocket0);
      assertEquals((-1), tSocket0.getBytesRemainingInBuffer());
      assertEquals(0, tSocket0.getBufferPosition());
      assertFalse(tSocket0.isOpen());
      assertEquals((short)0, tSimpleJSONProtocol0.readI16());
      assertEquals(0.0, tSimpleJSONProtocol0.readDouble(), 0.01);
      assertEquals("", tSimpleJSONProtocol0.readString());
      assertEquals((byte)0, tSimpleJSONProtocol0.readByte());
      assertEquals(0L, tSimpleJSONProtocol0.readI64());
      assertEquals(0, tSimpleJSONProtocol0.readI32());
      assertFalse(tSimpleJSONProtocol0.readBool());
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertNotNull(tSimpleJSONProtocol0);
      
      ByteBuffer byteBuffer0 = tSimpleJSONProtocol0.readBinary();
      assertEquals((-1), tSocket0.getBytesRemainingInBuffer());
      assertEquals(0, tSocket0.getBufferPosition());
      assertFalse(tSocket0.isOpen());
      assertEquals((short)0, tSimpleJSONProtocol0.readI16());
      assertEquals(0.0, tSimpleJSONProtocol0.readDouble(), 0.01);
      assertEquals("", tSimpleJSONProtocol0.readString());
      assertEquals((byte)0, tSimpleJSONProtocol0.readByte());
      assertEquals(0L, tSimpleJSONProtocol0.readI64());
      assertEquals(0, tSimpleJSONProtocol0.readI32());
      assertFalse(tSimpleJSONProtocol0.readBool());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertNotNull(byteBuffer0);
      
      RecordHeader recordHeader0 = new RecordHeader(string0, byteBuffer0);
      assertEquals((-1), tSocket0.getBytesRemainingInBuffer());
      assertEquals(0, tSocket0.getBufferPosition());
      assertFalse(tSocket0.isOpen());
      assertEquals((short)0, tSimpleJSONProtocol0.readI16());
      assertEquals(0.0, tSimpleJSONProtocol0.readDouble(), 0.01);
      assertEquals("", tSimpleJSONProtocol0.readString());
      assertEquals((byte)0, tSimpleJSONProtocol0.readByte());
      assertEquals(0L, tSimpleJSONProtocol0.readI64());
      assertEquals(0, tSimpleJSONProtocol0.readI32());
      assertFalse(tSimpleJSONProtocol0.readBool());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(", emitted=", recordHeader0.key());
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertNotNull(recordHeader0);
      
      // Undeclared exception!
      try { 
        kafkaSpout0.fail(recordHeader0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.kafka.common.header.internals.RecordHeader cannot be cast to org.apache.storm.kafka.spout.KafkaSpoutMessageId
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test69()  throws Throwable  {
      KafkaSpout<TopicPartition, KafkaSpoutMessageId> kafkaSpout0 = new KafkaSpout<TopicPartition, KafkaSpoutMessageId>();
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertNotNull(kafkaSpout0);
      
      String string0 = "topic-partition [{}] has offsets [{}-{}] ready to be committed";
      TopicPartition topicPartition0 = new TopicPartition(string0, kafkaSpout0.maxRetries);
      assertEquals("topic-partition [{}] has offsets [{}-{}] ready to be committed", topicPartition0.topic());
      assertEquals(0, topicPartition0.partition());
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertNotNull(topicPartition0);
      
      String string1 = "";
      int int0 = (-890);
      long long0 = (-1529L);
      long long1 = 0L;
      TimestampType timestampType0 = TimestampType.LOG_APPEND_TIME;
      long long2 = (-1999L);
      int int1 = 0;
      String string2 = "clj_time.format$parse$iter__2635__2639$fn__2640";
      ConsumerRecord<String, Integer> consumerRecord0 = new ConsumerRecord<String, Integer>(string1, int0, long0, long1, timestampType0, long2, kafkaSpout0.maxRetries, int1, string2, (Integer) kafkaSpout0.maxRetries);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(int1 == int0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(0, consumerRecord0.serializedKeySize());
      assertEquals((-1529L), consumerRecord0.offset());
      assertEquals(TimestampType.LOG_APPEND_TIME, consumerRecord0.timestampType());
      assertEquals(0L, consumerRecord0.timestamp());
      assertEquals("", consumerRecord0.topic());
      assertEquals(0, consumerRecord0.serializedValueSize());
      assertEquals((-890), consumerRecord0.partition());
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals((-1), ConsumerRecord.NULL_SIZE);
      assertEquals((-1), ConsumerRecord.NULL_CHECKSUM);
      assertEquals((-1L), ConsumerRecord.NO_TIMESTAMP);
      assertNotNull(consumerRecord0);
      
      boolean boolean0 = topicPartition0.equals(consumerRecord0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(int1 == int0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("topic-partition [{}] has offsets [{}-{}] ready to be committed", topicPartition0.topic());
      assertEquals(0, topicPartition0.partition());
      assertEquals(0, consumerRecord0.serializedKeySize());
      assertEquals((-1529L), consumerRecord0.offset());
      assertEquals(TimestampType.LOG_APPEND_TIME, consumerRecord0.timestampType());
      assertEquals(0L, consumerRecord0.timestamp());
      assertEquals("", consumerRecord0.topic());
      assertEquals(0, consumerRecord0.serializedValueSize());
      assertEquals((-890), consumerRecord0.partition());
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals((-1), ConsumerRecord.NULL_SIZE);
      assertEquals((-1), ConsumerRecord.NULL_CHECKSUM);
      assertEquals((-1L), ConsumerRecord.NO_TIMESTAMP);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(boolean0);
      
      String string3 = topicPartition0.toString();
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("topic-partition [{}] has offsets [{}-{}] ready to be committed", topicPartition0.topic());
      assertEquals(0, topicPartition0.partition());
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertEquals("topic-partition [{}] has offsets [{}-{}] ready to be committed-0", string3);
      assertNotNull(string3);
      
      Collection<TopicPartition> collection0 = kafkaSpout0.toArrayList(topicPartition0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertEquals("topic-partition [{}] has offsets [{}-{}] ready to be committed", topicPartition0.topic());
      assertEquals(0, topicPartition0.partition());
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertTrue(collection0.contains(topicPartition0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotNull(collection0);
      
      // Undeclared exception!
      try { 
        kafkaSpout0.subscribeKafkaConsumer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test70()  throws Throwable  {
      KafkaSpoutConfig<TopicPartition, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig0 = (KafkaSpoutConfig<TopicPartition, KafkaSpoutStreamsNamedTopics>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((Map) null).when(kafkaSpoutConfig0).getKafkaProps();
      doReturn((KafkaSpoutStreams) null, (KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      doReturn((Deserializer) null).when(kafkaSpoutConfig0).getKeyDeserializer();
      doReturn((Deserializer) null).when(kafkaSpoutConfig0).getValueDeserializer();
      KafkaSpout<TopicPartition, KafkaSpoutStreamsNamedTopics> kafkaSpout0 = new KafkaSpout<TopicPartition, KafkaSpoutStreamsNamedTopics>(kafkaSpoutConfig0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertNotNull(kafkaSpout0);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout0.new OffsetEntry();
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertNotNull(kafkaSpout_OffsetEntry0);
      
      KafkaSpout<KafkaSpoutMessageId, OffsetAndMetadata> kafkaSpout1 = new KafkaSpout<KafkaSpoutMessageId, OffsetAndMetadata>(kafkaSpout0.kafkaSpoutConfig);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertNotNull(kafkaSpout1);
      
      long long0 = 433L;
      OffsetAndMetadata offsetAndMetadata0 = null;
      kafkaSpout_OffsetEntry0.commit(offsetAndMetadata0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry1 = kafkaSpout1.new OffsetEntry(kafkaSpout_OffsetEntry0.tp, long0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertNotNull(kafkaSpout_OffsetEntry1);
      
      NavigableSet<KafkaSpoutMessageId> navigableSet0 = kafkaSpout_OffsetEntry1.ackedMsgs;
      assertEquals(0, navigableSet0.size());
      assertTrue(navigableSet0.isEmpty());
      assertNotNull(navigableSet0);
      
      kafkaSpout_OffsetEntry0.ackedMsgs = navigableSet0;
      assertEquals(0, navigableSet0.size());
      assertTrue(navigableSet0.isEmpty());
      assertEquals(0, kafkaSpout_OffsetEntry0.ackedMsgs.size());
      assertTrue(kafkaSpout_OffsetEntry0.ackedMsgs.isEmpty());
      
      String string0 = kafkaSpout_OffsetEntry0.toString();
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals("OffsetEntry{topic-partition=null, fetchOffset=0, committedOffset=0, ackedMsgs=[]}", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        kafkaSpout0.activate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test71()  throws Throwable  {
      KafkaSpout<Header, String> kafkaSpout0 = new KafkaSpout<Header, String>();
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertNotNull(kafkaSpout0);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout0.new OffsetEntry();
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertNotNull(kafkaSpout_OffsetEntry0);
      
      TopicPartition topicPartition0 = kafkaSpout_OffsetEntry0.tp;
      assertNull(topicPartition0);
      
      long long0 = 1182L;
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry1 = kafkaSpout0.new OffsetEntry(topicPartition0, long0);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertNotNull(kafkaSpout_OffsetEntry1);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry2 = kafkaSpout0.new OffsetEntry(kafkaSpout_OffsetEntry1.tp, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertNotNull(kafkaSpout_OffsetEntry2);
      
      OffsetAndMetadata offsetAndMetadata0 = kafkaSpout_OffsetEntry2.findNextCommitOffset();
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertNull(offsetAndMetadata0);
      
      kafkaSpout_OffsetEntry1.commit(offsetAndMetadata0);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      
      kafkaSpout_OffsetEntry2.tp = kafkaSpout_OffsetEntry0.tp;
      KafkaSpout.OffsetComparator kafkaSpout_OffsetComparator0 = new KafkaSpout.OffsetComparator();
      assertNotNull(kafkaSpout_OffsetComparator0);
      
      ToLongFunction<KafkaSpoutMessageId> toLongFunction0 = (ToLongFunction<KafkaSpoutMessageId>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      Comparator<KafkaSpoutMessageId> comparator0 = Comparator.comparingLong((ToLongFunction<? super KafkaSpoutMessageId>) toLongFunction0);
      assertNotNull(comparator0);
      
      KafkaSpoutMessageId kafkaSpoutMessageId0 = null;
      // Undeclared exception!
      try { 
        kafkaSpout_OffsetComparator0.compare(kafkaSpoutMessageId0, kafkaSpoutMessageId0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout$OffsetComparator", e);
      }
  }

  @Test(timeout = 11000)
  public void test72()  throws Throwable  {
      KafkaSpout<OffsetAndMetadata, TopicPartition> kafkaSpout0 = new KafkaSpout<OffsetAndMetadata, TopicPartition>();
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertNotNull(kafkaSpout0);
      
      boolean boolean0 = true;
      kafkaSpout0.consumerAutoCommitMode = boolean0;
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout0.new OffsetEntry();
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertTrue(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertNotNull(kafkaSpout_OffsetEntry0);
      
      kafkaSpout_OffsetEntry0.initialFetchOffset = (long) kafkaSpout0.maxRetries;
      long long0 = kafkaSpout_OffsetEntry0.getCommittedOffset();
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertTrue(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0L, long0);
      
      KafkaSpoutConfig.FirstPollOffsetStrategy[] kafkaSpoutConfig_FirstPollOffsetStrategyArray0 = KafkaSpoutConfig.FirstPollOffsetStrategy.values();
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      assertNotNull(kafkaSpoutConfig_FirstPollOffsetStrategyArray0);
      
      KafkaSpout.Timer kafkaSpout_Timer0 = kafkaSpout0.new Timer();
      assertNull(kafkaSpout_Timer0.getTimeUnit());
      assertEquals(0L, kafkaSpout_Timer0.period());
      assertEquals(0L, kafkaSpout_Timer0.delay());
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertTrue(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0L, kafkaSpout_Timer0.start);
      assertEquals(0L, kafkaSpout_Timer0.period);
      assertEquals(0L, kafkaSpout_Timer0.delay);
      assertEquals(0L, kafkaSpout_Timer0.periodNanos);
      assertNotNull(kafkaSpout_Timer0);
      
      kafkaSpout_Timer0.getTimeUnit();
      assertNull(kafkaSpout_Timer0.getTimeUnit());
      assertEquals(0L, kafkaSpout_Timer0.period());
      assertEquals(0L, kafkaSpout_Timer0.delay());
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertTrue(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0L, kafkaSpout_Timer0.start);
      assertEquals(0L, kafkaSpout_Timer0.period);
      assertEquals(0L, kafkaSpout_Timer0.delay);
      assertEquals(0L, kafkaSpout_Timer0.periodNanos);
      
      KafkaSpout<String, SQLTransientConnectionException> kafkaSpout1 = new KafkaSpout<String, SQLTransientConnectionException>();
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertNotNull(kafkaSpout1);
      
      // Undeclared exception!
      try { 
        kafkaSpout1.poll();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test73()  throws Throwable  {
      KafkaSpoutConfig<String, SpecificAggregateStats._Fields> kafkaSpoutConfig0 = (KafkaSpoutConfig<String, SpecificAggregateStats._Fields>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<String, SpecificAggregateStats._Fields> kafkaSpout0 = new KafkaSpout<String, SpecificAggregateStats._Fields>(kafkaSpoutConfig0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertNotNull(kafkaSpout0);
      
      long long0 = (-586L);
      long long1 = (-1430L);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      KafkaSpout.Timer kafkaSpout_Timer0 = kafkaSpout0.new Timer(long0, long1, timeUnit0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(TimeUnit.MILLISECONDS, kafkaSpout_Timer0.getTimeUnit());
      assertEquals((-1430L), kafkaSpout_Timer0.period());
      assertEquals((-586L), kafkaSpout_Timer0.delay());
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals((-586L), kafkaSpout_Timer0.delay);
      assertEquals((-1430L), kafkaSpout_Timer0.period);
      assertEquals(1392408695320000L, kafkaSpout_Timer0.start);
      assertEquals((-1430000000L), kafkaSpout_Timer0.periodNanos);
      assertNotNull(kafkaSpout_Timer0);
      
      long long2 = kafkaSpout_Timer0.period();
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals(TimeUnit.MILLISECONDS, kafkaSpout_Timer0.getTimeUnit());
      assertEquals((-1430L), kafkaSpout_Timer0.period());
      assertEquals((-586L), kafkaSpout_Timer0.delay());
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals((-586L), kafkaSpout_Timer0.delay);
      assertEquals((-1430L), kafkaSpout_Timer0.period);
      assertEquals(1392408695320000L, kafkaSpout_Timer0.start);
      assertEquals((-1430000000L), kafkaSpout_Timer0.periodNanos);
      assertEquals((-1430L), long2);
  }

  @Test(timeout = 11000)
  public void test74()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpout.OffsetEntry, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig0 = (KafkaSpoutConfig<KafkaSpout.OffsetEntry, KafkaSpoutStreamsNamedTopics>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<KafkaSpout.OffsetEntry, KafkaSpoutStreamsNamedTopics> kafkaSpout0 = new KafkaSpout<KafkaSpout.OffsetEntry, KafkaSpoutStreamsNamedTopics>(kafkaSpoutConfig0);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertNotNull(kafkaSpout0);
      
      boolean boolean0 = true;
      kafkaSpout0.consumerAutoCommitMode = boolean0;
      ConsumerRecords<KafkaSpout.OffsetEntry, KafkaSpoutStreamsNamedTopics> consumerRecords0 = ConsumerRecords.empty();
      assertTrue(consumerRecords0.isEmpty());
      assertNotNull(consumerRecords0);
      
      String string0 = ", fetchOffset=";
      int int0 = 1;
      TopicPartition topicPartition0 = new TopicPartition(string0, int0);
      assertEquals(", fetchOffset=", topicPartition0.topic());
      assertEquals(1, topicPartition0.partition());
      assertNotNull(topicPartition0);
      
      List<ConsumerRecord<KafkaSpout.OffsetEntry, KafkaSpoutStreamsNamedTopics>> list0 = consumerRecords0.records(topicPartition0);
      assertTrue(consumerRecords0.isEmpty());
      assertEquals(", fetchOffset=", topicPartition0.topic());
      assertEquals(1, topicPartition0.partition());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Spliterator<ConsumerRecord<KafkaSpout.OffsetEntry, KafkaSpoutStreamsNamedTopics>> spliterator0 = consumerRecords0.spliterator();
      assertTrue(consumerRecords0.isEmpty());
      assertNotNull(spliterator0);
      
      kafkaSpout0.setWaitingToEmit(consumerRecords0);
      assertTrue(consumerRecords0.isEmpty());
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertTrue(kafkaSpout0.consumerAutoCommitMode);
      
      // Undeclared exception!
      try { 
        kafkaSpout0.emit();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 11000)
  public void test75()  throws Throwable  {
      KafkaSpout<KafkaSpout.OffsetEntry, ForkJoinTask<KafkaSpoutStreamsNamedTopics>> kafkaSpout0 = new KafkaSpout<KafkaSpout.OffsetEntry, ForkJoinTask<KafkaSpoutStreamsNamedTopics>>();
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertNotNull(kafkaSpout0);
      
      String string0 = "2s,WM0Iv|+jp~";
      int int0 = 80;
      TopicPartition topicPartition0 = new TopicPartition(string0, int0);
      assertEquals(80, topicPartition0.partition());
      assertEquals("2s,WM0Iv|+jp~", topicPartition0.topic());
      assertNotNull(topicPartition0);
      
      Collection<TopicPartition> collection0 = kafkaSpout0.toArrayList(topicPartition0);
      assertEquals(80, topicPartition0.partition());
      assertEquals("2s,WM0Iv|+jp~", topicPartition0.topic());
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertTrue(collection0.contains(topicPartition0));
      assertNotNull(collection0);
      
      KafkaSpout.KafkaSpoutConsumerRebalanceListener kafkaSpout_KafkaSpoutConsumerRebalanceListener0 = kafkaSpout0.new KafkaSpoutConsumerRebalanceListener();
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertNotNull(kafkaSpout_KafkaSpoutConsumerRebalanceListener0);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout0.new OffsetEntry();
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertNotNull(kafkaSpout_OffsetEntry0);
      
      OffsetAndMetadata offsetAndMetadata0 = kafkaSpout_OffsetEntry0.findNextCommitOffset();
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertNull(offsetAndMetadata0);
      
      // Undeclared exception!
      try { 
        kafkaSpout_KafkaSpoutConsumerRebalanceListener0.doSeek(topicPartition0, offsetAndMetadata0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout$KafkaSpoutConsumerRebalanceListener", e);
      }
  }

  @Test(timeout = 11000)
  public void test76()  throws Throwable  {
      KafkaSpoutConfig<String, Header> kafkaSpoutConfig0 = (KafkaSpoutConfig<String, Header>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<String, Header> kafkaSpout0 = new KafkaSpout<String, Header>(kafkaSpoutConfig0);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertNotNull(kafkaSpout0);
      
      KafkaConsumer<String, Header> kafkaConsumer0 = (KafkaConsumer<String, Header>) mock(KafkaConsumer.class, new ViolatedAssumptionAnswer());
      kafkaSpout0.kafkaConsumer = kafkaConsumer0;
      // Undeclared exception!
      try { 
        kafkaSpout0.deactivate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test77()  throws Throwable  {
      KafkaSpout<RecordHeader, KafkaSpoutStreamsWildcardTopics> kafkaSpout0 = new KafkaSpout<RecordHeader, KafkaSpoutStreamsWildcardTopics>();
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertNotNull(kafkaSpout0);
      
      boolean boolean0 = false;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) kafkaSpout0;
      objectArray0[1] = (Object) kafkaSpout0;
      PersistentHashMap persistentHashMap0 = PersistentHashMap.create(objectArray0);
      assertEquals(2, objectArray0.length);
      assertEquals(1, persistentHashMap0.count());
      assertNotNull(persistentHashMap0);
      
      StormTopology stormTopology0 = new StormTopology();
      assertEquals(0, stormTopology0.get_bolts_size());
      assertFalse(stormTopology0.is_set_worker_hooks());
      assertEquals(0, stormTopology0.get_worker_hooks_size());
      assertFalse(stormTopology0.is_set_dependency_jars());
      assertEquals(0, stormTopology0.get_spouts_size());
      assertEquals(0, stormTopology0.get_dependency_jars_size());
      assertFalse(stormTopology0.is_set_bolts());
      assertEquals(0, stormTopology0.get_dependency_artifacts_size());
      assertFalse(stormTopology0.is_set_state_spouts());
      assertEquals(0, stormTopology0.get_state_spouts_size());
      assertFalse(stormTopology0.is_set_dependency_artifacts());
      assertFalse(stormTopology0.is_set_spouts());
      assertNotNull(stormTopology0);
      
      Map<Integer, String> map0 = null;
      String string0 = "*:d&XK?^t,7 z<B@w";
      Integer integer0 = new Integer(kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(kafkaSpout0.maxRetries);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      
      ISeq iSeq0 = null;
      PersistentVector persistentVector0 = PersistentVector.create(iSeq0);
      assertEquals(0, persistentVector0.count());
      assertEquals(5, persistentVector0.shift);
      assertNotNull(persistentVector0);
      
      Map<Integer, Map<Integer, Map<String, IMetric>>> map1 = null;
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      assertEquals("false", atomicBoolean0.toString());
      assertFalse(atomicBoolean0.get());
      assertNotNull(atomicBoolean0);
      
      TopologyContext topologyContext0 = new TopologyContext(stormTopology0, kafkaSpout0.acked, map0, persistentHashMap0, persistentHashMap0, string0, string0, string0, integer0, integer1, persistentVector0, persistentHashMap0, persistentHashMap0, persistentHashMap0, map1, atomicBoolean0);
      assertEquals(2, objectArray0.length);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(1, persistentHashMap0.count());
      assertEquals(0, stormTopology0.get_bolts_size());
      assertFalse(stormTopology0.is_set_worker_hooks());
      assertEquals(0, stormTopology0.get_worker_hooks_size());
      assertFalse(stormTopology0.is_set_dependency_jars());
      assertEquals(0, stormTopology0.get_spouts_size());
      assertEquals(0, stormTopology0.get_dependency_jars_size());
      assertFalse(stormTopology0.is_set_bolts());
      assertEquals(0, stormTopology0.get_dependency_artifacts_size());
      assertFalse(stormTopology0.is_set_state_spouts());
      assertEquals(0, stormTopology0.get_state_spouts_size());
      assertFalse(stormTopology0.is_set_dependency_artifacts());
      assertFalse(stormTopology0.is_set_spouts());
      assertEquals(0, persistentVector0.count());
      assertEquals("false", atomicBoolean0.toString());
      assertFalse(atomicBoolean0.get());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/storm/bd1f5c54752f67b484a83c26667331234234d3a3/evosuite_6/*:d&XK?^t,7 z<B@w", topologyContext0.getPIDDir());
      assertEquals("*:d&XK?^t,7 z<B@w", topologyContext0.getCodeDir());
      assertEquals("*:d&XK?^t,7 z<B@w", topologyContext0.getStormId());
      assertEquals(0, (int)topologyContext0.getThisWorkerPort());
      assertEquals(0, topologyContext0.getThisTaskId());
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(5, persistentVector0.shift);
      assertNotNull(topologyContext0);
      
      SpoutOutputCollector spoutOutputCollector0 = new SpoutOutputCollector(kafkaSpout0.collector);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertNotNull(spoutOutputCollector0);
      
      // Undeclared exception!
      try { 
        kafkaSpout0.open(persistentHashMap0, topologyContext0, spoutOutputCollector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test78()  throws Throwable  {
      KafkaSpoutConfig<Delayed, Object> kafkaSpoutConfig0 = (KafkaSpoutConfig<Delayed, Object>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<Delayed, Object> kafkaSpout0 = new KafkaSpout<Delayed, Object>(kafkaSpoutConfig0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertNotNull(kafkaSpout0);
      
      Object object0 = null;
      // Undeclared exception!
      try { 
        kafkaSpout0.fail(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test79()  throws Throwable  {
      Map<String, Object> map0 = null;
      KafkaSpoutConfig<ForkJoinTask<Object>, TopicPartition> kafkaSpoutConfig0 = (KafkaSpoutConfig<ForkJoinTask<Object>, TopicPartition>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((Map) null).when(kafkaSpoutConfig0).getKafkaProps();
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      doReturn((Deserializer) null).when(kafkaSpoutConfig0).getKeyDeserializer();
      doReturn((Deserializer) null).when(kafkaSpoutConfig0).getValueDeserializer();
      KafkaSpout<ForkJoinTask<Object>, TopicPartition> kafkaSpout0 = new KafkaSpout<ForkJoinTask<Object>, TopicPartition>(kafkaSpoutConfig0);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertNotNull(kafkaSpout0);
      
      // Undeclared exception!
      try { 
        kafkaSpout0.subscribeKafkaConsumer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test80()  throws Throwable  {
      String string0 = " hj94Xdk.dL.";
      Map<String, Object> map0 = null;
      KafkaSpoutConfig<RecordHeader, Delayed> kafkaSpoutConfig0 = (KafkaSpoutConfig<RecordHeader, Delayed>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(kafkaSpoutConfig0).getConsumerGroupId();
      doReturn((Map) null).when(kafkaSpoutConfig0).getKafkaProps();
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      doReturn(0).when(kafkaSpoutConfig0).getMaxUncommittedOffsets();
      KafkaSpout<RecordHeader, Delayed> kafkaSpout0 = new KafkaSpout<RecordHeader, Delayed>(kafkaSpoutConfig0);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertNotNull(kafkaSpout0);
      
      ConsumerRecords<RecordHeader, Delayed> consumerRecords0 = ConsumerRecords.empty();
      assertTrue(consumerRecords0.isEmpty());
      assertNotNull(consumerRecords0);
      
      String string1 = "=rE9;[6";
      Iterable<ConsumerRecord<RecordHeader, Delayed>> iterable0 = consumerRecords0.records(string1);
      assertFalse(string1.equals((Object)string0));
      assertTrue(consumerRecords0.isEmpty());
      assertNotSame(string1, string0);
      assertNotNull(iterable0);
      
      kafkaSpout0.setWaitingToEmit(consumerRecords0);
      assertTrue(consumerRecords0.isEmpty());
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      
      boolean boolean0 = kafkaSpout0.poll();
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        kafkaSpout0.getComponentConfiguration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test81()  throws Throwable  {
      String string0 = "topic-partition [{}] has offsets [{}-{}] ready to be committed";
      KafkaSpoutConfig<SpecificAggregateStats._Fields, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig0 = (KafkaSpoutConfig<SpecificAggregateStats._Fields, KafkaSpoutStreamsNamedTopics>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(kafkaSpoutConfig0).getConsumerGroupId();
      doReturn((Map) null).when(kafkaSpoutConfig0).getKafkaProps();
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<SpecificAggregateStats._Fields, KafkaSpoutStreamsNamedTopics> kafkaSpout0 = new KafkaSpout<SpecificAggregateStats._Fields, KafkaSpoutStreamsNamedTopics>(kafkaSpoutConfig0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertNotNull(kafkaSpout0);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout0.new OffsetEntry();
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertNotNull(kafkaSpout_OffsetEntry0);
      
      String string1 = kafkaSpout_OffsetEntry0.toString();
      assertFalse(string1.equals((Object)string0));
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertNotSame(string1, string0);
      assertEquals("OffsetEntry{topic-partition=null, fetchOffset=0, committedOffset=0, ackedMsgs=[]}", string1);
      assertNotNull(string1);
      
      NavigableSet<KafkaSpoutMessageId> navigableSet0 = kafkaSpout_OffsetEntry0.ackedMsgs;
      assertTrue(navigableSet0.isEmpty());
      assertEquals(0, navigableSet0.size());
      assertNotNull(navigableSet0);
      
      kafkaSpout0.emitted = (Set<KafkaSpoutMessageId>) navigableSet0;
      assertTrue(navigableSet0.isEmpty());
      assertEquals(0, navigableSet0.size());
      assertTrue(kafkaSpout0.emitted.isEmpty());
      assertEquals(0, kafkaSpout0.emitted.size());
      
      SpoutOutputCollector spoutOutputCollector0 = new SpoutOutputCollector(kafkaSpout0.collector);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertNotNull(spoutOutputCollector0);
      
      kafkaSpout0.collector = spoutOutputCollector0;
      // Undeclared exception!
      try { 
        kafkaSpout0.getComponentConfiguration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test82()  throws Throwable  {
      KafkaSpout<TopicPartition, KafkaSpoutStreamsNamedTopics> kafkaSpout0 = new KafkaSpout<TopicPartition, KafkaSpoutStreamsNamedTopics>();
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertNotNull(kafkaSpout0);
      
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      KafkaSpout.Timer kafkaSpout_Timer0 = kafkaSpout0.new Timer(kafkaSpout0.numUncommittedOffsets, kafkaSpout0.numUncommittedOffsets, timeUnit0);
      assertEquals(0L, kafkaSpout_Timer0.delay());
      assertEquals(TimeUnit.MICROSECONDS, kafkaSpout_Timer0.getTimeUnit());
      assertEquals(0L, kafkaSpout_Timer0.period());
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout_Timer0.periodNanos);
      assertEquals(0L, kafkaSpout_Timer0.period);
      assertEquals(1392409281320000L, kafkaSpout_Timer0.start);
      assertEquals(0L, kafkaSpout_Timer0.delay);
      assertNotNull(kafkaSpout_Timer0);
      
      boolean boolean0 = kafkaSpout_Timer0.isExpiredResetOnTrue();
      assertEquals(0L, kafkaSpout_Timer0.delay());
      assertEquals(TimeUnit.MICROSECONDS, kafkaSpout_Timer0.getTimeUnit());
      assertEquals(0L, kafkaSpout_Timer0.period());
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout_Timer0.periodNanos);
      assertEquals(0L, kafkaSpout_Timer0.period);
      assertEquals(1392409281320000L, kafkaSpout_Timer0.start);
      assertEquals(0L, kafkaSpout_Timer0.delay);
      assertFalse(boolean0);
      
      long long0 = kafkaSpout_Timer0.delay();
      assertEquals(0L, kafkaSpout_Timer0.delay());
      assertEquals(TimeUnit.MICROSECONDS, kafkaSpout_Timer0.getTimeUnit());
      assertEquals(0L, kafkaSpout_Timer0.period());
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout_Timer0.periodNanos);
      assertEquals(0L, kafkaSpout_Timer0.period);
      assertEquals(1392409281320000L, kafkaSpout_Timer0.start);
      assertEquals(0L, kafkaSpout_Timer0.delay);
      assertEquals(0L, long0);
      
      KafkaSpout.Timer kafkaSpout_Timer1 = kafkaSpout0.new Timer();
      assertNull(kafkaSpout_Timer1.getTimeUnit());
      assertEquals(0L, kafkaSpout_Timer1.delay());
      assertEquals(0L, kafkaSpout_Timer1.period());
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout_Timer1.start);
      assertEquals(0L, kafkaSpout_Timer1.periodNanos);
      assertEquals(0L, kafkaSpout_Timer1.period);
      assertEquals(0L, kafkaSpout_Timer1.delay);
      assertNotNull(kafkaSpout_Timer1);
      
      boolean boolean1 = kafkaSpout_Timer1.isExpiredResetOnTrue();
      assertFalse(boolean1 == boolean0);
      assertNull(kafkaSpout_Timer1.getTimeUnit());
      assertEquals(0L, kafkaSpout_Timer1.delay());
      assertEquals(0L, kafkaSpout_Timer1.period());
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout_Timer1.periodNanos);
      assertEquals(0L, kafkaSpout_Timer1.period);
      assertEquals(0L, kafkaSpout_Timer1.delay);
      assertEquals(1392409281320000L, kafkaSpout_Timer1.start);
      assertTrue(boolean1);
  }

  @Test(timeout = 11000)
  public void test83()  throws Throwable  {
      KafkaSpout<String, Header> kafkaSpout0 = new KafkaSpout<String, Header>();
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertNotNull(kafkaSpout0);
      
      KafkaSpoutStreams kafkaSpoutStreams0 = kafkaSpout0.kafkaSpoutStreams;
      assertNull(kafkaSpoutStreams0);
      
      int int0 = (-1376);
      KafkaSpoutConfig<String, Delayed> kafkaSpoutConfig0 = (KafkaSpoutConfig<String, Delayed>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn(kafkaSpoutStreams0, kafkaSpout0.kafkaSpoutStreams).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      doReturn(int0).when(kafkaSpoutConfig0).getMaxUncommittedOffsets();
      KafkaSpout<String, Delayed> kafkaSpout1 = new KafkaSpout<String, Delayed>(kafkaSpoutConfig0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertNotNull(kafkaSpout1);
      
      long long0 = (-508L);
      String string0 = "K8 itY8";
      int int1 = 2;
      TopicPartition topicPartition0 = new TopicPartition(string0, int1);
      assertFalse(int1 == int0);
      assertEquals("K8 itY8", topicPartition0.topic());
      assertEquals(2, topicPartition0.partition());
      assertNotNull(topicPartition0);
      
      boolean boolean0 = kafkaSpout1.poll();
      assertFalse(int0 == int1);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(boolean0);
      
      KafkaSpout<Object, Object> kafkaSpout2 = new KafkaSpout<Object, Object>(kafkaSpout1.kafkaSpoutConfig);
      assertFalse(int0 == int1);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout2.maxRetries);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      assertFalse(kafkaSpout2.initialized);
      assertNotNull(kafkaSpout2);
      
      // Undeclared exception!
      try { 
        kafkaSpout2.commitOffsetsForAckedTuples();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test84()  throws Throwable  {
      KafkaSpoutConfig<Integer, Object> kafkaSpoutConfig0 = (KafkaSpoutConfig<Integer, Object>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<Integer, Object> kafkaSpout0 = new KafkaSpout<Integer, Object>(kafkaSpoutConfig0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertNotNull(kafkaSpout0);
      
      boolean boolean0 = true;
      String string0 = kafkaSpout0.toString();
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals("KafkaSpout{acked=null, emitted=null}", string0);
      assertNotNull(string0);
      
      kafkaSpout0.initialized = boolean0;
      // Undeclared exception!
      try { 
        kafkaSpout0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test85()  throws Throwable  {
      KafkaSpout<String, Header> kafkaSpout0 = new KafkaSpout<String, Header>();
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertNotNull(kafkaSpout0);
      
      KafkaSpoutStreams kafkaSpoutStreams0 = kafkaSpout0.kafkaSpoutStreams;
      assertNull(kafkaSpoutStreams0);
      
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      assertNotNull(delayQueue0);
      
      Delayed delayed0 = delayQueue0.poll();
      assertNull(delayed0);
      
      Repeat repeat0 = Repeat.create((Object) delayed0);
      assertFalse(repeat0.isEmpty());
      assertNotNull(repeat0);
      
      KafkaSpoutConfig<TopicPartition, TopicPartition> kafkaSpoutConfig0 = (KafkaSpoutConfig<TopicPartition, TopicPartition>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn(kafkaSpoutStreams0).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      doReturn(repeat0).when(kafkaSpoutConfig0).getSubscribedTopics();
      KafkaSpout<TopicPartition, TopicPartition> kafkaSpout1 = new KafkaSpout<TopicPartition, TopicPartition>(kafkaSpoutConfig0);
      assertFalse(repeat0.isEmpty());
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertNotNull(kafkaSpout1);
      
      int int0 = 2;
      long long0 = 0L;
      OffsetAndMetadata offsetAndMetadata0 = new OffsetAndMetadata(long0);
      assertEquals("", offsetAndMetadata0.metadata());
      assertEquals(0L, offsetAndMetadata0.offset());
      assertNotNull(offsetAndMetadata0);
      
      Optional<Integer> optional0 = offsetAndMetadata0.leaderEpoch();
      assertEquals("", offsetAndMetadata0.metadata());
      assertEquals(0L, offsetAndMetadata0.offset());
      assertNotNull(optional0);
      
      // Undeclared exception!
      try { 
        kafkaSpout1.getNamedTopics();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class clojure.lang.RT
         //
         verifyException("clojure.lang.SeqIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test86()  throws Throwable  {
      String string0 = "";
      GeneralTopologyContext generalTopologyContext0 = null;
      PersistentVector persistentVector0 = PersistentVector.EMPTY;
      assertEquals(0, persistentVector0.count());
      assertEquals(5, persistentVector0.shift);
      assertNotNull(persistentVector0);
      
      int int0 = 7812;
      String string1 = "z%N";
      TupleImpl tupleImpl0 = null;
      try {
        tupleImpl0 = new TupleImpl(generalTopologyContext0, persistentVector0, int0, string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.tuple.TupleImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test87()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig0 = (KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, KafkaSpoutStreamsWildcardTopics>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<KafkaSpoutStreamsNamedTopics, KafkaSpoutStreamsWildcardTopics> kafkaSpout0 = new KafkaSpout<KafkaSpoutStreamsNamedTopics, KafkaSpoutStreamsWildcardTopics>(kafkaSpoutConfig0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertNotNull(kafkaSpout0);
      
      KafkaSpoutStreams kafkaSpoutStreams0 = kafkaSpout0.kafkaSpoutStreams;
      assertNull(kafkaSpoutStreams0);
      
      KafkaSpoutConfig<String, Delayed> kafkaSpoutConfig1 = (KafkaSpoutConfig<String, Delayed>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn(kafkaSpoutStreams0, kafkaSpoutStreams0).when(kafkaSpoutConfig1).getKafkaSpoutStreams();
      doReturn(kafkaSpoutConfig0.DEFAULT_MAX_UNCOMMITTED_OFFSETS).when(kafkaSpoutConfig1).getMaxUncommittedOffsets();
      KafkaSpout<String, Delayed> kafkaSpout1 = new KafkaSpout<String, Delayed>(kafkaSpoutConfig1);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertNotNull(kafkaSpout1);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout1.new OffsetEntry();
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertNotNull(kafkaSpout_OffsetEntry0);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry1 = kafkaSpout1.new OffsetEntry(kafkaSpout_OffsetEntry0.tp, kafkaSpout1.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertNotNull(kafkaSpout_OffsetEntry1);
      
      TopicPartition topicPartition0 = kafkaSpout_OffsetEntry1.tp;
      assertNull(topicPartition0);
      
      long long0 = (-508L);
      String string0 = "K8 itY8";
      int int0 = 2;
      TopicPartition topicPartition1 = new TopicPartition(string0, int0);
      assertEquals(2, topicPartition1.partition());
      assertEquals("K8 itY8", topicPartition1.topic());
      assertNotNull(topicPartition1);
      
      boolean boolean0 = topicPartition1.equals(kafkaSpout_OffsetEntry1);
      assertEquals(2, topicPartition1.partition());
      assertEquals("K8 itY8", topicPartition1.topic());
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(boolean0);
      
      kafkaSpout_OffsetEntry1.tp = topicPartition1;
      assertEquals(2, topicPartition1.partition());
      assertEquals("K8 itY8", topicPartition1.topic());
      assertEquals("K8 itY8", kafkaSpout_OffsetEntry1.tp.topic());
      assertEquals(2, kafkaSpout_OffsetEntry1.tp.partition());
      
      boolean boolean1 = kafkaSpout1.poll();
      assertFalse(boolean1 == boolean0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertTrue(boolean1);
      
      OffsetAndMetadata offsetAndMetadata0 = kafkaSpout_OffsetEntry0.findNextCommitOffset();
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertNull(offsetAndMetadata0);
      
      KafkaSpout<Object, Object> kafkaSpout2 = new KafkaSpout<Object, Object>(kafkaSpout1.kafkaSpoutConfig);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertEquals(0, kafkaSpout2.maxRetries);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      assertFalse(kafkaSpout2.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertNotNull(kafkaSpout2);
      
      System.setCurrentTimeMillis(kafkaSpout2.maxRetries);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertEquals(0, kafkaSpout2.maxRetries);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      assertFalse(kafkaSpout2.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      
      // Undeclared exception!
      try { 
        kafkaSpout2.commitOffsetsForAckedTuples();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test88()  throws Throwable  {
      KafkaSpout<Integer, KafkaSpoutMessageId> kafkaSpout0 = new KafkaSpout<Integer, KafkaSpoutMessageId>();
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertNotNull(kafkaSpout0);
      
      boolean boolean0 = true;
      kafkaSpout0.consumerAutoCommitMode = boolean0;
      // Undeclared exception!
      try { 
        kafkaSpout0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test89()  throws Throwable  {
      KafkaSpout<KafkaSpoutStreamsNamedTopics, KafkaSpoutStreamsWildcardTopics> kafkaSpout0 = new KafkaSpout<KafkaSpoutStreamsNamedTopics, KafkaSpoutStreamsWildcardTopics>();
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertNotNull(kafkaSpout0);
      
      KafkaSpoutStreams kafkaSpoutStreams0 = kafkaSpout0.kafkaSpoutStreams;
      assertNull(kafkaSpoutStreams0);
      
      int int0 = 2662;
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      char char0 = 'D';
      StringWriter stringWriter1 = stringWriter0.append(char0);
      assertEquals("D", stringWriter0.toString());
      assertEquals("D", stringWriter1.toString());
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotNull(stringWriter1);
      
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      assertEquals("D", stringWriter0.toString());
      assertEquals("D", stringWriter1.toString());
      assertEquals(1, stringBuffer0.length());
      assertEquals("D", stringBuffer0.toString());
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotNull(stringBuffer0);
      
      StringSeq stringSeq0 = StringSeq.create(stringBuffer0);
      assertEquals("D", stringWriter0.toString());
      assertEquals("D", stringWriter1.toString());
      assertEquals(1, stringBuffer0.length());
      assertEquals("D", stringBuffer0.toString());
      assertFalse(stringSeq0.isEmpty());
      assertEquals(1, stringSeq0.count());
      assertEquals(0, stringSeq0.index());
      assertEquals(0, stringSeq0.i);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotNull(stringSeq0);
      
      KafkaSpoutConfig<String, Delayed> kafkaSpoutConfig0 = (KafkaSpoutConfig<String, Delayed>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn(kafkaSpoutStreams0).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      doReturn(int0).when(kafkaSpoutConfig0).getMaxUncommittedOffsets();
      KafkaSpout<String, Delayed> kafkaSpout1 = new KafkaSpout<String, Delayed>(kafkaSpoutConfig0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertNotNull(kafkaSpout1);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout1.new OffsetEntry();
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertNotNull(kafkaSpout_OffsetEntry0);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry1 = kafkaSpout1.new OffsetEntry(kafkaSpout_OffsetEntry0.tp, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertNotNull(kafkaSpout_OffsetEntry1);
      
      TopicPartition topicPartition0 = kafkaSpout_OffsetEntry1.tp;
      assertNull(topicPartition0);
      
      long long0 = (-508L);
      String string0 = "K8 itY8";
      int int1 = 2;
      TopicPartition topicPartition1 = new TopicPartition(string0, int1);
      assertFalse(int1 == int0);
      assertEquals(2, topicPartition1.partition());
      assertEquals("K8 itY8", topicPartition1.topic());
      assertNotNull(topicPartition1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      kafkaSpout_OffsetEntry1.tp = topicPartition1;
      assertEquals(2, topicPartition1.partition());
      assertEquals("K8 itY8", topicPartition1.topic());
      assertEquals("K8 itY8", kafkaSpout_OffsetEntry1.tp.topic());
      assertEquals(2, kafkaSpout_OffsetEntry1.tp.partition());
      
      KafkaSpoutMessageId kafkaSpoutMessageId0 = new KafkaSpoutMessageId(topicPartition0, long0);
      assertFalse(int0 == int1);
      assertEquals((-508L), kafkaSpoutMessageId0.offset());
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertNotNull(kafkaSpoutMessageId0);
      
      boolean boolean1 = kafkaSpout1.poll();
      assertFalse(int0 == int1);
      assertTrue(boolean1 == boolean0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertTrue(boolean1);
      
      kafkaSpout_OffsetEntry0.add(kafkaSpoutMessageId0);
      assertFalse(int0 == int1);
      assertEquals((-508L), kafkaSpoutMessageId0.offset());
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      
      KafkaSpout.OffsetComparator kafkaSpout_OffsetComparator0 = new KafkaSpout.OffsetComparator();
      assertNotNull(kafkaSpout_OffsetComparator0);
      
      long long1 = (-2144L);
      KafkaSpoutMessageId kafkaSpoutMessageId1 = new KafkaSpoutMessageId(kafkaSpout_OffsetEntry1.tp, long1);
      assertFalse(int0 == int1);
      assertFalse(long1 == long0);
      assertFalse(kafkaSpoutMessageId1.equals((Object)kafkaSpoutMessageId0));
      assertFalse(int1 == int0);
      assertEquals(2, topicPartition1.partition());
      assertEquals("K8 itY8", topicPartition1.topic());
      assertEquals("K8 itY8", kafkaSpout_OffsetEntry1.tp.topic());
      assertEquals(2, kafkaSpout_OffsetEntry1.tp.partition());
      assertEquals((-2144L), kafkaSpoutMessageId1.offset());
      assertEquals(0, kafkaSpoutMessageId1.numFails());
      assertEquals("K8 itY8", kafkaSpoutMessageId1.topic());
      assertEquals(2, kafkaSpoutMessageId1.partition());
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertNotNull(kafkaSpoutMessageId1);
      
      int int2 = kafkaSpout_OffsetComparator0.compare(kafkaSpoutMessageId1, kafkaSpoutMessageId0);
      assertFalse(int0 == int1);
      assertFalse(long0 == long1);
      assertFalse(int1 == int0);
      assertFalse(kafkaSpoutMessageId0.equals((Object)kafkaSpoutMessageId1));
      assertFalse(long1 == long0);
      assertFalse(kafkaSpoutMessageId1.equals((Object)kafkaSpoutMessageId0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(2, topicPartition1.partition());
      assertEquals("K8 itY8", topicPartition1.topic());
      assertEquals("K8 itY8", kafkaSpout_OffsetEntry1.tp.topic());
      assertEquals(2, kafkaSpout_OffsetEntry1.tp.partition());
      assertEquals((-508L), kafkaSpoutMessageId0.offset());
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertEquals((-2144L), kafkaSpoutMessageId1.offset());
      assertEquals(0, kafkaSpoutMessageId1.numFails());
      assertEquals("K8 itY8", kafkaSpoutMessageId1.topic());
      assertEquals(2, kafkaSpoutMessageId1.partition());
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertSame(kafkaSpout_OffsetEntry1.tp, topicPartition1);
      assertNotSame(kafkaSpoutMessageId0, kafkaSpoutMessageId1);
      assertNotSame(kafkaSpoutMessageId1, kafkaSpoutMessageId0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 11000)
  public void test90()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutMessageId, TopicPartition> kafkaSpoutConfig0 = (KafkaSpoutConfig<KafkaSpoutMessageId, TopicPartition>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<KafkaSpoutMessageId, TopicPartition> kafkaSpout0 = new KafkaSpout<KafkaSpoutMessageId, TopicPartition>(kafkaSpoutConfig0);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertNotNull(kafkaSpout0);
      
      KafkaSpoutStreams kafkaSpoutStreams0 = kafkaSpout0.kafkaSpoutStreams;
      assertNull(kafkaSpoutStreams0);
      
      KafkaSpoutConfig<Integer, Object> kafkaSpoutConfig1 = (KafkaSpoutConfig<Integer, Object>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn(kafkaSpoutStreams0).when(kafkaSpoutConfig1).getKafkaSpoutStreams();
      KafkaSpout<Integer, Object> kafkaSpout1 = new KafkaSpout<Integer, Object>(kafkaSpoutConfig1);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertNotNull(kafkaSpout1);
      
      boolean boolean0 = false;
      long long0 = (-2145604833L);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      KafkaSpout.Timer kafkaSpout_Timer0 = kafkaSpout1.new Timer(long0, kafkaSpout1.numUncommittedOffsets, timeUnit0);
      assertEquals(TimeUnit.MILLISECONDS, kafkaSpout_Timer0.getTimeUnit());
      assertEquals(0L, kafkaSpout_Timer0.period());
      assertEquals((-2145604833L), kafkaSpout_Timer0.delay());
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertEquals((-753195551680000L), kafkaSpout_Timer0.start);
      assertEquals(0L, kafkaSpout_Timer0.period);
      assertEquals((-2145604833L), kafkaSpout_Timer0.delay);
      assertEquals(0L, kafkaSpout_Timer0.periodNanos);
      assertNotNull(kafkaSpout_Timer0);
      
      boolean boolean1 = kafkaSpout_Timer0.isExpiredResetOnTrue();
      assertFalse(boolean1 == boolean0);
      assertEquals(TimeUnit.MILLISECONDS, kafkaSpout_Timer0.getTimeUnit());
      assertEquals(0L, kafkaSpout_Timer0.period());
      assertEquals((-2145604833L), kafkaSpout_Timer0.delay());
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout_Timer0.period);
      assertEquals(1392409281320000L, kafkaSpout_Timer0.start);
      assertEquals((-2145604833L), kafkaSpout_Timer0.delay);
      assertEquals(0L, kafkaSpout_Timer0.periodNanos);
      assertTrue(boolean1);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout1.new OffsetEntry();
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertNotNull(kafkaSpout_OffsetEntry0);
      
      OffsetAndMetadata offsetAndMetadata0 = kafkaSpout_OffsetEntry0.findNextCommitOffset();
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertNull(offsetAndMetadata0);
  }

  @Test(timeout = 11000)
  public void test91()  throws Throwable  {
      KafkaSpout<SQLTransientConnectionException, Delayed> kafkaSpout0 = new KafkaSpout<SQLTransientConnectionException, Delayed>();
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertNotNull(kafkaSpout0);
      
      KafkaSpoutStreams kafkaSpoutStreams0 = kafkaSpout0.kafkaSpoutStreams;
      assertNull(kafkaSpoutStreams0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) kafkaSpoutStreams0;
      objectArray0[1] = (Object) kafkaSpout0;
      PersistentVector persistentVector0 = PersistentVector.create(objectArray0);
      assertEquals(2, objectArray0.length);
      assertEquals(2, persistentVector0.count());
      assertEquals(5, persistentVector0.shift);
      assertNotNull(persistentVector0);
      
      KafkaSpoutConfig<TopicPartition, TopicPartition> kafkaSpoutConfig0 = (KafkaSpoutConfig<TopicPartition, TopicPartition>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn(kafkaSpoutStreams0).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      doReturn(persistentVector0).when(kafkaSpoutConfig0).getSubscribedTopics();
      KafkaSpout<TopicPartition, TopicPartition> kafkaSpout1 = new KafkaSpout<TopicPartition, TopicPartition>(kafkaSpoutConfig0);
      assertEquals(2, objectArray0.length);
      assertEquals(2, persistentVector0.count());
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(5, persistentVector0.shift);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertNotNull(kafkaSpout1);
      
      int int0 = 2;
      long long0 = 0L;
      OffsetAndMetadata offsetAndMetadata0 = new OffsetAndMetadata(long0);
      assertEquals(0L, offsetAndMetadata0.offset());
      assertEquals("", offsetAndMetadata0.metadata());
      assertNotNull(offsetAndMetadata0);
      
      Optional<Integer> optional0 = offsetAndMetadata0.leaderEpoch();
      assertEquals(0L, offsetAndMetadata0.offset());
      assertEquals("", offsetAndMetadata0.metadata());
      assertNotNull(optional0);
      
      // Undeclared exception!
      try { 
        kafkaSpout1.getNamedTopics();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.storm.kafka.spout.KafkaSpout cannot be cast to java.lang.String
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test92()  throws Throwable  {
      KafkaSpout<Object, Object> kafkaSpout0 = new KafkaSpout<Object, Object>();
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertNotNull(kafkaSpout0);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout0.new OffsetEntry();
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertNotNull(kafkaSpout_OffsetEntry0);
      
      String string0 = kafkaSpout_OffsetEntry0.toString();
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals("OffsetEntry{topic-partition=null, fetchOffset=0, committedOffset=0, ackedMsgs=[]}", string0);
      assertNotNull(string0);
      
      String string1 = kafkaSpout_OffsetEntry0.toString();
      assertTrue(string1.equals((Object)string0));
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertNotSame(string1, string0);
      assertEquals("OffsetEntry{topic-partition=null, fetchOffset=0, committedOffset=0, ackedMsgs=[]}", string1);
      assertNotNull(string1);
      
      PersistentList persistentList0 = new PersistentList(kafkaSpout0);
      assertFalse(persistentList0.isEmpty());
      assertEquals(1, persistentList0.count());
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertNotNull(persistentList0);
      
      Object[] objectArray0 = new Object[1];
      String string2 = "Pe|,1,=yk-|+";
      int int0 = 1486;
      long long0 = 493L;
      long long1 = 10000000L;
      TimestampType timestampType0 = TimestampType.NO_TIMESTAMP_TYPE;
      String string3 = "Pe|,1,=yk-|+";
      long long2 = (-2145604833L);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      KafkaSpout.Timer kafkaSpout_Timer0 = kafkaSpout0.new Timer(long2, long1, timeUnit0);
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals(TimeUnit.MINUTES, kafkaSpout_Timer0.getTimeUnit());
      assertEquals(10000000L, kafkaSpout_Timer0.period());
      assertEquals((-2145604833L), kafkaSpout_Timer0.delay());
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(10000000L, kafkaSpout_Timer0.period);
      assertEquals(600000000000000000L, kafkaSpout_Timer0.periodNanos);
      assertEquals((-2145604833L), kafkaSpout_Timer0.delay);
      assertEquals((-9221979627573455808L), kafkaSpout_Timer0.start);
      assertNotNull(kafkaSpout_Timer0);
      
      boolean boolean0 = kafkaSpout_Timer0.isExpiredResetOnTrue();
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals(TimeUnit.MINUTES, kafkaSpout_Timer0.getTimeUnit());
      assertEquals(10000000L, kafkaSpout_Timer0.period());
      assertEquals((-2145604833L), kafkaSpout_Timer0.delay());
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(10000000L, kafkaSpout_Timer0.period);
      assertEquals(600000000000000000L, kafkaSpout_Timer0.periodNanos);
      assertEquals((-2145604833L), kafkaSpout_Timer0.delay);
      assertEquals((-9221979627573455808L), kafkaSpout_Timer0.start);
      assertFalse(boolean0);
      
      try { 
        Long.decode(string3);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Pe|,1,=yk-|+\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 11000)
  public void test93()  throws Throwable  {
      KafkaSpout<Integer, Delayed> kafkaSpout0 = new KafkaSpout<Integer, Delayed>();
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertNotNull(kafkaSpout0);
      
      long long0 = 999999999L;
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      KafkaSpout.Timer kafkaSpout_Timer0 = kafkaSpout0.new Timer(kafkaSpout0.maxRetries, long0, timeUnit0);
      assertEquals(999999999L, kafkaSpout_Timer0.period());
      assertEquals(0L, kafkaSpout_Timer0.delay());
      assertEquals(TimeUnit.MINUTES, kafkaSpout_Timer0.getTimeUnit());
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(1392409281320000L, kafkaSpout_Timer0.start);
      assertEquals(999999999L, kafkaSpout_Timer0.period);
      assertEquals(0L, kafkaSpout_Timer0.delay);
      assertEquals(9223372036854775807L, kafkaSpout_Timer0.periodNanos);
      assertNotNull(kafkaSpout_Timer0);
      
      KafkaSpout<ForkJoinTask<KafkaSpoutStreamsNamedTopics>, SpecificAggregateStats._Fields> kafkaSpout1 = new KafkaSpout<ForkJoinTask<KafkaSpoutStreamsNamedTopics>, SpecificAggregateStats._Fields>();
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      assertNotNull(kafkaSpout1);
      
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) kafkaSpout0;
      objectArray0[2] = (Object) kafkaSpout1;
      objectArray0[3] = (Object) kafkaSpout0;
      objectArray0[4] = (Object) kafkaSpout1;
      PersistentArrayMap persistentArrayMap0 = new PersistentArrayMap(objectArray0);
      assertEquals(5, objectArray0.length);
      assertEquals(2, persistentArrayMap0.count());
      assertEquals(2, persistentArrayMap0.capacity());
      assertNotNull(persistentArrayMap0);
      
      ConsumerRecords<ForkJoinTask<KafkaSpoutStreamsNamedTopics>, SpecificAggregateStats._Fields> consumerRecords0 = new ConsumerRecords<ForkJoinTask<KafkaSpoutStreamsNamedTopics>, SpecificAggregateStats._Fields>(persistentArrayMap0);
      assertEquals(5, objectArray0.length);
      assertEquals(2, persistentArrayMap0.count());
      assertEquals(2, persistentArrayMap0.capacity());
      assertFalse(consumerRecords0.isEmpty());
      assertNotNull(consumerRecords0);
      
      // Undeclared exception!
      try { 
        kafkaSpout1.setWaitingToEmit(consumerRecords0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to org.apache.kafka.common.TopicPartition
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test94()  throws Throwable  {
      KafkaSpoutConfig<String, Delayed> kafkaSpoutConfig0 = (KafkaSpoutConfig<String, Delayed>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null, (KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      doReturn(0).when(kafkaSpoutConfig0).getMaxUncommittedOffsets();
      KafkaSpout<String, Delayed> kafkaSpout0 = new KafkaSpout<String, Delayed>(kafkaSpoutConfig0);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertNotNull(kafkaSpout0);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout0.new OffsetEntry();
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertNotNull(kafkaSpout_OffsetEntry0);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry1 = kafkaSpout0.new OffsetEntry(kafkaSpout_OffsetEntry0.tp, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertNotNull(kafkaSpout_OffsetEntry1);
      
      TopicPartition topicPartition0 = kafkaSpout_OffsetEntry1.tp;
      assertNull(topicPartition0);
      
      long long0 = (-508L);
      String string0 = "K8 itY8";
      long long1 = 1364L;
      kafkaSpout_OffsetEntry0.initialFetchOffset = long1;
      int int0 = 2;
      TopicPartition topicPartition1 = new TopicPartition(string0, int0);
      assertEquals(2, topicPartition1.partition());
      assertEquals("K8 itY8", topicPartition1.topic());
      assertNotNull(topicPartition1);
      
      boolean boolean0 = topicPartition1.equals(kafkaSpout_OffsetEntry1);
      assertEquals(2, topicPartition1.partition());
      assertEquals("K8 itY8", topicPartition1.topic());
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(boolean0);
      
      kafkaSpout_OffsetEntry1.tp = topicPartition1;
      assertEquals(2, topicPartition1.partition());
      assertEquals("K8 itY8", topicPartition1.topic());
      assertEquals("K8 itY8", kafkaSpout_OffsetEntry1.tp.topic());
      assertEquals(2, kafkaSpout_OffsetEntry1.tp.partition());
      
      KafkaSpoutMessageId kafkaSpoutMessageId0 = new KafkaSpoutMessageId(topicPartition0, long0);
      assertFalse(long0 == long1);
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertEquals((-508L), kafkaSpoutMessageId0.offset());
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertNotNull(kafkaSpoutMessageId0);
      
      boolean boolean1 = kafkaSpout0.poll();
      assertTrue(boolean1 == boolean0);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(boolean1);
      
      kafkaSpout_OffsetEntry0.add(kafkaSpoutMessageId0);
      assertFalse(long0 == long1);
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertEquals((-508L), kafkaSpoutMessageId0.offset());
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      
      OffsetAndMetadata offsetAndMetadata0 = kafkaSpout_OffsetEntry0.findNextCommitOffset();
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertNull(offsetAndMetadata0);
      
      KafkaSpout<Object, Object> kafkaSpout1 = new KafkaSpout<Object, Object>(kafkaSpout0.kafkaSpoutConfig);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertNotNull(kafkaSpout1);
      
      KafkaSpout<KafkaSpoutStreamsNamedTopics, Object> kafkaSpout2 = new KafkaSpout<KafkaSpoutStreamsNamedTopics, Object>();
      assertEquals(0, kafkaSpout2.maxRetries);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      assertFalse(kafkaSpout2.initialized);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertNotNull(kafkaSpout2);
      
      TreeSet<KafkaSpoutMessageId> treeSet0 = new TreeSet<KafkaSpoutMessageId>();
      assertNotNull(treeSet0);
      
      kafkaSpout_OffsetEntry0.ackedMsgs = (NavigableSet<KafkaSpoutMessageId>) treeSet0;
      assertEquals(0, kafkaSpout_OffsetEntry0.ackedMsgs.size());
      assertTrue(kafkaSpout_OffsetEntry0.ackedMsgs.isEmpty());
      
      boolean boolean2 = topicPartition1.equals(kafkaSpout2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(2, topicPartition1.partition());
      assertEquals("K8 itY8", topicPartition1.topic());
      assertEquals(0, kafkaSpout2.maxRetries);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      assertFalse(kafkaSpout2.initialized);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertFalse(boolean2);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry2 = kafkaSpout0.new OffsetEntry(kafkaSpout_OffsetEntry1.tp, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertNotNull(kafkaSpout_OffsetEntry2);
      
      String string1 = kafkaSpout_OffsetEntry2.toString();
      assertFalse(string1.equals((Object)string0));
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertNotSame(string1, string0);
      assertEquals("OffsetEntry{topic-partition=K8 itY8-2, fetchOffset=0, committedOffset=-1, ackedMsgs=[]}", string1);
      assertNotNull(string1);
      
      KafkaSpoutConfig<Object, SpecificAggregateStats._Fields> kafkaSpoutConfig1 = (KafkaSpoutConfig<Object, SpecificAggregateStats._Fields>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn(kafkaSpout1.kafkaSpoutStreams).when(kafkaSpoutConfig1).getKafkaSpoutStreams();
      KafkaSpout<Object, SpecificAggregateStats._Fields> kafkaSpout3 = new KafkaSpout<Object, SpecificAggregateStats._Fields>(kafkaSpoutConfig1);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout3.maxRetries);
      assertFalse(kafkaSpout3.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout3.numUncommittedOffsets);
      assertFalse(kafkaSpout3.initialized);
      assertNotNull(kafkaSpout3);
      
      OutputFieldsGetter outputFieldsGetter0 = new OutputFieldsGetter();
      assertNotNull(outputFieldsGetter0);
      
      // Undeclared exception!
      try { 
        kafkaSpout3.declareOutputFields(outputFieldsGetter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test95()  throws Throwable  {
      KafkaSpout<AbstractMap.SimpleImmutableEntry<KafkaSpoutMessageId, KafkaSpoutStreamsWildcardTopics>, SpecificAggregateStats._Fields> kafkaSpout0 = new KafkaSpout<AbstractMap.SimpleImmutableEntry<KafkaSpoutMessageId, KafkaSpoutStreamsWildcardTopics>, SpecificAggregateStats._Fields>();
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertNotNull(kafkaSpout0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      EvoSuiteFile evoSuiteFile1 = null;
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)74;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-1);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-32);
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-51);
      byteArray0[3] = byte3;
      KafkaSpout.OffsetComparator kafkaSpout_OffsetComparator0 = new KafkaSpout.OffsetComparator();
      assertNotNull(kafkaSpout_OffsetComparator0);
      
      String string0 = "";
      long long0 = 1L;
      TimestampType timestampType0 = TimestampType.LOG_APPEND_TIME;
      int int0 = 5;
      TopicPartition topicPartition0 = new TopicPartition(string0, byte2);
      assertFalse(byte2 == byte1);
      assertFalse(byte2 == byte3);
      assertFalse(byte2 == byte0);
      assertEquals((-32), topicPartition0.partition());
      assertEquals("", topicPartition0.topic());
      assertNotNull(topicPartition0);
      
      long long1 = (-595L);
      KafkaSpoutMessageId kafkaSpoutMessageId0 = new KafkaSpoutMessageId(topicPartition0, long1);
      assertFalse(long1 == long0);
      assertFalse(byte2 == byte1);
      assertFalse(byte2 == byte3);
      assertFalse(byte2 == byte0);
      assertEquals((-32), topicPartition0.partition());
      assertEquals("", topicPartition0.topic());
      assertEquals("", kafkaSpoutMessageId0.topic());
      assertEquals((-32), kafkaSpoutMessageId0.partition());
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertEquals((-595L), kafkaSpoutMessageId0.offset());
      assertNotNull(kafkaSpoutMessageId0);
      
      KafkaSpoutStreamsNamedTopics kafkaSpoutStreamsNamedTopics0 = mock(KafkaSpoutStreamsNamedTopics.class, new ViolatedAssumptionAnswer());
      ConsumerRecord<KafkaSpoutMessageId, KafkaSpoutStreamsNamedTopics> consumerRecord0 = new ConsumerRecord<KafkaSpoutMessageId, KafkaSpoutStreamsNamedTopics>(string0, byteArray0[1], long0, kafkaSpout0.maxRetries, timestampType0, long0, int0, byteArray0[3], kafkaSpoutMessageId0, kafkaSpoutStreamsNamedTopics0);
      assertEquals(5, byteArray0.length);
      assertFalse(long1 == long0);
      assertFalse(byte2 == byte1);
      assertFalse(byte2 == byte3);
      assertFalse(byte2 == byte0);
      assertFalse(long0 == long1);
      assertEquals((-32), topicPartition0.partition());
      assertEquals("", topicPartition0.topic());
      assertEquals("", kafkaSpoutMessageId0.topic());
      assertEquals((-32), kafkaSpoutMessageId0.partition());
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertEquals((-595L), kafkaSpoutMessageId0.offset());
      assertEquals(TimestampType.LOG_APPEND_TIME, consumerRecord0.timestampType());
      assertEquals(0L, consumerRecord0.timestamp());
      assertEquals(1L, consumerRecord0.offset());
      assertEquals((-51), consumerRecord0.serializedValueSize());
      assertEquals(5, consumerRecord0.serializedKeySize());
      assertEquals((-1), consumerRecord0.partition());
      assertEquals("", consumerRecord0.topic());
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals((-1L), ConsumerRecord.NO_TIMESTAMP);
      assertEquals((-1), ConsumerRecord.NULL_CHECKSUM);
      assertEquals((-1), ConsumerRecord.NULL_SIZE);
      assertArrayEquals(new byte[] {(byte)74, (byte) (-1), (byte) (-32), (byte) (-51), (byte)0}, byteArray0);
      assertNotNull(consumerRecord0);
      
      KafkaSpoutMessageId kafkaSpoutMessageId1 = new KafkaSpoutMessageId(consumerRecord0);
      assertEquals(5, byteArray0.length);
      assertFalse(long1 == long0);
      assertFalse(kafkaSpoutMessageId1.equals((Object)kafkaSpoutMessageId0));
      assertFalse(byte2 == byte1);
      assertFalse(byte2 == byte3);
      assertFalse(byte2 == byte0);
      assertFalse(long0 == long1);
      assertEquals((-32), topicPartition0.partition());
      assertEquals("", topicPartition0.topic());
      assertEquals("", kafkaSpoutMessageId0.topic());
      assertEquals((-32), kafkaSpoutMessageId0.partition());
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertEquals((-595L), kafkaSpoutMessageId0.offset());
      assertEquals(TimestampType.LOG_APPEND_TIME, consumerRecord0.timestampType());
      assertEquals(0L, consumerRecord0.timestamp());
      assertEquals(1L, consumerRecord0.offset());
      assertEquals((-51), consumerRecord0.serializedValueSize());
      assertEquals(5, consumerRecord0.serializedKeySize());
      assertEquals((-1), consumerRecord0.partition());
      assertEquals("", consumerRecord0.topic());
      assertEquals("", kafkaSpoutMessageId1.topic());
      assertEquals((-1), kafkaSpoutMessageId1.partition());
      assertEquals(0, kafkaSpoutMessageId1.numFails());
      assertEquals(1L, kafkaSpoutMessageId1.offset());
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals((-1L), ConsumerRecord.NO_TIMESTAMP);
      assertEquals((-1), ConsumerRecord.NULL_CHECKSUM);
      assertEquals((-1), ConsumerRecord.NULL_SIZE);
      assertArrayEquals(new byte[] {(byte)74, (byte) (-1), (byte) (-32), (byte) (-51), (byte)0}, byteArray0);
      assertNotNull(kafkaSpoutMessageId1);
      
      int int1 = kafkaSpout_OffsetComparator0.compare(kafkaSpoutMessageId1, kafkaSpoutMessageId0);
      assertEquals(5, byteArray0.length);
      assertFalse(byte2 == byte1);
      assertFalse(byte2 == byte3);
      assertFalse(byte2 == byte0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertFalse(kafkaSpoutMessageId0.equals((Object)kafkaSpoutMessageId1));
      assertFalse(kafkaSpoutMessageId1.equals((Object)kafkaSpoutMessageId0));
      assertFalse(int1 == int0);
      assertEquals((-32), topicPartition0.partition());
      assertEquals("", topicPartition0.topic());
      assertEquals("", kafkaSpoutMessageId0.topic());
      assertEquals((-32), kafkaSpoutMessageId0.partition());
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertEquals((-595L), kafkaSpoutMessageId0.offset());
      assertEquals(TimestampType.LOG_APPEND_TIME, consumerRecord0.timestampType());
      assertEquals(0L, consumerRecord0.timestamp());
      assertEquals(1L, consumerRecord0.offset());
      assertEquals((-51), consumerRecord0.serializedValueSize());
      assertEquals(5, consumerRecord0.serializedKeySize());
      assertEquals((-1), consumerRecord0.partition());
      assertEquals("", consumerRecord0.topic());
      assertEquals("", kafkaSpoutMessageId1.topic());
      assertEquals((-1), kafkaSpoutMessageId1.partition());
      assertEquals(0, kafkaSpoutMessageId1.numFails());
      assertEquals(1L, kafkaSpoutMessageId1.offset());
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals((-1L), ConsumerRecord.NO_TIMESTAMP);
      assertEquals((-1), ConsumerRecord.NULL_CHECKSUM);
      assertEquals((-1), ConsumerRecord.NULL_SIZE);
      assertArrayEquals(new byte[] {(byte)74, (byte) (-1), (byte) (-32), (byte) (-51), (byte)0}, byteArray0);
      assertNotSame(kafkaSpoutMessageId0, kafkaSpoutMessageId1);
      assertNotSame(kafkaSpoutMessageId1, kafkaSpoutMessageId0);
      assertEquals(1, int1);
      
      byte byte4 = (byte) (-62);
      byteArray0[4] = byte4;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)74, (byte) (-1), (byte) (-32), (byte) (-51), (byte) (-62)}, byteArray0);
      assertFalse(boolean0);
      
      String string1 = "gkmN";
      TopicPartition topicPartition1 = new TopicPartition(string1, kafkaSpout0.maxRetries);
      assertFalse(string1.equals((Object)string0));
      assertFalse(topicPartition1.equals((Object)topicPartition0));
      assertEquals(0, topicPartition1.partition());
      assertEquals("gkmN", topicPartition1.topic());
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertNotNull(topicPartition1);
      
      // Undeclared exception!
      try { 
        kafkaSpout0.pollKafkaBroker();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test96()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, Integer> kafkaSpoutConfig0 = (KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, Integer>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutConfig.FirstPollOffsetStrategy) null).when(kafkaSpoutConfig0).getFirstPollOffsetStrategy();
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      doReturn(0).when(kafkaSpoutConfig0).getMaxTupleRetries();
      doReturn(0L).when(kafkaSpoutConfig0).getOffsetsCommitPeriodMs();
      doReturn((KafkaSpoutRetryService) null).when(kafkaSpoutConfig0).getRetryService();
      doReturn((KafkaSpoutTuplesBuilder) null).when(kafkaSpoutConfig0).getTuplesBuilder();
      doReturn(false).when(kafkaSpoutConfig0).isConsumerAutoCommitMode();
      KafkaSpout<KafkaSpoutStreamsNamedTopics, Integer> kafkaSpout0 = new KafkaSpout<KafkaSpoutStreamsNamedTopics, Integer>(kafkaSpoutConfig0);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertNotNull(kafkaSpout0);
      
      KafkaSpoutStreams kafkaSpoutStreams0 = kafkaSpout0.kafkaSpoutStreams;
      assertNull(kafkaSpoutStreams0);
      
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig1 = (KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsWildcardTopics>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn(kafkaSpoutStreams0, (KafkaSpoutStreams) null).when(kafkaSpoutConfig1).getKafkaSpoutStreams();
      doReturn((Pattern) null).when(kafkaSpoutConfig1).getTopicWildcardPattern();
      KafkaSpout<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsWildcardTopics> kafkaSpout1 = new KafkaSpout<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsWildcardTopics>(kafkaSpoutConfig1);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertNotNull(kafkaSpout1);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout1.new OffsetEntry();
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertNotNull(kafkaSpout_OffsetEntry0);
      
      TopicPartition topicPartition0 = kafkaSpout_OffsetEntry0.tp;
      assertNull(topicPartition0);
      
      long long0 = 2662L;
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry1 = kafkaSpout1.new OffsetEntry();
      assertFalse(kafkaSpout_OffsetEntry1.equals((Object)kafkaSpout_OffsetEntry0));
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertNotNull(kafkaSpout_OffsetEntry1);
      
      TopicPartition topicPartition1 = kafkaSpout_OffsetEntry1.tp;
      assertNull(topicPartition1);
      
      long long1 = 10000000L;
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry2 = kafkaSpout1.new OffsetEntry(topicPartition1, long1);
      assertFalse(kafkaSpout_OffsetEntry1.equals((Object)kafkaSpout_OffsetEntry0));
      assertFalse(long1 == long0);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertNotNull(kafkaSpout_OffsetEntry2);
      
      OffsetAndMetadata offsetAndMetadata0 = kafkaSpout_OffsetEntry2.findNextCommitOffset();
      assertFalse(kafkaSpout_OffsetEntry1.equals((Object)kafkaSpout_OffsetEntry0));
      assertFalse(long1 == long0);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertNotSame(kafkaSpout_OffsetEntry1, kafkaSpout_OffsetEntry0);
      assertNull(offsetAndMetadata0);
      
      kafkaSpout_OffsetEntry0.commit(offsetAndMetadata0);
      assertFalse(kafkaSpout_OffsetEntry0.equals((Object)kafkaSpout_OffsetEntry1));
      assertFalse(kafkaSpout_OffsetEntry1.equals((Object)kafkaSpout_OffsetEntry0));
      assertFalse(long1 == long0);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertNotSame(kafkaSpout_OffsetEntry0, kafkaSpout_OffsetEntry1);
      assertNotSame(kafkaSpout_OffsetEntry1, kafkaSpout_OffsetEntry0);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry3 = kafkaSpout1.new OffsetEntry(topicPartition0, long0);
      assertFalse(kafkaSpout_OffsetEntry0.equals((Object)kafkaSpout_OffsetEntry1));
      assertFalse(long0 == long1);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertNotNull(kafkaSpout_OffsetEntry3);
      
      StormTopology stormTopology0 = new StormTopology();
      assertFalse(stormTopology0.is_set_spouts());
      assertEquals(0, stormTopology0.get_bolts_size());
      assertFalse(stormTopology0.is_set_worker_hooks());
      assertFalse(stormTopology0.is_set_state_spouts());
      assertEquals(0, stormTopology0.get_worker_hooks_size());
      assertFalse(stormTopology0.is_set_bolts());
      assertFalse(stormTopology0.is_set_dependency_jars());
      assertEquals(0, stormTopology0.get_state_spouts_size());
      assertEquals(0, stormTopology0.get_dependency_artifacts_size());
      assertFalse(stormTopology0.is_set_dependency_artifacts());
      assertEquals(0, stormTopology0.get_spouts_size());
      assertEquals(0, stormTopology0.get_dependency_jars_size());
      assertNotNull(stormTopology0);
      
      StormTopology stormTopology1 = new StormTopology(stormTopology0);
      assertTrue(stormTopology1.equals((Object)stormTopology0));
      assertEquals(0, stormTopology1.get_spouts_size());
      assertFalse(stormTopology1.is_set_dependency_jars());
      assertFalse(stormTopology1.is_set_bolts());
      assertFalse(stormTopology1.is_set_dependency_artifacts());
      assertEquals(0, stormTopology1.get_worker_hooks_size());
      assertEquals(0, stormTopology1.get_dependency_jars_size());
      assertEquals(0, stormTopology1.get_dependency_artifacts_size());
      assertFalse(stormTopology1.is_set_worker_hooks());
      assertFalse(stormTopology1.is_set_state_spouts());
      assertEquals(0, stormTopology1.get_state_spouts_size());
      assertFalse(stormTopology1.is_set_spouts());
      assertEquals(0, stormTopology1.get_bolts_size());
      assertFalse(stormTopology0.is_set_spouts());
      assertEquals(0, stormTopology0.get_bolts_size());
      assertFalse(stormTopology0.is_set_worker_hooks());
      assertFalse(stormTopology0.is_set_state_spouts());
      assertEquals(0, stormTopology0.get_worker_hooks_size());
      assertFalse(stormTopology0.is_set_bolts());
      assertFalse(stormTopology0.is_set_dependency_jars());
      assertEquals(0, stormTopology0.get_state_spouts_size());
      assertEquals(0, stormTopology0.get_dependency_artifacts_size());
      assertFalse(stormTopology0.is_set_dependency_artifacts());
      assertEquals(0, stormTopology0.get_spouts_size());
      assertEquals(0, stormTopology0.get_dependency_jars_size());
      assertNotNull(stormTopology1);
      
      ISeq iSeq0 = null;
      PersistentHashMap persistentHashMap0 = PersistentHashMap.create(iSeq0);
      assertEquals(0, persistentHashMap0.count());
      assertNotNull(persistentHashMap0);
      
      String string0 = "";
      Integer integer0 = new Integer(kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      List<Integer> list0 = null;
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(kafkaSpout0.initialized);
      assertFalse(atomicBoolean0.get());
      assertEquals("false", atomicBoolean0.toString());
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertNotNull(atomicBoolean0);
      
      TopologyContext topologyContext0 = new TopologyContext(stormTopology1, kafkaSpout0.acked, persistentHashMap0, persistentHashMap0, persistentHashMap0, string0, string0, string0, integer0, (Integer) kafkaSpoutConfig1.DEFAULT_MAX_RETRIES, list0, persistentHashMap0, persistentHashMap0, persistentHashMap0, persistentHashMap0, atomicBoolean0);
      assertTrue(stormTopology1.equals((Object)stormTopology0));
      assertTrue(stormTopology0.equals((Object)stormTopology1));
      assertEquals(0, stormTopology1.get_spouts_size());
      assertFalse(stormTopology1.is_set_dependency_jars());
      assertFalse(stormTopology1.is_set_bolts());
      assertFalse(stormTopology1.is_set_dependency_artifacts());
      assertEquals(0, stormTopology1.get_worker_hooks_size());
      assertEquals(0, stormTopology1.get_dependency_jars_size());
      assertEquals(0, stormTopology1.get_dependency_artifacts_size());
      assertFalse(stormTopology1.is_set_worker_hooks());
      assertFalse(stormTopology1.is_set_state_spouts());
      assertEquals(0, stormTopology1.get_state_spouts_size());
      assertFalse(stormTopology1.is_set_spouts());
      assertEquals(0, stormTopology1.get_bolts_size());
      assertEquals(0, persistentHashMap0.count());
      assertFalse(atomicBoolean0.get());
      assertEquals("false", atomicBoolean0.toString());
      assertEquals("", topologyContext0.getCodeDir());
      assertNull(topologyContext0.getThisComponentId());
      assertEquals(Integer.MAX_VALUE, (int)topologyContext0.getThisWorkerPort());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/storm/bd1f5c54752f67b484a83c26667331234234d3a3/evosuite_6", topologyContext0.getPIDDir());
      assertEquals(0, topologyContext0.getThisTaskId());
      assertEquals("", topologyContext0.getStormId());
      assertFalse(stormTopology0.is_set_spouts());
      assertEquals(0, stormTopology0.get_bolts_size());
      assertFalse(stormTopology0.is_set_worker_hooks());
      assertFalse(stormTopology0.is_set_state_spouts());
      assertEquals(0, stormTopology0.get_worker_hooks_size());
      assertFalse(stormTopology0.is_set_bolts());
      assertFalse(stormTopology0.is_set_dependency_jars());
      assertEquals(0, stormTopology0.get_state_spouts_size());
      assertEquals(0, stormTopology0.get_dependency_artifacts_size());
      assertFalse(stormTopology0.is_set_dependency_artifacts());
      assertEquals(0, stormTopology0.get_spouts_size());
      assertEquals(0, stormTopology0.get_dependency_jars_size());
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertNotNull(topologyContext0);
      
      kafkaSpout0.open(kafkaSpout1.acked, topologyContext0, kafkaSpout1.collector);
      assertTrue(stormTopology1.equals((Object)stormTopology0));
      assertTrue(stormTopology0.equals((Object)stormTopology1));
      assertEquals(0, stormTopology1.get_spouts_size());
      assertFalse(stormTopology1.is_set_dependency_jars());
      assertFalse(stormTopology1.is_set_bolts());
      assertFalse(stormTopology1.is_set_dependency_artifacts());
      assertEquals(0, stormTopology1.get_worker_hooks_size());
      assertEquals(0, stormTopology1.get_dependency_jars_size());
      assertEquals(0, stormTopology1.get_dependency_artifacts_size());
      assertFalse(stormTopology1.is_set_worker_hooks());
      assertFalse(stormTopology1.is_set_state_spouts());
      assertEquals(0, stormTopology1.get_state_spouts_size());
      assertFalse(stormTopology1.is_set_spouts());
      assertEquals(0, stormTopology1.get_bolts_size());
      assertEquals(0, persistentHashMap0.count());
      assertFalse(atomicBoolean0.get());
      assertEquals("false", atomicBoolean0.toString());
      assertEquals("", topologyContext0.getCodeDir());
      assertNull(topologyContext0.getThisComponentId());
      assertEquals(Integer.MAX_VALUE, (int)topologyContext0.getThisWorkerPort());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/storm/bd1f5c54752f67b484a83c26667331234234d3a3/evosuite_6", topologyContext0.getPIDDir());
      assertEquals(0, topologyContext0.getThisTaskId());
      assertEquals("", topologyContext0.getStormId());
      assertFalse(stormTopology0.is_set_spouts());
      assertEquals(0, stormTopology0.get_bolts_size());
      assertFalse(stormTopology0.is_set_worker_hooks());
      assertFalse(stormTopology0.is_set_state_spouts());
      assertEquals(0, stormTopology0.get_worker_hooks_size());
      assertFalse(stormTopology0.is_set_bolts());
      assertFalse(stormTopology0.is_set_dependency_jars());
      assertEquals(0, stormTopology0.get_state_spouts_size());
      assertEquals(0, stormTopology0.get_dependency_artifacts_size());
      assertFalse(stormTopology0.is_set_dependency_artifacts());
      assertEquals(0, stormTopology0.get_spouts_size());
      assertEquals(0, stormTopology0.get_dependency_jars_size());
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertNotSame(stormTopology1, stormTopology0);
      assertNotSame(stormTopology0, stormTopology1);
      
      boolean boolean0 = kafkaSpout_OffsetEntry3.isEmpty();
      assertFalse(kafkaSpout_OffsetEntry0.equals((Object)kafkaSpout_OffsetEntry1));
      assertFalse(long0 == long1);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertNotSame(kafkaSpout_OffsetEntry0, kafkaSpout_OffsetEntry1);
      assertTrue(boolean0);
      
      OffsetAndMetadata offsetAndMetadata1 = kafkaSpout_OffsetEntry3.findNextCommitOffset();
      assertFalse(kafkaSpout_OffsetEntry0.equals((Object)kafkaSpout_OffsetEntry1));
      assertFalse(long0 == long1);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertNotSame(kafkaSpout_OffsetEntry0, kafkaSpout_OffsetEntry1);
      assertNull(offsetAndMetadata1);
      
      KafkaSpout<String, Object> kafkaSpout2 = new KafkaSpout<String, Object>(kafkaSpout1.kafkaSpoutConfig);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertFalse(kafkaSpout2.initialized);
      assertEquals(0, kafkaSpout2.maxRetries);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      assertNotNull(kafkaSpout2);
      
      // Undeclared exception!
      try { 
        kafkaSpout2.getWildCardTopics();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test97()  throws Throwable  {
      KafkaSpoutConfig<OffsetAndMetadata, Symbol> kafkaSpoutConfig0 = (KafkaSpoutConfig<OffsetAndMetadata, Symbol>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(kafkaSpoutConfig0).getConsumerGroupId();
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<OffsetAndMetadata, Symbol> kafkaSpout0 = new KafkaSpout<OffsetAndMetadata, Symbol>(kafkaSpoutConfig0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertNotNull(kafkaSpout0);
      
      KafkaSpout.KafkaSpoutConsumerRebalanceListener kafkaSpout_KafkaSpoutConsumerRebalanceListener0 = kafkaSpout0.new KafkaSpoutConsumerRebalanceListener();
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertNotNull(kafkaSpout_KafkaSpoutConsumerRebalanceListener0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) kafkaSpout0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) kafkaSpout_KafkaSpoutConsumerRebalanceListener0;
      objectArray0[3] = (Object) kafkaSpoutConfig0;
      objectArray0[4] = (Object) kafkaSpout_KafkaSpoutConsumerRebalanceListener0;
      objectArray0[5] = (Object) kafkaSpoutConfig0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[6] = object1;
      objectArray0[7] = (Object) kafkaSpoutConfig0;
      PersistentHashSet persistentHashSet0 = PersistentHashSet.create(objectArray0);
      assertEquals(8, objectArray0.length);
      assertNotNull(persistentHashSet0);
      
      // Undeclared exception!
      try { 
        kafkaSpout_KafkaSpoutConsumerRebalanceListener0.onPartitionsAssigned(persistentHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout$KafkaSpoutConsumerRebalanceListener", e);
      }
  }

  @Test(timeout = 11000)
  public void test98()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Fields fields0 = new Fields(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, fields0.size());
      assertNotNull(fields0);
      
      String string0 = "<jbrnD>=^";
      Pattern pattern0 = Pattern.compile(string0);
      assertEquals("<jbrnD>=^", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("<jbrnD>=^", pattern0.pattern());
      assertNotNull(pattern0);
      
      KafkaSpoutStream kafkaSpoutStream0 = new KafkaSpoutStream(fields0, string0, pattern0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, fields0.size());
      assertEquals("<jbrnD>=^", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("<jbrnD>=^", pattern0.pattern());
      assertNull(kafkaSpoutStream0.getTopic());
      assertNotNull(kafkaSpoutStream0);
      
      KafkaSpoutStreamsWildcardTopics kafkaSpoutStreamsWildcardTopics0 = new KafkaSpoutStreamsWildcardTopics(kafkaSpoutStream0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, fields0.size());
      assertEquals("<jbrnD>=^", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("<jbrnD>=^", pattern0.pattern());
      assertNull(kafkaSpoutStream0.getTopic());
      assertNotNull(kafkaSpoutStreamsWildcardTopics0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(string0));
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add(string0);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[<jbrnD>=^]", stack0.toString());
      assertTrue(stack0.contains(string0));
      assertTrue(boolean0);
      
      KafkaSpoutConfig<TopicPartition, TopicPartition> kafkaSpoutConfig0 = (KafkaSpoutConfig<TopicPartition, TopicPartition>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn(kafkaSpoutStreamsWildcardTopics0).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      doReturn(stack0).when(kafkaSpoutConfig0).getSubscribedTopics();
      KafkaSpout<TopicPartition, TopicPartition> kafkaSpout0 = new KafkaSpout<TopicPartition, TopicPartition>(kafkaSpoutConfig0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, fields0.size());
      assertEquals("<jbrnD>=^", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("<jbrnD>=^", pattern0.pattern());
      assertNull(kafkaSpoutStream0.getTopic());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[<jbrnD>=^]", stack0.toString());
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertTrue(stack0.contains(string0));
      assertNotNull(kafkaSpout0);
      
      String string1 = "Offsets successfully committed to Kafka [{}]";
      int int0 = 2;
      TopicPartition topicPartition0 = new TopicPartition(string1, int0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, topicPartition0.partition());
      assertEquals("Offsets successfully committed to Kafka [{}]", topicPartition0.topic());
      assertNotNull(topicPartition0);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout0.new OffsetEntry(topicPartition0, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, stringArray0.length);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, fields0.size());
      assertEquals("<jbrnD>=^", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("<jbrnD>=^", pattern0.pattern());
      assertNull(kafkaSpoutStream0.getTopic());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[<jbrnD>=^]", stack0.toString());
      assertEquals(2, topicPartition0.partition());
      assertEquals("Offsets successfully committed to Kafka [{}]", topicPartition0.topic());
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(stack0.contains(string1));
      assertTrue(stack0.contains(string0));
      assertNotNull(kafkaSpout_OffsetEntry0);
      
      TopicPartition topicPartition1 = new TopicPartition(string0, kafkaSpoutConfig0.DEFAULT_MAX_RETRIES);
      assertEquals(0, stringArray0.length);
      assertFalse(string0.equals((Object)string1));
      assertFalse(topicPartition1.equals((Object)topicPartition0));
      assertEquals(0, fields0.size());
      assertEquals("<jbrnD>=^", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("<jbrnD>=^", pattern0.pattern());
      assertNull(kafkaSpoutStream0.getTopic());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[<jbrnD>=^]", stack0.toString());
      assertEquals(Integer.MAX_VALUE, topicPartition1.partition());
      assertEquals("<jbrnD>=^", topicPartition1.topic());
      assertFalse(stack0.contains(string1));
      assertTrue(stack0.contains(string0));
      assertNotNull(topicPartition1);
      
      long long0 = 0L;
      OffsetAndMetadata offsetAndMetadata0 = new OffsetAndMetadata(long0);
      assertEquals("", offsetAndMetadata0.metadata());
      assertEquals(0L, offsetAndMetadata0.offset());
      assertNotNull(offsetAndMetadata0);
      
      String string2 = topicPartition0.toString();
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(topicPartition0.equals((Object)topicPartition1));
      assertEquals(2, topicPartition0.partition());
      assertEquals("Offsets successfully committed to Kafka [{}]", topicPartition0.topic());
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(topicPartition0, topicPartition1);
      assertEquals("Offsets successfully committed to Kafka [{}]-2", string2);
      assertNotNull(string2);
      
      Optional<Integer> optional0 = offsetAndMetadata0.leaderEpoch();
      assertEquals("", offsetAndMetadata0.metadata());
      assertEquals(0L, offsetAndMetadata0.offset());
      assertNotNull(optional0);
      
      kafkaSpout_OffsetEntry0.commit(offsetAndMetadata0);
      assertEquals(0, stringArray0.length);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(topicPartition0.equals((Object)topicPartition1));
      assertEquals("", offsetAndMetadata0.metadata());
      assertEquals(0L, offsetAndMetadata0.offset());
      assertEquals(0, fields0.size());
      assertEquals("<jbrnD>=^", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("<jbrnD>=^", pattern0.pattern());
      assertNull(kafkaSpoutStream0.getTopic());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[<jbrnD>=^]", stack0.toString());
      assertEquals(2, topicPartition0.partition());
      assertEquals("Offsets successfully committed to Kafka [{}]", topicPartition0.topic());
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals((-1L), kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(stack0.contains(string1));
      assertTrue(stack0.contains(string0));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(topicPartition0, topicPartition1);
      
      KafkaSpoutMessageId kafkaSpoutMessageId0 = new KafkaSpoutMessageId(kafkaSpout_OffsetEntry0.tp, kafkaSpoutConfig0.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0, stringArray0.length);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(topicPartition0.equals((Object)topicPartition1));
      assertEquals(0, fields0.size());
      assertEquals("<jbrnD>=^", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("<jbrnD>=^", pattern0.pattern());
      assertEquals(30000L, kafkaSpoutMessageId0.offset());
      assertEquals(2, kafkaSpoutMessageId0.partition());
      assertEquals("Offsets successfully committed to Kafka [{}]", kafkaSpoutMessageId0.topic());
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertNull(kafkaSpoutStream0.getTopic());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[<jbrnD>=^]", stack0.toString());
      assertEquals(2, topicPartition0.partition());
      assertEquals("Offsets successfully committed to Kafka [{}]", topicPartition0.topic());
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals((-1L), kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(stack0.contains(string1));
      assertTrue(stack0.contains(string0));
      assertNotNull(kafkaSpoutMessageId0);
      
      boolean boolean1 = kafkaSpout_OffsetEntry0.contains(kafkaSpoutMessageId0);
      assertEquals(0, stringArray0.length);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(topicPartition0.equals((Object)topicPartition1));
      assertFalse(boolean1 == boolean0);
      assertEquals(0, fields0.size());
      assertEquals("<jbrnD>=^", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("<jbrnD>=^", pattern0.pattern());
      assertEquals(30000L, kafkaSpoutMessageId0.offset());
      assertEquals(2, kafkaSpoutMessageId0.partition());
      assertEquals("Offsets successfully committed to Kafka [{}]", kafkaSpoutMessageId0.topic());
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertNull(kafkaSpoutStream0.getTopic());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[<jbrnD>=^]", stack0.toString());
      assertEquals(2, topicPartition0.partition());
      assertEquals("Offsets successfully committed to Kafka [{}]", topicPartition0.topic());
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals((-1L), kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(stack0.contains(string1));
      assertTrue(stack0.contains(string0));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(topicPartition0, topicPartition1);
      assertFalse(boolean1);
      
      Object object0 = null;
      boolean boolean2 = topicPartition0.equals(object0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(topicPartition0.equals((Object)topicPartition1));
      assertEquals(2, topicPartition0.partition());
      assertEquals("Offsets successfully committed to Kafka [{}]", topicPartition0.topic());
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(topicPartition0, topicPartition1);
      assertFalse(boolean2);
      
      kafkaSpout_OffsetEntry0.committedOffset = (long) kafkaSpoutConfig0.DEFAULT_MAX_RETRIES;
      assertEquals(0, fields0.size());
      assertEquals("<jbrnD>=^", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("<jbrnD>=^", pattern0.pattern());
      assertNull(kafkaSpoutStream0.getTopic());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[<jbrnD>=^]", stack0.toString());
      assertEquals(2, topicPartition0.partition());
      assertEquals("Offsets successfully committed to Kafka [{}]", topicPartition0.topic());
      
      String string3 = topicPartition1.toString();
      assertEquals(0, stringArray0.length);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(topicPartition1.equals((Object)topicPartition0));
      assertEquals(0, fields0.size());
      assertEquals("<jbrnD>=^", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("<jbrnD>=^", pattern0.pattern());
      assertNull(kafkaSpoutStream0.getTopic());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[<jbrnD>=^]", stack0.toString());
      assertEquals(Integer.MAX_VALUE, topicPartition1.partition());
      assertEquals("<jbrnD>=^", topicPartition1.topic());
      assertFalse(stack0.contains(string1));
      assertTrue(stack0.contains(string0));
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(topicPartition1, topicPartition0);
      assertEquals("<jbrnD>=^-2147483647", string3);
      assertNotNull(string3);
      
      Collection<TopicPartition> collection0 = kafkaSpout0.toArrayList(topicPartition1);
      assertEquals(0, stringArray0.length);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(topicPartition1.equals((Object)topicPartition0));
      assertEquals(0, fields0.size());
      assertEquals("<jbrnD>=^", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("<jbrnD>=^", pattern0.pattern());
      assertNull(kafkaSpoutStream0.getTopic());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[<jbrnD>=^]", stack0.toString());
      assertEquals(Integer.MAX_VALUE, topicPartition1.partition());
      assertEquals("<jbrnD>=^", topicPartition1.topic());
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals((-1L), kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(stack0.contains(string1));
      assertTrue(stack0.contains(string0));
      assertTrue(collection0.contains(topicPartition1));
      assertFalse(collection0.contains(topicPartition0));
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(topicPartition1, topicPartition0);
      assertNotNull(collection0);
      
      String string4 = kafkaSpout0.getNamedTopics();
      assertEquals(0, stringArray0.length);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals(0, fields0.size());
      assertEquals("<jbrnD>=^", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("<jbrnD>=^", pattern0.pattern());
      assertNull(kafkaSpoutStream0.getTopic());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[<jbrnD>=^]", stack0.toString());
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals((-1L), kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(stack0.contains(string1));
      assertTrue(stack0.contains(string0));
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertEquals("<jbrnD>=^,", string4);
      assertNotNull(string4);
      
      KafkaSpout.KafkaSpoutConsumerRebalanceListener kafkaSpout_KafkaSpoutConsumerRebalanceListener0 = kafkaSpout0.new KafkaSpoutConsumerRebalanceListener();
      assertEquals(0, stringArray0.length);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertEquals(0, fields0.size());
      assertEquals("<jbrnD>=^", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("<jbrnD>=^", pattern0.pattern());
      assertNull(kafkaSpoutStream0.getTopic());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[<jbrnD>=^]", stack0.toString());
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals((-1L), kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(stack0.contains(string1));
      assertTrue(stack0.contains(string0));
      assertNotNull(kafkaSpout_KafkaSpoutConsumerRebalanceListener0);
      
      KafkaSpout<OffsetAndMetadata, AbstractMap.SimpleEntry<Header, Object>> kafkaSpout1 = new KafkaSpout<OffsetAndMetadata, AbstractMap.SimpleEntry<Header, Object>>();
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertNotNull(kafkaSpout1);
      
      KafkaSpout.Timer kafkaSpout_Timer0 = kafkaSpout0.new Timer();
      assertEquals(0, stringArray0.length);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertEquals(0, fields0.size());
      assertEquals("<jbrnD>=^", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("<jbrnD>=^", pattern0.pattern());
      assertNull(kafkaSpoutStream0.getTopic());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[<jbrnD>=^]", stack0.toString());
      assertNull(kafkaSpout_Timer0.getTimeUnit());
      assertEquals(0L, kafkaSpout_Timer0.delay());
      assertEquals(0L, kafkaSpout_Timer0.period());
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals((-1L), kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout_Timer0.start);
      assertEquals(0L, kafkaSpout_Timer0.delay);
      assertEquals(0L, kafkaSpout_Timer0.period);
      assertEquals(0L, kafkaSpout_Timer0.periodNanos);
      assertFalse(stack0.contains(string1));
      assertTrue(stack0.contains(string0));
      assertNotNull(kafkaSpout_Timer0);
      
      boolean boolean3 = kafkaSpout_Timer0.isExpiredResetOnTrue();
      assertEquals(0, stringArray0.length);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertEquals(0, fields0.size());
      assertEquals("<jbrnD>=^", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("<jbrnD>=^", pattern0.pattern());
      assertNull(kafkaSpoutStream0.getTopic());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[<jbrnD>=^]", stack0.toString());
      assertNull(kafkaSpout_Timer0.getTimeUnit());
      assertEquals(0L, kafkaSpout_Timer0.delay());
      assertEquals(0L, kafkaSpout_Timer0.period());
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals((-1L), kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout_Timer0.delay);
      assertEquals(0L, kafkaSpout_Timer0.period);
      assertEquals(0L, kafkaSpout_Timer0.periodNanos);
      assertEquals(1392409281320000L, kafkaSpout_Timer0.start);
      assertFalse(stack0.contains(string1));
      assertTrue(stack0.contains(string0));
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertTrue(boolean3);
      
      // Undeclared exception!
      try { 
        kafkaSpout1.poll();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test99()  throws Throwable  {
      KafkaSpoutConfig.FirstPollOffsetStrategy kafkaSpoutConfig_FirstPollOffsetStrategy0 = KafkaSpoutConfig.FirstPollOffsetStrategy.UNCOMMITTED_LATEST;
      KafkaSpoutConfig<Header, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig0 = (KafkaSpoutConfig<Header, KafkaSpoutStreamsNamedTopics>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<Header, KafkaSpoutStreamsNamedTopics> kafkaSpout0 = new KafkaSpout<Header, KafkaSpoutStreamsNamedTopics>(kafkaSpoutConfig0);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertNotNull(kafkaSpout0);
      
      KafkaSpoutStreams kafkaSpoutStreams0 = kafkaSpout0.kafkaSpoutStreams;
      assertNull(kafkaSpoutStreams0);
      
      int int0 = (-209);
      long long0 = (-1889L);
      boolean boolean0 = true;
      KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, Integer> kafkaSpoutConfig1 = (KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, Integer>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn(kafkaSpoutConfig_FirstPollOffsetStrategy0).when(kafkaSpoutConfig1).getFirstPollOffsetStrategy();
      doReturn(kafkaSpoutStreams0).when(kafkaSpoutConfig1).getKafkaSpoutStreams();
      doReturn(int0).when(kafkaSpoutConfig1).getMaxTupleRetries();
      doReturn(kafkaSpout0.retryService).when(kafkaSpoutConfig1).getRetryService();
      doReturn(kafkaSpout0.tuplesBuilder).when(kafkaSpoutConfig1).getTuplesBuilder();
      doReturn(boolean0).when(kafkaSpoutConfig1).isConsumerAutoCommitMode();
      KafkaSpout<KafkaSpoutStreamsNamedTopics, Integer> kafkaSpout1 = new KafkaSpout<KafkaSpoutStreamsNamedTopics, Integer>(kafkaSpoutConfig1);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertNotNull(kafkaSpout1);
      
      KafkaSpoutStreams kafkaSpoutStreams1 = kafkaSpout1.kafkaSpoutStreams;
      assertNull(kafkaSpoutStreams1);
      
      String string0 = "Offsets successfully committed to Kafka [{}]";
      Pattern pattern0 = Pattern.compile(string0, kafkaSpoutConfig0.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals("Offsets successfully committed to Kafka [{}]", pattern0.toString());
      assertEquals("Offsets successfully committed to Kafka [{}]", pattern0.pattern());
      assertEquals(10000000, pattern0.flags());
      assertNotNull(pattern0);
      
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig2 = (KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsWildcardTopics>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn(kafkaSpoutStreams1, kafkaSpoutStreams1).when(kafkaSpoutConfig2).getKafkaSpoutStreams();
      doReturn(pattern0).when(kafkaSpoutConfig2).getTopicWildcardPattern();
      KafkaSpout<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsWildcardTopics> kafkaSpout2 = new KafkaSpout<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsWildcardTopics>(kafkaSpoutConfig2);
      assertEquals("Offsets successfully committed to Kafka [{}]", pattern0.toString());
      assertEquals("Offsets successfully committed to Kafka [{}]", pattern0.pattern());
      assertEquals(10000000, pattern0.flags());
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      assertFalse(kafkaSpout2.initialized);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertEquals(0, kafkaSpout2.maxRetries);
      assertNotNull(kafkaSpout2);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout2.new OffsetEntry();
      assertEquals("Offsets successfully committed to Kafka [{}]", pattern0.toString());
      assertEquals("Offsets successfully committed to Kafka [{}]", pattern0.pattern());
      assertEquals(10000000, pattern0.flags());
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      assertFalse(kafkaSpout2.initialized);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertEquals(0, kafkaSpout2.maxRetries);
      assertNotNull(kafkaSpout_OffsetEntry0);
      
      TopicPartition topicPartition0 = kafkaSpout_OffsetEntry0.tp;
      assertNull(topicPartition0);
      
      long long1 = 2662L;
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry1 = kafkaSpout2.new OffsetEntry();
      assertFalse(kafkaSpout_OffsetEntry1.equals((Object)kafkaSpout_OffsetEntry0));
      assertFalse(long0 == long1);
      assertEquals("Offsets successfully committed to Kafka [{}]", pattern0.toString());
      assertEquals("Offsets successfully committed to Kafka [{}]", pattern0.pattern());
      assertEquals(10000000, pattern0.flags());
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      assertFalse(kafkaSpout2.initialized);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertEquals(0, kafkaSpout2.maxRetries);
      assertNotNull(kafkaSpout_OffsetEntry1);
      
      TopicPartition topicPartition1 = kafkaSpout_OffsetEntry1.tp;
      assertNull(topicPartition1);
      
      long long2 = 10000000L;
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry2 = kafkaSpout2.new OffsetEntry(topicPartition1, long2);
      assertFalse(kafkaSpout_OffsetEntry1.equals((Object)kafkaSpout_OffsetEntry0));
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertEquals("Offsets successfully committed to Kafka [{}]", pattern0.toString());
      assertEquals("Offsets successfully committed to Kafka [{}]", pattern0.pattern());
      assertEquals(10000000, pattern0.flags());
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      assertFalse(kafkaSpout2.initialized);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertEquals(0, kafkaSpout2.maxRetries);
      assertNotNull(kafkaSpout_OffsetEntry2);
      
      OffsetAndMetadata offsetAndMetadata0 = kafkaSpout_OffsetEntry2.findNextCommitOffset();
      assertFalse(kafkaSpout_OffsetEntry1.equals((Object)kafkaSpout_OffsetEntry0));
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertEquals("Offsets successfully committed to Kafka [{}]", pattern0.toString());
      assertEquals("Offsets successfully committed to Kafka [{}]", pattern0.pattern());
      assertEquals(10000000, pattern0.flags());
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      assertFalse(kafkaSpout2.initialized);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertEquals(0, kafkaSpout2.maxRetries);
      assertNotSame(kafkaSpout_OffsetEntry1, kafkaSpout_OffsetEntry0);
      assertNull(offsetAndMetadata0);
      
      kafkaSpout_OffsetEntry0.commit(offsetAndMetadata0);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(kafkaSpout_OffsetEntry0.equals((Object)kafkaSpout_OffsetEntry1));
      assertFalse(kafkaSpout_OffsetEntry1.equals((Object)kafkaSpout_OffsetEntry0));
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals("Offsets successfully committed to Kafka [{}]", pattern0.toString());
      assertEquals("Offsets successfully committed to Kafka [{}]", pattern0.pattern());
      assertEquals(10000000, pattern0.flags());
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      assertFalse(kafkaSpout2.initialized);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertEquals(0, kafkaSpout2.maxRetries);
      assertNotSame(kafkaSpout_OffsetEntry1, kafkaSpout_OffsetEntry0);
      assertNotSame(kafkaSpout_OffsetEntry0, kafkaSpout_OffsetEntry1);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry3 = kafkaSpout2.new OffsetEntry(topicPartition0, long1);
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(kafkaSpout_OffsetEntry0.equals((Object)kafkaSpout_OffsetEntry1));
      assertEquals("Offsets successfully committed to Kafka [{}]", pattern0.toString());
      assertEquals("Offsets successfully committed to Kafka [{}]", pattern0.pattern());
      assertEquals(10000000, pattern0.flags());
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      assertFalse(kafkaSpout2.initialized);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertEquals(0, kafkaSpout2.maxRetries);
      assertNotNull(kafkaSpout_OffsetEntry3);
      
      StormTopology stormTopology0 = new StormTopology();
      assertFalse(stormTopology0.is_set_spouts());
      assertEquals(0, stormTopology0.get_bolts_size());
      assertFalse(stormTopology0.is_set_bolts());
      assertFalse(stormTopology0.is_set_dependency_artifacts());
      assertEquals(0, stormTopology0.get_spouts_size());
      assertEquals(0, stormTopology0.get_dependency_jars_size());
      assertEquals(0, stormTopology0.get_state_spouts_size());
      assertEquals(0, stormTopology0.get_dependency_artifacts_size());
      assertFalse(stormTopology0.is_set_state_spouts());
      assertEquals(0, stormTopology0.get_worker_hooks_size());
      assertFalse(stormTopology0.is_set_dependency_jars());
      assertFalse(stormTopology0.is_set_worker_hooks());
      assertNotNull(stormTopology0);
      
      StormTopology stormTopology1 = new StormTopology(stormTopology0);
      assertTrue(stormTopology1.equals((Object)stormTopology0));
      assertFalse(stormTopology0.is_set_spouts());
      assertEquals(0, stormTopology0.get_bolts_size());
      assertFalse(stormTopology0.is_set_bolts());
      assertFalse(stormTopology0.is_set_dependency_artifacts());
      assertEquals(0, stormTopology0.get_spouts_size());
      assertEquals(0, stormTopology0.get_dependency_jars_size());
      assertEquals(0, stormTopology0.get_state_spouts_size());
      assertEquals(0, stormTopology0.get_dependency_artifacts_size());
      assertFalse(stormTopology0.is_set_state_spouts());
      assertEquals(0, stormTopology0.get_worker_hooks_size());
      assertFalse(stormTopology0.is_set_dependency_jars());
      assertFalse(stormTopology0.is_set_worker_hooks());
      assertFalse(stormTopology1.is_set_dependency_artifacts());
      assertFalse(stormTopology1.is_set_worker_hooks());
      assertFalse(stormTopology1.is_set_bolts());
      assertEquals(0, stormTopology1.get_bolts_size());
      assertEquals(0, stormTopology1.get_spouts_size());
      assertEquals(0, stormTopology1.get_dependency_jars_size());
      assertEquals(0, stormTopology1.get_state_spouts_size());
      assertFalse(stormTopology1.is_set_spouts());
      assertFalse(stormTopology1.is_set_state_spouts());
      assertEquals(0, stormTopology1.get_dependency_artifacts_size());
      assertEquals(0, stormTopology1.get_worker_hooks_size());
      assertFalse(stormTopology1.is_set_dependency_jars());
      assertNotNull(stormTopology1);
      
      ISeq iSeq0 = null;
      PersistentHashMap persistentHashMap0 = PersistentHashMap.create(iSeq0);
      assertEquals(0, persistentHashMap0.count());
      assertNotNull(persistentHashMap0);
      
      String string1 = "";
      Integer integer0 = new Integer(kafkaSpout1.maxRetries);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      List<Integer> list0 = null;
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(kafkaSpout1.initialized);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(atomicBoolean0.get());
      assertEquals("false", atomicBoolean0.toString());
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertNotNull(atomicBoolean0);
      
      TopologyContext topologyContext0 = new TopologyContext(stormTopology1, kafkaSpout1.acked, persistentHashMap0, persistentHashMap0, persistentHashMap0, string1, string1, string1, integer0, (Integer) kafkaSpoutConfig2.DEFAULT_MAX_RETRIES, list0, persistentHashMap0, persistentHashMap0, persistentHashMap0, persistentHashMap0, atomicBoolean0);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(string0.equals((Object)string1));
      assertTrue(stormTopology0.equals((Object)stormTopology1));
      assertTrue(stormTopology1.equals((Object)stormTopology0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(integer0.equals((Object)int0));
      assertEquals(0, topologyContext0.getThisTaskId());
      assertEquals("", topologyContext0.getStormId());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/storm/bd1f5c54752f67b484a83c26667331234234d3a3/evosuite_6", topologyContext0.getPIDDir());
      assertEquals("", topologyContext0.getCodeDir());
      assertNull(topologyContext0.getThisComponentId());
      assertEquals(Integer.MAX_VALUE, (int)topologyContext0.getThisWorkerPort());
      assertFalse(stormTopology0.is_set_spouts());
      assertEquals(0, stormTopology0.get_bolts_size());
      assertFalse(stormTopology0.is_set_bolts());
      assertFalse(stormTopology0.is_set_dependency_artifacts());
      assertEquals(0, stormTopology0.get_spouts_size());
      assertEquals(0, stormTopology0.get_dependency_jars_size());
      assertEquals(0, stormTopology0.get_state_spouts_size());
      assertEquals(0, stormTopology0.get_dependency_artifacts_size());
      assertFalse(stormTopology0.is_set_state_spouts());
      assertEquals(0, stormTopology0.get_worker_hooks_size());
      assertFalse(stormTopology0.is_set_dependency_jars());
      assertFalse(stormTopology0.is_set_worker_hooks());
      assertFalse(stormTopology1.is_set_dependency_artifacts());
      assertFalse(stormTopology1.is_set_worker_hooks());
      assertFalse(stormTopology1.is_set_bolts());
      assertEquals(0, stormTopology1.get_bolts_size());
      assertEquals(0, stormTopology1.get_spouts_size());
      assertEquals(0, stormTopology1.get_dependency_jars_size());
      assertEquals(0, stormTopology1.get_state_spouts_size());
      assertFalse(stormTopology1.is_set_spouts());
      assertFalse(stormTopology1.is_set_state_spouts());
      assertEquals(0, stormTopology1.get_dependency_artifacts_size());
      assertEquals(0, stormTopology1.get_worker_hooks_size());
      assertFalse(stormTopology1.is_set_dependency_jars());
      assertEquals(0, persistentHashMap0.count());
      assertEquals("Offsets successfully committed to Kafka [{}]", pattern0.toString());
      assertEquals("Offsets successfully committed to Kafka [{}]", pattern0.pattern());
      assertEquals(10000000, pattern0.flags());
      assertFalse(atomicBoolean0.get());
      assertEquals("false", atomicBoolean0.toString());
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertNotNull(topologyContext0);
      
      kafkaSpout1.open(kafkaSpout2.acked, topologyContext0, kafkaSpout2.collector);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(string0.equals((Object)string1));
      assertTrue(stormTopology0.equals((Object)stormTopology1));
      assertTrue(stormTopology1.equals((Object)stormTopology0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(integer0.equals((Object)int0));
      assertEquals(0, topologyContext0.getThisTaskId());
      assertEquals("", topologyContext0.getStormId());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/storm/bd1f5c54752f67b484a83c26667331234234d3a3/evosuite_6", topologyContext0.getPIDDir());
      assertEquals("", topologyContext0.getCodeDir());
      assertNull(topologyContext0.getThisComponentId());
      assertEquals(Integer.MAX_VALUE, (int)topologyContext0.getThisWorkerPort());
      assertFalse(stormTopology0.is_set_spouts());
      assertEquals(0, stormTopology0.get_bolts_size());
      assertFalse(stormTopology0.is_set_bolts());
      assertFalse(stormTopology0.is_set_dependency_artifacts());
      assertEquals(0, stormTopology0.get_spouts_size());
      assertEquals(0, stormTopology0.get_dependency_jars_size());
      assertEquals(0, stormTopology0.get_state_spouts_size());
      assertEquals(0, stormTopology0.get_dependency_artifacts_size());
      assertFalse(stormTopology0.is_set_state_spouts());
      assertEquals(0, stormTopology0.get_worker_hooks_size());
      assertFalse(stormTopology0.is_set_dependency_jars());
      assertFalse(stormTopology0.is_set_worker_hooks());
      assertFalse(stormTopology1.is_set_dependency_artifacts());
      assertFalse(stormTopology1.is_set_worker_hooks());
      assertFalse(stormTopology1.is_set_bolts());
      assertEquals(0, stormTopology1.get_bolts_size());
      assertEquals(0, stormTopology1.get_spouts_size());
      assertEquals(0, stormTopology1.get_dependency_jars_size());
      assertEquals(0, stormTopology1.get_state_spouts_size());
      assertFalse(stormTopology1.is_set_spouts());
      assertFalse(stormTopology1.is_set_state_spouts());
      assertEquals(0, stormTopology1.get_dependency_artifacts_size());
      assertEquals(0, stormTopology1.get_worker_hooks_size());
      assertFalse(stormTopology1.is_set_dependency_jars());
      assertEquals(0, persistentHashMap0.count());
      assertEquals("Offsets successfully committed to Kafka [{}]", pattern0.toString());
      assertEquals("Offsets successfully committed to Kafka [{}]", pattern0.pattern());
      assertEquals(10000000, pattern0.flags());
      assertFalse(atomicBoolean0.get());
      assertEquals("false", atomicBoolean0.toString());
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals((-209), kafkaSpout1.maxRetries);
      assertTrue(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      assertFalse(kafkaSpout2.initialized);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertEquals(0, kafkaSpout2.maxRetries);
      assertNotSame(string0, string1);
      assertNotSame(stormTopology0, stormTopology1);
      assertNotSame(stormTopology1, stormTopology0);
      assertNotSame(string1, string0);
      
      boolean boolean1 = kafkaSpout_OffsetEntry3.isEmpty();
      assertTrue(boolean1 == boolean0);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(kafkaSpout_OffsetEntry0.equals((Object)kafkaSpout_OffsetEntry1));
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertEquals("Offsets successfully committed to Kafka [{}]", pattern0.toString());
      assertEquals("Offsets successfully committed to Kafka [{}]", pattern0.pattern());
      assertEquals(10000000, pattern0.flags());
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals((-209), kafkaSpout1.maxRetries);
      assertTrue(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      assertFalse(kafkaSpout2.initialized);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertEquals(0, kafkaSpout2.maxRetries);
      assertNotSame(string0, string1);
      assertNotSame(kafkaSpout_OffsetEntry0, kafkaSpout_OffsetEntry1);
      assertTrue(boolean1);
      
      OffsetAndMetadata offsetAndMetadata1 = kafkaSpout_OffsetEntry3.findNextCommitOffset();
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertTrue(boolean0 == boolean1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(kafkaSpout_OffsetEntry0.equals((Object)kafkaSpout_OffsetEntry1));
      assertEquals("Offsets successfully committed to Kafka [{}]", pattern0.toString());
      assertEquals("Offsets successfully committed to Kafka [{}]", pattern0.pattern());
      assertEquals(10000000, pattern0.flags());
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals((-209), kafkaSpout1.maxRetries);
      assertTrue(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      assertFalse(kafkaSpout2.initialized);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertEquals(0, kafkaSpout2.maxRetries);
      assertNotSame(string0, string1);
      assertNotSame(kafkaSpout_OffsetEntry0, kafkaSpout_OffsetEntry1);
      assertNull(offsetAndMetadata1);
      
      KafkaSpout<String, Object> kafkaSpout3 = new KafkaSpout<String, Object>(kafkaSpout2.kafkaSpoutConfig);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertTrue(boolean0 == boolean1);
      assertFalse(string0.equals((Object)string1));
      assertEquals("Offsets successfully committed to Kafka [{}]", pattern0.toString());
      assertEquals("Offsets successfully committed to Kafka [{}]", pattern0.pattern());
      assertEquals(10000000, pattern0.flags());
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout3.maxRetries);
      assertEquals(0L, kafkaSpout3.numUncommittedOffsets);
      assertFalse(kafkaSpout3.consumerAutoCommitMode);
      assertFalse(kafkaSpout3.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals((-209), kafkaSpout1.maxRetries);
      assertTrue(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      assertFalse(kafkaSpout2.initialized);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertEquals(0, kafkaSpout2.maxRetries);
      assertNotNull(kafkaSpout3);
      
      String string2 = kafkaSpout3.getWildCardTopics();
      assertFalse(string2.equals((Object)string1));
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertTrue(boolean0 == boolean1);
      assertFalse(string0.equals((Object)string1));
      assertEquals("Offsets successfully committed to Kafka [{}]", pattern0.toString());
      assertEquals("Offsets successfully committed to Kafka [{}]", pattern0.pattern());
      assertEquals(10000000, pattern0.flags());
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout3.maxRetries);
      assertEquals(0L, kafkaSpout3.numUncommittedOffsets);
      assertFalse(kafkaSpout3.consumerAutoCommitMode);
      assertFalse(kafkaSpout3.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals((-209), kafkaSpout1.maxRetries);
      assertTrue(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      assertFalse(kafkaSpout2.initialized);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertEquals(0, kafkaSpout2.maxRetries);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertEquals("Offsets successfully committed to Kafka [{}]", string2);
      assertNotNull(string2);
  }
}
