/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 01 00:12:16 GMT 2021
 */

package org.apache.storm.kafka.spout;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import clojure.lang.APersistentMap;
import clojure.lang.APersistentVector;
import clojure.lang.ArrayChunk;
import clojure.lang.ChunkedCons;
import clojure.lang.Cons;
import clojure.lang.EnumerationSeq;
import clojure.lang.FnLoaderThunk;
import clojure.lang.IPersistentMap;
import clojure.lang.ISeq;
import clojure.lang.IteratorSeq;
import clojure.lang.LazySeq;
import clojure.lang.LongRange;
import clojure.lang.MapEntry;
import clojure.lang.PersistentArrayMap;
import clojure.lang.PersistentHashMap;
import clojure.lang.PersistentHashSet;
import clojure.lang.PersistentList;
import clojure.lang.PersistentStructMap;
import clojure.lang.PersistentTreeMap;
import clojure.lang.PersistentTreeSet;
import clojure.lang.PersistentVector;
import clojure.lang.StringSeq;
import clojure.lang.Var;
import com.esotericsoftware.kryo.io.Input;
import java.nio.ByteBuffer;
import java.sql.SQLWarning;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.NavigableSet;
import java.util.Optional;
import java.util.Set;
import java.util.TreeSet;
import java.util.concurrent.DelayQueue;
import java.util.concurrent.Delayed;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.LinkedTransferQueue;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.function.Predicate;
import java.util.function.ToDoubleFunction;
import java.util.regex.Pattern;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.apache.kafka.clients.consumer.OffsetAndMetadata;
import org.apache.kafka.common.TopicPartition;
import org.apache.kafka.common.header.Header;
import org.apache.kafka.common.header.Headers;
import org.apache.kafka.common.header.internals.RecordHeader;
import org.apache.kafka.common.header.internals.RecordHeaders;
import org.apache.kafka.common.record.TimestampType;
import org.apache.kafka.common.serialization.Deserializer;
import org.apache.storm.generated.ClusterSummary;
import org.apache.storm.generated.StormTopology;
import org.apache.storm.kafka.spout.KafkaSpout;
import org.apache.storm.kafka.spout.KafkaSpoutConfig;
import org.apache.storm.kafka.spout.KafkaSpoutMessageId;
import org.apache.storm.kafka.spout.KafkaSpoutRetryService;
import org.apache.storm.kafka.spout.KafkaSpoutStream;
import org.apache.storm.kafka.spout.KafkaSpoutStreams;
import org.apache.storm.kafka.spout.KafkaSpoutStreamsNamedTopics;
import org.apache.storm.kafka.spout.KafkaSpoutStreamsWildcardTopics;
import org.apache.storm.kafka.spout.KafkaSpoutTuplesBuilder;
import org.apache.storm.kafka.spout.internal.KafkaConsumerFactory;
import org.apache.storm.kafka.spout.internal.KafkaConsumerFactoryDefault;
import org.apache.storm.metric.api.CombinedMetric;
import org.apache.storm.metric.api.ICombiner;
import org.apache.storm.spout.SpoutOutputCollector;
import org.apache.storm.state.ISubscribedState;
import org.apache.storm.task.GeneralTopologyContext;
import org.apache.storm.task.TopologyContext;
import org.apache.storm.topology.OutputFieldsDeclarer;
import org.apache.storm.topology.OutputFieldsGetter;
import org.apache.storm.tuple.Fields;
import org.apache.storm.tuple.MessageId;
import org.apache.storm.tuple.TupleImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class KafkaSpout_ESTest extends KafkaSpout_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test000()  throws Throwable  {
      String string0 = null;
      String string1 = "tG+T/\"4W";
      KafkaSpoutConfig<SQLWarning, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig0 = (KafkaSpoutConfig<SQLWarning, KafkaSpoutStreamsWildcardTopics>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(kafkaSpoutConfig0).getConsumerGroupId();
      doReturn((Map) null).when(kafkaSpoutConfig0).getKafkaProps();
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<SQLWarning, KafkaSpoutStreamsWildcardTopics> kafkaSpout0 = new KafkaSpout<SQLWarning, KafkaSpoutStreamsWildcardTopics>(kafkaSpoutConfig0);
      assertNotNull(kafkaSpout0);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      
      // Undeclared exception!
      try { 
        kafkaSpout0.getComponentConfiguration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test001()  throws Throwable  {
      String string0 = "clojure.string$split";
      Object[] objectArray0 = new Object[0];
      PersistentArrayMap persistentArrayMap0 = PersistentArrayMap.createAsIfByAssoc(objectArray0);
      assertNotNull(persistentArrayMap0);
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(0, persistentArrayMap0.count());
      assertEquals(0, objectArray0.length);
      
      KafkaSpoutStreams kafkaSpoutStreams0 = null;
      KafkaSpoutConfig<AbstractMap.SimpleEntry<Integer, ClusterSummary._Fields>, Object> kafkaSpoutConfig0 = (KafkaSpoutConfig<AbstractMap.SimpleEntry<Integer, ClusterSummary._Fields>, Object>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(kafkaSpoutConfig0).getConsumerGroupId();
      doReturn((KafkaSpoutConfig.FirstPollOffsetStrategy) null).when(kafkaSpoutConfig0).getFirstPollOffsetStrategy();
      doReturn(persistentArrayMap0).when(kafkaSpoutConfig0).getKafkaProps();
      doReturn(kafkaSpoutStreams0).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      doReturn(0).when(kafkaSpoutConfig0).getMaxTupleRetries();
      doReturn(0L).when(kafkaSpoutConfig0).getOffsetsCommitPeriodMs();
      doReturn((KafkaSpoutRetryService) null).when(kafkaSpoutConfig0).getRetryService();
      doReturn((KafkaSpoutTuplesBuilder) null).when(kafkaSpoutConfig0).getTuplesBuilder();
      doReturn(false).when(kafkaSpoutConfig0).isConsumerAutoCommitMode();
      KafkaConsumerFactoryDefault<AbstractMap.SimpleEntry<Integer, ClusterSummary._Fields>, Object> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<AbstractMap.SimpleEntry<Integer, ClusterSummary._Fields>, Object>();
      assertNotNull(kafkaConsumerFactoryDefault0);
      
      KafkaSpout<AbstractMap.SimpleEntry<Integer, ClusterSummary._Fields>, Object> kafkaSpout0 = new KafkaSpout<AbstractMap.SimpleEntry<Integer, ClusterSummary._Fields>, Object>(kafkaSpoutConfig0, kafkaConsumerFactoryDefault0);
      assertNotNull(kafkaSpout0);
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(0, persistentArrayMap0.count());
      assertEquals(0, objectArray0.length);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      
      PersistentArrayMap persistentArrayMap1 = PersistentArrayMap.createAsIfByAssoc(objectArray0);
      assertNotNull(persistentArrayMap1);
      assertEquals(0, persistentArrayMap1.count());
      assertEquals(0, persistentArrayMap1.capacity());
      assertEquals(0, objectArray0.length);
      assertTrue(persistentArrayMap1.equals((Object)persistentArrayMap0));
      assertNotSame(persistentArrayMap1, persistentArrayMap0);
      
      StormTopology stormTopology0 = new StormTopology(persistentArrayMap0, persistentArrayMap0, persistentArrayMap1);
      assertNotNull(stormTopology0);
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(0, persistentArrayMap0.count());
      assertEquals(0, persistentArrayMap1.count());
      assertEquals(0, persistentArrayMap1.capacity());
      assertTrue(stormTopology0.is_set_bolts());
      assertEquals(0, stormTopology0.get_bolts_size());
      assertTrue(stormTopology0.is_set_state_spouts());
      assertTrue(stormTopology0.is_set_spouts());
      assertEquals(0, stormTopology0.get_dependency_artifacts_size());
      assertEquals(0, stormTopology0.get_spouts_size());
      assertEquals(0, stormTopology0.get_dependency_jars_size());
      assertFalse(stormTopology0.is_set_dependency_jars());
      assertEquals(0, stormTopology0.get_state_spouts_size());
      assertFalse(stormTopology0.is_set_dependency_artifacts());
      assertEquals(0, stormTopology0.get_worker_hooks_size());
      assertFalse(stormTopology0.is_set_worker_hooks());
      assertEquals(0, objectArray0.length);
      assertTrue(persistentArrayMap0.equals((Object)persistentArrayMap1));
      assertTrue(persistentArrayMap1.equals((Object)persistentArrayMap0));
      
      Map<String, Map<String, Fields>> map0 = null;
      String string1 = "";
      Enumeration<TopicPartition> enumeration0 = (Enumeration<TopicPartition>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      EnumerationSeq enumerationSeq0 = EnumerationSeq.create(enumeration0);
      assertNull(enumerationSeq0);
      
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      assertNotNull(atomicBoolean0);
      assertEquals("false", atomicBoolean0.toString());
      assertFalse(atomicBoolean0.get());
      
      TopologyContext topologyContext0 = new TopologyContext(stormTopology0, persistentArrayMap1, persistentArrayMap1, persistentArrayMap0, map0, string0, string1, string1, (Integer) kafkaSpoutConfig0.DEFAULT_MAX_UNCOMMITTED_OFFSETS, (Integer) kafkaSpoutConfig0.DEFAULT_MAX_RETRIES, enumerationSeq0, persistentArrayMap1, persistentArrayMap1, persistentArrayMap0, persistentArrayMap0, atomicBoolean0);
      assertNotNull(topologyContext0);
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(0, persistentArrayMap0.count());
      assertEquals(0, persistentArrayMap1.count());
      assertEquals(0, persistentArrayMap1.capacity());
      assertTrue(stormTopology0.is_set_bolts());
      assertEquals(0, stormTopology0.get_bolts_size());
      assertTrue(stormTopology0.is_set_state_spouts());
      assertTrue(stormTopology0.is_set_spouts());
      assertEquals(0, stormTopology0.get_dependency_artifacts_size());
      assertEquals(0, stormTopology0.get_spouts_size());
      assertEquals(0, stormTopology0.get_dependency_jars_size());
      assertFalse(stormTopology0.is_set_dependency_jars());
      assertEquals(0, stormTopology0.get_state_spouts_size());
      assertFalse(stormTopology0.is_set_dependency_artifacts());
      assertEquals(0, stormTopology0.get_worker_hooks_size());
      assertFalse(stormTopology0.is_set_worker_hooks());
      assertEquals("false", atomicBoolean0.toString());
      assertFalse(atomicBoolean0.get());
      assertEquals("", topologyContext0.getCodeDir());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/storm/bd1f5c54752f67b484a83c26667331234234d3a3/evosuite_5", topologyContext0.getPIDDir());
      assertEquals("clojure.string$split", topologyContext0.getStormId());
      assertEquals(Integer.MAX_VALUE, (int)topologyContext0.getThisWorkerPort());
      assertNull(topologyContext0.getThisComponentId());
      assertEquals(10000000, topologyContext0.getThisTaskId());
      assertEquals(0, objectArray0.length);
      assertFalse(string0.equals((Object)string1));
      assertTrue(persistentArrayMap0.equals((Object)persistentArrayMap1));
      assertTrue(persistentArrayMap1.equals((Object)persistentArrayMap0));
      assertFalse(string1.equals((Object)string0));
      
      KafkaSpout<KafkaSpout<String, KafkaSpoutStreamsNamedTopics>, OffsetAndMetadata> kafkaSpout1 = new KafkaSpout<KafkaSpout<String, KafkaSpoutStreamsNamedTopics>, OffsetAndMetadata>();
      assertNotNull(kafkaSpout1);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      
      SpoutOutputCollector spoutOutputCollector0 = kafkaSpout1.collector;
      assertNull(spoutOutputCollector0);
      
      kafkaSpout0.open(persistentArrayMap0, topologyContext0, spoutOutputCollector0);
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(0, persistentArrayMap0.count());
      assertEquals(0, persistentArrayMap1.count());
      assertEquals(0, persistentArrayMap1.capacity());
      assertTrue(stormTopology0.is_set_bolts());
      assertEquals(0, stormTopology0.get_bolts_size());
      assertTrue(stormTopology0.is_set_state_spouts());
      assertTrue(stormTopology0.is_set_spouts());
      assertEquals(0, stormTopology0.get_dependency_artifacts_size());
      assertEquals(0, stormTopology0.get_spouts_size());
      assertEquals(0, stormTopology0.get_dependency_jars_size());
      assertFalse(stormTopology0.is_set_dependency_jars());
      assertEquals(0, stormTopology0.get_state_spouts_size());
      assertFalse(stormTopology0.is_set_dependency_artifacts());
      assertEquals(0, stormTopology0.get_worker_hooks_size());
      assertFalse(stormTopology0.is_set_worker_hooks());
      assertEquals("false", atomicBoolean0.toString());
      assertFalse(atomicBoolean0.get());
      assertEquals("", topologyContext0.getCodeDir());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/storm/bd1f5c54752f67b484a83c26667331234234d3a3/evosuite_5", topologyContext0.getPIDDir());
      assertEquals("clojure.string$split", topologyContext0.getStormId());
      assertEquals(Integer.MAX_VALUE, (int)topologyContext0.getThisWorkerPort());
      assertNull(topologyContext0.getThisComponentId());
      assertEquals(10000000, topologyContext0.getThisTaskId());
      assertEquals(0, objectArray0.length);
      assertFalse(string0.equals((Object)string1));
      assertTrue(persistentArrayMap0.equals((Object)persistentArrayMap1));
      assertTrue(persistentArrayMap1.equals((Object)persistentArrayMap0));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertNotSame(string0, string1);
      assertNotSame(persistentArrayMap0, persistentArrayMap1);
      assertNotSame(persistentArrayMap1, persistentArrayMap0);
      assertNotSame(string1, string0);
      
      long long0 = 0L;
      ISeq iSeq0 = LongRange.create((long) kafkaSpoutConfig0.DEFAULT_MAX_UNCOMMITTED_OFFSETS, long0);
      assertNotNull(iSeq0);
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(0, persistentArrayMap0.count());
      assertEquals(0, objectArray0.length);
      assertFalse(string0.equals((Object)string1));
      assertTrue(persistentArrayMap0.equals((Object)persistentArrayMap1));
      assertNotSame(string0, string1);
      assertNotSame(persistentArrayMap0, persistentArrayMap1);
      
      PersistentHashSet persistentHashSet0 = PersistentHashSet.create(iSeq0);
      assertNotNull(persistentHashSet0);
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(0, persistentArrayMap0.count());
      assertEquals(0, objectArray0.length);
      assertFalse(string0.equals((Object)string1));
      assertTrue(persistentArrayMap0.equals((Object)persistentArrayMap1));
      assertNotSame(string0, string1);
      assertNotSame(persistentArrayMap0, persistentArrayMap1);
      
      kafkaSpout0.emitted = (Set<KafkaSpoutMessageId>) persistentHashSet0;
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(0, persistentArrayMap0.count());
      assertFalse(kafkaSpout0.emitted.isEmpty());
      assertEquals(1, kafkaSpout0.emitted.size());
      
      Map<String, Object> map1 = kafkaSpout0.getComponentConfiguration();
      assertNotNull(map1);
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(0, persistentArrayMap0.count());
      assertFalse(map1.isEmpty());
      assertEquals(2, map1.size());
      assertEquals(0, objectArray0.length);
      assertFalse(string0.equals((Object)string1));
      assertTrue(persistentArrayMap0.equals((Object)persistentArrayMap1));
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertNotSame(string0, string1);
      assertNotSame(persistentArrayMap0, persistentArrayMap1);
      
      KafkaSpout<String, Delayed> kafkaSpout2 = new KafkaSpout<String, Delayed>();
      assertNotNull(kafkaSpout2);
      assertEquals(0, kafkaSpout2.maxRetries);
      assertFalse(kafkaSpout2.initialized);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      
      // Undeclared exception!
      try { 
        kafkaSpout2.getWildCardTopics();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test002()  throws Throwable  {
      KafkaSpout<Integer, TopicPartition> kafkaSpout0 = new KafkaSpout<Integer, TopicPartition>();
      assertNotNull(kafkaSpout0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      
      KafkaSpout.Timer kafkaSpout_Timer0 = kafkaSpout0.new Timer();
      assertNotNull(kafkaSpout_Timer0);
      assertEquals(0L, kafkaSpout_Timer0.delay());
      assertEquals(0L, kafkaSpout_Timer0.period());
      assertNull(kafkaSpout_Timer0.getTimeUnit());
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout_Timer0.delay);
      assertEquals(0L, kafkaSpout_Timer0.period);
      assertEquals(0L, kafkaSpout_Timer0.periodNanos);
      assertEquals(0L, kafkaSpout_Timer0.start);
      
      HashMap<TopicPartition, KafkaSpout.OffsetEntry> hashMap0 = new HashMap<TopicPartition, KafkaSpout.OffsetEntry>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      kafkaSpout0.acked = (Map<TopicPartition, KafkaSpout.OffsetEntry>) hashMap0;
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, kafkaSpout0.acked.size());
      assertTrue(kafkaSpout0.acked.isEmpty());
      
      boolean boolean0 = kafkaSpout_Timer0.isExpiredResetOnTrue();
      assertEquals(0L, kafkaSpout_Timer0.delay());
      assertEquals(0L, kafkaSpout_Timer0.period());
      assertNull(kafkaSpout_Timer0.getTimeUnit());
      assertTrue(boolean0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout_Timer0.delay);
      assertEquals(0L, kafkaSpout_Timer0.period);
      assertEquals(1392409281320000L, kafkaSpout_Timer0.start);
      assertEquals(0L, kafkaSpout_Timer0.periodNanos);
      
      boolean boolean1 = kafkaSpout_Timer0.isExpiredResetOnTrue();
      assertEquals(0L, kafkaSpout_Timer0.delay());
      assertEquals(0L, kafkaSpout_Timer0.period());
      assertNull(kafkaSpout_Timer0.getTimeUnit());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout_Timer0.delay);
      assertEquals(0L, kafkaSpout_Timer0.period);
      assertEquals(1392409281320000L, kafkaSpout_Timer0.start);
      assertEquals(0L, kafkaSpout_Timer0.periodNanos);
      
      KafkaSpout<ClusterSummary._Fields, TopicPartition> kafkaSpout1 = new KafkaSpout<ClusterSummary._Fields, TopicPartition>();
      assertNotNull(kafkaSpout1);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      
      KafkaSpoutConfig<ClusterSummary._Fields, TopicPartition> kafkaSpoutConfig0 = (KafkaSpoutConfig<ClusterSummary._Fields, TopicPartition>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      kafkaSpout1.kafkaSpoutConfig = kafkaSpoutConfig0;
      assertFalse(kafkaSpout1.kafkaSpoutConfig.isConsumerAutoCommitMode());
      assertEquals(0, kafkaSpout1.kafkaSpoutConfig.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpout1.kafkaSpoutConfig.getPollTimeoutMs());
      assertEquals(0L, kafkaSpout1.kafkaSpoutConfig.getOffsetsCommitPeriodMs());
      assertNull(kafkaSpout1.kafkaSpoutConfig.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpout1.kafkaSpoutConfig.getMaxTupleRetries());
      assertNull(kafkaSpout1.kafkaSpoutConfig.getConsumerGroupId());
      
      // Undeclared exception!
      try { 
        kafkaSpout1.commit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test003()  throws Throwable  {
      KafkaSpoutConfig<Integer, AbstractMap.SimpleImmutableEntry<Delayed, Object>> kafkaSpoutConfig0 = (KafkaSpoutConfig<Integer, AbstractMap.SimpleImmutableEntry<Delayed, Object>>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      KafkaConsumerFactory<Integer, AbstractMap.SimpleImmutableEntry<Delayed, Object>> kafkaConsumerFactory0 = null;
      KafkaSpout<Integer, AbstractMap.SimpleImmutableEntry<Delayed, Object>> kafkaSpout0 = new KafkaSpout<Integer, AbstractMap.SimpleImmutableEntry<Delayed, Object>>();
      assertNotNull(kafkaSpout0);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      
      KafkaSpoutStreams kafkaSpoutStreams0 = kafkaSpout0.kafkaSpoutStreams;
      assertNull(kafkaSpoutStreams0);
      
      KafkaSpoutConfig<Object, SQLWarning> kafkaSpoutConfig1 = (KafkaSpoutConfig<Object, SQLWarning>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      KafkaConsumerFactoryDefault<Object, SQLWarning> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<Object, SQLWarning>();
      assertNotNull(kafkaConsumerFactoryDefault0);
      
      KafkaSpout<Object, SQLWarning> kafkaSpout1 = new KafkaSpout<Object, SQLWarning>();
      assertNotNull(kafkaSpout1);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      
      long long0 = 0L;
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      KafkaSpout.Timer kafkaSpout_Timer0 = kafkaSpout1.new Timer(kafkaSpoutConfig1.DEFAULT_MAX_UNCOMMITTED_OFFSETS, long0, timeUnit0);
      assertNotNull(kafkaSpout_Timer0);
      assertEquals(10000000L, kafkaSpout_Timer0.delay());
      assertEquals(0L, kafkaSpout_Timer0.period());
      assertEquals(TimeUnit.MINUTES, kafkaSpout_Timer0.getTimeUnit());
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout_Timer0.period);
      assertEquals(0L, kafkaSpout_Timer0.periodNanos);
      assertEquals(10000000L, kafkaSpout_Timer0.delay);
      assertEquals(601392409281320000L, kafkaSpout_Timer0.start);
      
      long long1 = kafkaSpout_Timer0.period();
      assertEquals(10000000L, kafkaSpout_Timer0.delay());
      assertEquals(0L, kafkaSpout_Timer0.period());
      assertEquals(TimeUnit.MINUTES, kafkaSpout_Timer0.getTimeUnit());
      assertEquals(0L, long1);
      assertTrue(long1 == long0);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout_Timer0.period);
      assertEquals(0L, kafkaSpout_Timer0.periodNanos);
      assertEquals(10000000L, kafkaSpout_Timer0.delay);
      assertEquals(601392409281320000L, kafkaSpout_Timer0.start);
      
      KafkaSpout.OffsetComparator kafkaSpout_OffsetComparator0 = new KafkaSpout.OffsetComparator();
      assertNotNull(kafkaSpout_OffsetComparator0);
      
      String string0 = "lqw";
      int int0 = 513;
      long long2 = 2021L;
      TimestampType timestampType0 = TimestampType.NO_TIMESTAMP_TYPE;
      long long3 = 706L;
      long long4 = (-4212L);
      OffsetAndMetadata offsetAndMetadata0 = null;
      try {
        offsetAndMetadata0 = new OffsetAndMetadata(long4, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid negative offset
         //
         verifyException("org.apache.kafka.clients.consumer.OffsetAndMetadata", e);
      }
  }

  @Test(timeout = 11000)
  public void test004()  throws Throwable  {
      KafkaSpoutConfig<Delayed, Integer> kafkaSpoutConfig0 = (KafkaSpoutConfig<Delayed, Integer>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      long long0 = 127L;
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      KafkaSpoutConfig<SQLWarning, ClusterSummary._Fields> kafkaSpoutConfig1 = (KafkaSpoutConfig<SQLWarning, ClusterSummary._Fields>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null, (KafkaSpoutStreams) null).when(kafkaSpoutConfig1).getKafkaSpoutStreams();
      KafkaSpout<SQLWarning, ClusterSummary._Fields> kafkaSpout0 = new KafkaSpout<SQLWarning, ClusterSummary._Fields>(kafkaSpoutConfig1);
      assertNotNull(kafkaSpout0);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      
      String string0 = "YUPv:bgNU\"rMb$O";
      int int0 = 836;
      TopicPartition topicPartition0 = new TopicPartition(string0, int0);
      assertNotNull(topicPartition0);
      assertEquals(836, topicPartition0.partition());
      assertEquals("YUPv:bgNU\"rMb$O", topicPartition0.topic());
      
      Collection<TopicPartition> collection0 = kafkaSpout0.toArrayList(topicPartition0);
      assertNotNull(collection0);
      assertEquals(836, topicPartition0.partition());
      assertEquals("YUPv:bgNU\"rMb$O", topicPartition0.topic());
      assertTrue(collection0.contains(topicPartition0));
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      
      KafkaConsumerFactoryDefault<KafkaSpout.OffsetEntry, CombinedMetric> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<KafkaSpout.OffsetEntry, CombinedMetric>();
      assertNotNull(kafkaConsumerFactoryDefault0);
      
      KafkaSpout<KafkaSpout.OffsetEntry, CombinedMetric> kafkaSpout1 = new KafkaSpout<KafkaSpout.OffsetEntry, CombinedMetric>(kafkaSpout0.kafkaSpoutConfig, kafkaConsumerFactoryDefault0);
      assertNotNull(kafkaSpout1);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      
      // Undeclared exception!
      try { 
        kafkaSpout1.commitOffsetsForAckedTuples();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test005()  throws Throwable  {
      KafkaSpoutConfig<OffsetAndMetadata, ClusterSummary._Fields> kafkaSpoutConfig0 = (KafkaSpoutConfig<OffsetAndMetadata, ClusterSummary._Fields>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaConsumerFactoryDefault<OffsetAndMetadata, ClusterSummary._Fields> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<OffsetAndMetadata, ClusterSummary._Fields>();
      assertNotNull(kafkaConsumerFactoryDefault0);
      
      KafkaSpout<OffsetAndMetadata, ClusterSummary._Fields> kafkaSpout0 = new KafkaSpout<OffsetAndMetadata, ClusterSummary._Fields>(kafkaSpoutConfig0, kafkaConsumerFactoryDefault0);
      assertNotNull(kafkaSpout0);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      
      KafkaSpoutStreams kafkaSpoutStreams0 = kafkaSpout0.kafkaSpoutStreams;
      assertNull(kafkaSpoutStreams0);
      
      KafkaSpoutConfig<String, Delayed> kafkaSpoutConfig1 = (KafkaSpoutConfig<String, Delayed>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null, (KafkaSpoutStreams) null, kafkaSpoutStreams0).when(kafkaSpoutConfig1).getKafkaSpoutStreams();
      doReturn(kafkaSpoutConfig0.DEFAULT_MAX_RETRIES).when(kafkaSpoutConfig1).getMaxUncommittedOffsets();
      KafkaSpout<String, Delayed> kafkaSpout1 = new KafkaSpout<String, Delayed>(kafkaSpoutConfig1);
      assertNotNull(kafkaSpout1);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout1.new OffsetEntry();
      assertNotNull(kafkaSpout_OffsetEntry0);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      
      TopicPartition topicPartition0 = kafkaSpout_OffsetEntry0.tp;
      assertNull(topicPartition0);
      
      KafkaSpout<Object, TopicPartition> kafkaSpout2 = new KafkaSpout<Object, TopicPartition>(kafkaSpout1.kafkaSpoutConfig);
      assertNotNull(kafkaSpout2);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      assertFalse(kafkaSpout2.initialized);
      assertEquals(0, kafkaSpout2.maxRetries);
      
      boolean boolean0 = kafkaSpout2.poll();
      assertTrue(boolean0);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      assertFalse(kafkaSpout2.initialized);
      assertEquals(0, kafkaSpout2.maxRetries);
      
      KafkaSpout<TopicPartition, Object> kafkaSpout3 = new KafkaSpout<TopicPartition, Object>();
      assertNotNull(kafkaSpout3);
      assertFalse(kafkaSpout3.initialized);
      assertFalse(kafkaSpout3.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout3.maxRetries);
      assertEquals(0L, kafkaSpout3.numUncommittedOffsets);
      
      kafkaSpout3.nextTuple();
      assertFalse(kafkaSpout3.initialized);
      assertFalse(kafkaSpout3.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout3.maxRetries);
      assertEquals(0L, kafkaSpout3.numUncommittedOffsets);
      
      KafkaSpout.OffsetComparator kafkaSpout_OffsetComparator0 = new KafkaSpout.OffsetComparator();
      assertNotNull(kafkaSpout_OffsetComparator0);
      
      KafkaSpout<ClusterSummary._Fields, KafkaSpoutStreamsWildcardTopics> kafkaSpout4 = new KafkaSpout<ClusterSummary._Fields, KafkaSpoutStreamsWildcardTopics>();
      assertNotNull(kafkaSpout4);
      assertFalse(kafkaSpout4.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout4.numUncommittedOffsets);
      assertEquals(0, kafkaSpout4.maxRetries);
      assertFalse(kafkaSpout4.initialized);
      
      KafkaConsumerFactoryDefault<TopicPartition, OffsetAndMetadata> kafkaConsumerFactoryDefault1 = new KafkaConsumerFactoryDefault<TopicPartition, OffsetAndMetadata>();
      assertNotNull(kafkaConsumerFactoryDefault1);
      
      KafkaSpout<TopicPartition, OffsetAndMetadata> kafkaSpout5 = new KafkaSpout<TopicPartition, OffsetAndMetadata>(kafkaSpout1.kafkaSpoutConfig, kafkaConsumerFactoryDefault1);
      assertNotNull(kafkaSpout5);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertEquals(0, kafkaSpout5.maxRetries);
      assertEquals(0L, kafkaSpout5.numUncommittedOffsets);
      assertFalse(kafkaSpout5.consumerAutoCommitMode);
      assertFalse(kafkaSpout5.initialized);
      
      ConsumerRecord<TopicPartition, OffsetAndMetadata> consumerRecord0 = null;
      // Undeclared exception!
      try { 
        kafkaSpout5.emitTupleIfNotEmitted(consumerRecord0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test006()  throws Throwable  {
      KafkaSpoutConfig<String, Delayed> kafkaSpoutConfig0 = (KafkaSpoutConfig<String, Delayed>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null, (KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<String, Delayed> kafkaSpout0 = new KafkaSpout<String, Delayed>(kafkaSpoutConfig0);
      assertNotNull(kafkaSpout0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout0.new OffsetEntry();
      assertNotNull(kafkaSpout_OffsetEntry0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      
      HashMap<TopicPartition, List<ConsumerRecord<String, Delayed>>> hashMap0 = new HashMap<TopicPartition, List<ConsumerRecord<String, Delayed>>>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      ConsumerRecords<String, Delayed> consumerRecords0 = new ConsumerRecords<String, Delayed>(hashMap0);
      assertNotNull(consumerRecords0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(consumerRecords0.isEmpty());
      
      kafkaSpout0.setWaitingToEmit(consumerRecords0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(consumerRecords0.isEmpty());
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      
      TopicPartition topicPartition0 = kafkaSpout_OffsetEntry0.tp;
      assertNull(topicPartition0);
      
      long long0 = 600L;
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry1 = kafkaSpout0.new OffsetEntry(topicPartition0, long0);
      assertNotNull(kafkaSpout_OffsetEntry1);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(600L, kafkaSpout_OffsetEntry1.initialFetchOffset);
      assertEquals(599L, kafkaSpout_OffsetEntry1.committedOffset);
      
      KafkaSpout<Object, TopicPartition> kafkaSpout1 = new KafkaSpout<Object, TopicPartition>(kafkaSpout0.kafkaSpoutConfig);
      assertNotNull(kafkaSpout1);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.initialized);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry2 = kafkaSpout1.new OffsetEntry();
      assertNotNull(kafkaSpout_OffsetEntry2);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout_OffsetEntry2.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry2.committedOffset);
      
      long long1 = 1024L;
      kafkaSpout_OffsetEntry2.initialFetchOffset = long1;
      OffsetAndMetadata offsetAndMetadata0 = kafkaSpout_OffsetEntry2.findNextCommitOffset();
      assertNull(offsetAndMetadata0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(1024L, kafkaSpout_OffsetEntry2.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry2.committedOffset);
      
      kafkaSpout_OffsetEntry1.commit(offsetAndMetadata0);
      assertFalse(long0 == long1);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(600L, kafkaSpout_OffsetEntry1.initialFetchOffset);
      assertEquals(599L, kafkaSpout_OffsetEntry1.committedOffset);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(1024L, kafkaSpout_OffsetEntry2.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry2.committedOffset);
      
      KafkaSpout<TopicPartition, Object> kafkaSpout2 = new KafkaSpout<TopicPartition, Object>();
      assertNotNull(kafkaSpout2);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertEquals(0, kafkaSpout2.maxRetries);
      assertFalse(kafkaSpout2.initialized);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      
      kafkaSpout2.nextTuple();
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertEquals(0, kafkaSpout2.maxRetries);
      assertFalse(kafkaSpout2.initialized);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      
      KafkaSpout.OffsetComparator kafkaSpout_OffsetComparator0 = new KafkaSpout.OffsetComparator();
      assertNotNull(kafkaSpout_OffsetComparator0);
      
      String string0 = null;
      kafkaSpout2.kafkaConsumer = kafkaSpout1.kafkaConsumer;
      long long2 = (-1886L);
      long long3 = (-684L);
      TimestampType timestampType0 = TimestampType.NO_TIMESTAMP_TYPE;
      int int0 = (-2147483645);
      int int1 = (-2147483645);
      ClusterSummary._Fields clusterSummary__Fields0 = ClusterSummary._Fields.TOPOLOGIES;
      ICombiner<TopicPartition> iCombiner0 = (ICombiner<TopicPartition>) mock(ICombiner.class, new ViolatedAssumptionAnswer());
      doReturn(kafkaSpout_OffsetEntry0.tp).when(iCombiner0).identity();
      TreeSet<KafkaSpoutMessageId> treeSet0 = new TreeSet<KafkaSpoutMessageId>();
      assertNotNull(treeSet0);
      
      kafkaSpout_OffsetEntry2.ackedMsgs = (NavigableSet<KafkaSpoutMessageId>) treeSet0;
      assertEquals(0, kafkaSpout_OffsetEntry2.ackedMsgs.size());
      assertTrue(kafkaSpout_OffsetEntry2.ackedMsgs.isEmpty());
      
      CombinedMetric combinedMetric0 = new CombinedMetric(iCombiner0);
      assertNotNull(combinedMetric0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      
      ConsumerRecord<ClusterSummary._Fields, CombinedMetric> consumerRecord0 = null;
      try {
        consumerRecord0 = new ConsumerRecord<ClusterSummary._Fields, CombinedMetric>(string0, kafkaSpout2.maxRetries, long2, long3, timestampType0, kafkaSpout_OffsetEntry2.committedOffset, int0, int1, clusterSummary__Fields0, combinedMetric0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Topic cannot be null
         //
         verifyException("org.apache.kafka.clients.consumer.ConsumerRecord", e);
      }
  }

  @Test(timeout = 11000)
  public void test007()  throws Throwable  {
      KafkaSpoutConfig<String, Delayed> kafkaSpoutConfig0 = (KafkaSpoutConfig<String, Delayed>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null, (KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<String, Delayed> kafkaSpout0 = new KafkaSpout<String, Delayed>(kafkaSpoutConfig0);
      assertNotNull(kafkaSpout0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      
      HashMap<TopicPartition, List<ConsumerRecord<String, Delayed>>> hashMap0 = new HashMap<TopicPartition, List<ConsumerRecord<String, Delayed>>>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      ConsumerRecords<String, Delayed> consumerRecords0 = new ConsumerRecords<String, Delayed>(hashMap0);
      assertNotNull(consumerRecords0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(consumerRecords0.isEmpty());
      
      kafkaSpout0.setWaitingToEmit(consumerRecords0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(consumerRecords0.isEmpty());
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      
      long long0 = 600L;
      KafkaSpout<Object, TopicPartition> kafkaSpout1 = new KafkaSpout<Object, TopicPartition>(kafkaSpout0.kafkaSpoutConfig);
      assertNotNull(kafkaSpout1);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout1.new OffsetEntry();
      assertNotNull(kafkaSpout_OffsetEntry0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      
      OffsetAndMetadata offsetAndMetadata0 = kafkaSpout_OffsetEntry0.findNextCommitOffset();
      assertNull(offsetAndMetadata0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      
      KafkaSpout<TopicPartition, Object> kafkaSpout2 = new KafkaSpout<TopicPartition, Object>();
      assertNotNull(kafkaSpout2);
      assertEquals(0, kafkaSpout2.maxRetries);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      assertFalse(kafkaSpout2.initialized);
      
      kafkaSpout2.nextTuple();
      assertEquals(0, kafkaSpout2.maxRetries);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      assertFalse(kafkaSpout2.initialized);
      
      KafkaSpout.OffsetComparator kafkaSpout_OffsetComparator0 = new KafkaSpout.OffsetComparator();
      assertNotNull(kafkaSpout_OffsetComparator0);
      
      String string0 = null;
      Comparator<KafkaSpoutMessageId> comparator0 = kafkaSpout_OffsetComparator0.thenComparing(kafkaSpout0.OFFSET_COMPARATOR);
      assertNotNull(comparator0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      
      long long1 = (-1886L);
      long long2 = (-684L);
      TimestampType timestampType0 = TimestampType.NO_TIMESTAMP_TYPE;
      int int0 = (-2147483645);
      int int1 = (-2147483645);
      ClusterSummary._Fields clusterSummary__Fields0 = ClusterSummary._Fields.TOPOLOGIES;
      String string1 = "org.apache.storm.kafka.spout.KafkaSpout$OffsetEntry";
      int int2 = 377;
      ConsumerRecord<String, String> consumerRecord0 = new ConsumerRecord<String, String>(string1, int2, kafkaSpout0.maxRetries, string1, string1);
      assertNotNull(consumerRecord0);
      assertEquals(377, consumerRecord0.partition());
      assertEquals((-1), consumerRecord0.serializedKeySize());
      assertEquals("org.apache.storm.kafka.spout.KafkaSpout$OffsetEntry", consumerRecord0.topic());
      assertEquals(TimestampType.NO_TIMESTAMP_TYPE, consumerRecord0.timestampType());
      assertEquals(0L, consumerRecord0.offset());
      assertEquals((-1L), consumerRecord0.timestamp());
      assertEquals((-1), consumerRecord0.serializedValueSize());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals((-1L), ConsumerRecord.NO_TIMESTAMP);
      assertEquals((-1), ConsumerRecord.NULL_CHECKSUM);
      assertEquals((-1), ConsumerRecord.NULL_SIZE);
      
      KafkaSpoutMessageId kafkaSpoutMessageId0 = new KafkaSpoutMessageId(consumerRecord0);
      assertNotNull(kafkaSpoutMessageId0);
      assertEquals(377, consumerRecord0.partition());
      assertEquals((-1), consumerRecord0.serializedKeySize());
      assertEquals("org.apache.storm.kafka.spout.KafkaSpout$OffsetEntry", consumerRecord0.topic());
      assertEquals(TimestampType.NO_TIMESTAMP_TYPE, consumerRecord0.timestampType());
      assertEquals(0L, consumerRecord0.offset());
      assertEquals((-1L), consumerRecord0.timestamp());
      assertEquals((-1), consumerRecord0.serializedValueSize());
      assertEquals("org.apache.storm.kafka.spout.KafkaSpout$OffsetEntry", kafkaSpoutMessageId0.topic());
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertEquals(0L, kafkaSpoutMessageId0.offset());
      assertEquals(377, kafkaSpoutMessageId0.partition());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals((-1L), ConsumerRecord.NO_TIMESTAMP);
      assertEquals((-1), ConsumerRecord.NULL_CHECKSUM);
      assertEquals((-1), ConsumerRecord.NULL_SIZE);
      
      KafkaSpoutMessageId kafkaSpoutMessageId1 = new KafkaSpoutMessageId(kafkaSpout_OffsetEntry0.tp, consumerRecord0.NO_TIMESTAMP);
      assertNotNull(kafkaSpoutMessageId1);
      assertEquals(377, consumerRecord0.partition());
      assertEquals((-1), consumerRecord0.serializedKeySize());
      assertEquals("org.apache.storm.kafka.spout.KafkaSpout$OffsetEntry", consumerRecord0.topic());
      assertEquals(TimestampType.NO_TIMESTAMP_TYPE, consumerRecord0.timestampType());
      assertEquals(0L, consumerRecord0.offset());
      assertEquals((-1L), consumerRecord0.timestamp());
      assertEquals((-1), consumerRecord0.serializedValueSize());
      assertEquals(0, kafkaSpoutMessageId1.numFails());
      assertEquals((-1L), kafkaSpoutMessageId1.offset());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(kafkaSpoutMessageId1.equals((Object)kafkaSpoutMessageId0));
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals((-1L), ConsumerRecord.NO_TIMESTAMP);
      assertEquals((-1), ConsumerRecord.NULL_CHECKSUM);
      assertEquals((-1), ConsumerRecord.NULL_SIZE);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      
      int int3 = kafkaSpout_OffsetComparator0.compare(kafkaSpoutMessageId0, kafkaSpoutMessageId1);
      assertEquals(377, consumerRecord0.partition());
      assertEquals((-1), consumerRecord0.serializedKeySize());
      assertEquals("org.apache.storm.kafka.spout.KafkaSpout$OffsetEntry", consumerRecord0.topic());
      assertEquals(TimestampType.NO_TIMESTAMP_TYPE, consumerRecord0.timestampType());
      assertEquals(0L, consumerRecord0.offset());
      assertEquals((-1L), consumerRecord0.timestamp());
      assertEquals((-1), consumerRecord0.serializedValueSize());
      assertEquals("org.apache.storm.kafka.spout.KafkaSpout$OffsetEntry", kafkaSpoutMessageId0.topic());
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertEquals(0L, kafkaSpoutMessageId0.offset());
      assertEquals(377, kafkaSpoutMessageId0.partition());
      assertEquals(0, kafkaSpoutMessageId1.numFails());
      assertEquals((-1L), kafkaSpoutMessageId1.offset());
      assertEquals(1, int3);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(kafkaSpoutMessageId0.equals((Object)kafkaSpoutMessageId1));
      assertFalse(kafkaSpoutMessageId1.equals((Object)kafkaSpoutMessageId0));
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals((-1L), ConsumerRecord.NO_TIMESTAMP);
      assertEquals((-1), ConsumerRecord.NULL_CHECKSUM);
      assertEquals((-1), ConsumerRecord.NULL_SIZE);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertNotSame(kafkaSpoutMessageId0, kafkaSpoutMessageId1);
      assertNotSame(kafkaSpoutMessageId1, kafkaSpoutMessageId0);
  }

  @Test(timeout = 11000)
  public void test008()  throws Throwable  {
      PersistentHashMap persistentHashMap0 = PersistentHashMap.EMPTY;
      assertNotNull(persistentHashMap0);
      assertEquals(0, persistentHashMap0.count());
      
      KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, AbstractMap.SimpleEntry<KafkaSpoutStreamsNamedTopics, ClusterSummary._Fields>> kafkaSpoutConfig0 = (KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, AbstractMap.SimpleEntry<KafkaSpoutStreamsNamedTopics, ClusterSummary._Fields>>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      doReturn(0).when(kafkaSpoutConfig0).getMaxUncommittedOffsets();
      KafkaSpout<KafkaSpoutStreamsNamedTopics, AbstractMap.SimpleEntry<KafkaSpoutStreamsNamedTopics, ClusterSummary._Fields>> kafkaSpout0 = new KafkaSpout<KafkaSpoutStreamsNamedTopics, AbstractMap.SimpleEntry<KafkaSpoutStreamsNamedTopics, ClusterSummary._Fields>>(kafkaSpoutConfig0);
      assertNotNull(kafkaSpout0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      
      boolean boolean0 = kafkaSpout0.poll();
      assertFalse(boolean0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      
      String string0 = kafkaSpout0.toString();
      assertNotNull(string0);
      assertEquals("KafkaSpout{acked=null, emitted=null}", string0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      
      // Undeclared exception!
      try { 
        kafkaSpout0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test009()  throws Throwable  {
      KafkaSpoutConfig<String, Delayed> kafkaSpoutConfig0 = (KafkaSpoutConfig<String, Delayed>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      KafkaSpout<String, Delayed> kafkaSpout0 = new KafkaSpout<String, Delayed>();
      assertNotNull(kafkaSpout0);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout0.new OffsetEntry();
      assertNotNull(kafkaSpout_OffsetEntry0);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      
      long long0 = 2L;
      KafkaSpout<Object, TopicPartition> kafkaSpout1 = new KafkaSpout<Object, TopicPartition>();
      assertNotNull(kafkaSpout1);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      
      kafkaSpout1.emitted = kafkaSpout0.emitted;
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry1 = kafkaSpout1.new OffsetEntry();
      assertNotNull(kafkaSpout_OffsetEntry1);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertEquals(0L, kafkaSpout_OffsetEntry1.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry1.committedOffset);
      
      String string0 = "g!$GW:Qj(l_-wjY$";
      long long1 = (-987L);
      String string1 = "";
      ConsumerRecord<String, Integer> consumerRecord0 = new ConsumerRecord<String, Integer>(string0, kafkaSpout1.maxRetries, long1, string1, (Integer) kafkaSpout0.maxRetries);
      assertNotNull(consumerRecord0);
      assertEquals((-1), consumerRecord0.serializedKeySize());
      assertEquals(TimestampType.NO_TIMESTAMP_TYPE, consumerRecord0.timestampType());
      assertEquals((-987L), consumerRecord0.offset());
      assertEquals((-1), consumerRecord0.serializedValueSize());
      assertEquals(0, consumerRecord0.partition());
      assertEquals("g!$GW:Qj(l_-wjY$", consumerRecord0.topic());
      assertEquals((-1L), consumerRecord0.timestamp());
      assertFalse(string0.equals((Object)string1));
      assertFalse(long1 == long0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertEquals((-1L), ConsumerRecord.NO_TIMESTAMP);
      assertEquals((-1), ConsumerRecord.NULL_CHECKSUM);
      assertEquals((-1), ConsumerRecord.NULL_SIZE);
      
      KafkaSpoutMessageId kafkaSpoutMessageId0 = new KafkaSpoutMessageId(consumerRecord0);
      assertNotNull(kafkaSpoutMessageId0);
      assertEquals((-1), consumerRecord0.serializedKeySize());
      assertEquals(TimestampType.NO_TIMESTAMP_TYPE, consumerRecord0.timestampType());
      assertEquals((-987L), consumerRecord0.offset());
      assertEquals((-1), consumerRecord0.serializedValueSize());
      assertEquals(0, consumerRecord0.partition());
      assertEquals("g!$GW:Qj(l_-wjY$", consumerRecord0.topic());
      assertEquals((-1L), consumerRecord0.timestamp());
      assertEquals(0, kafkaSpoutMessageId0.partition());
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertEquals((-987L), kafkaSpoutMessageId0.offset());
      assertEquals("g!$GW:Qj(l_-wjY$", kafkaSpoutMessageId0.topic());
      assertFalse(string0.equals((Object)string1));
      assertFalse(long1 == long0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertEquals((-1L), ConsumerRecord.NO_TIMESTAMP);
      assertEquals((-1), ConsumerRecord.NULL_CHECKSUM);
      assertEquals((-1), ConsumerRecord.NULL_SIZE);
      
      kafkaSpout_OffsetEntry1.add(kafkaSpoutMessageId0);
      assertEquals((-1), consumerRecord0.serializedKeySize());
      assertEquals(TimestampType.NO_TIMESTAMP_TYPE, consumerRecord0.timestampType());
      assertEquals((-987L), consumerRecord0.offset());
      assertEquals((-1), consumerRecord0.serializedValueSize());
      assertEquals(0, consumerRecord0.partition());
      assertEquals("g!$GW:Qj(l_-wjY$", consumerRecord0.topic());
      assertEquals((-1L), consumerRecord0.timestamp());
      assertEquals(0, kafkaSpoutMessageId0.partition());
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertEquals((-987L), kafkaSpoutMessageId0.offset());
      assertEquals("g!$GW:Qj(l_-wjY$", kafkaSpoutMessageId0.topic());
      assertFalse(string0.equals((Object)string1));
      assertFalse(long1 == long0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertEquals(0L, kafkaSpout_OffsetEntry1.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry1.committedOffset);
      assertEquals((-1L), ConsumerRecord.NO_TIMESTAMP);
      assertEquals((-1), ConsumerRecord.NULL_CHECKSUM);
      assertEquals((-1), ConsumerRecord.NULL_SIZE);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      long long2 = 1054L;
      OffsetAndMetadata offsetAndMetadata0 = kafkaSpout_OffsetEntry1.findNextCommitOffset();
      assertNull(offsetAndMetadata0);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertEquals(0L, kafkaSpout_OffsetEntry1.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry1.committedOffset);
  }

  @Test(timeout = 11000)
  public void test010()  throws Throwable  {
      KafkaSpoutConfig<String, Delayed> kafkaSpoutConfig0 = (KafkaSpoutConfig<String, Delayed>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null, (KafkaSpoutStreams) null, (KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<String, Delayed> kafkaSpout0 = new KafkaSpout<String, Delayed>(kafkaSpoutConfig0);
      assertNotNull(kafkaSpout0);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout0.new OffsetEntry();
      assertNotNull(kafkaSpout_OffsetEntry0);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      
      TopicPartition topicPartition0 = kafkaSpout_OffsetEntry0.tp;
      assertNull(topicPartition0);
      
      long long0 = 611L;
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry1 = kafkaSpout0.new OffsetEntry(topicPartition0, long0);
      assertNotNull(kafkaSpout_OffsetEntry1);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals(610L, kafkaSpout_OffsetEntry1.committedOffset);
      assertEquals(611L, kafkaSpout_OffsetEntry1.initialFetchOffset);
      
      KafkaSpout<Object, TopicPartition> kafkaSpout1 = new KafkaSpout<Object, TopicPartition>(kafkaSpout0.kafkaSpoutConfig);
      assertNotNull(kafkaSpout1);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry2 = kafkaSpout1.new OffsetEntry();
      assertNotNull(kafkaSpout_OffsetEntry2);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0L, kafkaSpout_OffsetEntry2.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry2.initialFetchOffset);
      
      long long1 = 1051L;
      KafkaSpoutMessageId kafkaSpoutMessageId0 = new KafkaSpoutMessageId(kafkaSpout_OffsetEntry1.tp, long1);
      assertNotNull(kafkaSpoutMessageId0);
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertEquals(1051L, kafkaSpoutMessageId0.offset());
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals(610L, kafkaSpout_OffsetEntry1.committedOffset);
      assertEquals(611L, kafkaSpout_OffsetEntry1.initialFetchOffset);
      
      kafkaSpout_OffsetEntry2.add(kafkaSpoutMessageId0);
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertEquals(1051L, kafkaSpoutMessageId0.offset());
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals(610L, kafkaSpout_OffsetEntry1.committedOffset);
      assertEquals(611L, kafkaSpout_OffsetEntry1.initialFetchOffset);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0L, kafkaSpout_OffsetEntry2.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry2.initialFetchOffset);
      
      OffsetAndMetadata offsetAndMetadata0 = kafkaSpout_OffsetEntry2.findNextCommitOffset();
      assertNull(offsetAndMetadata0);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0L, kafkaSpout_OffsetEntry2.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry2.initialFetchOffset);
      
      kafkaSpout_OffsetEntry1.commit(offsetAndMetadata0);
      assertFalse(long0 == long1);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals(610L, kafkaSpout_OffsetEntry1.committedOffset);
      assertEquals(611L, kafkaSpout_OffsetEntry1.initialFetchOffset);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0L, kafkaSpout_OffsetEntry2.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry2.initialFetchOffset);
      
      KafkaSpout<KafkaSpoutStreamsNamedTopics, CombinedMetric> kafkaSpout2 = new KafkaSpout<KafkaSpoutStreamsNamedTopics, CombinedMetric>();
      assertNotNull(kafkaSpout2);
      assertFalse(kafkaSpout2.initialized);
      assertEquals(0, kafkaSpout2.maxRetries);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      
      boolean boolean0 = kafkaSpout2.waitingToEmit();
      assertFalse(boolean0);
      assertFalse(kafkaSpout2.initialized);
      assertEquals(0, kafkaSpout2.maxRetries);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      
      KafkaConsumerFactoryDefault<ForkJoinTask<KafkaSpoutStreamsNamedTopics>, OffsetAndMetadata> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<ForkJoinTask<KafkaSpoutStreamsNamedTopics>, OffsetAndMetadata>();
      assertNotNull(kafkaConsumerFactoryDefault0);
      
      KafkaSpout<ForkJoinTask<KafkaSpoutStreamsNamedTopics>, OffsetAndMetadata> kafkaSpout3 = new KafkaSpout<ForkJoinTask<KafkaSpoutStreamsNamedTopics>, OffsetAndMetadata>(kafkaSpout1.kafkaSpoutConfig, kafkaConsumerFactoryDefault0);
      assertNotNull(kafkaSpout3);
      assertFalse(kafkaSpout3.consumerAutoCommitMode);
      assertFalse(kafkaSpout3.initialized);
      assertEquals(0, kafkaSpout3.maxRetries);
      assertEquals(0L, kafkaSpout3.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      
      // Undeclared exception!
      try { 
        kafkaSpout3.pollKafkaBroker();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test011()  throws Throwable  {
      KafkaSpoutConfig<String, Delayed> kafkaSpoutConfig0 = (KafkaSpoutConfig<String, Delayed>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null, (KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<String, Delayed> kafkaSpout0 = new KafkaSpout<String, Delayed>(kafkaSpoutConfig0);
      assertNotNull(kafkaSpout0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout0.new OffsetEntry();
      assertNotNull(kafkaSpout_OffsetEntry0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      
      TopicPartition topicPartition0 = kafkaSpout_OffsetEntry0.tp;
      assertNull(topicPartition0);
      
      long long0 = 611L;
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry1 = kafkaSpout0.new OffsetEntry(topicPartition0, long0);
      assertNotNull(kafkaSpout_OffsetEntry1);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(610L, kafkaSpout_OffsetEntry1.committedOffset);
      assertEquals(611L, kafkaSpout_OffsetEntry1.initialFetchOffset);
      
      KafkaSpout<Object, TopicPartition> kafkaSpout1 = new KafkaSpout<Object, TopicPartition>(kafkaSpout0.kafkaSpoutConfig);
      assertNotNull(kafkaSpout1);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry2 = kafkaSpout1.new OffsetEntry();
      assertNotNull(kafkaSpout_OffsetEntry2);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0L, kafkaSpout_OffsetEntry2.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry2.committedOffset);
      
      long long1 = 1051L;
      KafkaSpoutMessageId kafkaSpoutMessageId0 = new KafkaSpoutMessageId(kafkaSpout_OffsetEntry1.tp, long1);
      assertNotNull(kafkaSpoutMessageId0);
      assertEquals(1051L, kafkaSpoutMessageId0.offset());
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(610L, kafkaSpout_OffsetEntry1.committedOffset);
      assertEquals(611L, kafkaSpout_OffsetEntry1.initialFetchOffset);
      
      kafkaSpout_OffsetEntry2.add(kafkaSpoutMessageId0);
      assertEquals(1051L, kafkaSpoutMessageId0.offset());
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(610L, kafkaSpout_OffsetEntry1.committedOffset);
      assertEquals(611L, kafkaSpout_OffsetEntry1.initialFetchOffset);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0L, kafkaSpout_OffsetEntry2.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry2.committedOffset);
      
      OffsetAndMetadata offsetAndMetadata0 = kafkaSpout_OffsetEntry2.findNextCommitOffset();
      assertNull(offsetAndMetadata0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0L, kafkaSpout_OffsetEntry2.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry2.committedOffset);
      
      kafkaSpout_OffsetEntry1.commit(offsetAndMetadata0);
      assertFalse(long0 == long1);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(610L, kafkaSpout_OffsetEntry1.committedOffset);
      assertEquals(611L, kafkaSpout_OffsetEntry1.initialFetchOffset);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0L, kafkaSpout_OffsetEntry2.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry2.committedOffset);
      
      KafkaSpout<KafkaSpoutStreamsNamedTopics, CombinedMetric> kafkaSpout2 = new KafkaSpout<KafkaSpoutStreamsNamedTopics, CombinedMetric>();
      assertNotNull(kafkaSpout2);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertEquals(0, kafkaSpout2.maxRetries);
      assertFalse(kafkaSpout2.initialized);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      
      ConsumerRecords<KafkaSpoutStreamsNamedTopics, CombinedMetric> consumerRecords0 = ConsumerRecords.empty();
      assertNotNull(consumerRecords0);
      assertTrue(consumerRecords0.isEmpty());
      
      kafkaSpout2.setWaitingToEmit(consumerRecords0);
      assertTrue(consumerRecords0.isEmpty());
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertEquals(0, kafkaSpout2.maxRetries);
      assertFalse(kafkaSpout2.initialized);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      
      boolean boolean0 = kafkaSpout2.waitingToEmit();
      assertFalse(boolean0);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertEquals(0, kafkaSpout2.maxRetries);
      assertFalse(kafkaSpout2.initialized);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
  }

  @Test(timeout = 11000)
  public void test012()  throws Throwable  {
      KafkaSpoutConfig<TopicPartition, String> kafkaSpoutConfig0 = (KafkaSpoutConfig<TopicPartition, String>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null, (KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<TopicPartition, String> kafkaSpout0 = new KafkaSpout<TopicPartition, String>(kafkaSpoutConfig0);
      assertNotNull(kafkaSpout0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout0.new OffsetEntry();
      assertNotNull(kafkaSpout_OffsetEntry0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      
      OffsetAndMetadata offsetAndMetadata0 = new OffsetAndMetadata(kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertNotNull(offsetAndMetadata0);
      assertEquals(0L, offsetAndMetadata0.offset());
      assertEquals("", offsetAndMetadata0.metadata());
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      
      kafkaSpout_OffsetEntry0.commit(offsetAndMetadata0);
      assertEquals(0L, offsetAndMetadata0.offset());
      assertEquals("", offsetAndMetadata0.metadata());
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      
      TopicPartition topicPartition0 = kafkaSpout_OffsetEntry0.tp;
      assertNull(topicPartition0);
      
      boolean boolean0 = kafkaSpout_OffsetEntry0.isEmpty();
      assertTrue(boolean0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry1 = kafkaSpout0.new OffsetEntry(topicPartition0, kafkaSpoutConfig0.DEFAULT_POLL_TIMEOUT_MS);
      assertNotNull(kafkaSpout_OffsetEntry1);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals(200L, kafkaSpout_OffsetEntry1.initialFetchOffset);
      assertEquals(199L, kafkaSpout_OffsetEntry1.committedOffset);
      
      boolean boolean1 = kafkaSpout_OffsetEntry1.isEmpty();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals(200L, kafkaSpout_OffsetEntry1.initialFetchOffset);
      assertEquals(199L, kafkaSpout_OffsetEntry1.committedOffset);
      
      KafkaSpout<KafkaSpoutMessageId, KafkaSpout.OffsetEntry> kafkaSpout1 = new KafkaSpout<KafkaSpoutMessageId, KafkaSpout.OffsetEntry>(kafkaSpout0.kafkaSpoutConfig);
      assertNotNull(kafkaSpout1);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      
      // Undeclared exception!
      try { 
        kafkaSpout1.commit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test013()  throws Throwable  {
      KafkaSpout<Integer, KafkaSpoutStreamsNamedTopics> kafkaSpout0 = new KafkaSpout<Integer, KafkaSpoutStreamsNamedTopics>();
      assertNotNull(kafkaSpout0);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout0.new OffsetEntry();
      assertNotNull(kafkaSpout_OffsetEntry0);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      
      String string0 = "}nJ$|cYS@!g";
      TimestampType timestampType0 = TimestampType.LOG_APPEND_TIME;
      long long0 = 680L;
      int int0 = 1153;
      ConsumerRecord<String, Integer> consumerRecord0 = new ConsumerRecord<String, Integer>(string0, kafkaSpout0.maxRetries, kafkaSpout0.numUncommittedOffsets, kafkaSpout0.maxRetries, timestampType0, long0, int0, kafkaSpout0.maxRetries, string0, (Integer) kafkaSpout0.maxRetries);
      assertNotNull(consumerRecord0);
      assertEquals(0L, consumerRecord0.offset());
      assertEquals(TimestampType.LOG_APPEND_TIME, consumerRecord0.timestampType());
      assertEquals(1153, consumerRecord0.serializedKeySize());
      assertEquals(0, consumerRecord0.partition());
      assertEquals("}nJ$|cYS@!g", consumerRecord0.topic());
      assertEquals(0L, consumerRecord0.timestamp());
      assertEquals(0, consumerRecord0.serializedValueSize());
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals((-1), ConsumerRecord.NULL_CHECKSUM);
      assertEquals((-1L), ConsumerRecord.NO_TIMESTAMP);
      assertEquals((-1), ConsumerRecord.NULL_SIZE);
      
      boolean boolean0 = kafkaSpout_OffsetEntry0.contains(consumerRecord0);
      assertEquals(0L, consumerRecord0.offset());
      assertEquals(TimestampType.LOG_APPEND_TIME, consumerRecord0.timestampType());
      assertEquals(1153, consumerRecord0.serializedKeySize());
      assertEquals(0, consumerRecord0.partition());
      assertEquals("}nJ$|cYS@!g", consumerRecord0.topic());
      assertEquals(0L, consumerRecord0.timestamp());
      assertEquals(0, consumerRecord0.serializedValueSize());
      assertFalse(boolean0);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals((-1), ConsumerRecord.NULL_CHECKSUM);
      assertEquals((-1L), ConsumerRecord.NO_TIMESTAMP);
      assertEquals((-1), ConsumerRecord.NULL_SIZE);
      
      String string1 = kafkaSpout_OffsetEntry0.toString();
      assertNotNull(string1);
      assertEquals("OffsetEntry{topic-partition=null, fetchOffset=0, committedOffset=0, ackedMsgs=[]}", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertNotSame(string1, string0);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry1 = kafkaSpout0.new OffsetEntry(kafkaSpout_OffsetEntry0.tp, consumerRecord0.NULL_CHECKSUM);
      assertNotNull(kafkaSpout_OffsetEntry1);
      assertEquals(0L, consumerRecord0.offset());
      assertEquals(TimestampType.LOG_APPEND_TIME, consumerRecord0.timestampType());
      assertEquals(1153, consumerRecord0.serializedKeySize());
      assertEquals(0, consumerRecord0.partition());
      assertEquals("}nJ$|cYS@!g", consumerRecord0.topic());
      assertEquals(0L, consumerRecord0.timestamp());
      assertEquals(0, consumerRecord0.serializedValueSize());
      assertFalse(string0.equals((Object)string1));
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals((-1), ConsumerRecord.NULL_CHECKSUM);
      assertEquals((-1L), ConsumerRecord.NO_TIMESTAMP);
      assertEquals((-1), ConsumerRecord.NULL_SIZE);
      assertEquals((-2L), kafkaSpout_OffsetEntry1.committedOffset);
      assertEquals((-1L), kafkaSpout_OffsetEntry1.initialFetchOffset);
      
      OffsetAndMetadata offsetAndMetadata0 = new OffsetAndMetadata(kafkaSpout_OffsetEntry0.committedOffset);
      assertNotNull(offsetAndMetadata0);
      assertEquals(0L, offsetAndMetadata0.offset());
      assertEquals("", offsetAndMetadata0.metadata());
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      
      kafkaSpout_OffsetEntry1.commit(offsetAndMetadata0);
      assertEquals(0L, consumerRecord0.offset());
      assertEquals(TimestampType.LOG_APPEND_TIME, consumerRecord0.timestampType());
      assertEquals(1153, consumerRecord0.serializedKeySize());
      assertEquals(0, consumerRecord0.partition());
      assertEquals("}nJ$|cYS@!g", consumerRecord0.topic());
      assertEquals(0L, consumerRecord0.timestamp());
      assertEquals(0, consumerRecord0.serializedValueSize());
      assertEquals(0L, offsetAndMetadata0.offset());
      assertEquals("", offsetAndMetadata0.metadata());
      assertFalse(string0.equals((Object)string1));
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals((-2L), kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals((-1), ConsumerRecord.NULL_CHECKSUM);
      assertEquals((-1L), ConsumerRecord.NO_TIMESTAMP);
      assertEquals((-1), ConsumerRecord.NULL_SIZE);
      assertEquals(0L, kafkaSpout_OffsetEntry1.committedOffset);
      assertEquals((-1L), kafkaSpout_OffsetEntry1.initialFetchOffset);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 11000)
  public void test014()  throws Throwable  {
      StormTopology stormTopology0 = new StormTopology();
      assertNotNull(stormTopology0);
      assertEquals(0, stormTopology0.get_worker_hooks_size());
      assertFalse(stormTopology0.is_set_state_spouts());
      assertEquals(0, stormTopology0.get_state_spouts_size());
      assertFalse(stormTopology0.is_set_spouts());
      assertEquals(0, stormTopology0.get_bolts_size());
      assertFalse(stormTopology0.is_set_dependency_jars());
      assertFalse(stormTopology0.is_set_worker_hooks());
      assertFalse(stormTopology0.is_set_bolts());
      assertEquals(0, stormTopology0.get_spouts_size());
      assertFalse(stormTopology0.is_set_dependency_artifacts());
      assertEquals(0, stormTopology0.get_dependency_jars_size());
      assertEquals(0, stormTopology0.get_dependency_artifacts_size());
      
      Map<Integer, String> map0 = null;
      core.ratio_QMARK_ core_ratio_QMARK_0 = new core.ratio_QMARK_();
      assertNotNull(core_ratio_QMARK_0);
      
      KafkaSpoutConfig<Object, PersistentVector> kafkaSpoutConfig0 = (KafkaSpoutConfig<Object, PersistentVector>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null, (KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      doReturn((List) null).when(kafkaSpoutConfig0).getSubscribedTopics();
      KafkaConsumerFactoryDefault<Object, PersistentVector> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<Object, PersistentVector>();
      assertNotNull(kafkaConsumerFactoryDefault0);
      
      KafkaSpout<Object, PersistentVector> kafkaSpout0 = new KafkaSpout<Object, PersistentVector>(kafkaSpoutConfig0, kafkaConsumerFactoryDefault0);
      assertNotNull(kafkaSpout0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout0.new OffsetEntry();
      assertNotNull(kafkaSpout_OffsetEntry0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      
      TopicPartition topicPartition0 = kafkaSpout_OffsetEntry0.tp;
      assertNull(topicPartition0);
      
      long long0 = 500L;
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry1 = kafkaSpout0.new OffsetEntry(topicPartition0, long0);
      assertNotNull(kafkaSpout_OffsetEntry1);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(499L, kafkaSpout_OffsetEntry1.committedOffset);
      assertEquals(500L, kafkaSpout_OffsetEntry1.initialFetchOffset);
      
      KafkaSpoutConfig.FirstPollOffsetStrategy[] kafkaSpoutConfig_FirstPollOffsetStrategyArray0 = KafkaSpoutConfig.FirstPollOffsetStrategy.values();
      assertNotNull(kafkaSpoutConfig_FirstPollOffsetStrategyArray0);
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      
      KafkaSpout<OffsetAndMetadata, TopicPartition> kafkaSpout1 = new KafkaSpout<OffsetAndMetadata, TopicPartition>(kafkaSpout0.kafkaSpoutConfig);
      assertNotNull(kafkaSpout1);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      
      // Undeclared exception!
      try { 
        kafkaSpout1.getNamedTopics();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test015()  throws Throwable  {
      KafkaSpoutConfig<Object, AbstractMap.SimpleImmutableEntry<KafkaSpoutMessageId, Integer>> kafkaSpoutConfig0 = (KafkaSpoutConfig<Object, AbstractMap.SimpleImmutableEntry<KafkaSpoutMessageId, Integer>>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<Object, AbstractMap.SimpleImmutableEntry<KafkaSpoutMessageId, Integer>> kafkaSpout0 = new KafkaSpout<Object, AbstractMap.SimpleImmutableEntry<KafkaSpoutMessageId, Integer>>(kafkaSpoutConfig0);
      assertNotNull(kafkaSpout0);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      
      String string0 = "y";
      TopicPartition topicPartition0 = new TopicPartition(string0, kafkaSpoutConfig0.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertNotNull(topicPartition0);
      assertEquals(10000000, topicPartition0.partition());
      assertEquals("y", topicPartition0.topic());
      
      // Undeclared exception!
      try { 
        kafkaSpout0.setAcked(topicPartition0, kafkaSpoutConfig0.DEFAULT_MAX_RETRIES);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test016()  throws Throwable  {
      long long0 = (-1242L);
      System.setCurrentTimeMillis(long0);
      KafkaSpoutConfig<Object, OffsetAndMetadata> kafkaSpoutConfig0 = (KafkaSpoutConfig<Object, OffsetAndMetadata>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(kafkaSpoutConfig0).getConsumerGroupId();
      doReturn((Map) null).when(kafkaSpoutConfig0).getKafkaProps();
      doReturn((KafkaSpoutStreams) null, (KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      doReturn(0).when(kafkaSpoutConfig0).getMaxUncommittedOffsets();
      KafkaSpout<Object, OffsetAndMetadata> kafkaSpout0 = new KafkaSpout<Object, OffsetAndMetadata>(kafkaSpoutConfig0);
      assertNotNull(kafkaSpout0);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      
      boolean boolean0 = kafkaSpout0.poll();
      assertFalse(boolean0);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      
      KafkaSpout.OffsetComparator kafkaSpout_OffsetComparator0 = new KafkaSpout.OffsetComparator();
      assertNotNull(kafkaSpout_OffsetComparator0);
      
      TopicPartition topicPartition0 = null;
      long long1 = (-1005L);
      KafkaSpoutMessageId kafkaSpoutMessageId0 = new KafkaSpoutMessageId(topicPartition0, long1);
      assertNotNull(kafkaSpoutMessageId0);
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertEquals((-1005L), kafkaSpoutMessageId0.offset());
      assertFalse(long1 == long0);
      
      int int0 = kafkaSpout_OffsetComparator0.compare(kafkaSpoutMessageId0, kafkaSpoutMessageId0);
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertEquals((-1005L), kafkaSpoutMessageId0.offset());
      assertEquals(0, int0);
      assertFalse(long1 == long0);
      
      KafkaSpout.KafkaSpoutConsumerRebalanceListener kafkaSpout_KafkaSpoutConsumerRebalanceListener0 = kafkaSpout0.new KafkaSpoutConsumerRebalanceListener();
      assertNotNull(kafkaSpout_KafkaSpoutConsumerRebalanceListener0);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      
      KafkaConsumerFactoryDefault<String, KafkaSpout.OffsetEntry> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<String, KafkaSpout.OffsetEntry>();
      assertNotNull(kafkaConsumerFactoryDefault0);
      
      KafkaSpout<String, KafkaSpout.OffsetEntry> kafkaSpout1 = new KafkaSpout<String, KafkaSpout.OffsetEntry>(kafkaSpout0.kafkaSpoutConfig, kafkaConsumerFactoryDefault0);
      assertNotNull(kafkaSpout1);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      
      // Undeclared exception!
      try { 
        kafkaSpout1.getComponentConfiguration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test017()  throws Throwable  {
      KafkaSpoutStreams kafkaSpoutStreams0 = null;
      KafkaSpoutConfig<String, Delayed> kafkaSpoutConfig0 = (KafkaSpoutConfig<String, Delayed>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null, (KafkaSpoutStreams) null, kafkaSpoutStreams0).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<String, Delayed> kafkaSpout0 = new KafkaSpout<String, Delayed>(kafkaSpoutConfig0);
      assertNotNull(kafkaSpout0);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout0.new OffsetEntry();
      assertNotNull(kafkaSpout_OffsetEntry0);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      
      TopicPartition topicPartition0 = kafkaSpout_OffsetEntry0.tp;
      assertNull(topicPartition0);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry1 = kafkaSpout0.new OffsetEntry(topicPartition0, kafkaSpout0.maxRetries);
      assertNotNull(kafkaSpout_OffsetEntry1);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry1.initialFetchOffset);
      assertEquals((-1L), kafkaSpout_OffsetEntry1.committedOffset);
      
      KafkaSpout<Object, TopicPartition> kafkaSpout1 = new KafkaSpout<Object, TopicPartition>(kafkaSpout0.kafkaSpoutConfig);
      assertNotNull(kafkaSpout1);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry2 = kafkaSpout1.new OffsetEntry();
      assertNotNull(kafkaSpout_OffsetEntry2);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout_OffsetEntry2.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry2.committedOffset);
      
      KafkaSpoutMessageId kafkaSpoutMessageId0 = new KafkaSpoutMessageId(kafkaSpout_OffsetEntry1.tp, kafkaSpout_OffsetEntry0.committedOffset);
      assertNotNull(kafkaSpoutMessageId0);
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertEquals(0L, kafkaSpoutMessageId0.offset());
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry1.initialFetchOffset);
      assertEquals((-1L), kafkaSpout_OffsetEntry1.committedOffset);
      
      kafkaSpout_OffsetEntry2.add(kafkaSpoutMessageId0);
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertEquals(0L, kafkaSpoutMessageId0.offset());
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry1.initialFetchOffset);
      assertEquals((-1L), kafkaSpout_OffsetEntry1.committedOffset);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout_OffsetEntry2.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry2.committedOffset);
      
      OffsetAndMetadata offsetAndMetadata0 = kafkaSpout_OffsetEntry2.findNextCommitOffset();
      assertNotNull(offsetAndMetadata0);
      assertEquals("{topic-partition=null, offset=0, numFails=0, thread='TEST_EXECUTION_THREAD_1'}", offsetAndMetadata0.metadata());
      assertEquals(0L, offsetAndMetadata0.offset());
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout_OffsetEntry2.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry2.committedOffset);
      
      kafkaSpout_OffsetEntry1.commit(offsetAndMetadata0);
      assertEquals("{topic-partition=null, offset=0, numFails=0, thread='TEST_EXECUTION_THREAD_1'}", offsetAndMetadata0.metadata());
      assertEquals(0L, offsetAndMetadata0.offset());
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals((-1L), kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry1.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry1.committedOffset);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout_OffsetEntry2.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry2.committedOffset);
      
      KafkaSpout<KafkaSpout.OffsetEntry, KafkaSpout.OffsetEntry> kafkaSpout2 = new KafkaSpout<KafkaSpout.OffsetEntry, KafkaSpout.OffsetEntry>(kafkaSpout1.kafkaSpoutConfig);
      assertNotNull(kafkaSpout2);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals((-1L), kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout2.initialized);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertEquals(0, kafkaSpout2.maxRetries);
      
      OutputFieldsGetter outputFieldsGetter0 = new OutputFieldsGetter();
      assertNotNull(outputFieldsGetter0);
      
      StormTopology stormTopology0 = new StormTopology();
      assertNotNull(stormTopology0);
      assertFalse(stormTopology0.is_set_dependency_jars());
      assertFalse(stormTopology0.is_set_bolts());
      assertEquals(0, stormTopology0.get_worker_hooks_size());
      assertEquals(0, stormTopology0.get_spouts_size());
      assertFalse(stormTopology0.is_set_dependency_artifacts());
      assertEquals(0, stormTopology0.get_dependency_jars_size());
      assertEquals(0, stormTopology0.get_dependency_artifacts_size());
      assertFalse(stormTopology0.is_set_worker_hooks());
      assertFalse(stormTopology0.is_set_state_spouts());
      assertEquals(0, stormTopology0.get_state_spouts_size());
      assertFalse(stormTopology0.is_set_spouts());
      assertEquals(0, stormTopology0.get_bolts_size());
      
      StormTopology stormTopology1 = new StormTopology(stormTopology0);
      assertNotNull(stormTopology1);
      assertFalse(stormTopology0.is_set_dependency_jars());
      assertFalse(stormTopology0.is_set_bolts());
      assertEquals(0, stormTopology0.get_worker_hooks_size());
      assertEquals(0, stormTopology0.get_spouts_size());
      assertFalse(stormTopology0.is_set_dependency_artifacts());
      assertEquals(0, stormTopology0.get_dependency_jars_size());
      assertEquals(0, stormTopology0.get_dependency_artifacts_size());
      assertFalse(stormTopology0.is_set_worker_hooks());
      assertFalse(stormTopology0.is_set_state_spouts());
      assertEquals(0, stormTopology0.get_state_spouts_size());
      assertFalse(stormTopology0.is_set_spouts());
      assertEquals(0, stormTopology0.get_bolts_size());
      assertFalse(stormTopology1.is_set_dependency_jars());
      assertFalse(stormTopology1.is_set_bolts());
      assertEquals(0, stormTopology1.get_worker_hooks_size());
      assertEquals(0, stormTopology1.get_spouts_size());
      assertFalse(stormTopology1.is_set_dependency_artifacts());
      assertEquals(0, stormTopology1.get_dependency_jars_size());
      assertFalse(stormTopology1.is_set_worker_hooks());
      assertFalse(stormTopology1.is_set_state_spouts());
      assertFalse(stormTopology1.is_set_spouts());
      assertEquals(0, stormTopology1.get_state_spouts_size());
      assertEquals(0, stormTopology1.get_bolts_size());
      assertEquals(0, stormTopology1.get_dependency_artifacts_size());
      assertTrue(stormTopology1.equals((Object)stormTopology0));
      
      pprint.format_integer pprint_format_integer0 = null;
      try {
        pprint_format_integer0 = new pprint.format_integer();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 11000)
  public void test018()  throws Throwable  {
      KafkaSpout<String, Object> kafkaSpout0 = new KafkaSpout<String, Object>();
      assertNotNull(kafkaSpout0);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      
      KafkaSpout.KafkaSpoutConsumerRebalanceListener kafkaSpout_KafkaSpoutConsumerRebalanceListener0 = kafkaSpout0.new KafkaSpoutConsumerRebalanceListener();
      assertNotNull(kafkaSpout_KafkaSpoutConsumerRebalanceListener0);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout0.new OffsetEntry();
      assertNotNull(kafkaSpout_OffsetEntry0);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      
      TopicPartition topicPartition0 = kafkaSpout_OffsetEntry0.tp;
      assertNull(topicPartition0);
      
      long long0 = 645L;
      OffsetAndMetadata offsetAndMetadata0 = new OffsetAndMetadata(long0);
      assertNotNull(offsetAndMetadata0);
      assertEquals("", offsetAndMetadata0.metadata());
      assertEquals(645L, offsetAndMetadata0.offset());
      
      // Undeclared exception!
      try { 
        kafkaSpout_KafkaSpoutConsumerRebalanceListener0.doSeek(topicPartition0, offsetAndMetadata0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout$KafkaSpoutConsumerRebalanceListener", e);
      }
  }

  @Test(timeout = 11000)
  public void test019()  throws Throwable  {
      KafkaSpoutConfig<Integer, Delayed> kafkaSpoutConfig0 = (KafkaSpoutConfig<Integer, Delayed>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<Integer, Delayed> kafkaSpout0 = new KafkaSpout<Integer, Delayed>(kafkaSpoutConfig0);
      assertNotNull(kafkaSpout0);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      
      KafkaConsumer<Integer, Delayed> kafkaConsumer0 = (KafkaConsumer<Integer, Delayed>) mock(KafkaConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = kafkaSpout0.waitingToEmit();
      assertFalse(boolean0);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      
      kafkaSpout0.kafkaConsumer = kafkaConsumer0;
      // Undeclared exception!
      try { 
        kafkaSpout0.shutdown();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test020()  throws Throwable  {
      KafkaSpout<KafkaSpoutStreamsNamedTopics, KafkaSpoutStreamsNamedTopics> kafkaSpout0 = new KafkaSpout<KafkaSpoutStreamsNamedTopics, KafkaSpoutStreamsNamedTopics>();
      assertNotNull(kafkaSpout0);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      
      KafkaSpout<Integer, OffsetAndMetadata> kafkaSpout1 = null;
      try {
        kafkaSpout1 = new KafkaSpout<Integer, OffsetAndMetadata>(kafkaSpout0.kafkaSpoutConfig);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test021()  throws Throwable  {
      KafkaSpout<Object, OffsetAndMetadata> kafkaSpout0 = new KafkaSpout<Object, OffsetAndMetadata>();
      assertNotNull(kafkaSpout0);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      
      // Undeclared exception!
      try { 
        kafkaSpout0.emit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test022()  throws Throwable  {
      KafkaSpout<TopicPartition, CombinedMetric> kafkaSpout0 = new KafkaSpout<TopicPartition, CombinedMetric>();
      assertNotNull(kafkaSpout0);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      
      KafkaSpout.KafkaSpoutConsumerRebalanceListener kafkaSpout_KafkaSpoutConsumerRebalanceListener0 = kafkaSpout0.new KafkaSpoutConsumerRebalanceListener();
      assertNotNull(kafkaSpout_KafkaSpoutConsumerRebalanceListener0);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) kafkaSpout0;
      objectArray0[1] = (Object) kafkaSpout0;
      objectArray0[2] = (Object) kafkaSpout_KafkaSpoutConsumerRebalanceListener0;
      objectArray0[3] = (Object) kafkaSpout0;
      objectArray0[4] = (Object) kafkaSpout0;
      objectArray0[5] = (Object) kafkaSpout0;
      objectArray0[6] = (Object) kafkaSpout0;
      // Undeclared exception!
      try { 
        PersistentHashSet.createWithCheck(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate key: KafkaSpout{acked=null, emitted=null}
         //
         verifyException("clojure.lang.PersistentHashSet", e);
      }
  }

  @Test(timeout = 11000)
  public void test023()  throws Throwable  {
      KafkaSpout<TopicPartition, String> kafkaSpout0 = new KafkaSpout<TopicPartition, String>();
      assertNotNull(kafkaSpout0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      
      long long0 = 1L;
      long long1 = 0L;
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      KafkaSpout.Timer kafkaSpout_Timer0 = kafkaSpout0.new Timer(long0, long1, timeUnit0);
      assertNotNull(kafkaSpout_Timer0);
      assertEquals(0L, kafkaSpout_Timer0.period());
      assertEquals(1L, kafkaSpout_Timer0.delay());
      assertEquals(TimeUnit.HOURS, kafkaSpout_Timer0.getTimeUnit());
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout_Timer0.period);
      assertEquals(1396009281320000L, kafkaSpout_Timer0.start);
      assertEquals(0L, kafkaSpout_Timer0.periodNanos);
      assertEquals(1L, kafkaSpout_Timer0.delay);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout0.new OffsetEntry();
      assertNotNull(kafkaSpout_OffsetEntry0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      
      TopicPartition topicPartition0 = kafkaSpout_OffsetEntry0.tp;
      assertNull(topicPartition0);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry1 = kafkaSpout0.new OffsetEntry(topicPartition0, kafkaSpout_Timer0.delay);
      assertNotNull(kafkaSpout_OffsetEntry1);
      assertEquals(0L, kafkaSpout_Timer0.period());
      assertEquals(1L, kafkaSpout_Timer0.delay());
      assertEquals(TimeUnit.HOURS, kafkaSpout_Timer0.getTimeUnit());
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout_Timer0.period);
      assertEquals(1396009281320000L, kafkaSpout_Timer0.start);
      assertEquals(0L, kafkaSpout_Timer0.periodNanos);
      assertEquals(1L, kafkaSpout_Timer0.delay);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(1L, kafkaSpout_OffsetEntry1.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry1.committedOffset);
      
      String string0 = "a\"5X)]3";
      TimestampType timestampType0 = TimestampType.CREATE_TIME;
      long long2 = 12L;
      Long long3 = new Long(long2);
      assertNotNull(long3);
      assertEquals(12L, (long)long3);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertTrue(long3.equals((Object)long2));
      
      int int0 = 0;
      int int1 = 125;
      TopicPartition topicPartition1 = new TopicPartition(string0, int1);
      assertNotNull(topicPartition1);
      assertEquals("a\"5X)]3", topicPartition1.topic());
      assertEquals(125, topicPartition1.partition());
      assertFalse(int1 == int0);
      
      KafkaSpoutMessageId kafkaSpoutMessageId0 = new KafkaSpoutMessageId(topicPartition1, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertNotNull(kafkaSpoutMessageId0);
      assertEquals("a\"5X)]3", topicPartition1.topic());
      assertEquals(125, topicPartition1.partition());
      assertEquals("a\"5X)]3", kafkaSpoutMessageId0.topic());
      assertEquals(125, kafkaSpoutMessageId0.partition());
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertEquals(0L, kafkaSpoutMessageId0.offset());
      assertFalse(int1 == int0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      
      long long4 = (-3558L);
      Optional<Integer> optional0 = Optional.empty();
      assertNotNull(optional0);
      
      String string1 = "";
      long long5 = 229L;
      long long6 = 136L;
      System.setCurrentTimeMillis(long6);
      assertFalse(long6 == long0);
      assertFalse(long6 == long1);
      assertFalse(long6 == long5);
      assertFalse(long6 == long4);
      assertFalse(long6 == long2);
      
      KafkaSpout.KafkaSpoutConsumerRebalanceListener kafkaSpout_KafkaSpoutConsumerRebalanceListener0 = kafkaSpout0.new KafkaSpoutConsumerRebalanceListener();
      assertNotNull(kafkaSpout_KafkaSpoutConsumerRebalanceListener0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      
      Collection<TopicPartition> collection0 = null;
      // Undeclared exception!
      try { 
        kafkaSpout_KafkaSpoutConsumerRebalanceListener0.onPartitionsAssigned(collection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout$KafkaSpoutConsumerRebalanceListener", e);
      }
  }

  @Test(timeout = 11000)
  public void test024()  throws Throwable  {
      KafkaSpoutConfig<String, Integer> kafkaSpoutConfig0 = (KafkaSpoutConfig<String, Integer>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(kafkaSpoutConfig0).getConsumerGroupId();
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaConsumerFactoryDefault<String, Integer> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<String, Integer>();
      assertNotNull(kafkaConsumerFactoryDefault0);
      
      KafkaSpout<String, Integer> kafkaSpout0 = new KafkaSpout<String, Integer>(kafkaSpoutConfig0, kafkaConsumerFactoryDefault0);
      assertNotNull(kafkaSpout0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      
      KafkaSpout.KafkaSpoutConsumerRebalanceListener kafkaSpout_KafkaSpoutConsumerRebalanceListener0 = kafkaSpout0.new KafkaSpoutConsumerRebalanceListener();
      assertNotNull(kafkaSpout_KafkaSpoutConsumerRebalanceListener0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      
      Collection<TopicPartition> collection0 = null;
      // Undeclared exception!
      try { 
        kafkaSpout_KafkaSpoutConsumerRebalanceListener0.onPartitionsAssigned(collection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout$KafkaSpoutConsumerRebalanceListener", e);
      }
  }

  @Test(timeout = 11000)
  public void test025()  throws Throwable  {
      KafkaSpout<Object, PersistentVector> kafkaSpout0 = new KafkaSpout<Object, PersistentVector>();
      assertNotNull(kafkaSpout0);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout0.new OffsetEntry();
      assertNotNull(kafkaSpout_OffsetEntry0);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      
      String string0 = "failed: (<= 1 months 12)";
      int int0 = 8;
      long long0 = 7L;
      TimestampType timestampType0 = TimestampType.LOG_APPEND_TIME;
      Long long1 = new Long(int0);
      assertNotNull(long1);
      assertEquals(8L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      assertNotNull(delayQueue0);
      
      Delayed delayed0 = delayQueue0.poll();
      assertNull(delayed0);
      
      RecordHeaders recordHeaders0 = new RecordHeaders();
      assertNotNull(recordHeaders0);
      
      ConsumerRecord<TopicPartition, Delayed> consumerRecord0 = new ConsumerRecord<TopicPartition, Delayed>(string0, int0, long0, kafkaSpout0.numUncommittedOffsets, timestampType0, long1, kafkaSpout0.maxRetries, int0, kafkaSpout_OffsetEntry0.tp, delayed0, recordHeaders0);
      assertNotNull(consumerRecord0);
      assertEquals(0L, consumerRecord0.timestamp());
      assertEquals(7L, consumerRecord0.offset());
      assertEquals(0, consumerRecord0.serializedKeySize());
      assertEquals(8, consumerRecord0.serializedValueSize());
      assertEquals("failed: (<= 1 months 12)", consumerRecord0.topic());
      assertEquals(TimestampType.LOG_APPEND_TIME, consumerRecord0.timestampType());
      assertEquals(8, consumerRecord0.partition());
      assertFalse(long1.equals((Object)long0));
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals((-1L), ConsumerRecord.NO_TIMESTAMP);
      assertEquals((-1), ConsumerRecord.NULL_CHECKSUM);
      assertEquals((-1), ConsumerRecord.NULL_SIZE);
      
      KafkaSpoutMessageId kafkaSpoutMessageId0 = new KafkaSpoutMessageId(consumerRecord0);
      assertNotNull(kafkaSpoutMessageId0);
      assertEquals(0L, consumerRecord0.timestamp());
      assertEquals(7L, consumerRecord0.offset());
      assertEquals(0, consumerRecord0.serializedKeySize());
      assertEquals(8, consumerRecord0.serializedValueSize());
      assertEquals("failed: (<= 1 months 12)", consumerRecord0.topic());
      assertEquals(TimestampType.LOG_APPEND_TIME, consumerRecord0.timestampType());
      assertEquals(8, consumerRecord0.partition());
      assertEquals("failed: (<= 1 months 12)", kafkaSpoutMessageId0.topic());
      assertEquals(8, kafkaSpoutMessageId0.partition());
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertEquals(7L, kafkaSpoutMessageId0.offset());
      assertFalse(long1.equals((Object)long0));
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals((-1L), ConsumerRecord.NO_TIMESTAMP);
      assertEquals((-1), ConsumerRecord.NULL_CHECKSUM);
      assertEquals((-1), ConsumerRecord.NULL_SIZE);
      
      String string1 = "QzaQnL(6']}dP!q-";
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      Runnable runnable0 = null;
      MockThread mockThread0 = new MockThread(threadGroup0, runnable0);
      assertNotNull(mockThread0);
      
      String string2 = kafkaSpoutMessageId0.getMetadata(mockThread0);
      assertNotNull(string2);
      assertEquals(0L, consumerRecord0.timestamp());
      assertEquals(7L, consumerRecord0.offset());
      assertEquals(0, consumerRecord0.serializedKeySize());
      assertEquals(8, consumerRecord0.serializedValueSize());
      assertEquals("failed: (<= 1 months 12)", consumerRecord0.topic());
      assertEquals(TimestampType.LOG_APPEND_TIME, consumerRecord0.timestampType());
      assertEquals(8, consumerRecord0.partition());
      assertEquals("failed: (<= 1 months 12)", kafkaSpoutMessageId0.topic());
      assertEquals(8, kafkaSpoutMessageId0.partition());
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertEquals(7L, kafkaSpoutMessageId0.offset());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertEquals("{topic-partition=failed: (<= 1 months 12)-8, offset=7, numFails=0, thread='MockThread-0'}", string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(long1.equals((Object)long0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals((-1L), ConsumerRecord.NO_TIMESTAMP);
      assertEquals((-1), ConsumerRecord.NULL_CHECKSUM);
      assertEquals((-1), ConsumerRecord.NULL_SIZE);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      
      boolean boolean0 = kafkaSpoutMessageId0.equals(string1);
      assertEquals(0L, consumerRecord0.timestamp());
      assertEquals(7L, consumerRecord0.offset());
      assertEquals(0, consumerRecord0.serializedKeySize());
      assertEquals(8, consumerRecord0.serializedValueSize());
      assertEquals("failed: (<= 1 months 12)", consumerRecord0.topic());
      assertEquals(TimestampType.LOG_APPEND_TIME, consumerRecord0.timestampType());
      assertEquals(8, consumerRecord0.partition());
      assertEquals("failed: (<= 1 months 12)", kafkaSpoutMessageId0.topic());
      assertEquals(8, kafkaSpoutMessageId0.partition());
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertEquals(7L, kafkaSpoutMessageId0.offset());
      assertFalse(boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(long1.equals((Object)long0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals((-1L), ConsumerRecord.NO_TIMESTAMP);
      assertEquals((-1), ConsumerRecord.NULL_CHECKSUM);
      assertEquals((-1), ConsumerRecord.NULL_SIZE);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      
      boolean boolean1 = kafkaSpout_OffsetEntry0.contains(kafkaSpoutMessageId0);
      assertEquals(0L, consumerRecord0.timestamp());
      assertEquals(7L, consumerRecord0.offset());
      assertEquals(0, consumerRecord0.serializedKeySize());
      assertEquals(8, consumerRecord0.serializedValueSize());
      assertEquals("failed: (<= 1 months 12)", consumerRecord0.topic());
      assertEquals(TimestampType.LOG_APPEND_TIME, consumerRecord0.timestampType());
      assertEquals(8, consumerRecord0.partition());
      assertEquals("failed: (<= 1 months 12)", kafkaSpoutMessageId0.topic());
      assertEquals(8, kafkaSpoutMessageId0.partition());
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertEquals(7L, kafkaSpoutMessageId0.offset());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(long1.equals((Object)long0));
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals((-1L), ConsumerRecord.NO_TIMESTAMP);
      assertEquals((-1), ConsumerRecord.NULL_CHECKSUM);
      assertEquals((-1), ConsumerRecord.NULL_SIZE);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry1 = kafkaSpout0.new OffsetEntry();
      assertNotNull(kafkaSpout_OffsetEntry1);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout_OffsetEntry1.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry1.initialFetchOffset);
      
      TopicPartition topicPartition0 = kafkaSpout_OffsetEntry1.tp;
      assertNull(topicPartition0);
      
      long long2 = (-4077L);
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry2 = kafkaSpout0.new OffsetEntry(topicPartition0, long2);
      assertNotNull(kafkaSpout_OffsetEntry2);
      assertFalse(long2 == long0);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout_OffsetEntry1.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry1.initialFetchOffset);
      assertEquals((-4077L), kafkaSpout_OffsetEntry2.initialFetchOffset);
      assertEquals((-4078L), kafkaSpout_OffsetEntry2.committedOffset);
      
      OffsetAndMetadata offsetAndMetadata0 = new OffsetAndMetadata(int0, string1);
      assertNotNull(offsetAndMetadata0);
      assertEquals(8L, offsetAndMetadata0.offset());
      assertEquals("QzaQnL(6']}dP!q-", offsetAndMetadata0.metadata());
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      
      kafkaSpout_OffsetEntry2.commit(offsetAndMetadata0);
      assertEquals(8L, offsetAndMetadata0.offset());
      assertEquals("QzaQnL(6']}dP!q-", offsetAndMetadata0.metadata());
      assertFalse(long2 == long0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertEquals((-4086L), kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout_OffsetEntry1.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry1.initialFetchOffset);
      assertEquals((-4077L), kafkaSpout_OffsetEntry2.initialFetchOffset);
      assertEquals(8L, kafkaSpout_OffsetEntry2.committedOffset);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 11000)
  public void test026()  throws Throwable  {
      KafkaSpoutConfig<OffsetAndMetadata, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig0 = (KafkaSpoutConfig<OffsetAndMetadata, KafkaSpoutStreamsWildcardTopics>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<OffsetAndMetadata, KafkaSpoutStreamsWildcardTopics> kafkaSpout0 = new KafkaSpout<OffsetAndMetadata, KafkaSpoutStreamsWildcardTopics>(kafkaSpoutConfig0);
      assertNotNull(kafkaSpout0);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      
      // Undeclared exception!
      try { 
        kafkaSpout0.doSeekRetriableTopicPartitions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test027()  throws Throwable  {
      KafkaSpout.OffsetComparator kafkaSpout_OffsetComparator0 = new KafkaSpout.OffsetComparator();
      assertNotNull(kafkaSpout_OffsetComparator0);
      
      KafkaSpout<KafkaSpoutStreamsWildcardTopics, Integer> kafkaSpout0 = new KafkaSpout<KafkaSpoutStreamsWildcardTopics, Integer>();
      assertNotNull(kafkaSpout0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      
      String string0 = "e~FyU!Y3b\"Wq6";
      int int0 = 0;
      TopicPartition topicPartition0 = new TopicPartition(string0, int0);
      assertNotNull(topicPartition0);
      assertEquals(0, topicPartition0.partition());
      assertEquals("e~FyU!Y3b\"Wq6", topicPartition0.topic());
      
      long long0 = 0L;
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout0.new OffsetEntry(topicPartition0, long0);
      assertNotNull(kafkaSpout_OffsetEntry0);
      assertEquals(0, topicPartition0.partition());
      assertEquals("e~FyU!Y3b\"Wq6", topicPartition0.topic());
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals((-1L), kafkaSpout_OffsetEntry0.committedOffset);
      
      TopicPartition topicPartition1 = kafkaSpout_OffsetEntry0.tp;
      assertNotNull(topicPartition1);
      assertEquals(0, topicPartition1.partition());
      assertEquals("e~FyU!Y3b\"Wq6", topicPartition1.topic());
      assertSame(topicPartition1, topicPartition0);
      
      KafkaSpoutMessageId kafkaSpoutMessageId0 = new KafkaSpoutMessageId(topicPartition1, long0);
      assertNotNull(kafkaSpoutMessageId0);
      assertEquals(0, topicPartition0.partition());
      assertEquals("e~FyU!Y3b\"Wq6", topicPartition0.topic());
      assertEquals(0, topicPartition1.partition());
      assertEquals("e~FyU!Y3b\"Wq6", topicPartition1.topic());
      assertEquals("e~FyU!Y3b\"Wq6", kafkaSpoutMessageId0.topic());
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertEquals(0L, kafkaSpoutMessageId0.offset());
      assertEquals(0, kafkaSpoutMessageId0.partition());
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals((-1L), kafkaSpout_OffsetEntry0.committedOffset);
      
      int int1 = kafkaSpout_OffsetComparator0.compare(kafkaSpoutMessageId0, kafkaSpoutMessageId0);
      assertEquals(0, topicPartition0.partition());
      assertEquals("e~FyU!Y3b\"Wq6", topicPartition0.topic());
      assertEquals(0, topicPartition1.partition());
      assertEquals("e~FyU!Y3b\"Wq6", topicPartition1.topic());
      assertEquals("e~FyU!Y3b\"Wq6", kafkaSpoutMessageId0.topic());
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertEquals(0L, kafkaSpoutMessageId0.offset());
      assertEquals(0, kafkaSpoutMessageId0.partition());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals((-1L), kafkaSpout_OffsetEntry0.committedOffset);
      assertSame(topicPartition0, topicPartition1);
      assertSame(topicPartition1, topicPartition0);
      
      KafkaSpout<Object, KafkaSpoutStreamsWildcardTopics> kafkaSpout1 = null;
      try {
        kafkaSpout1 = new KafkaSpout<Object, KafkaSpoutStreamsWildcardTopics>(kafkaSpout0.kafkaSpoutConfig);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test028()  throws Throwable  {
      KafkaSpoutConfig<Integer, Integer> kafkaSpoutConfig0 = null;
      KafkaSpout<Integer, Integer> kafkaSpout0 = null;
      try {
        kafkaSpout0 = new KafkaSpout<Integer, Integer>(kafkaSpoutConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test029()  throws Throwable  {
      KafkaSpout<Integer, KafkaSpout<Integer, Object>> kafkaSpout0 = new KafkaSpout<Integer, KafkaSpout<Integer, Object>>();
      assertNotNull(kafkaSpout0);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      
      String string0 = kafkaSpout0.toString();
      assertNotNull(string0);
      assertEquals("KafkaSpout{acked=null, emitted=null}", string0);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      
      // Undeclared exception!
      try { 
        kafkaSpout0.emit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test030()  throws Throwable  {
      KafkaSpoutConfig<Object, Delayed> kafkaSpoutConfig0 = (KafkaSpoutConfig<Object, Delayed>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<Object, Delayed> kafkaSpout0 = new KafkaSpout<Object, Delayed>(kafkaSpoutConfig0);
      assertNotNull(kafkaSpout0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      KafkaSpout.Timer kafkaSpout_Timer0 = kafkaSpout0.new Timer(kafkaSpoutConfig0.DEFAULT_OFFSET_COMMIT_PERIOD_MS, kafkaSpout0.maxRetries, timeUnit0);
      assertNotNull(kafkaSpout_Timer0);
      assertEquals(TimeUnit.HOURS, kafkaSpout_Timer0.getTimeUnit());
      assertEquals(0L, kafkaSpout_Timer0.period());
      assertEquals(30000L, kafkaSpout_Timer0.delay());
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(30000L, kafkaSpout_Timer0.delay);
      assertEquals(0L, kafkaSpout_Timer0.period);
      assertEquals(0L, kafkaSpout_Timer0.periodNanos);
      assertEquals(109392409281320000L, kafkaSpout_Timer0.start);
      
      TimeUnit timeUnit1 = kafkaSpout_Timer0.getTimeUnit();
      assertEquals(TimeUnit.HOURS, kafkaSpout_Timer0.getTimeUnit());
      assertEquals(0L, kafkaSpout_Timer0.period());
      assertEquals(30000L, kafkaSpout_Timer0.delay());
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(30000L, kafkaSpout_Timer0.delay);
      assertEquals(0L, kafkaSpout_Timer0.period);
      assertEquals(0L, kafkaSpout_Timer0.periodNanos);
      assertEquals(109392409281320000L, kafkaSpout_Timer0.start);
      assertSame(timeUnit0, timeUnit1);
      assertSame(timeUnit1, timeUnit0);
  }

  @Test(timeout = 11000)
  public void test031()  throws Throwable  {
      KafkaConsumerFactoryDefault<KafkaSpoutStreamsNamedTopics, TopicPartition> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<KafkaSpoutStreamsNamedTopics, TopicPartition>();
      assertNotNull(kafkaConsumerFactoryDefault0);
      
      KafkaSpout<OffsetAndMetadata, OffsetAndMetadata> kafkaSpout0 = new KafkaSpout<OffsetAndMetadata, OffsetAndMetadata>();
      assertNotNull(kafkaSpout0);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      
      // Undeclared exception!
      try { 
        kafkaSpout0.ack(kafkaConsumerFactoryDefault0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.storm.kafka.spout.internal.KafkaConsumerFactoryDefault cannot be cast to org.apache.storm.kafka.spout.KafkaSpoutMessageId
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test032()  throws Throwable  {
      KafkaSpout<AbstractMap.SimpleImmutableEntry<ClusterSummary._Fields, Integer>, SQLWarning> kafkaSpout0 = new KafkaSpout<AbstractMap.SimpleImmutableEntry<ClusterSummary._Fields, Integer>, SQLWarning>();
      assertNotNull(kafkaSpout0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      
      String string0 = "~i59^.wS%GPE";
      TopicPartition topicPartition0 = new TopicPartition(string0, kafkaSpout0.maxRetries);
      assertNotNull(topicPartition0);
      assertEquals("~i59^.wS%GPE", topicPartition0.topic());
      assertEquals(0, topicPartition0.partition());
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      
      boolean boolean0 = topicPartition0.equals(kafkaSpout0);
      assertEquals("~i59^.wS%GPE", topicPartition0.topic());
      assertEquals(0, topicPartition0.partition());
      assertFalse(boolean0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      
      long long0 = 1L;
      // Undeclared exception!
      try { 
        kafkaSpout0.setAcked(topicPartition0, long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test033()  throws Throwable  {
      KafkaSpout.OffsetComparator kafkaSpout_OffsetComparator0 = new KafkaSpout.OffsetComparator();
      assertNotNull(kafkaSpout_OffsetComparator0);
      
      TopicPartition topicPartition0 = null;
      ToDoubleFunction<Object> toDoubleFunction0 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = Comparator.comparingDouble((ToDoubleFunction<? super Object>) toDoubleFunction0);
      assertNotNull(comparator0);
      
      long long0 = 0L;
      KafkaSpoutMessageId kafkaSpoutMessageId0 = new KafkaSpoutMessageId(topicPartition0, long0);
      assertNotNull(kafkaSpoutMessageId0);
      assertEquals(0L, kafkaSpoutMessageId0.offset());
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      
      boolean boolean0 = kafkaSpoutMessageId0.equals(comparator0);
      assertEquals(0L, kafkaSpoutMessageId0.offset());
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertFalse(boolean0);
      
      int int0 = kafkaSpout_OffsetComparator0.compare(kafkaSpoutMessageId0, kafkaSpoutMessageId0);
      assertEquals(0L, kafkaSpoutMessageId0.offset());
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertEquals(0, int0);
      
      KafkaSpoutConfig<ForkJoinTask<KafkaSpoutStreamsNamedTopics>, ClusterSummary._Fields> kafkaSpoutConfig0 = null;
      KafkaConsumerFactoryDefault<ForkJoinTask<KafkaSpoutStreamsNamedTopics>, ClusterSummary._Fields> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<ForkJoinTask<KafkaSpoutStreamsNamedTopics>, ClusterSummary._Fields>();
      assertNotNull(kafkaConsumerFactoryDefault0);
      
      KafkaSpout<ForkJoinTask<KafkaSpoutStreamsNamedTopics>, ClusterSummary._Fields> kafkaSpout0 = null;
      try {
        kafkaSpout0 = new KafkaSpout<ForkJoinTask<KafkaSpoutStreamsNamedTopics>, ClusterSummary._Fields>(kafkaSpoutConfig0, kafkaConsumerFactoryDefault0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test034()  throws Throwable  {
      KafkaSpoutConfig<Integer, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig0 = (KafkaSpoutConfig<Integer, KafkaSpoutStreamsNamedTopics>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<Integer, KafkaSpoutStreamsNamedTopics> kafkaSpout0 = new KafkaSpout<Integer, KafkaSpoutStreamsNamedTopics>(kafkaSpoutConfig0);
      assertNotNull(kafkaSpout0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      
      String string0 = "&`Dx='1*N";
      TopicPartition topicPartition0 = new TopicPartition(string0, kafkaSpoutConfig0.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertNotNull(topicPartition0);
      assertEquals(10000000, topicPartition0.partition());
      assertEquals("&`Dx='1*N", topicPartition0.topic());
      
      // Undeclared exception!
      try { 
        kafkaSpout0.ack(topicPartition0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.kafka.common.TopicPartition cannot be cast to org.apache.storm.kafka.spout.KafkaSpoutMessageId
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test035()  throws Throwable  {
      KafkaSpoutConfig<ClusterSummary._Fields, TopicPartition> kafkaSpoutConfig0 = (KafkaSpoutConfig<ClusterSummary._Fields, TopicPartition>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<ClusterSummary._Fields, TopicPartition> kafkaSpout0 = new KafkaSpout<ClusterSummary._Fields, TopicPartition>(kafkaSpoutConfig0);
      assertNotNull(kafkaSpout0);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout0.new OffsetEntry();
      assertNotNull(kafkaSpout_OffsetEntry0);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      
      TopicPartition topicPartition0 = kafkaSpout_OffsetEntry0.tp;
      assertNull(topicPartition0);
      
      // Undeclared exception!
      try { 
        kafkaSpout0.setAcked(topicPartition0, kafkaSpoutConfig0.DEFAULT_MAX_RETRIES);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test036()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, CombinedMetric> kafkaSpoutConfig0 = (KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, CombinedMetric>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((Map) null).when(kafkaSpoutConfig0).getKafkaProps();
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      doReturn((Deserializer) null).when(kafkaSpoutConfig0).getKeyDeserializer();
      doReturn((Deserializer) null).when(kafkaSpoutConfig0).getValueDeserializer();
      KafkaSpout<KafkaSpoutStreamsNamedTopics, CombinedMetric> kafkaSpout0 = new KafkaSpout<KafkaSpoutStreamsNamedTopics, CombinedMetric>(kafkaSpoutConfig0);
      assertNotNull(kafkaSpout0);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      
      String string0 = "";
      int int0 = 0;
      ConsumerRecords<KafkaSpoutStreamsNamedTopics, CombinedMetric> consumerRecords0 = ConsumerRecords.empty();
      assertNotNull(consumerRecords0);
      assertTrue(consumerRecords0.isEmpty());
      
      kafkaSpout0.setWaitingToEmit(consumerRecords0);
      assertTrue(consumerRecords0.isEmpty());
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      
      long long0 = 0L;
      long long1 = 200L;
      TimestampType timestampType0 = TimestampType.CREATE_TIME;
      int int1 = (-1116);
      // Undeclared exception!
      try { 
        kafkaSpout0.subscribeKafkaConsumer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test037()  throws Throwable  {
      KafkaSpout<Integer, TopicPartition> kafkaSpout0 = new KafkaSpout<Integer, TopicPartition>();
      assertNotNull(kafkaSpout0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      
      KafkaSpout.Timer kafkaSpout_Timer0 = kafkaSpout0.new Timer();
      assertNotNull(kafkaSpout_Timer0);
      assertEquals(0L, kafkaSpout_Timer0.delay());
      assertEquals(0L, kafkaSpout_Timer0.period());
      assertNull(kafkaSpout_Timer0.getTimeUnit());
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout_Timer0.delay);
      assertEquals(0L, kafkaSpout_Timer0.start);
      assertEquals(0L, kafkaSpout_Timer0.periodNanos);
      assertEquals(0L, kafkaSpout_Timer0.period);
      
      boolean boolean0 = kafkaSpout_Timer0.isExpiredResetOnTrue();
      assertEquals(0L, kafkaSpout_Timer0.delay());
      assertEquals(0L, kafkaSpout_Timer0.period());
      assertNull(kafkaSpout_Timer0.getTimeUnit());
      assertTrue(boolean0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout_Timer0.delay);
      assertEquals(0L, kafkaSpout_Timer0.periodNanos);
      assertEquals(0L, kafkaSpout_Timer0.period);
      assertEquals(1392409281320000L, kafkaSpout_Timer0.start);
      
      KafkaSpout<ClusterSummary._Fields, TopicPartition> kafkaSpout1 = new KafkaSpout<ClusterSummary._Fields, TopicPartition>();
      assertNotNull(kafkaSpout1);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      
      // Undeclared exception!
      try { 
        kafkaSpout1.commit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test038()  throws Throwable  {
      KafkaSpout<TopicPartition, TopicPartition> kafkaSpout0 = new KafkaSpout<TopicPartition, TopicPartition>();
      assertNotNull(kafkaSpout0);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      
      TopicPartition topicPartition0 = null;
      // Undeclared exception!
      try { 
        kafkaSpout0.getWildCardTopics();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test039()  throws Throwable  {
      KafkaSpoutConfig<ConsumerRecord<TopicPartition, String>, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig0 = (KafkaSpoutConfig<ConsumerRecord<TopicPartition, String>, KafkaSpoutStreamsWildcardTopics>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((Map) null).when(kafkaSpoutConfig0).getKafkaProps();
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      doReturn((Deserializer) null).when(kafkaSpoutConfig0).getKeyDeserializer();
      doReturn((Deserializer) null).when(kafkaSpoutConfig0).getValueDeserializer();
      KafkaSpout<ConsumerRecord<TopicPartition, String>, KafkaSpoutStreamsWildcardTopics> kafkaSpout0 = new KafkaSpout<ConsumerRecord<TopicPartition, String>, KafkaSpoutStreamsWildcardTopics>(kafkaSpoutConfig0);
      assertNotNull(kafkaSpout0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      
      String string0 = "";
      boolean boolean0 = false;
      kafkaSpout0.consumerAutoCommitMode = boolean0;
      TopicPartition topicPartition0 = new TopicPartition(string0, kafkaSpoutConfig0.DEFAULT_MAX_RETRIES);
      assertNotNull(topicPartition0);
      assertEquals(Integer.MAX_VALUE, topicPartition0.partition());
      assertEquals("", topicPartition0.topic());
      
      Collection<TopicPartition> collection0 = kafkaSpout0.toArrayList(topicPartition0);
      assertNotNull(collection0);
      assertEquals(Integer.MAX_VALUE, topicPartition0.partition());
      assertEquals("", topicPartition0.topic());
      assertTrue(collection0.contains(topicPartition0));
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      
      // Undeclared exception!
      try { 
        kafkaSpout0.activate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test040()  throws Throwable  {
      KafkaSpout<KafkaSpoutStreamsNamedTopics, KafkaSpoutStreamsWildcardTopics> kafkaSpout0 = new KafkaSpout<KafkaSpoutStreamsNamedTopics, KafkaSpoutStreamsWildcardTopics>();
      assertNotNull(kafkaSpout0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      
      // Undeclared exception!
      try { 
        kafkaSpout0.getNamedTopics();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test041()  throws Throwable  {
      KafkaSpoutConfig<String, OffsetAndMetadata> kafkaSpoutConfig0 = (KafkaSpoutConfig<String, OffsetAndMetadata>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      doReturn((List) null).when(kafkaSpoutConfig0).getSubscribedTopics();
      KafkaSpout<String, OffsetAndMetadata> kafkaSpout0 = new KafkaSpout<String, OffsetAndMetadata>(kafkaSpoutConfig0);
      assertNotNull(kafkaSpout0);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      
      // Undeclared exception!
      try { 
        kafkaSpout0.getNamedTopics();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test042()  throws Throwable  {
      KafkaSpout<OffsetAndMetadata, String> kafkaSpout0 = new KafkaSpout<OffsetAndMetadata, String>();
      assertNotNull(kafkaSpout0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout0.new OffsetEntry();
      assertNotNull(kafkaSpout_OffsetEntry0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      
      long long0 = (-861L);
      long long1 = 1750L;
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      KafkaSpout.Timer kafkaSpout_Timer0 = kafkaSpout0.new Timer(long0, long1, timeUnit0);
      assertNotNull(kafkaSpout_Timer0);
      assertEquals(TimeUnit.HOURS, kafkaSpout_Timer0.getTimeUnit());
      assertEquals((-861L), kafkaSpout_Timer0.delay());
      assertEquals(1750L, kafkaSpout_Timer0.period());
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(6300000000000000L, kafkaSpout_Timer0.periodNanos);
      assertEquals(1750L, kafkaSpout_Timer0.period);
      assertEquals((-1707190718680000L), kafkaSpout_Timer0.start);
      assertEquals((-861L), kafkaSpout_Timer0.delay);
      
      kafkaSpout0.commitTimer = kafkaSpout_Timer0;
      assertEquals(TimeUnit.HOURS, kafkaSpout_Timer0.getTimeUnit());
      assertEquals((-861L), kafkaSpout_Timer0.delay());
      assertEquals(1750L, kafkaSpout_Timer0.period());
      assertEquals(TimeUnit.HOURS, kafkaSpout0.commitTimer.getTimeUnit());
      assertEquals((-861L), kafkaSpout0.commitTimer.delay());
      assertEquals(1750L, kafkaSpout0.commitTimer.period());
      
      TopicPartition topicPartition0 = kafkaSpout_OffsetEntry0.tp;
      assertNull(topicPartition0);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry1 = kafkaSpout0.new OffsetEntry(topicPartition0, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertNotNull(kafkaSpout_OffsetEntry1);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals((-1L), kafkaSpout_OffsetEntry1.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry1.initialFetchOffset);
      
      boolean boolean0 = kafkaSpout_OffsetEntry1.isEmpty();
      assertTrue(boolean0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals((-1L), kafkaSpout_OffsetEntry1.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry1.initialFetchOffset);
  }

  @Test(timeout = 11000)
  public void test043()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, OffsetAndMetadata> kafkaSpoutConfig0 = (KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, OffsetAndMetadata>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null, (KafkaSpoutStreams) null, (KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaConsumerFactoryDefault<KafkaSpoutStreamsWildcardTopics, OffsetAndMetadata> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<KafkaSpoutStreamsWildcardTopics, OffsetAndMetadata>();
      assertNotNull(kafkaConsumerFactoryDefault0);
      
      KafkaSpout<KafkaSpoutStreamsWildcardTopics, OffsetAndMetadata> kafkaSpout0 = new KafkaSpout<KafkaSpoutStreamsWildcardTopics, OffsetAndMetadata>(kafkaSpoutConfig0, kafkaConsumerFactoryDefault0);
      assertNotNull(kafkaSpout0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      
      long long0 = 1462L;
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      KafkaSpout.Timer kafkaSpout_Timer0 = kafkaSpout0.new Timer(kafkaSpoutConfig0.DEFAULT_OFFSET_COMMIT_PERIOD_MS, long0, timeUnit0);
      assertNotNull(kafkaSpout_Timer0);
      assertEquals(1462L, kafkaSpout_Timer0.period());
      assertEquals(TimeUnit.HOURS, kafkaSpout_Timer0.getTimeUnit());
      assertEquals(30000L, kafkaSpout_Timer0.delay());
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(5263200000000000L, kafkaSpout_Timer0.periodNanos);
      assertEquals(109392409281320000L, kafkaSpout_Timer0.start);
      assertEquals(1462L, kafkaSpout_Timer0.period);
      assertEquals(30000L, kafkaSpout_Timer0.delay);
      
      KafkaConsumerFactoryDefault<Delayed, Object> kafkaConsumerFactoryDefault1 = new KafkaConsumerFactoryDefault<Delayed, Object>();
      assertNotNull(kafkaConsumerFactoryDefault1);
      
      KafkaSpout<Delayed, Object> kafkaSpout1 = new KafkaSpout<Delayed, Object>(kafkaSpout0.kafkaSpoutConfig, kafkaConsumerFactoryDefault1);
      assertNotNull(kafkaSpout1);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      
      KafkaConsumerFactoryDefault<KafkaSpout.OffsetEntry, ClusterSummary._Fields> kafkaConsumerFactoryDefault2 = new KafkaConsumerFactoryDefault<KafkaSpout.OffsetEntry, ClusterSummary._Fields>();
      assertNotNull(kafkaConsumerFactoryDefault2);
      
      KafkaSpout<KafkaSpout.OffsetEntry, ClusterSummary._Fields> kafkaSpout2 = new KafkaSpout<KafkaSpout.OffsetEntry, ClusterSummary._Fields>(kafkaSpout0.kafkaSpoutConfig, kafkaConsumerFactoryDefault2);
      assertNotNull(kafkaSpout2);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout2.initialized);
      assertEquals(0, kafkaSpout2.maxRetries);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      
      // Undeclared exception!
      try { 
        kafkaSpout2.commit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test044()  throws Throwable  {
      KafkaSpoutConfig<TopicPartition, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig0 = (KafkaSpoutConfig<TopicPartition, KafkaSpoutStreamsNamedTopics>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      doReturn((Pattern) null).when(kafkaSpoutConfig0).getTopicWildcardPattern();
      KafkaConsumerFactoryDefault<TopicPartition, KafkaSpoutStreamsNamedTopics> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<TopicPartition, KafkaSpoutStreamsNamedTopics>();
      assertNotNull(kafkaConsumerFactoryDefault0);
      
      KafkaSpout<TopicPartition, KafkaSpoutStreamsNamedTopics> kafkaSpout0 = new KafkaSpout<TopicPartition, KafkaSpoutStreamsNamedTopics>(kafkaSpoutConfig0, kafkaConsumerFactoryDefault0);
      assertNotNull(kafkaSpout0);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      
      KafkaSpout.OFFSET_COMPARATOR = kafkaSpout0.OFFSET_COMPARATOR;
      // Undeclared exception!
      try { 
        kafkaSpout0.getWildCardTopics();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test045()  throws Throwable  {
      KafkaSpout<Delayed, ClusterSummary._Fields> kafkaSpout0 = new KafkaSpout<Delayed, ClusterSummary._Fields>();
      assertNotNull(kafkaSpout0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      
      boolean boolean0 = true;
      kafkaSpout0.consumerAutoCommitMode = boolean0;
      KafkaSpoutConfig<Delayed, ClusterSummary._Fields> kafkaSpoutConfig0 = (KafkaSpoutConfig<Delayed, ClusterSummary._Fields>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(kafkaSpoutConfig0).getSubscribedTopics();
      kafkaSpout0.kafkaSpoutConfig = kafkaSpoutConfig0;
      assertEquals(0, kafkaSpout0.kafkaSpoutConfig.getMaxTupleRetries());
      assertNull(kafkaSpout0.kafkaSpoutConfig.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpout0.kafkaSpoutConfig.getPollTimeoutMs());
      assertNull(kafkaSpout0.kafkaSpoutConfig.getConsumerGroupId());
      assertEquals(0, kafkaSpout0.kafkaSpoutConfig.getMaxUncommittedOffsets());
      assertFalse(kafkaSpout0.kafkaSpoutConfig.isConsumerAutoCommitMode());
      assertEquals(0L, kafkaSpout0.kafkaSpoutConfig.getOffsetsCommitPeriodMs());
      
      KafkaSpout.Timer kafkaSpout_Timer0 = kafkaSpout0.new Timer();
      assertNotNull(kafkaSpout_Timer0);
      assertNull(kafkaSpout_Timer0.getTimeUnit());
      assertEquals(0L, kafkaSpout_Timer0.period());
      assertEquals(0L, kafkaSpout_Timer0.delay());
      assertTrue(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout_Timer0.periodNanos);
      assertEquals(0L, kafkaSpout_Timer0.start);
      assertEquals(0L, kafkaSpout_Timer0.delay);
      assertEquals(0L, kafkaSpout_Timer0.period);
      
      kafkaSpout0.commitTimer = kafkaSpout_Timer0;
      assertNull(kafkaSpout_Timer0.getTimeUnit());
      assertEquals(0L, kafkaSpout_Timer0.period());
      assertEquals(0L, kafkaSpout_Timer0.delay());
      assertEquals(0L, kafkaSpout0.commitTimer.period());
      assertEquals(0L, kafkaSpout0.commitTimer.delay());
      assertNull(kafkaSpout0.commitTimer.getTimeUnit());
      
      // Undeclared exception!
      try { 
        kafkaSpout0.getNamedTopics();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test046()  throws Throwable  {
      KafkaSpoutConfig<ConsumerRecord<KafkaSpoutStreamsWildcardTopics, OffsetAndMetadata>, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig0 = (KafkaSpoutConfig<ConsumerRecord<KafkaSpoutStreamsWildcardTopics, OffsetAndMetadata>, KafkaSpoutStreamsNamedTopics>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<ConsumerRecord<KafkaSpoutStreamsWildcardTopics, OffsetAndMetadata>, KafkaSpoutStreamsNamedTopics> kafkaSpout0 = new KafkaSpout<ConsumerRecord<KafkaSpoutStreamsWildcardTopics, OffsetAndMetadata>, KafkaSpoutStreamsNamedTopics>(kafkaSpoutConfig0);
      assertNotNull(kafkaSpout0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      
      boolean boolean0 = false;
      kafkaSpout0.consumerAutoCommitMode = boolean0;
      // Undeclared exception!
      try { 
        kafkaSpout0.doSeekRetriableTopicPartitions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test047()  throws Throwable  {
      KafkaSpoutConfig<TopicPartition, String> kafkaSpoutConfig0 = (KafkaSpoutConfig<TopicPartition, String>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<TopicPartition, String> kafkaSpout0 = new KafkaSpout<TopicPartition, String>(kafkaSpoutConfig0);
      assertNotNull(kafkaSpout0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      
      long long0 = 0L;
      long long1 = 1503L;
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      KafkaSpout.Timer kafkaSpout_Timer0 = kafkaSpout0.new Timer(long0, long1, timeUnit0);
      assertNotNull(kafkaSpout_Timer0);
      assertEquals(0L, kafkaSpout_Timer0.delay());
      assertEquals(1503L, kafkaSpout_Timer0.period());
      assertEquals(TimeUnit.HOURS, kafkaSpout_Timer0.getTimeUnit());
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout_Timer0.delay);
      assertEquals(1503L, kafkaSpout_Timer0.period);
      assertEquals(1392409281320000L, kafkaSpout_Timer0.start);
      assertEquals(5410800000000000L, kafkaSpout_Timer0.periodNanos);
      
      boolean boolean0 = kafkaSpout_Timer0.isExpiredResetOnTrue();
      assertEquals(0L, kafkaSpout_Timer0.delay());
      assertEquals(1503L, kafkaSpout_Timer0.period());
      assertEquals(TimeUnit.HOURS, kafkaSpout_Timer0.getTimeUnit());
      assertFalse(boolean0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout_Timer0.delay);
      assertEquals(1503L, kafkaSpout_Timer0.period);
      assertEquals(1392409281320000L, kafkaSpout_Timer0.start);
      assertEquals(5410800000000000L, kafkaSpout_Timer0.periodNanos);
      
      KafkaSpoutConfig.FirstPollOffsetStrategy[] kafkaSpoutConfig_FirstPollOffsetStrategyArray0 = KafkaSpoutConfig.FirstPollOffsetStrategy.values();
      assertNotNull(kafkaSpoutConfig_FirstPollOffsetStrategyArray0);
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      
      KafkaSpout<ClusterSummary._Fields, Object> kafkaSpout1 = new KafkaSpout<ClusterSummary._Fields, Object>();
      assertNotNull(kafkaSpout1);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      
      // Undeclared exception!
      try { 
        kafkaSpout1.shutdown();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test048()  throws Throwable  {
      KafkaSpout<OffsetAndMetadata, KafkaSpoutStreamsWildcardTopics> kafkaSpout0 = new KafkaSpout<OffsetAndMetadata, KafkaSpoutStreamsWildcardTopics>();
      assertNotNull(kafkaSpout0);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      
      boolean boolean0 = true;
      kafkaSpout0.consumerAutoCommitMode = boolean0;
      boolean boolean1 = kafkaSpout0.waitingToEmit();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertTrue(kafkaSpout0.consumerAutoCommitMode);
  }

  @Test(timeout = 11000)
  public void test049()  throws Throwable  {
      KafkaSpout<TopicPartition, String> kafkaSpout0 = new KafkaSpout<TopicPartition, String>();
      assertNotNull(kafkaSpout0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      
      KafkaSpout.KafkaSpoutConsumerRebalanceListener kafkaSpout_KafkaSpoutConsumerRebalanceListener0 = kafkaSpout0.new KafkaSpoutConsumerRebalanceListener();
      assertNotNull(kafkaSpout_KafkaSpoutConsumerRebalanceListener0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) kafkaSpout0;
      objectArray0[1] = (Object) kafkaSpout_KafkaSpoutConsumerRebalanceListener0;
      objectArray0[2] = (Object) kafkaSpout_KafkaSpoutConsumerRebalanceListener0;
      objectArray0[3] = (Object) kafkaSpout_KafkaSpoutConsumerRebalanceListener0;
      objectArray0[4] = (Object) kafkaSpout0;
      objectArray0[5] = (Object) kafkaSpout0;
      objectArray0[6] = (Object) kafkaSpout0;
      objectArray0[7] = (Object) kafkaSpout_KafkaSpoutConsumerRebalanceListener0;
      PersistentHashSet persistentHashSet0 = PersistentHashSet.create(objectArray0);
      assertNotNull(persistentHashSet0);
      assertEquals(8, objectArray0.length);
      
      // Undeclared exception!
      try { 
        kafkaSpout_KafkaSpoutConsumerRebalanceListener0.onPartitionsRevoked(persistentHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout$KafkaSpoutConsumerRebalanceListener", e);
      }
  }

  @Test(timeout = 11000)
  public void test050()  throws Throwable  {
      KafkaSpoutConfig<SQLWarning, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig0 = (KafkaSpoutConfig<SQLWarning, KafkaSpoutStreamsWildcardTopics>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(kafkaSpoutConfig0).getConsumerGroupId();
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<SQLWarning, KafkaSpoutStreamsWildcardTopics> kafkaSpout0 = new KafkaSpout<SQLWarning, KafkaSpoutStreamsWildcardTopics>(kafkaSpoutConfig0);
      assertNotNull(kafkaSpout0);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      
      KafkaSpout.KafkaSpoutConsumerRebalanceListener kafkaSpout_KafkaSpoutConsumerRebalanceListener0 = kafkaSpout0.new KafkaSpoutConsumerRebalanceListener();
      assertNotNull(kafkaSpout_KafkaSpoutConsumerRebalanceListener0);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      
      LinkedTransferQueue<TopicPartition> linkedTransferQueue0 = new LinkedTransferQueue<TopicPartition>();
      assertNotNull(linkedTransferQueue0);
      
      kafkaSpout_KafkaSpoutConsumerRebalanceListener0.onPartitionsRevoked(linkedTransferQueue0);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      
      PersistentTreeSet persistentTreeSet0 = null;
      try {  
      persistentTreeSet0 = PersistentTreeSet.EMPTY;
      } catch(NoClassDefFoundError e) {}
  }

  @Test(timeout = 11000)
  public void test051()  throws Throwable  {
      KafkaSpout<SQLWarning, KafkaSpoutMessageId> kafkaSpout0 = new KafkaSpout<SQLWarning, KafkaSpoutMessageId>();
      assertNotNull(kafkaSpout0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      
      // Undeclared exception!
      try { 
        kafkaSpout0.deactivate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test052()  throws Throwable  {
      KafkaSpout<Delayed, KafkaSpoutStreamsWildcardTopics> kafkaSpout0 = new KafkaSpout<Delayed, KafkaSpoutStreamsWildcardTopics>();
      assertNotNull(kafkaSpout0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      
      // Undeclared exception!
      try { 
        kafkaSpout0.poll();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test053()  throws Throwable  {
      KafkaSpoutConfig<TopicPartition, OffsetAndMetadata> kafkaSpoutConfig0 = (KafkaSpoutConfig<TopicPartition, OffsetAndMetadata>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      doReturn(0).when(kafkaSpoutConfig0).getMaxUncommittedOffsets();
      doReturn((Pattern) null).when(kafkaSpoutConfig0).getTopicWildcardPattern();
      KafkaSpout<TopicPartition, OffsetAndMetadata> kafkaSpout0 = new KafkaSpout<TopicPartition, OffsetAndMetadata>(kafkaSpoutConfig0);
      assertNotNull(kafkaSpout0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      
      boolean boolean0 = kafkaSpout0.poll();
      assertFalse(boolean0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      
      // Undeclared exception!
      try { 
        kafkaSpout0.getWildCardTopics();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test054()  throws Throwable  {
      KafkaSpout<OffsetAndMetadata, TopicPartition> kafkaSpout0 = new KafkaSpout<OffsetAndMetadata, TopicPartition>();
      assertNotNull(kafkaSpout0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      
      // Undeclared exception!
      try { 
        kafkaSpout0.commitOffsetsForAckedTuples();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test055()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, Delayed> kafkaSpoutConfig0 = (KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, Delayed>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(kafkaSpoutConfig0).getConsumerGroupId();
      doReturn((KafkaSpoutStreams) null, (KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaConsumerFactory<KafkaSpoutStreamsWildcardTopics, Delayed> kafkaConsumerFactory0 = null;
      KafkaSpout<KafkaSpoutStreamsWildcardTopics, Delayed> kafkaSpout0 = new KafkaSpout<KafkaSpoutStreamsWildcardTopics, Delayed>(kafkaSpoutConfig0, kafkaConsumerFactory0);
      assertNotNull(kafkaSpout0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      
      KafkaSpout.KafkaSpoutConsumerRebalanceListener kafkaSpout_KafkaSpoutConsumerRebalanceListener0 = kafkaSpout0.new KafkaSpoutConsumerRebalanceListener();
      assertNotNull(kafkaSpout_KafkaSpoutConsumerRebalanceListener0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      
      PersistentHashSet persistentHashSet0 = PersistentHashSet.EMPTY;
      assertNotNull(persistentHashSet0);
      
      kafkaSpout_KafkaSpoutConsumerRebalanceListener0.onPartitionsRevoked(persistentHashSet0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      
      KafkaConsumerFactoryDefault<KafkaSpout<OffsetAndMetadata, String>, OffsetAndMetadata> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<KafkaSpout<OffsetAndMetadata, String>, OffsetAndMetadata>();
      assertNotNull(kafkaConsumerFactoryDefault0);
      
      KafkaSpout<KafkaSpout<OffsetAndMetadata, String>, OffsetAndMetadata> kafkaSpout1 = new KafkaSpout<KafkaSpout<OffsetAndMetadata, String>, OffsetAndMetadata>(kafkaSpout0.kafkaSpoutConfig, kafkaConsumerFactoryDefault0);
      assertNotNull(kafkaSpout1);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      
      // Undeclared exception!
      try { 
        kafkaSpout1.deactivate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test056()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, AbstractMap.SimpleEntry<KafkaSpoutStreamsNamedTopics, ClusterSummary._Fields>> kafkaSpoutConfig0 = (KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, AbstractMap.SimpleEntry<KafkaSpoutStreamsNamedTopics, ClusterSummary._Fields>>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      doReturn(0).when(kafkaSpoutConfig0).getMaxUncommittedOffsets();
      KafkaSpout<KafkaSpoutStreamsNamedTopics, AbstractMap.SimpleEntry<KafkaSpoutStreamsNamedTopics, ClusterSummary._Fields>> kafkaSpout0 = new KafkaSpout<KafkaSpoutStreamsNamedTopics, AbstractMap.SimpleEntry<KafkaSpoutStreamsNamedTopics, ClusterSummary._Fields>>(kafkaSpoutConfig0);
      assertNotNull(kafkaSpout0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      
      boolean boolean0 = kafkaSpout0.poll();
      assertFalse(boolean0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      
      String string0 = kafkaSpout0.toString();
      assertNotNull(string0);
      assertEquals("KafkaSpout{acked=null, emitted=null}", string0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      
      // Undeclared exception!
      try { 
        kafkaSpout0.commitOffsetsForAckedTuples();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test057()  throws Throwable  {
      KafkaSpout<KafkaSpoutStreamsNamedTopics, KafkaSpoutMessageId> kafkaSpout0 = new KafkaSpout<KafkaSpoutStreamsNamedTopics, KafkaSpoutMessageId>();
      assertNotNull(kafkaSpout0);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      
      kafkaSpout0.nextTuple();
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      
      KafkaSpout.Timer kafkaSpout_Timer0 = kafkaSpout0.new Timer();
      assertNotNull(kafkaSpout_Timer0);
      assertEquals(0L, kafkaSpout_Timer0.period());
      assertEquals(0L, kafkaSpout_Timer0.delay());
      assertNull(kafkaSpout_Timer0.getTimeUnit());
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout_Timer0.periodNanos);
      assertEquals(0L, kafkaSpout_Timer0.period);
      assertEquals(0L, kafkaSpout_Timer0.delay);
      assertEquals(0L, kafkaSpout_Timer0.start);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        KafkaSpoutConfig.FirstPollOffsetStrategy.valueOf(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 11000)
  public void test058()  throws Throwable  {
      KafkaSpout.OffsetComparator kafkaSpout_OffsetComparator0 = new KafkaSpout.OffsetComparator();
      assertNotNull(kafkaSpout_OffsetComparator0);
      
      String string0 = "";
      int int0 = 0;
      Integer integer0 = new Integer(int0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      TopicPartition topicPartition0 = new TopicPartition(string0, int0);
      assertNotNull(topicPartition0);
      assertEquals("", topicPartition0.topic());
      assertEquals(0, topicPartition0.partition());
      
      long long0 = (-3035L);
      KafkaSpoutMessageId kafkaSpoutMessageId0 = new KafkaSpoutMessageId(topicPartition0, long0);
      assertNotNull(kafkaSpoutMessageId0);
      assertEquals("", topicPartition0.topic());
      assertEquals(0, topicPartition0.partition());
      assertEquals(0, kafkaSpoutMessageId0.partition());
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertEquals((-3035L), kafkaSpoutMessageId0.offset());
      assertEquals("", kafkaSpoutMessageId0.topic());
      
      ConsumerRecord<Integer, KafkaSpoutMessageId> consumerRecord0 = new ConsumerRecord<Integer, KafkaSpoutMessageId>(string0, int0, int0, integer0, kafkaSpoutMessageId0);
      assertNotNull(consumerRecord0);
      assertEquals("", topicPartition0.topic());
      assertEquals(0, topicPartition0.partition());
      assertEquals(0, kafkaSpoutMessageId0.partition());
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertEquals((-3035L), kafkaSpoutMessageId0.offset());
      assertEquals("", kafkaSpoutMessageId0.topic());
      assertEquals(TimestampType.NO_TIMESTAMP_TYPE, consumerRecord0.timestampType());
      assertEquals("", consumerRecord0.topic());
      assertEquals((-1L), consumerRecord0.timestamp());
      assertEquals(0L, consumerRecord0.offset());
      assertEquals((-1), consumerRecord0.serializedValueSize());
      assertEquals(0, consumerRecord0.partition());
      assertEquals((-1), consumerRecord0.serializedKeySize());
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-1), ConsumerRecord.NULL_CHECKSUM);
      assertEquals((-1L), ConsumerRecord.NO_TIMESTAMP);
      assertEquals((-1), ConsumerRecord.NULL_SIZE);
      
      String string1 = consumerRecord0.toString();
      assertNotNull(string1);
      assertEquals("", topicPartition0.topic());
      assertEquals(0, topicPartition0.partition());
      assertEquals(0, kafkaSpoutMessageId0.partition());
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertEquals((-3035L), kafkaSpoutMessageId0.offset());
      assertEquals("", kafkaSpoutMessageId0.topic());
      assertEquals(TimestampType.NO_TIMESTAMP_TYPE, consumerRecord0.timestampType());
      assertEquals("", consumerRecord0.topic());
      assertEquals((-1L), consumerRecord0.timestamp());
      assertEquals(0L, consumerRecord0.offset());
      assertEquals((-1), consumerRecord0.serializedValueSize());
      assertEquals(0, consumerRecord0.partition());
      assertEquals((-1), consumerRecord0.serializedKeySize());
      assertEquals("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = {topic-partition=-0, offset=-3035, numFails=0})", string1);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(string1.equals((Object)string0));
      assertEquals((-1), ConsumerRecord.NULL_CHECKSUM);
      assertEquals((-1L), ConsumerRecord.NO_TIMESTAMP);
      assertEquals((-1), ConsumerRecord.NULL_SIZE);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      KafkaSpoutMessageId kafkaSpoutMessageId1 = new KafkaSpoutMessageId(consumerRecord0);
      assertNotNull(kafkaSpoutMessageId1);
      assertEquals("", topicPartition0.topic());
      assertEquals(0, topicPartition0.partition());
      assertEquals(0, kafkaSpoutMessageId0.partition());
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertEquals((-3035L), kafkaSpoutMessageId0.offset());
      assertEquals("", kafkaSpoutMessageId0.topic());
      assertEquals(TimestampType.NO_TIMESTAMP_TYPE, consumerRecord0.timestampType());
      assertEquals("", consumerRecord0.topic());
      assertEquals((-1L), consumerRecord0.timestamp());
      assertEquals(0L, consumerRecord0.offset());
      assertEquals((-1), consumerRecord0.serializedValueSize());
      assertEquals(0, consumerRecord0.partition());
      assertEquals((-1), consumerRecord0.serializedKeySize());
      assertEquals("", kafkaSpoutMessageId1.topic());
      assertEquals(0, kafkaSpoutMessageId1.numFails());
      assertEquals(0, kafkaSpoutMessageId1.partition());
      assertEquals(0L, kafkaSpoutMessageId1.offset());
      assertFalse(string0.equals((Object)string1));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(kafkaSpoutMessageId1.equals((Object)kafkaSpoutMessageId0));
      assertEquals((-1), ConsumerRecord.NULL_CHECKSUM);
      assertEquals((-1L), ConsumerRecord.NO_TIMESTAMP);
      assertEquals((-1), ConsumerRecord.NULL_SIZE);
      
      int int1 = kafkaSpout_OffsetComparator0.compare(kafkaSpoutMessageId1, kafkaSpoutMessageId0);
      assertEquals("", topicPartition0.topic());
      assertEquals(0, topicPartition0.partition());
      assertEquals(0, kafkaSpoutMessageId0.partition());
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertEquals((-3035L), kafkaSpoutMessageId0.offset());
      assertEquals("", kafkaSpoutMessageId0.topic());
      assertEquals(TimestampType.NO_TIMESTAMP_TYPE, consumerRecord0.timestampType());
      assertEquals("", consumerRecord0.topic());
      assertEquals((-1L), consumerRecord0.timestamp());
      assertEquals(0L, consumerRecord0.offset());
      assertEquals((-1), consumerRecord0.serializedValueSize());
      assertEquals(0, consumerRecord0.partition());
      assertEquals((-1), consumerRecord0.serializedKeySize());
      assertEquals("", kafkaSpoutMessageId1.topic());
      assertEquals(0, kafkaSpoutMessageId1.numFails());
      assertEquals(0, kafkaSpoutMessageId1.partition());
      assertEquals(0L, kafkaSpoutMessageId1.offset());
      assertEquals(1, int1);
      assertFalse(string0.equals((Object)string1));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(kafkaSpoutMessageId0.equals((Object)kafkaSpoutMessageId1));
      assertFalse(kafkaSpoutMessageId1.equals((Object)kafkaSpoutMessageId0));
      assertFalse(int1 == int0);
      assertEquals((-1), ConsumerRecord.NULL_CHECKSUM);
      assertEquals((-1L), ConsumerRecord.NO_TIMESTAMP);
      assertEquals((-1), ConsumerRecord.NULL_SIZE);
      assertNotSame(string0, string1);
      assertNotSame(kafkaSpoutMessageId0, kafkaSpoutMessageId1);
      assertNotSame(kafkaSpoutMessageId1, kafkaSpoutMessageId0);
      
      KafkaSpout<String, SQLWarning> kafkaSpout0 = new KafkaSpout<String, SQLWarning>();
      assertNotNull(kafkaSpout0);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      
      // Undeclared exception!
      try { 
        kafkaSpout0.getComponentConfiguration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test059()  throws Throwable  {
      KafkaSpoutConfig<AbstractMap.SimpleEntry<Integer, ClusterSummary._Fields>, Object> kafkaSpoutConfig0 = (KafkaSpoutConfig<AbstractMap.SimpleEntry<Integer, ClusterSummary._Fields>, Object>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(kafkaSpoutConfig0).getConsumerGroupId();
      doReturn((Map) null).when(kafkaSpoutConfig0).getKafkaProps();
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaConsumerFactoryDefault<AbstractMap.SimpleEntry<Integer, ClusterSummary._Fields>, Object> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<AbstractMap.SimpleEntry<Integer, ClusterSummary._Fields>, Object>();
      assertNotNull(kafkaConsumerFactoryDefault0);
      
      KafkaSpout<AbstractMap.SimpleEntry<Integer, ClusterSummary._Fields>, Object> kafkaSpout0 = new KafkaSpout<AbstractMap.SimpleEntry<Integer, ClusterSummary._Fields>, Object>(kafkaSpoutConfig0, kafkaConsumerFactoryDefault0);
      assertNotNull(kafkaSpout0);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      
      long long0 = 0L;
      ISeq iSeq0 = LongRange.create((long) kafkaSpoutConfig0.DEFAULT_MAX_UNCOMMITTED_OFFSETS, long0);
      assertNotNull(iSeq0);
      
      PersistentHashSet persistentHashSet0 = PersistentHashSet.create(iSeq0);
      assertNotNull(persistentHashSet0);
      
      kafkaSpout0.emitted = (Set<KafkaSpoutMessageId>) persistentHashSet0;
      assertFalse(kafkaSpout0.emitted.isEmpty());
      assertEquals(1, kafkaSpout0.emitted.size());
      
      // Undeclared exception!
      try { 
        kafkaSpout0.getComponentConfiguration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test060()  throws Throwable  {
      KafkaSpoutConfig<ClusterSummary._Fields, Integer> kafkaSpoutConfig0 = (KafkaSpoutConfig<ClusterSummary._Fields, Integer>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<ClusterSummary._Fields, Integer> kafkaSpout0 = new KafkaSpout<ClusterSummary._Fields, Integer>(kafkaSpoutConfig0);
      assertNotNull(kafkaSpout0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      
      KafkaSpout.KafkaSpoutConsumerRebalanceListener kafkaSpout_KafkaSpoutConsumerRebalanceListener0 = kafkaSpout0.new KafkaSpoutConsumerRebalanceListener();
      assertNotNull(kafkaSpout_KafkaSpoutConsumerRebalanceListener0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      
      TopicPartition topicPartition0 = null;
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout0.new OffsetEntry(topicPartition0, kafkaSpoutConfig0.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertNotNull(kafkaSpout_OffsetEntry0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(9999999L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(10000000L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      
      TopicPartition topicPartition1 = kafkaSpout_OffsetEntry0.tp;
      assertNull(topicPartition1);
      
      long long0 = 0L;
      String string0 = "7<5K:a,WGb#x";
      OffsetAndMetadata offsetAndMetadata0 = new OffsetAndMetadata(long0, string0);
      assertNotNull(offsetAndMetadata0);
      assertEquals("7<5K:a,WGb#x", offsetAndMetadata0.metadata());
      assertEquals(0L, offsetAndMetadata0.offset());
      
      // Undeclared exception!
      try { 
        kafkaSpout_KafkaSpoutConsumerRebalanceListener0.doSeek(topicPartition1, offsetAndMetadata0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout$KafkaSpoutConsumerRebalanceListener", e);
      }
  }

  @Test(timeout = 11000)
  public void test061()  throws Throwable  {
      KafkaSpoutConfig<ClusterSummary._Fields, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig0 = (KafkaSpoutConfig<ClusterSummary._Fields, KafkaSpoutStreamsWildcardTopics>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaConsumerFactoryDefault<ClusterSummary._Fields, KafkaSpoutStreamsWildcardTopics> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<ClusterSummary._Fields, KafkaSpoutStreamsWildcardTopics>();
      assertNotNull(kafkaConsumerFactoryDefault0);
      
      KafkaSpout<ClusterSummary._Fields, KafkaSpoutStreamsWildcardTopics> kafkaSpout0 = new KafkaSpout<ClusterSummary._Fields, KafkaSpoutStreamsWildcardTopics>(kafkaSpoutConfig0, kafkaConsumerFactoryDefault0);
      assertNotNull(kafkaSpout0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      
      KafkaSpoutConfig<ClusterSummary._Fields, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig1 = (KafkaSpoutConfig<ClusterSummary._Fields, KafkaSpoutStreamsWildcardTopics>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      kafkaSpout0.kafkaSpoutConfig = kafkaSpoutConfig1;
      assertEquals(0L, kafkaSpout0.kafkaSpoutConfig.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpout0.kafkaSpoutConfig.getPollTimeoutMs());
      assertNull(kafkaSpout0.kafkaSpoutConfig.getConsumerGroupId());
      assertEquals(0, kafkaSpout0.kafkaSpoutConfig.getMaxTupleRetries());
      assertFalse(kafkaSpout0.kafkaSpoutConfig.isConsumerAutoCommitMode());
      assertNull(kafkaSpout0.kafkaSpoutConfig.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpout0.kafkaSpoutConfig.getMaxUncommittedOffsets());
      
      KafkaSpout.KafkaSpoutConsumerRebalanceListener kafkaSpout_KafkaSpoutConsumerRebalanceListener0 = kafkaSpout0.new KafkaSpoutConsumerRebalanceListener();
      assertNotNull(kafkaSpout_KafkaSpoutConsumerRebalanceListener0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      
      KafkaSpout.KafkaSpoutConsumerRebalanceListener kafkaSpout_KafkaSpoutConsumerRebalanceListener1 = kafkaSpout0.new KafkaSpoutConsumerRebalanceListener();
      assertNotNull(kafkaSpout_KafkaSpoutConsumerRebalanceListener1);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      
      String string0 = "&";
      TopicPartition topicPartition0 = new TopicPartition(string0, kafkaSpoutConfig0.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertNotNull(topicPartition0);
      assertEquals(10000000, topicPartition0.partition());
      assertEquals("&", topicPartition0.topic());
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout0.new OffsetEntry();
      assertNotNull(kafkaSpout_OffsetEntry0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry1 = kafkaSpout0.new OffsetEntry(kafkaSpout_OffsetEntry0.tp, kafkaSpout0.kafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertNotNull(kafkaSpout_OffsetEntry1);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals(29999L, kafkaSpout_OffsetEntry1.committedOffset);
      assertEquals(30000L, kafkaSpout_OffsetEntry1.initialFetchOffset);
      
      NavigableSet<KafkaSpoutMessageId> navigableSet0 = kafkaSpout_OffsetEntry1.ackedMsgs;
      assertNotNull(navigableSet0);
      assertTrue(navigableSet0.isEmpty());
      assertEquals(0, navigableSet0.size());
      
      kafkaSpout_OffsetEntry0.ackedMsgs = navigableSet0;
      assertTrue(navigableSet0.isEmpty());
      assertEquals(0, navigableSet0.size());
      assertEquals(0, kafkaSpout_OffsetEntry0.ackedMsgs.size());
      assertTrue(kafkaSpout_OffsetEntry0.ackedMsgs.isEmpty());
      
      OffsetAndMetadata offsetAndMetadata0 = kafkaSpout_OffsetEntry0.findNextCommitOffset();
      assertNull(offsetAndMetadata0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      
      // Undeclared exception!
      try { 
        kafkaSpout_KafkaSpoutConsumerRebalanceListener1.doSeek(topicPartition0, offsetAndMetadata0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout$KafkaSpoutConsumerRebalanceListener", e);
      }
  }

  @Test(timeout = 11000)
  public void test062()  throws Throwable  {
      KafkaSpout<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsNamedTopics> kafkaSpout0 = new KafkaSpout<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsNamedTopics>();
      assertNotNull(kafkaSpout0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      
      KafkaSpout.Timer kafkaSpout_Timer0 = kafkaSpout0.new Timer();
      assertNotNull(kafkaSpout_Timer0);
      assertNull(kafkaSpout_Timer0.getTimeUnit());
      assertEquals(0L, kafkaSpout_Timer0.delay());
      assertEquals(0L, kafkaSpout_Timer0.period());
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout_Timer0.start);
      assertEquals(0L, kafkaSpout_Timer0.periodNanos);
      assertEquals(0L, kafkaSpout_Timer0.period);
      assertEquals(0L, kafkaSpout_Timer0.delay);
      
      long long0 = kafkaSpout_Timer0.period();
      assertNull(kafkaSpout_Timer0.getTimeUnit());
      assertEquals(0L, kafkaSpout_Timer0.delay());
      assertEquals(0L, kafkaSpout_Timer0.period());
      assertEquals(0L, long0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout_Timer0.start);
      assertEquals(0L, kafkaSpout_Timer0.periodNanos);
      assertEquals(0L, kafkaSpout_Timer0.period);
      assertEquals(0L, kafkaSpout_Timer0.delay);
      
      KafkaSpout<KafkaSpoutStreamsWildcardTopics, Integer> kafkaSpout1 = new KafkaSpout<KafkaSpoutStreamsWildcardTopics, Integer>();
      assertNotNull(kafkaSpout1);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      
      boolean boolean0 = kafkaSpout1.waitingToEmit();
      assertFalse(boolean0);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      
      KafkaSpout<Delayed, KafkaSpoutStreamsWildcardTopics> kafkaSpout2 = new KafkaSpout<Delayed, KafkaSpoutStreamsWildcardTopics>();
      assertNotNull(kafkaSpout2);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout2.maxRetries);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertFalse(kafkaSpout2.initialized);
      
      // Undeclared exception!
      try { 
        kafkaSpout2.commitOffsetsForAckedTuples();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test063()  throws Throwable  {
      KafkaSpout<Integer, KafkaSpoutStreamsNamedTopics> kafkaSpout0 = new KafkaSpout<Integer, KafkaSpoutStreamsNamedTopics>();
      assertNotNull(kafkaSpout0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout0.new OffsetEntry();
      assertNotNull(kafkaSpout_OffsetEntry0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      
      String string0 = "}nJ$|cYS@!g";
      int int0 = (-758);
      TimestampType timestampType0 = TimestampType.LOG_APPEND_TIME;
      long long0 = 680L;
      int int1 = 1153;
      ConsumerRecord<String, Integer> consumerRecord0 = new ConsumerRecord<String, Integer>(string0, int0, kafkaSpout0.numUncommittedOffsets, kafkaSpout0.maxRetries, timestampType0, long0, int1, kafkaSpout0.maxRetries, string0, (Integer) kafkaSpout0.maxRetries);
      assertNotNull(consumerRecord0);
      assertEquals(0L, consumerRecord0.offset());
      assertEquals(1153, consumerRecord0.serializedKeySize());
      assertEquals(0, consumerRecord0.serializedValueSize());
      assertEquals((-758), consumerRecord0.partition());
      assertEquals("}nJ$|cYS@!g", consumerRecord0.topic());
      assertEquals(0L, consumerRecord0.timestamp());
      assertEquals(TimestampType.LOG_APPEND_TIME, consumerRecord0.timestampType());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals((-1), ConsumerRecord.NULL_SIZE);
      assertEquals((-1L), ConsumerRecord.NO_TIMESTAMP);
      assertEquals((-1), ConsumerRecord.NULL_CHECKSUM);
      
      boolean boolean0 = kafkaSpout_OffsetEntry0.contains(consumerRecord0);
      assertEquals(0L, consumerRecord0.offset());
      assertEquals(1153, consumerRecord0.serializedKeySize());
      assertEquals(0, consumerRecord0.serializedValueSize());
      assertEquals((-758), consumerRecord0.partition());
      assertEquals("}nJ$|cYS@!g", consumerRecord0.topic());
      assertEquals(0L, consumerRecord0.timestamp());
      assertEquals(TimestampType.LOG_APPEND_TIME, consumerRecord0.timestampType());
      assertFalse(boolean0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals((-1), ConsumerRecord.NULL_SIZE);
      assertEquals((-1L), ConsumerRecord.NO_TIMESTAMP);
      assertEquals((-1), ConsumerRecord.NULL_CHECKSUM);
      
      String string1 = kafkaSpout_OffsetEntry0.toString();
      assertNotNull(string1);
      assertEquals("OffsetEntry{topic-partition=null, fetchOffset=0, committedOffset=0, ackedMsgs=[]}", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 11000)
  public void test064()  throws Throwable  {
      KafkaSpout<PersistentVector, String> kafkaSpout0 = new KafkaSpout<PersistentVector, String>();
      assertNotNull(kafkaSpout0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      
      KafkaSpout<ClusterSummary._Fields, Delayed> kafkaSpout1 = new KafkaSpout<ClusterSummary._Fields, Delayed>();
      assertNotNull(kafkaSpout1);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      
      // Undeclared exception!
      try { 
        kafkaSpout1.pollKafkaBroker();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test065()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, Integer> kafkaSpoutConfig0 = (KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, Integer>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<KafkaSpoutStreamsWildcardTopics, Integer> kafkaSpout0 = new KafkaSpout<KafkaSpoutStreamsWildcardTopics, Integer>(kafkaSpoutConfig0);
      assertNotNull(kafkaSpout0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      
      // Undeclared exception!
      try { 
        kafkaSpout0.pollKafkaBroker();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test066()  throws Throwable  {
      KafkaSpout<Object, ClusterSummary._Fields> kafkaSpout0 = new KafkaSpout<Object, ClusterSummary._Fields>();
      assertNotNull(kafkaSpout0);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      assertNotNull(delayQueue0);
      
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      Delayed delayed0 = delayQueue0.poll((long) kafkaSpout0.maxRetries, timeUnit0);
      assertNull(delayed0);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      
      // Undeclared exception!
      try { 
        kafkaSpout0.ack(delayed0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test067()  throws Throwable  {
      KafkaSpout<Object, CombinedMetric> kafkaSpout0 = new KafkaSpout<Object, CombinedMetric>();
      assertNotNull(kafkaSpout0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      
      // Undeclared exception!
      try { 
        kafkaSpout0.getNamedTopics();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test068()  throws Throwable  {
      KafkaSpoutConfig<TopicPartition, Object> kafkaSpoutConfig0 = (KafkaSpoutConfig<TopicPartition, Object>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<TopicPartition, Object> kafkaSpout0 = new KafkaSpout<TopicPartition, Object>(kafkaSpoutConfig0);
      assertNotNull(kafkaSpout0);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      
      // Undeclared exception!
      try { 
        kafkaSpout0.shutdown();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test069()  throws Throwable  {
      KafkaSpout<String, String> kafkaSpout0 = new KafkaSpout<String, String>();
      assertNotNull(kafkaSpout0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      
      String string0 = null;
      TopicPartition topicPartition0 = new TopicPartition(string0, kafkaSpout0.maxRetries);
      assertNotNull(topicPartition0);
      assertNull(topicPartition0.topic());
      assertEquals(0, topicPartition0.partition());
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      
      long long0 = (-3033L);
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout0.new OffsetEntry(topicPartition0, long0);
      assertNotNull(kafkaSpout_OffsetEntry0);
      assertNull(topicPartition0.topic());
      assertEquals(0, topicPartition0.partition());
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals((-3033L), kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals((-3034L), kafkaSpout_OffsetEntry0.committedOffset);
      
      OffsetAndMetadata offsetAndMetadata0 = kafkaSpout_OffsetEntry0.findNextCommitOffset();
      assertNull(offsetAndMetadata0);
      assertNull(topicPartition0.topic());
      assertEquals(0, topicPartition0.partition());
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals((-3033L), kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals((-3034L), kafkaSpout_OffsetEntry0.committedOffset);
  }

  @Test(timeout = 11000)
  public void test070()  throws Throwable  {
      KafkaSpout<PersistentVector, KafkaSpoutMessageId> kafkaSpout0 = new KafkaSpout<PersistentVector, KafkaSpoutMessageId>();
      assertNotNull(kafkaSpout0);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        kafkaSpout0.fail(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to org.apache.storm.kafka.spout.KafkaSpoutMessageId
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test071()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpout.OffsetEntry, KafkaSpoutMessageId> kafkaSpoutConfig0 = (KafkaSpoutConfig<KafkaSpout.OffsetEntry, KafkaSpoutMessageId>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaConsumerFactory<KafkaSpout.OffsetEntry, KafkaSpoutMessageId> kafkaConsumerFactory0 = null;
      KafkaSpout<KafkaSpout.OffsetEntry, KafkaSpoutMessageId> kafkaSpout0 = new KafkaSpout<KafkaSpout.OffsetEntry, KafkaSpoutMessageId>(kafkaSpoutConfig0, kafkaConsumerFactory0);
      assertNotNull(kafkaSpout0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      
      String string0 = "P%3|{|WA#q|";
      long long0 = 792L;
      TimestampType timestampType0 = TimestampType.NO_TIMESTAMP_TYPE;
      int int0 = (-5669);
      int int1 = 1312;
      String string1 = "LnW4rp8&YLHjxK`}nF7";
      TopicPartition topicPartition0 = new TopicPartition(string1, kafkaSpout0.maxRetries);
      assertNotNull(topicPartition0);
      assertEquals("LnW4rp8&YLHjxK`}nF7", topicPartition0.topic());
      assertEquals(0, topicPartition0.partition());
      assertFalse(string1.equals((Object)string0));
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      
      long long1 = (-1668L);
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout0.new OffsetEntry(topicPartition0, long1);
      assertNotNull(kafkaSpout_OffsetEntry0);
      assertEquals("LnW4rp8&YLHjxK`}nF7", topicPartition0.topic());
      assertEquals(0, topicPartition0.partition());
      assertFalse(string1.equals((Object)string0));
      assertFalse(long1 == long0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals((-1668L), kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals((-1669L), kafkaSpout_OffsetEntry0.committedOffset);
      
      KafkaSpoutMessageId kafkaSpoutMessageId0 = null;
      RecordHeaders recordHeaders0 = new RecordHeaders();
      assertNotNull(recordHeaders0);
      
      ByteBuffer byteBuffer0 = null;
      RecordHeader recordHeader0 = new RecordHeader(string0, byteBuffer0);
      assertNotNull(recordHeader0);
      assertEquals("P%3|{|WA#q|", recordHeader0.key());
      assertFalse(string0.equals((Object)string1));
      
      Headers headers0 = recordHeaders0.add((Header) recordHeader0);
      assertNotNull(headers0);
      assertEquals("P%3|{|WA#q|", recordHeader0.key());
      assertFalse(string0.equals((Object)string1));
      assertSame(headers0, recordHeaders0);
      assertNotSame(string0, string1);
      assertSame(recordHeaders0, headers0);
      
      ConsumerRecord<KafkaSpout.OffsetEntry, KafkaSpoutMessageId> consumerRecord0 = new ConsumerRecord<KafkaSpout.OffsetEntry, KafkaSpoutMessageId>(string0, kafkaSpoutConfig0.DEFAULT_MAX_UNCOMMITTED_OFFSETS, kafkaSpoutConfig0.DEFAULT_MAX_RETRIES, long0, timestampType0, (Long) kafkaSpoutConfig0.DEFAULT_POLL_TIMEOUT_MS, int0, int1, kafkaSpout_OffsetEntry0, kafkaSpoutMessageId0, headers0);
      assertNotNull(consumerRecord0);
      assertEquals("P%3|{|WA#q|", consumerRecord0.topic());
      assertEquals(2147483647L, consumerRecord0.offset());
      assertEquals(TimestampType.NO_TIMESTAMP_TYPE, consumerRecord0.timestampType());
      assertEquals(792L, consumerRecord0.timestamp());
      assertEquals((-5669), consumerRecord0.serializedKeySize());
      assertEquals(1312, consumerRecord0.serializedValueSize());
      assertEquals(10000000, consumerRecord0.partition());
      assertEquals("LnW4rp8&YLHjxK`}nF7", topicPartition0.topic());
      assertEquals(0, topicPartition0.partition());
      assertEquals("P%3|{|WA#q|", recordHeader0.key());
      assertFalse(string0.equals((Object)string1));
      assertFalse(long0 == long1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(long1 == long0);
      assertEquals((-1L), ConsumerRecord.NO_TIMESTAMP);
      assertEquals((-1), ConsumerRecord.NULL_CHECKSUM);
      assertEquals((-1), ConsumerRecord.NULL_SIZE);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals((-1668L), kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals((-1669L), kafkaSpout_OffsetEntry0.committedOffset);
      
      // Undeclared exception!
      try { 
        kafkaSpout0.emitTupleIfNotEmitted(consumerRecord0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test072()  throws Throwable  {
      KafkaSpout<Object, Object> kafkaSpout0 = new KafkaSpout<Object, Object>();
      assertNotNull(kafkaSpout0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      
      String string0 = "";
      int int0 = (-3615);
      TopicPartition topicPartition0 = new TopicPartition(string0, int0);
      assertNotNull(topicPartition0);
      assertEquals((-3615), topicPartition0.partition());
      assertEquals("", topicPartition0.topic());
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout0.new OffsetEntry(topicPartition0, kafkaSpout0.numUncommittedOffsets);
      assertNotNull(kafkaSpout_OffsetEntry0);
      assertEquals((-3615), topicPartition0.partition());
      assertEquals("", topicPartition0.topic());
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals((-1L), kafkaSpout_OffsetEntry0.committedOffset);
      
      long long0 = 0L;
      KafkaSpoutMessageId kafkaSpoutMessageId0 = new KafkaSpoutMessageId(kafkaSpout_OffsetEntry0.tp, long0);
      assertNotNull(kafkaSpoutMessageId0);
      assertEquals((-3615), topicPartition0.partition());
      assertEquals("", topicPartition0.topic());
      assertEquals((-3615), kafkaSpoutMessageId0.partition());
      assertEquals(0L, kafkaSpoutMessageId0.offset());
      assertEquals("", kafkaSpoutMessageId0.topic());
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals((-1L), kafkaSpout_OffsetEntry0.committedOffset);
      
      kafkaSpout_OffsetEntry0.add(kafkaSpoutMessageId0);
      assertEquals((-3615), topicPartition0.partition());
      assertEquals("", topicPartition0.topic());
      assertEquals((-3615), kafkaSpoutMessageId0.partition());
      assertEquals(0L, kafkaSpoutMessageId0.offset());
      assertEquals("", kafkaSpoutMessageId0.topic());
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals((-1L), kafkaSpout_OffsetEntry0.committedOffset);
      
      String string1 = topicPartition0.toString();
      assertNotNull(string1);
      assertEquals((-3615), topicPartition0.partition());
      assertEquals("", topicPartition0.topic());
      assertEquals("--3615", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      KafkaSpout<KafkaSpoutMessageId, Integer> kafkaSpout1 = null;
      try {
        kafkaSpout1 = new KafkaSpout<KafkaSpoutMessageId, Integer>(kafkaSpout0.kafkaSpoutConfig);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test073()  throws Throwable  {
      KafkaSpoutConfig<AbstractMap.SimpleImmutableEntry<Integer, KafkaSpoutStreamsWildcardTopics>, KafkaSpout<Object, KafkaSpoutMessageId>> kafkaSpoutConfig0 = (KafkaSpoutConfig<AbstractMap.SimpleImmutableEntry<Integer, KafkaSpoutStreamsWildcardTopics>, KafkaSpout<Object, KafkaSpoutMessageId>>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<AbstractMap.SimpleImmutableEntry<Integer, KafkaSpoutStreamsWildcardTopics>, KafkaSpout<Object, KafkaSpoutMessageId>> kafkaSpout0 = new KafkaSpout<AbstractMap.SimpleImmutableEntry<Integer, KafkaSpoutStreamsWildcardTopics>, KafkaSpout<Object, KafkaSpoutMessageId>>(kafkaSpoutConfig0);
      assertNotNull(kafkaSpout0);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        kafkaSpout0.fail(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to org.apache.storm.kafka.spout.KafkaSpoutMessageId
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test074()  throws Throwable  {
      KafkaSpoutConfig<CombinedMetric, String> kafkaSpoutConfig0 = (KafkaSpoutConfig<CombinedMetric, String>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null, (KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<CombinedMetric, String> kafkaSpout0 = new KafkaSpout<CombinedMetric, String>(kafkaSpoutConfig0);
      assertNotNull(kafkaSpout0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout0.new OffsetEntry();
      assertNotNull(kafkaSpout_OffsetEntry0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      
      KafkaConsumerFactory<Integer, String> kafkaConsumerFactory0 = null;
      KafkaSpout<Integer, String> kafkaSpout1 = new KafkaSpout<Integer, String>(kafkaSpout0.kafkaSpoutConfig, kafkaConsumerFactory0);
      assertNotNull(kafkaSpout1);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      
      // Undeclared exception!
      try { 
        kafkaSpout1.subscribeKafkaConsumer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test075()  throws Throwable  {
      KafkaSpout<Integer, ClusterSummary._Fields> kafkaSpout0 = new KafkaSpout<Integer, ClusterSummary._Fields>();
      assertNotNull(kafkaSpout0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      
      // Undeclared exception!
      try { 
        kafkaSpout0.getComponentConfiguration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test076()  throws Throwable  {
      KafkaSpout<Object, KafkaSpoutStreamsWildcardTopics> kafkaSpout0 = new KafkaSpout<Object, KafkaSpoutStreamsWildcardTopics>();
      assertNotNull(kafkaSpout0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      
      boolean boolean0 = true;
      kafkaSpout0.initialized = boolean0;
      OutputFieldsGetter outputFieldsGetter0 = new OutputFieldsGetter();
      assertNotNull(outputFieldsGetter0);
      
      // Undeclared exception!
      try { 
        kafkaSpout0.declareOutputFields(outputFieldsGetter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test077()  throws Throwable  {
      KafkaSpout<Integer, KafkaSpoutMessageId> kafkaSpout0 = new KafkaSpout<Integer, KafkaSpoutMessageId>();
      assertNotNull(kafkaSpout0);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      KafkaSpout.Timer kafkaSpout_Timer0 = kafkaSpout0.new Timer(kafkaSpout0.numUncommittedOffsets, kafkaSpout0.maxRetries, timeUnit0);
      assertNotNull(kafkaSpout_Timer0);
      assertEquals(TimeUnit.MINUTES, kafkaSpout_Timer0.getTimeUnit());
      assertEquals(0L, kafkaSpout_Timer0.period());
      assertEquals(0L, kafkaSpout_Timer0.delay());
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(1392409281320000L, kafkaSpout_Timer0.start);
      assertEquals(0L, kafkaSpout_Timer0.periodNanos);
      assertEquals(0L, kafkaSpout_Timer0.period);
      assertEquals(0L, kafkaSpout_Timer0.delay);
      
      kafkaSpout0.commitTimer = kafkaSpout_Timer0;
      assertEquals(TimeUnit.MINUTES, kafkaSpout_Timer0.getTimeUnit());
      assertEquals(0L, kafkaSpout_Timer0.period());
      assertEquals(0L, kafkaSpout_Timer0.delay());
      assertEquals(0L, kafkaSpout0.commitTimer.delay());
      assertEquals(0L, kafkaSpout0.commitTimer.period());
      assertEquals(TimeUnit.MINUTES, kafkaSpout0.commitTimer.getTimeUnit());
      
      // Undeclared exception!
      try { 
        kafkaSpout0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test078()  throws Throwable  {
      KafkaSpoutConfig<ForkJoinTask<CombinedMetric>, KafkaSpout.OffsetEntry> kafkaSpoutConfig0 = (KafkaSpoutConfig<ForkJoinTask<CombinedMetric>, KafkaSpout.OffsetEntry>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaConsumerFactory<ForkJoinTask<CombinedMetric>, KafkaSpout.OffsetEntry> kafkaConsumerFactory0 = null;
      KafkaSpout<ForkJoinTask<CombinedMetric>, KafkaSpout.OffsetEntry> kafkaSpout0 = new KafkaSpout<ForkJoinTask<CombinedMetric>, KafkaSpout.OffsetEntry>(kafkaSpoutConfig0, kafkaConsumerFactory0);
      assertNotNull(kafkaSpout0);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      
      // Undeclared exception!
      try { 
        kafkaSpout0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test079()  throws Throwable  {
      KafkaSpoutConfig<String, Delayed> kafkaSpoutConfig0 = (KafkaSpoutConfig<String, Delayed>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null, (KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<String, Delayed> kafkaSpout0 = new KafkaSpout<String, Delayed>(kafkaSpoutConfig0);
      assertNotNull(kafkaSpout0);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout0.new OffsetEntry();
      assertNotNull(kafkaSpout_OffsetEntry0);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      
      TopicPartition topicPartition0 = kafkaSpout_OffsetEntry0.tp;
      assertNull(topicPartition0);
      
      long long0 = 600L;
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry1 = kafkaSpout0.new OffsetEntry(topicPartition0, long0);
      assertNotNull(kafkaSpout_OffsetEntry1);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals(599L, kafkaSpout_OffsetEntry1.committedOffset);
      assertEquals(600L, kafkaSpout_OffsetEntry1.initialFetchOffset);
      
      KafkaSpout<Object, TopicPartition> kafkaSpout1 = new KafkaSpout<Object, TopicPartition>(kafkaSpout0.kafkaSpoutConfig);
      assertNotNull(kafkaSpout1);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry2 = kafkaSpout1.new OffsetEntry();
      assertNotNull(kafkaSpout_OffsetEntry2);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertEquals(0L, kafkaSpout_OffsetEntry2.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry2.committedOffset);
      
      OffsetAndMetadata offsetAndMetadata0 = kafkaSpout_OffsetEntry2.findNextCommitOffset();
      assertNull(offsetAndMetadata0);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertEquals(0L, kafkaSpout_OffsetEntry2.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry2.committedOffset);
      
      kafkaSpout_OffsetEntry1.commit(offsetAndMetadata0);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals(599L, kafkaSpout_OffsetEntry1.committedOffset);
      assertEquals(600L, kafkaSpout_OffsetEntry1.initialFetchOffset);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertEquals(0L, kafkaSpout_OffsetEntry2.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry2.committedOffset);
  }

  @Test(timeout = 11000)
  public void test080()  throws Throwable  {
      KafkaSpout<String, String> kafkaSpout0 = new KafkaSpout<String, String>();
      assertNotNull(kafkaSpout0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      
      long long0 = 1L;
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      KafkaSpout.Timer kafkaSpout_Timer0 = kafkaSpout0.new Timer(long0, long0, timeUnit0);
      assertNotNull(kafkaSpout_Timer0);
      assertEquals(1L, kafkaSpout_Timer0.period());
      assertEquals(1L, kafkaSpout_Timer0.delay());
      assertEquals(TimeUnit.HOURS, kafkaSpout_Timer0.getTimeUnit());
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(1L, kafkaSpout_Timer0.delay);
      assertEquals(3600000000000L, kafkaSpout_Timer0.periodNanos);
      assertEquals(1396009281320000L, kafkaSpout_Timer0.start);
      assertEquals(1L, kafkaSpout_Timer0.period);
      
      long long1 = kafkaSpout_Timer0.period();
      assertEquals(1L, kafkaSpout_Timer0.period());
      assertEquals(1L, kafkaSpout_Timer0.delay());
      assertEquals(TimeUnit.HOURS, kafkaSpout_Timer0.getTimeUnit());
      assertEquals(1L, long1);
      assertTrue(long1 == long0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(1L, kafkaSpout_Timer0.delay);
      assertEquals(3600000000000L, kafkaSpout_Timer0.periodNanos);
      assertEquals(1396009281320000L, kafkaSpout_Timer0.start);
      assertEquals(1L, kafkaSpout_Timer0.period);
      
      String string0 = "";
      int int0 = 2029;
      TopicPartition topicPartition0 = new TopicPartition(string0, int0);
      assertNotNull(topicPartition0);
      assertEquals(2029, topicPartition0.partition());
      assertEquals("", topicPartition0.topic());
      
      long long2 = 3388L;
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout0.new OffsetEntry(topicPartition0, long2);
      assertNotNull(kafkaSpout_OffsetEntry0);
      assertEquals(2029, topicPartition0.partition());
      assertEquals("", topicPartition0.topic());
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(3387L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(3388L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      
      long long3 = 2195L;
      KafkaSpoutMessageId kafkaSpoutMessageId0 = new KafkaSpoutMessageId(topicPartition0, long3);
      assertNotNull(kafkaSpoutMessageId0);
      assertEquals(2029, topicPartition0.partition());
      assertEquals("", topicPartition0.topic());
      assertEquals("", kafkaSpoutMessageId0.topic());
      assertEquals(2029, kafkaSpoutMessageId0.partition());
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertEquals(2195L, kafkaSpoutMessageId0.offset());
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      assertFalse(long3 == long2);
      
      boolean boolean0 = kafkaSpout_OffsetEntry0.contains(kafkaSpoutMessageId0);
      assertEquals(2029, topicPartition0.partition());
      assertEquals("", topicPartition0.topic());
      assertEquals("", kafkaSpoutMessageId0.topic());
      assertEquals(2029, kafkaSpoutMessageId0.partition());
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertEquals(2195L, kafkaSpoutMessageId0.offset());
      assertFalse(boolean0);
      assertFalse(long2 == long1);
      assertFalse(long2 == long3);
      assertFalse(long2 == long0);
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      assertFalse(long3 == long2);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(3387L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(3388L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      
      KafkaConsumerFactoryDefault<Delayed, String> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<Delayed, String>();
      assertNotNull(kafkaConsumerFactoryDefault0);
      
      KafkaSpout<Delayed, String> kafkaSpout1 = null;
      try {
        kafkaSpout1 = new KafkaSpout<Delayed, String>(kafkaSpout0.kafkaSpoutConfig, kafkaConsumerFactoryDefault0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test081()  throws Throwable  {
      KafkaSpoutConfig<Object, SQLWarning> kafkaSpoutConfig0 = (KafkaSpoutConfig<Object, SQLWarning>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaConsumerFactoryDefault<Object, SQLWarning> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<Object, SQLWarning>();
      assertNotNull(kafkaConsumerFactoryDefault0);
      
      KafkaSpout<Object, SQLWarning> kafkaSpout0 = new KafkaSpout<Object, SQLWarning>(kafkaSpoutConfig0, kafkaConsumerFactoryDefault0);
      assertNotNull(kafkaSpout0);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      
      long long0 = 0L;
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      KafkaSpout.Timer kafkaSpout_Timer0 = kafkaSpout0.new Timer(kafkaSpoutConfig0.DEFAULT_MAX_UNCOMMITTED_OFFSETS, long0, timeUnit0);
      assertNotNull(kafkaSpout_Timer0);
      assertEquals(TimeUnit.MINUTES, kafkaSpout_Timer0.getTimeUnit());
      assertEquals(0L, kafkaSpout_Timer0.period());
      assertEquals(10000000L, kafkaSpout_Timer0.delay());
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout_Timer0.periodNanos);
      assertEquals(10000000L, kafkaSpout_Timer0.delay);
      assertEquals(601392409281320000L, kafkaSpout_Timer0.start);
      assertEquals(0L, kafkaSpout_Timer0.period);
      
      long long1 = kafkaSpout_Timer0.period();
      assertEquals(TimeUnit.MINUTES, kafkaSpout_Timer0.getTimeUnit());
      assertEquals(0L, kafkaSpout_Timer0.period());
      assertEquals(10000000L, kafkaSpout_Timer0.delay());
      assertEquals(0L, long1);
      assertTrue(long1 == long0);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout_Timer0.periodNanos);
      assertEquals(10000000L, kafkaSpout_Timer0.delay);
      assertEquals(601392409281320000L, kafkaSpout_Timer0.start);
      assertEquals(0L, kafkaSpout_Timer0.period);
      
      KafkaSpout<String, ClusterSummary._Fields> kafkaSpout1 = new KafkaSpout<String, ClusterSummary._Fields>();
      assertNotNull(kafkaSpout1);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      
      // Undeclared exception!
      try { 
        kafkaSpout1.poll();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test082()  throws Throwable  {
      KafkaSpout<KafkaSpoutMessageId, KafkaSpout.OffsetEntry> kafkaSpout0 = new KafkaSpout<KafkaSpoutMessageId, KafkaSpout.OffsetEntry>();
      assertNotNull(kafkaSpout0);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      
      // Undeclared exception!
      try { 
        kafkaSpout0.activate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test083()  throws Throwable  {
      KafkaConsumerFactory<KafkaSpoutMessageId, KafkaSpoutStreamsNamedTopics> kafkaConsumerFactory0 = null;
      KafkaConsumerFactoryDefault<Delayed, KafkaSpout.OffsetEntry> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<Delayed, KafkaSpout.OffsetEntry>();
      assertNotNull(kafkaConsumerFactoryDefault0);
      
      long long0 = 0L;
      long long1 = 1L;
      KafkaSpout<Integer, ConsumerRecord<Integer, Object>> kafkaSpout0 = new KafkaSpout<Integer, ConsumerRecord<Integer, Object>>();
      assertNotNull(kafkaSpout0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      
      boolean boolean0 = kafkaSpout0.waitingToEmit();
      assertFalse(boolean0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      
      KafkaSpout.Timer kafkaSpout_Timer0 = kafkaSpout0.new Timer();
      assertNotNull(kafkaSpout_Timer0);
      assertEquals(0L, kafkaSpout_Timer0.period());
      assertNull(kafkaSpout_Timer0.getTimeUnit());
      assertEquals(0L, kafkaSpout_Timer0.delay());
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout_Timer0.period);
      assertEquals(0L, kafkaSpout_Timer0.delay);
      assertEquals(0L, kafkaSpout_Timer0.start);
      assertEquals(0L, kafkaSpout_Timer0.periodNanos);
      
      long long2 = kafkaSpout_Timer0.delay();
      assertEquals(0L, kafkaSpout_Timer0.period());
      assertNull(kafkaSpout_Timer0.getTimeUnit());
      assertEquals(0L, kafkaSpout_Timer0.delay());
      assertEquals(0L, long2);
      assertFalse(long2 == long1);
      assertTrue(long2 == long0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout_Timer0.period);
      assertEquals(0L, kafkaSpout_Timer0.delay);
      assertEquals(0L, kafkaSpout_Timer0.start);
      assertEquals(0L, kafkaSpout_Timer0.periodNanos);
  }

  @Test(timeout = 11000)
  public void test084()  throws Throwable  {
      KafkaSpoutConfig<Integer, CombinedMetric> kafkaSpoutConfig0 = (KafkaSpoutConfig<Integer, CombinedMetric>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<Integer, CombinedMetric> kafkaSpout0 = new KafkaSpout<Integer, CombinedMetric>(kafkaSpoutConfig0);
      assertNotNull(kafkaSpout0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      
      long long0 = 1262L;
      long long1 = (-2487L);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      KafkaSpout.Timer kafkaSpout_Timer0 = kafkaSpout0.new Timer(long0, long1, timeUnit0);
      assertNotNull(kafkaSpout_Timer0);
      assertEquals(TimeUnit.SECONDS, kafkaSpout_Timer0.getTimeUnit());
      assertEquals(1262L, kafkaSpout_Timer0.delay());
      assertEquals((-2487L), kafkaSpout_Timer0.period());
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(1393671281320000L, kafkaSpout_Timer0.start);
      assertEquals((-2487000000000L), kafkaSpout_Timer0.periodNanos);
      assertEquals((-2487L), kafkaSpout_Timer0.period);
      assertEquals(1262L, kafkaSpout_Timer0.delay);
      
      long long2 = 0L;
      kafkaSpout_Timer0.period = long2;
      assertEquals(0L, kafkaSpout_Timer0.period());
      assertEquals(TimeUnit.SECONDS, kafkaSpout_Timer0.getTimeUnit());
      assertEquals(1262L, kafkaSpout_Timer0.delay());
      
      long long3 = kafkaSpout_Timer0.delay();
      assertEquals(0L, kafkaSpout_Timer0.period());
      assertEquals(TimeUnit.SECONDS, kafkaSpout_Timer0.getTimeUnit());
      assertEquals(1262L, kafkaSpout_Timer0.delay());
      assertEquals(1262L, long3);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(long1 == long0);
      assertFalse(long1 == long2);
      assertTrue(long3 == long0);
      assertFalse(long3 == long2);
      assertFalse(long3 == long1);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(1393671281320000L, kafkaSpout_Timer0.start);
      assertEquals((-2487000000000L), kafkaSpout_Timer0.periodNanos);
      assertEquals(1262L, kafkaSpout_Timer0.delay);
      assertEquals(0L, kafkaSpout_Timer0.period);
      
      KafkaSpout.OffsetComparator kafkaSpout_OffsetComparator0 = new KafkaSpout.OffsetComparator();
      assertNotNull(kafkaSpout_OffsetComparator0);
      
      String string0 = "";
      long long4 = 29L;
      TimestampType timestampType0 = TimestampType.LOG_APPEND_TIME;
      int int0 = 0;
      int int1 = 1672;
      int int2 = (-1299);
      Integer integer0 = new Integer(int2);
      assertNotNull(integer0);
      assertEquals((-1299), (int)integer0);
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      SQLWarning sQLWarning0 = null;
      ConsumerRecord<Object, SQLWarning> consumerRecord0 = new ConsumerRecord<Object, SQLWarning>(string0, kafkaSpout0.maxRetries, long4, kafkaSpoutConfig0.DEFAULT_MAX_RETRIES, timestampType0, long4, int0, int1, integer0, sQLWarning0);
      assertNotNull(consumerRecord0);
      assertEquals("", consumerRecord0.topic());
      assertEquals(2147483647L, consumerRecord0.timestamp());
      assertEquals(0, consumerRecord0.serializedKeySize());
      assertEquals(1672, consumerRecord0.serializedValueSize());
      assertEquals(TimestampType.LOG_APPEND_TIME, consumerRecord0.timestampType());
      assertEquals(0, consumerRecord0.partition());
      assertEquals(29L, consumerRecord0.offset());
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(long4 == long0);
      assertFalse(long4 == long3);
      assertFalse(long4 == long1);
      assertFalse(long4 == long2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals((-1), ConsumerRecord.NULL_SIZE);
      assertEquals((-1L), ConsumerRecord.NO_TIMESTAMP);
      assertEquals((-1), ConsumerRecord.NULL_CHECKSUM);
      
      KafkaSpoutMessageId kafkaSpoutMessageId0 = new KafkaSpoutMessageId(consumerRecord0);
      assertNotNull(kafkaSpoutMessageId0);
      assertEquals("", consumerRecord0.topic());
      assertEquals(2147483647L, consumerRecord0.timestamp());
      assertEquals(0, consumerRecord0.serializedKeySize());
      assertEquals(1672, consumerRecord0.serializedValueSize());
      assertEquals(TimestampType.LOG_APPEND_TIME, consumerRecord0.timestampType());
      assertEquals(0, consumerRecord0.partition());
      assertEquals(29L, consumerRecord0.offset());
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertEquals(0, kafkaSpoutMessageId0.partition());
      assertEquals(29L, kafkaSpoutMessageId0.offset());
      assertEquals("", kafkaSpoutMessageId0.topic());
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(long4 == long0);
      assertFalse(long4 == long3);
      assertFalse(long4 == long1);
      assertFalse(long4 == long2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals((-1), ConsumerRecord.NULL_SIZE);
      assertEquals((-1L), ConsumerRecord.NO_TIMESTAMP);
      assertEquals((-1), ConsumerRecord.NULL_CHECKSUM);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout0.new OffsetEntry();
      assertNotNull(kafkaSpout_OffsetEntry0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      
      String string1 = consumerRecord0.toString();
      assertNotNull(string1);
      assertEquals("", consumerRecord0.topic());
      assertEquals(2147483647L, consumerRecord0.timestamp());
      assertEquals(0, consumerRecord0.serializedKeySize());
      assertEquals(1672, consumerRecord0.serializedValueSize());
      assertEquals(TimestampType.LOG_APPEND_TIME, consumerRecord0.timestampType());
      assertEquals(0, consumerRecord0.partition());
      assertEquals(29L, consumerRecord0.offset());
      assertEquals("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 29, LogAppendTime = 2147483647, serialized key size = 0, serialized value size = 1672, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1299, value = null)", string1);
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(long4 == long0);
      assertFalse(long4 == long3);
      assertFalse(long4 == long1);
      assertFalse(long4 == long2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals((-1), ConsumerRecord.NULL_SIZE);
      assertEquals((-1L), ConsumerRecord.NO_TIMESTAMP);
      assertEquals((-1), ConsumerRecord.NULL_CHECKSUM);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      TopicPartition topicPartition0 = kafkaSpout_OffsetEntry0.tp;
      assertNull(topicPartition0);
      
      KafkaSpoutMessageId kafkaSpoutMessageId1 = new KafkaSpoutMessageId(topicPartition0, kafkaSpout_OffsetEntry0.committedOffset);
      assertNotNull(kafkaSpoutMessageId1);
      assertEquals(0L, kafkaSpoutMessageId1.offset());
      assertEquals(0, kafkaSpoutMessageId1.numFails());
      assertFalse(kafkaSpoutMessageId1.equals((Object)kafkaSpoutMessageId0));
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      Var var0 = null;
      try {  
      var0 = core.form_name.const__0;
      } catch(NoClassDefFoundError e) {}
  }

  @Test(timeout = 11000)
  public void test085()  throws Throwable  {
      KafkaSpoutConfig<Delayed, Object> kafkaSpoutConfig0 = (KafkaSpoutConfig<Delayed, Object>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<Delayed, Object> kafkaSpout0 = new KafkaSpout<Delayed, Object>(kafkaSpoutConfig0);
      assertNotNull(kafkaSpout0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      
      KafkaSpout.KafkaSpoutConsumerRebalanceListener kafkaSpout_KafkaSpoutConsumerRebalanceListener0 = kafkaSpout0.new KafkaSpoutConsumerRebalanceListener();
      assertNotNull(kafkaSpout_KafkaSpoutConsumerRebalanceListener0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)18;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-1);
      byteArray0[1] = byte1;
      byte byte2 = (byte)125;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-31);
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-46);
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-7);
      byteArray0[6] = byte6;
      byte byte7 = (byte)114;
      byteArray0[7] = byte7;
      Input input0 = new Input(byteArray0);
      assertNotNull(input0);
      assertEquals(8, input0.limit());
      assertEquals(0, input0.position());
      assertEquals(0L, input0.total());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)18, (byte) (-1), (byte)125, (byte) (-31), (byte) (-46), (byte)0, (byte) (-7), (byte)114}, byteArray0);
      
      StringBuilder stringBuilder0 = input0.readStringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals(8, input0.limit());
      assertEquals(2, input0.position());
      assertEquals(2L, input0.total());
      assertEquals("\u0012", stringBuilder0.toString());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)18, (byte) (-1), (byte)125, (byte) (-31), (byte) (-46), (byte)0, (byte) (-7), (byte)114}, byteArray0);
      
      StringSeq stringSeq0 = StringSeq.create(stringBuilder0);
      assertNotNull(stringSeq0);
      assertEquals(8, input0.limit());
      assertEquals(2, input0.position());
      assertEquals(2L, input0.total());
      assertEquals("\u0012", stringBuilder0.toString());
      assertFalse(stringSeq0.isEmpty());
      assertEquals(0, stringSeq0.index());
      assertEquals(2, stringSeq0.count());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)18, (byte) (-1), (byte)125, (byte) (-31), (byte) (-46), (byte)0, (byte) (-7), (byte)114}, byteArray0);
      assertEquals(0, stringSeq0.i);
      
      // Undeclared exception!
      try { 
        kafkaSpout_KafkaSpoutConsumerRebalanceListener0.initialize(stringSeq0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout$KafkaSpoutConsumerRebalanceListener", e);
      }
  }

  @Test(timeout = 11000)
  public void test086()  throws Throwable  {
      KafkaSpoutConfig<String, KafkaSpoutMessageId> kafkaSpoutConfig0 = (KafkaSpoutConfig<String, KafkaSpoutMessageId>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((Map) null).when(kafkaSpoutConfig0).getKafkaProps();
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      doReturn((Deserializer) null).when(kafkaSpoutConfig0).getKeyDeserializer();
      doReturn((Deserializer) null).when(kafkaSpoutConfig0).getValueDeserializer();
      KafkaSpout<String, KafkaSpoutMessageId> kafkaSpout0 = new KafkaSpout<String, KafkaSpoutMessageId>(kafkaSpoutConfig0);
      assertNotNull(kafkaSpout0);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      
      KafkaSpout.Timer kafkaSpout_Timer0 = kafkaSpout0.new Timer();
      assertNotNull(kafkaSpout_Timer0);
      assertEquals(0L, kafkaSpout_Timer0.period());
      assertEquals(0L, kafkaSpout_Timer0.delay());
      assertNull(kafkaSpout_Timer0.getTimeUnit());
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0L, kafkaSpout_Timer0.period);
      assertEquals(0L, kafkaSpout_Timer0.periodNanos);
      assertEquals(0L, kafkaSpout_Timer0.start);
      assertEquals(0L, kafkaSpout_Timer0.delay);
      
      long long0 = 214L;
      boolean boolean0 = kafkaSpout_Timer0.isExpiredResetOnTrue();
      assertEquals(0L, kafkaSpout_Timer0.period());
      assertEquals(0L, kafkaSpout_Timer0.delay());
      assertNull(kafkaSpout_Timer0.getTimeUnit());
      assertTrue(boolean0);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(1392409281320000L, kafkaSpout_Timer0.start);
      assertEquals(0L, kafkaSpout_Timer0.period);
      assertEquals(0L, kafkaSpout_Timer0.periodNanos);
      assertEquals(0L, kafkaSpout_Timer0.delay);
      
      kafkaSpout_Timer0.delay = long0;
      assertEquals(214L, kafkaSpout_Timer0.delay());
      assertEquals(0L, kafkaSpout_Timer0.period());
      assertNull(kafkaSpout_Timer0.getTimeUnit());
      
      boolean boolean1 = kafkaSpout_Timer0.isExpiredResetOnTrue();
      assertEquals(214L, kafkaSpout_Timer0.delay());
      assertEquals(0L, kafkaSpout_Timer0.period());
      assertNull(kafkaSpout_Timer0.getTimeUnit());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(1392409281320000L, kafkaSpout_Timer0.start);
      assertEquals(214L, kafkaSpout_Timer0.delay);
      assertEquals(0L, kafkaSpout_Timer0.period);
      assertEquals(0L, kafkaSpout_Timer0.periodNanos);
      
      kafkaSpout_Timer0.period = (long) kafkaSpoutConfig0.DEFAULT_MAX_UNCOMMITTED_OFFSETS;
      assertEquals(214L, kafkaSpout_Timer0.delay());
      assertEquals(10000000L, kafkaSpout_Timer0.period());
      assertNull(kafkaSpout_Timer0.getTimeUnit());
      
      boolean boolean2 = kafkaSpout_Timer0.isExpiredResetOnTrue();
      assertEquals(214L, kafkaSpout_Timer0.delay());
      assertEquals(10000000L, kafkaSpout_Timer0.period());
      assertNull(kafkaSpout_Timer0.getTimeUnit());
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(1392409281320000L, kafkaSpout_Timer0.start);
      assertEquals(214L, kafkaSpout_Timer0.delay);
      assertEquals(0L, kafkaSpout_Timer0.periodNanos);
      assertEquals(10000000L, kafkaSpout_Timer0.period);
      
      KafkaConsumerFactoryDefault<TopicPartition, String> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<TopicPartition, String>();
      assertNotNull(kafkaConsumerFactoryDefault0);
      
      // Undeclared exception!
      try { 
        kafkaConsumerFactoryDefault0.createConsumer(kafkaSpout0.kafkaSpoutConfig);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test087()  throws Throwable  {
      KafkaSpoutConfig<Delayed, Integer> kafkaSpoutConfig0 = (KafkaSpoutConfig<Delayed, Integer>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<Delayed, Integer> kafkaSpout0 = new KafkaSpout<Delayed, Integer>(kafkaSpoutConfig0);
      assertNotNull(kafkaSpout0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout0.new OffsetEntry();
      assertNotNull(kafkaSpout_OffsetEntry0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      
      TopicPartition topicPartition0 = kafkaSpout_OffsetEntry0.tp;
      assertNull(topicPartition0);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry1 = kafkaSpout0.new OffsetEntry(topicPartition0, kafkaSpoutConfig0.DEFAULT_MAX_RETRIES);
      assertNotNull(kafkaSpout_OffsetEntry1);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(2147483647L, kafkaSpout_OffsetEntry1.initialFetchOffset);
      assertEquals(2147483646L, kafkaSpout_OffsetEntry1.committedOffset);
      
      KafkaSpoutMessageId kafkaSpoutMessageId0 = new KafkaSpoutMessageId(kafkaSpout_OffsetEntry1.tp, kafkaSpout0.numUncommittedOffsets);
      assertNotNull(kafkaSpoutMessageId0);
      assertEquals(0L, kafkaSpoutMessageId0.offset());
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(2147483647L, kafkaSpout_OffsetEntry1.initialFetchOffset);
      assertEquals(2147483646L, kafkaSpout_OffsetEntry1.committedOffset);
      
      boolean boolean0 = kafkaSpout_OffsetEntry1.contains(kafkaSpoutMessageId0);
      assertEquals(0L, kafkaSpoutMessageId0.offset());
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertFalse(boolean0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(2147483647L, kafkaSpout_OffsetEntry1.initialFetchOffset);
      assertEquals(2147483646L, kafkaSpout_OffsetEntry1.committedOffset);
      
      String string0 = kafkaSpout_OffsetEntry1.toString();
      assertNotNull(string0);
      assertEquals("OffsetEntry{topic-partition=null, fetchOffset=2147483647, committedOffset=2147483646, ackedMsgs=[]}", string0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(2147483647L, kafkaSpout_OffsetEntry1.initialFetchOffset);
      assertEquals(2147483646L, kafkaSpout_OffsetEntry1.committedOffset);
      
      KafkaSpout<PersistentVector, Integer> kafkaSpout1 = new KafkaSpout<PersistentVector, Integer>();
      assertNotNull(kafkaSpout1);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      
      // Undeclared exception!
      try { 
        kafkaSpout1.commit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test088()  throws Throwable  {
      KafkaSpoutConfig<String, String> kafkaSpoutConfig0 = (KafkaSpoutConfig<String, String>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutConfig.FirstPollOffsetStrategy) null).when(kafkaSpoutConfig0).getFirstPollOffsetStrategy();
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      doReturn(0).when(kafkaSpoutConfig0).getMaxTupleRetries();
      doReturn(0L).when(kafkaSpoutConfig0).getOffsetsCommitPeriodMs();
      doReturn((KafkaSpoutRetryService) null).when(kafkaSpoutConfig0).getRetryService();
      doReturn((Pattern) null).when(kafkaSpoutConfig0).getTopicWildcardPattern();
      doReturn((KafkaSpoutTuplesBuilder) null).when(kafkaSpoutConfig0).getTuplesBuilder();
      doReturn(false).when(kafkaSpoutConfig0).isConsumerAutoCommitMode();
      KafkaConsumerFactoryDefault<String, String> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<String, String>();
      assertNotNull(kafkaConsumerFactoryDefault0);
      
      KafkaSpout<String, String> kafkaSpout0 = new KafkaSpout<String, String>(kafkaSpoutConfig0, kafkaConsumerFactoryDefault0);
      assertNotNull(kafkaSpout0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      
      Map<Delayed, Delayed> map0 = null;
      TopologyContext topologyContext0 = null;
      SpoutOutputCollector spoutOutputCollector0 = null;
      kafkaSpout0.open(map0, topologyContext0, spoutOutputCollector0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      
      // Undeclared exception!
      try { 
        kafkaSpout0.getWildCardTopics();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test089()  throws Throwable  {
      KafkaSpout<String, Delayed> kafkaSpout0 = new KafkaSpout<String, Delayed>();
      assertNotNull(kafkaSpout0);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      
      String string0 = "Update req`sted after meadataMclose";
      int int0 = Integer.MAX_VALUE;
      Pattern pattern0 = Pattern.compile(string0);
      assertNotNull(pattern0);
      assertEquals(0, pattern0.flags());
      assertEquals("Update req`sted after meadataMclose", pattern0.pattern());
      assertEquals("Update req`sted after meadataMclose", pattern0.toString());
      
      KafkaSpoutConfig<String, Delayed> kafkaSpoutConfig0 = (KafkaSpoutConfig<String, Delayed>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      doReturn(pattern0).when(kafkaSpoutConfig0).getTopicWildcardPattern();
      kafkaSpout0.kafkaSpoutConfig = kafkaSpoutConfig0;
      assertEquals(0, pattern0.flags());
      assertEquals("Update req`sted after meadataMclose", pattern0.pattern());
      assertEquals("Update req`sted after meadataMclose", pattern0.toString());
      assertEquals(0, kafkaSpout0.kafkaSpoutConfig.getMaxUncommittedOffsets());
      assertFalse(kafkaSpout0.kafkaSpoutConfig.isConsumerAutoCommitMode());
      assertNull(kafkaSpout0.kafkaSpoutConfig.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpout0.kafkaSpoutConfig.getOffsetsCommitPeriodMs());
      assertEquals(0, kafkaSpout0.kafkaSpoutConfig.getMaxTupleRetries());
      assertEquals(0L, kafkaSpout0.kafkaSpoutConfig.getPollTimeoutMs());
      assertNull(kafkaSpout0.kafkaSpoutConfig.getConsumerGroupId());
      
      String string1 = kafkaSpout0.getWildCardTopics();
      assertNotNull(string1);
      assertEquals("Update req`sted after meadataMclose", string1);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertSame(string1, string0);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout0.new OffsetEntry();
      assertNotNull(kafkaSpout_OffsetEntry0);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      
      kafkaSpout_OffsetEntry0.initialFetchOffset = kafkaSpout0.numUncommittedOffsets;
      OffsetAndMetadata offsetAndMetadata0 = kafkaSpout_OffsetEntry0.findNextCommitOffset();
      assertNull(offsetAndMetadata0);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      
      KafkaConsumerFactoryDefault<Object, AbstractMap.SimpleEntry<ClusterSummary._Fields, KafkaSpoutStreamsNamedTopics>> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<Object, AbstractMap.SimpleEntry<ClusterSummary._Fields, KafkaSpoutStreamsNamedTopics>>();
      assertNotNull(kafkaConsumerFactoryDefault0);
      
      KafkaSpout<Object, AbstractMap.SimpleEntry<ClusterSummary._Fields, KafkaSpoutStreamsNamedTopics>> kafkaSpout1 = new KafkaSpout<Object, AbstractMap.SimpleEntry<ClusterSummary._Fields, KafkaSpoutStreamsNamedTopics>>(kafkaSpout0.kafkaSpoutConfig, kafkaConsumerFactoryDefault0);
      assertNotNull(kafkaSpout1);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      
      // Undeclared exception!
      try { 
        kafkaSpout1.emit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test090()  throws Throwable  {
      String string0 = "";
      PersistentTreeMap persistentTreeMap0 = null;
      try {  
      persistentTreeMap0 = PersistentTreeMap.EMPTY;
      } catch(NoClassDefFoundError e) {}
  }

  @Test(timeout = 11000)
  public void test091()  throws Throwable  {
      String string0 = null;
      KafkaSpoutConfig<KafkaSpoutMessageId, PersistentVector> kafkaSpoutConfig0 = (KafkaSpoutConfig<KafkaSpoutMessageId, PersistentVector>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(kafkaSpoutConfig0).getConsumerGroupId();
      doReturn((Map) null).when(kafkaSpoutConfig0).getKafkaProps();
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaConsumerFactoryDefault<KafkaSpoutMessageId, PersistentVector> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<KafkaSpoutMessageId, PersistentVector>();
      assertNotNull(kafkaConsumerFactoryDefault0);
      
      KafkaSpout<KafkaSpoutMessageId, PersistentVector> kafkaSpout0 = new KafkaSpout<KafkaSpoutMessageId, PersistentVector>(kafkaSpoutConfig0, kafkaConsumerFactoryDefault0);
      assertNotNull(kafkaSpout0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      
      // Undeclared exception!
      try { 
        kafkaSpout0.getComponentConfiguration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test092()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig0 = (KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, KafkaSpoutStreamsWildcardTopics>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<KafkaSpoutStreamsNamedTopics, KafkaSpoutStreamsWildcardTopics> kafkaSpout0 = new KafkaSpout<KafkaSpoutStreamsNamedTopics, KafkaSpoutStreamsWildcardTopics>(kafkaSpoutConfig0);
      assertNotNull(kafkaSpout0);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      
      KafkaSpoutStreams kafkaSpoutStreams0 = kafkaSpout0.kafkaSpoutStreams;
      assertNull(kafkaSpoutStreams0);
      
      int int0 = (-456);
      KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, AbstractMap.SimpleEntry<KafkaSpoutStreamsNamedTopics, ClusterSummary._Fields>> kafkaSpoutConfig1 = (KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, AbstractMap.SimpleEntry<KafkaSpoutStreamsNamedTopics, ClusterSummary._Fields>>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn(kafkaSpoutStreams0).when(kafkaSpoutConfig1).getKafkaSpoutStreams();
      doReturn(int0).when(kafkaSpoutConfig1).getMaxUncommittedOffsets();
      KafkaSpout<KafkaSpoutStreamsNamedTopics, AbstractMap.SimpleEntry<KafkaSpoutStreamsNamedTopics, ClusterSummary._Fields>> kafkaSpout1 = new KafkaSpout<KafkaSpoutStreamsNamedTopics, AbstractMap.SimpleEntry<KafkaSpoutStreamsNamedTopics, ClusterSummary._Fields>>(kafkaSpoutConfig1);
      assertNotNull(kafkaSpout1);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      
      boolean boolean0 = kafkaSpout1.poll();
      assertFalse(boolean0);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      
      String string0 = kafkaSpout1.toString();
      assertNotNull(string0);
      assertEquals("KafkaSpout{acked=null, emitted=null}", string0);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      
      // Undeclared exception!
      try { 
        kafkaSpout1.commitOffsetsForAckedTuples();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test093()  throws Throwable  {
      KafkaSpout<Delayed, ClusterSummary._Fields> kafkaSpout0 = new KafkaSpout<Delayed, ClusterSummary._Fields>();
      assertNotNull(kafkaSpout0);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      
      boolean boolean0 = true;
      kafkaSpout0.consumerAutoCommitMode = boolean0;
      KafkaSpoutStreams kafkaSpoutStreams0 = null;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) kafkaSpout0;
      objectArray0[1] = (Object) kafkaSpoutStreams0;
      objectArray0[2] = (Object) kafkaSpoutStreams0;
      PersistentArrayMap persistentArrayMap0 = new PersistentArrayMap(objectArray0);
      assertNotNull(persistentArrayMap0);
      assertEquals(1, persistentArrayMap0.capacity());
      assertEquals(1, persistentArrayMap0.count());
      assertEquals(3, objectArray0.length);
      
      APersistentMap.ValSeq aPersistentMap_ValSeq0 = APersistentMap.ValSeq.createFromMap(persistentArrayMap0);
      assertNotNull(aPersistentMap_ValSeq0);
      assertEquals(1, persistentArrayMap0.capacity());
      assertEquals(1, persistentArrayMap0.count());
      assertFalse(aPersistentMap_ValSeq0.isEmpty());
      assertEquals(3, objectArray0.length);
      
      KafkaSpoutConfig<Delayed, ClusterSummary._Fields> kafkaSpoutConfig0 = (KafkaSpoutConfig<Delayed, ClusterSummary._Fields>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn(aPersistentMap_ValSeq0).when(kafkaSpoutConfig0).getSubscribedTopics();
      kafkaSpout0.kafkaSpoutConfig = kafkaSpoutConfig0;
      assertEquals(1, persistentArrayMap0.capacity());
      assertEquals(1, persistentArrayMap0.count());
      assertFalse(aPersistentMap_ValSeq0.isEmpty());
      assertNull(kafkaSpout0.kafkaSpoutConfig.getConsumerGroupId());
      assertEquals(0, kafkaSpout0.kafkaSpoutConfig.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpout0.kafkaSpoutConfig.getPollTimeoutMs());
      assertEquals(0, kafkaSpout0.kafkaSpoutConfig.getMaxTupleRetries());
      assertNull(kafkaSpout0.kafkaSpoutConfig.getFirstPollOffsetStrategy());
      assertFalse(kafkaSpout0.kafkaSpoutConfig.isConsumerAutoCommitMode());
      assertEquals(0L, kafkaSpout0.kafkaSpoutConfig.getOffsetsCommitPeriodMs());
      
      KafkaSpout.Timer kafkaSpout_Timer0 = kafkaSpout0.new Timer();
      assertNotNull(kafkaSpout_Timer0);
      assertNull(kafkaSpout_Timer0.getTimeUnit());
      assertEquals(0L, kafkaSpout_Timer0.period());
      assertEquals(0L, kafkaSpout_Timer0.delay());
      assertTrue(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0L, kafkaSpout_Timer0.start);
      assertEquals(0L, kafkaSpout_Timer0.periodNanos);
      assertEquals(0L, kafkaSpout_Timer0.period);
      assertEquals(0L, kafkaSpout_Timer0.delay);
      
      kafkaSpout0.commitTimer = kafkaSpout_Timer0;
      assertNull(kafkaSpout_Timer0.getTimeUnit());
      assertEquals(0L, kafkaSpout_Timer0.period());
      assertEquals(0L, kafkaSpout_Timer0.delay());
      assertNull(kafkaSpout0.commitTimer.getTimeUnit());
      assertEquals(0L, kafkaSpout0.commitTimer.delay());
      assertEquals(0L, kafkaSpout0.commitTimer.period());
      
      // Undeclared exception!
      try { 
        kafkaSpout0.getNamedTopics();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("clojure.lang.PersistentArrayMap$Iter", e);
      }
  }

  @Test(timeout = 11000)
  public void test094()  throws Throwable  {
      KafkaSpoutConfig<String, Delayed> kafkaSpoutConfig0 = (KafkaSpoutConfig<String, Delayed>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null, (KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<String, Delayed> kafkaSpout0 = new KafkaSpout<String, Delayed>(kafkaSpoutConfig0);
      assertNotNull(kafkaSpout0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout0.new OffsetEntry();
      assertNotNull(kafkaSpout_OffsetEntry0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      
      TopicPartition topicPartition0 = kafkaSpout_OffsetEntry0.tp;
      assertNull(topicPartition0);
      
      long long0 = 600L;
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry1 = kafkaSpout0.new OffsetEntry(topicPartition0, long0);
      assertNotNull(kafkaSpout_OffsetEntry1);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(600L, kafkaSpout_OffsetEntry1.initialFetchOffset);
      assertEquals(599L, kafkaSpout_OffsetEntry1.committedOffset);
      
      KafkaSpout<Object, TopicPartition> kafkaSpout1 = new KafkaSpout<Object, TopicPartition>(kafkaSpout0.kafkaSpoutConfig);
      assertNotNull(kafkaSpout1);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry2 = kafkaSpout1.new OffsetEntry();
      assertNotNull(kafkaSpout_OffsetEntry2);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0L, kafkaSpout_OffsetEntry2.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry2.initialFetchOffset);
      
      long long1 = 1051L;
      KafkaSpoutMessageId kafkaSpoutMessageId0 = new KafkaSpoutMessageId(kafkaSpout_OffsetEntry1.tp, long1);
      assertNotNull(kafkaSpoutMessageId0);
      assertEquals(1051L, kafkaSpoutMessageId0.offset());
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(600L, kafkaSpout_OffsetEntry1.initialFetchOffset);
      assertEquals(599L, kafkaSpout_OffsetEntry1.committedOffset);
      
      kafkaSpout_OffsetEntry2.add(kafkaSpoutMessageId0);
      assertEquals(1051L, kafkaSpoutMessageId0.offset());
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(600L, kafkaSpout_OffsetEntry1.initialFetchOffset);
      assertEquals(599L, kafkaSpout_OffsetEntry1.committedOffset);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0L, kafkaSpout_OffsetEntry2.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry2.initialFetchOffset);
      
      OffsetAndMetadata offsetAndMetadata0 = kafkaSpout_OffsetEntry2.findNextCommitOffset();
      assertNull(offsetAndMetadata0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0L, kafkaSpout_OffsetEntry2.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry2.initialFetchOffset);
      
      kafkaSpout_OffsetEntry1.commit(offsetAndMetadata0);
      assertFalse(long0 == long1);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(600L, kafkaSpout_OffsetEntry1.initialFetchOffset);
      assertEquals(599L, kafkaSpout_OffsetEntry1.committedOffset);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0L, kafkaSpout_OffsetEntry2.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry2.initialFetchOffset);
  }

  @Test(timeout = 11000)
  public void test095()  throws Throwable  {
      KafkaSpoutStreams kafkaSpoutStreams0 = null;
      int int0 = 2145440371;
      KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, AbstractMap.SimpleEntry<KafkaSpoutStreamsNamedTopics, ClusterSummary._Fields>> kafkaSpoutConfig0 = (KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, AbstractMap.SimpleEntry<KafkaSpoutStreamsNamedTopics, ClusterSummary._Fields>>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn(kafkaSpoutStreams0, (KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      doReturn(int0).when(kafkaSpoutConfig0).getMaxUncommittedOffsets();
      KafkaSpout<KafkaSpoutStreamsNamedTopics, AbstractMap.SimpleEntry<KafkaSpoutStreamsNamedTopics, ClusterSummary._Fields>> kafkaSpout0 = new KafkaSpout<KafkaSpoutStreamsNamedTopics, AbstractMap.SimpleEntry<KafkaSpoutStreamsNamedTopics, ClusterSummary._Fields>>(kafkaSpoutConfig0);
      assertNotNull(kafkaSpout0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      
      boolean boolean0 = kafkaSpout0.poll();
      assertTrue(boolean0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      
      KafkaSpout<TopicPartition, Delayed> kafkaSpout1 = new KafkaSpout<TopicPartition, Delayed>(kafkaSpout0.kafkaSpoutConfig);
      assertNotNull(kafkaSpout1);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      
      // Undeclared exception!
      try { 
        kafkaSpout1.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test096()  throws Throwable  {
      KafkaSpout<KafkaSpout.OffsetEntry, String> kafkaSpout0 = new KafkaSpout<KafkaSpout.OffsetEntry, String>();
      assertNotNull(kafkaSpout0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      
      Object object0 = null;
      // Undeclared exception!
      try { 
        kafkaSpout0.fail(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test097()  throws Throwable  {
      StormTopology stormTopology0 = new StormTopology();
      assertNotNull(stormTopology0);
      assertEquals(0, stormTopology0.get_bolts_size());
      assertFalse(stormTopology0.is_set_spouts());
      assertFalse(stormTopology0.is_set_dependency_artifacts());
      assertEquals(0, stormTopology0.get_spouts_size());
      assertEquals(0, stormTopology0.get_dependency_jars_size());
      assertEquals(0, stormTopology0.get_state_spouts_size());
      assertFalse(stormTopology0.is_set_state_spouts());
      assertFalse(stormTopology0.is_set_bolts());
      assertEquals(0, stormTopology0.get_dependency_artifacts_size());
      assertFalse(stormTopology0.is_set_worker_hooks());
      assertFalse(stormTopology0.is_set_dependency_jars());
      assertEquals(0, stormTopology0.get_worker_hooks_size());
      
      KafkaSpoutConfig<Object, SQLWarning> kafkaSpoutConfig0 = (KafkaSpoutConfig<Object, SQLWarning>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaConsumerFactoryDefault<Object, SQLWarning> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<Object, SQLWarning>();
      assertNotNull(kafkaConsumerFactoryDefault0);
      
      KafkaSpout<Object, SQLWarning> kafkaSpout0 = new KafkaSpout<Object, SQLWarning>(kafkaSpoutConfig0, kafkaConsumerFactoryDefault0);
      assertNotNull(kafkaSpout0);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      
      long long0 = 0L;
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      KafkaSpout.Timer kafkaSpout_Timer0 = kafkaSpout0.new Timer(kafkaSpoutConfig0.DEFAULT_MAX_UNCOMMITTED_OFFSETS, long0, timeUnit0);
      assertNotNull(kafkaSpout_Timer0);
      assertEquals(0L, kafkaSpout_Timer0.period());
      assertEquals(TimeUnit.MINUTES, kafkaSpout_Timer0.getTimeUnit());
      assertEquals(10000000L, kafkaSpout_Timer0.delay());
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0L, kafkaSpout_Timer0.periodNanos);
      assertEquals(10000000L, kafkaSpout_Timer0.delay);
      assertEquals(0L, kafkaSpout_Timer0.period);
      assertEquals(601392409281320000L, kafkaSpout_Timer0.start);
      
      long long1 = kafkaSpout_Timer0.period();
      assertEquals(0L, kafkaSpout_Timer0.period());
      assertEquals(TimeUnit.MINUTES, kafkaSpout_Timer0.getTimeUnit());
      assertEquals(10000000L, kafkaSpout_Timer0.delay());
      assertEquals(0L, long1);
      assertTrue(long1 == long0);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0L, kafkaSpout_Timer0.periodNanos);
      assertEquals(10000000L, kafkaSpout_Timer0.delay);
      assertEquals(0L, kafkaSpout_Timer0.period);
      assertEquals(601392409281320000L, kafkaSpout_Timer0.start);
      
      KafkaSpout<String, ClusterSummary._Fields> kafkaSpout1 = new KafkaSpout<String, ClusterSummary._Fields>();
      assertNotNull(kafkaSpout1);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      
      // Undeclared exception!
      try { 
        kafkaSpout1.poll();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test098()  throws Throwable  {
      KafkaSpoutStreams kafkaSpoutStreams0 = null;
      PersistentList persistentList0 = new PersistentList(kafkaSpoutStreams0);
      assertNotNull(persistentList0);
      assertEquals(1, persistentList0.count());
      assertFalse(persistentList0.isEmpty());
      
      KafkaSpoutConfig<Delayed, Integer> kafkaSpoutConfig0 = (KafkaSpoutConfig<Delayed, Integer>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn(kafkaSpoutStreams0, kafkaSpoutStreams0).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      doReturn(persistentList0).when(kafkaSpoutConfig0).getSubscribedTopics();
      KafkaSpout<Delayed, Integer> kafkaSpout0 = new KafkaSpout<Delayed, Integer>(kafkaSpoutConfig0);
      assertNotNull(kafkaSpout0);
      assertEquals(1, persistentList0.count());
      assertFalse(persistentList0.isEmpty());
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      
      long long0 = 127L;
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      KafkaSpout.Timer kafkaSpout_Timer0 = kafkaSpout0.new Timer(kafkaSpoutConfig0.DEFAULT_OFFSET_COMMIT_PERIOD_MS, long0, timeUnit0);
      assertNotNull(kafkaSpout_Timer0);
      assertEquals(1, persistentList0.count());
      assertFalse(persistentList0.isEmpty());
      assertEquals(30000L, kafkaSpout_Timer0.delay());
      assertEquals(127L, kafkaSpout_Timer0.period());
      assertEquals(TimeUnit.MINUTES, kafkaSpout_Timer0.getTimeUnit());
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(3192409281320000L, kafkaSpout_Timer0.start);
      assertEquals(127L, kafkaSpout_Timer0.period);
      assertEquals(30000L, kafkaSpout_Timer0.delay);
      assertEquals(7620000000000L, kafkaSpout_Timer0.periodNanos);
      
      TimeUnit timeUnit1 = kafkaSpout_Timer0.getTimeUnit();
      assertEquals(1, persistentList0.count());
      assertFalse(persistentList0.isEmpty());
      assertEquals(30000L, kafkaSpout_Timer0.delay());
      assertEquals(127L, kafkaSpout_Timer0.period());
      assertEquals(TimeUnit.MINUTES, kafkaSpout_Timer0.getTimeUnit());
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(3192409281320000L, kafkaSpout_Timer0.start);
      assertEquals(127L, kafkaSpout_Timer0.period);
      assertEquals(30000L, kafkaSpout_Timer0.delay);
      assertEquals(7620000000000L, kafkaSpout_Timer0.periodNanos);
      assertSame(timeUnit0, timeUnit1);
      assertSame(timeUnit1, timeUnit0);
      
      KafkaConsumerFactory<TopicPartition, ClusterSummary._Fields> kafkaConsumerFactory0 = null;
      KafkaSpout<TopicPartition, ClusterSummary._Fields> kafkaSpout1 = new KafkaSpout<TopicPartition, ClusterSummary._Fields>(kafkaSpout0.kafkaSpoutConfig, kafkaConsumerFactory0);
      assertNotNull(kafkaSpout1);
      assertEquals(1, persistentList0.count());
      assertFalse(persistentList0.isEmpty());
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      
      // Undeclared exception!
      try { 
        kafkaSpout1.getNamedTopics();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class clojure.lang.RT
         //
         verifyException("clojure.lang.SeqIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test099()  throws Throwable  {
      KafkaSpoutConfig.FirstPollOffsetStrategy kafkaSpoutConfig_FirstPollOffsetStrategy0 = KafkaSpoutConfig.FirstPollOffsetStrategy.EARLIEST;
      KafkaSpoutConfig<KafkaSpout.OffsetEntry, Object> kafkaSpoutConfig0 = (KafkaSpoutConfig<KafkaSpout.OffsetEntry, Object>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<KafkaSpout.OffsetEntry, Object> kafkaSpout0 = new KafkaSpout<KafkaSpout.OffsetEntry, Object>(kafkaSpoutConfig0);
      assertNotNull(kafkaSpout0);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      
      long long0 = (-1164L);
      KafkaSpout<AbstractMap.SimpleEntry<KafkaSpoutStreamsWildcardTopics, Object>, TopicPartition> kafkaSpout1 = new KafkaSpout<AbstractMap.SimpleEntry<KafkaSpoutStreamsWildcardTopics, Object>, TopicPartition>();
      assertNotNull(kafkaSpout1);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      
      KafkaSpoutRetryService kafkaSpoutRetryService0 = kafkaSpout1.retryService;
      assertNull(kafkaSpoutRetryService0);
      
      String string0 = "";
      Pattern pattern0 = Pattern.compile(string0);
      assertNotNull(pattern0);
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      assertEquals(0, pattern0.flags());
      
      KafkaSpoutConfig<String, String> kafkaSpoutConfig1 = (KafkaSpoutConfig<String, String>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn(kafkaSpoutConfig_FirstPollOffsetStrategy0).when(kafkaSpoutConfig1).getFirstPollOffsetStrategy();
      doReturn(kafkaSpout0.kafkaSpoutStreams).when(kafkaSpoutConfig1).getKafkaSpoutStreams();
      doReturn(kafkaSpoutConfig0.DEFAULT_MAX_RETRIES).when(kafkaSpoutConfig1).getMaxTupleRetries();
      doReturn(long0).when(kafkaSpoutConfig1).getOffsetsCommitPeriodMs();
      doReturn(kafkaSpoutRetryService0).when(kafkaSpoutConfig1).getRetryService();
      doReturn(pattern0).when(kafkaSpoutConfig1).getTopicWildcardPattern();
      doReturn(kafkaSpout1.tuplesBuilder).when(kafkaSpoutConfig1).getTuplesBuilder();
      doReturn(kafkaSpout0.consumerAutoCommitMode).when(kafkaSpoutConfig1).isConsumerAutoCommitMode();
      KafkaConsumerFactoryDefault<String, String> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<String, String>();
      assertNotNull(kafkaConsumerFactoryDefault0);
      
      KafkaSpout<String, String> kafkaSpout2 = new KafkaSpout<String, String>(kafkaSpoutConfig1, kafkaConsumerFactoryDefault0);
      assertNotNull(kafkaSpout2);
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      assertFalse(kafkaSpout2.initialized);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertEquals(0, kafkaSpout2.maxRetries);
      
      Map<Delayed, Delayed> map0 = null;
      TopologyContext topologyContext0 = null;
      SpoutOutputCollector spoutOutputCollector0 = null;
      kafkaSpout2.open(map0, topologyContext0, spoutOutputCollector0);
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      assertEquals(Integer.MAX_VALUE, kafkaSpout2.maxRetries);
      assertFalse(kafkaSpout2.initialized);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      
      String string1 = kafkaSpout2.getWildCardTopics();
      assertNotNull(string1);
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("", string1);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      assertEquals(Integer.MAX_VALUE, kafkaSpout2.maxRetries);
      assertFalse(kafkaSpout2.initialized);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      KafkaSpout<AbstractMap.SimpleEntry<Integer, Object>, Object> kafkaSpout3 = new KafkaSpout<AbstractMap.SimpleEntry<Integer, Object>, Object>();
      assertNotNull(kafkaSpout3);
      assertEquals(0L, kafkaSpout3.numUncommittedOffsets);
      assertEquals(0, kafkaSpout3.maxRetries);
      assertFalse(kafkaSpout3.consumerAutoCommitMode);
      assertFalse(kafkaSpout3.initialized);
      
      // Undeclared exception!
      try { 
        kafkaSpout3.getWildCardTopics();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test100()  throws Throwable  {
      StormTopology stormTopology0 = new StormTopology();
      assertNotNull(stormTopology0);
      assertEquals(0, stormTopology0.get_spouts_size());
      assertEquals(0, stormTopology0.get_dependency_jars_size());
      assertFalse(stormTopology0.is_set_dependency_jars());
      assertEquals(0, stormTopology0.get_state_spouts_size());
      assertFalse(stormTopology0.is_set_dependency_artifacts());
      assertEquals(0, stormTopology0.get_worker_hooks_size());
      assertFalse(stormTopology0.is_set_worker_hooks());
      assertFalse(stormTopology0.is_set_state_spouts());
      assertEquals(0, stormTopology0.get_bolts_size());
      assertFalse(stormTopology0.is_set_spouts());
      assertEquals(0, stormTopology0.get_dependency_artifacts_size());
      assertFalse(stormTopology0.is_set_bolts());
      
      KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, AbstractMap.SimpleEntry<KafkaSpoutStreamsNamedTopics, ClusterSummary._Fields>> kafkaSpoutConfig0 = (KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, AbstractMap.SimpleEntry<KafkaSpoutStreamsNamedTopics, ClusterSummary._Fields>>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      doReturn(0).when(kafkaSpoutConfig0).getMaxUncommittedOffsets();
      KafkaSpout<KafkaSpoutStreamsNamedTopics, AbstractMap.SimpleEntry<KafkaSpoutStreamsNamedTopics, ClusterSummary._Fields>> kafkaSpout0 = new KafkaSpout<KafkaSpoutStreamsNamedTopics, AbstractMap.SimpleEntry<KafkaSpoutStreamsNamedTopics, ClusterSummary._Fields>>(kafkaSpoutConfig0);
      assertNotNull(kafkaSpout0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      
      boolean boolean0 = kafkaSpout0.poll();
      assertFalse(boolean0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      
      String string0 = kafkaSpout0.toString();
      assertNotNull(string0);
      assertEquals("KafkaSpout{acked=null, emitted=null}", string0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      
      // Undeclared exception!
      try { 
        kafkaSpout0.commitOffsetsForAckedTuples();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test101()  throws Throwable  {
      String string0 = "tG+T/\"4W";
      KafkaSpoutConfig<SQLWarning, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig0 = (KafkaSpoutConfig<SQLWarning, KafkaSpoutStreamsWildcardTopics>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<SQLWarning, KafkaSpoutStreamsWildcardTopics> kafkaSpout0 = new KafkaSpout<SQLWarning, KafkaSpoutStreamsWildcardTopics>(kafkaSpoutConfig0);
      assertNotNull(kafkaSpout0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      
      KafkaSpout.KafkaSpoutConsumerRebalanceListener kafkaSpout_KafkaSpoutConsumerRebalanceListener0 = kafkaSpout0.new KafkaSpoutConsumerRebalanceListener();
      assertNotNull(kafkaSpout_KafkaSpoutConsumerRebalanceListener0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      
      LinkedTransferQueue<TopicPartition> linkedTransferQueue0 = new LinkedTransferQueue<TopicPartition>();
      assertNotNull(linkedTransferQueue0);
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) kafkaSpout_KafkaSpoutConsumerRebalanceListener0);
      assertNotNull(predicate0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      
      Predicate<Object> predicate1 = predicate0.negate();
      assertNotNull(predicate1);
      assertFalse(predicate1.equals((Object)predicate0));
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      
      KafkaSpout<ClusterSummary._Fields, Object> kafkaSpout1 = new KafkaSpout<ClusterSummary._Fields, Object>();
      assertNotNull(kafkaSpout1);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      
      ConsumerRecords<ClusterSummary._Fields, Object> consumerRecords0 = null;
      // Undeclared exception!
      try { 
        kafkaSpout1.setWaitingToEmit(consumerRecords0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test102()  throws Throwable  {
      String string0 = "clojure.string$split";
      Object[] objectArray0 = new Object[0];
      PersistentArrayMap persistentArrayMap0 = PersistentArrayMap.createAsIfByAssoc(objectArray0);
      assertNotNull(persistentArrayMap0);
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(0, persistentArrayMap0.count());
      assertEquals(0, objectArray0.length);
      
      KafkaSpoutStreams kafkaSpoutStreams0 = null;
      KafkaSpoutConfig.FirstPollOffsetStrategy kafkaSpoutConfig_FirstPollOffsetStrategy0 = KafkaSpoutConfig.FirstPollOffsetStrategy.UNCOMMITTED_LATEST;
      int int0 = (-301);
      KafkaSpout<CombinedMetric, KafkaSpoutMessageId> kafkaSpout0 = new KafkaSpout<CombinedMetric, KafkaSpoutMessageId>();
      assertNotNull(kafkaSpout0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      
      KafkaSpoutRetryService kafkaSpoutRetryService0 = kafkaSpout0.retryService;
      assertNull(kafkaSpoutRetryService0);
      
      boolean boolean0 = true;
      KafkaSpoutConfig<AbstractMap.SimpleEntry<Integer, ClusterSummary._Fields>, Object> kafkaSpoutConfig0 = (KafkaSpoutConfig<AbstractMap.SimpleEntry<Integer, ClusterSummary._Fields>, Object>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(kafkaSpoutConfig0).getConsumerGroupId();
      doReturn(kafkaSpoutConfig_FirstPollOffsetStrategy0).when(kafkaSpoutConfig0).getFirstPollOffsetStrategy();
      doReturn(persistentArrayMap0).when(kafkaSpoutConfig0).getKafkaProps();
      doReturn(kafkaSpoutStreams0).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      doReturn(int0).when(kafkaSpoutConfig0).getMaxTupleRetries();
      doReturn(kafkaSpoutRetryService0).when(kafkaSpoutConfig0).getRetryService();
      doReturn(kafkaSpout0.tuplesBuilder).when(kafkaSpoutConfig0).getTuplesBuilder();
      doReturn(boolean0).when(kafkaSpoutConfig0).isConsumerAutoCommitMode();
      KafkaConsumerFactoryDefault<AbstractMap.SimpleEntry<Integer, ClusterSummary._Fields>, Object> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<AbstractMap.SimpleEntry<Integer, ClusterSummary._Fields>, Object>();
      assertNotNull(kafkaConsumerFactoryDefault0);
      
      KafkaSpout<AbstractMap.SimpleEntry<Integer, ClusterSummary._Fields>, Object> kafkaSpout1 = new KafkaSpout<AbstractMap.SimpleEntry<Integer, ClusterSummary._Fields>, Object>(kafkaSpoutConfig0, kafkaConsumerFactoryDefault0);
      assertNotNull(kafkaSpout1);
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(0, persistentArrayMap0.count());
      assertEquals(0, objectArray0.length);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      
      PersistentArrayMap persistentArrayMap1 = PersistentArrayMap.createAsIfByAssoc(objectArray0);
      assertNotNull(persistentArrayMap1);
      assertEquals(0, persistentArrayMap1.capacity());
      assertEquals(0, persistentArrayMap1.count());
      assertEquals(0, objectArray0.length);
      assertTrue(persistentArrayMap1.equals((Object)persistentArrayMap0));
      assertNotSame(persistentArrayMap1, persistentArrayMap0);
      
      StormTopology stormTopology0 = new StormTopology(persistentArrayMap0, persistentArrayMap0, persistentArrayMap1);
      assertNotNull(stormTopology0);
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(0, persistentArrayMap0.count());
      assertEquals(0, persistentArrayMap1.capacity());
      assertEquals(0, persistentArrayMap1.count());
      assertEquals(0, stormTopology0.get_spouts_size());
      assertFalse(stormTopology0.is_set_dependency_artifacts());
      assertEquals(0, stormTopology0.get_worker_hooks_size());
      assertTrue(stormTopology0.is_set_state_spouts());
      assertEquals(0, stormTopology0.get_dependency_jars_size());
      assertTrue(stormTopology0.is_set_spouts());
      assertFalse(stormTopology0.is_set_dependency_jars());
      assertEquals(0, stormTopology0.get_dependency_artifacts_size());
      assertTrue(stormTopology0.is_set_bolts());
      assertFalse(stormTopology0.is_set_worker_hooks());
      assertEquals(0, stormTopology0.get_state_spouts_size());
      assertEquals(0, stormTopology0.get_bolts_size());
      assertEquals(0, objectArray0.length);
      assertTrue(persistentArrayMap0.equals((Object)persistentArrayMap1));
      assertTrue(persistentArrayMap1.equals((Object)persistentArrayMap0));
      
      Map<String, Map<String, Fields>> map0 = null;
      String string1 = "";
      Enumeration<TopicPartition> enumeration0 = (Enumeration<TopicPartition>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(kafkaSpout0.consumerAutoCommitMode).when(enumeration0).hasMoreElements();
      EnumerationSeq enumerationSeq0 = EnumerationSeq.create(enumeration0);
      assertNull(enumerationSeq0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      assertNotNull(atomicBoolean0);
      assertEquals("false", atomicBoolean0.toString());
      assertFalse(atomicBoolean0.get());
      
      TopologyContext topologyContext0 = new TopologyContext(stormTopology0, persistentArrayMap1, persistentArrayMap1, persistentArrayMap0, map0, string0, string1, string1, (Integer) kafkaSpoutConfig0.DEFAULT_MAX_UNCOMMITTED_OFFSETS, (Integer) kafkaSpoutConfig0.DEFAULT_MAX_RETRIES, enumerationSeq0, persistentArrayMap1, persistentArrayMap1, persistentArrayMap0, persistentArrayMap0, atomicBoolean0);
      assertNotNull(topologyContext0);
      assertEquals("false", atomicBoolean0.toString());
      assertFalse(atomicBoolean0.get());
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(0, persistentArrayMap0.count());
      assertEquals("clojure.string$split", topologyContext0.getStormId());
      assertNull(topologyContext0.getThisComponentId());
      assertEquals("", topologyContext0.getCodeDir());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/storm/bd1f5c54752f67b484a83c26667331234234d3a3/evosuite_5", topologyContext0.getPIDDir());
      assertEquals(10000000, topologyContext0.getThisTaskId());
      assertEquals(Integer.MAX_VALUE, (int)topologyContext0.getThisWorkerPort());
      assertEquals(0, persistentArrayMap1.capacity());
      assertEquals(0, persistentArrayMap1.count());
      assertEquals(0, stormTopology0.get_spouts_size());
      assertFalse(stormTopology0.is_set_dependency_artifacts());
      assertEquals(0, stormTopology0.get_worker_hooks_size());
      assertTrue(stormTopology0.is_set_state_spouts());
      assertEquals(0, stormTopology0.get_dependency_jars_size());
      assertTrue(stormTopology0.is_set_spouts());
      assertFalse(stormTopology0.is_set_dependency_jars());
      assertEquals(0, stormTopology0.get_dependency_artifacts_size());
      assertTrue(stormTopology0.is_set_bolts());
      assertFalse(stormTopology0.is_set_worker_hooks());
      assertEquals(0, stormTopology0.get_state_spouts_size());
      assertEquals(0, stormTopology0.get_bolts_size());
      assertEquals(0, objectArray0.length);
      assertFalse(string0.equals((Object)string1));
      assertTrue(persistentArrayMap0.equals((Object)persistentArrayMap1));
      assertTrue(persistentArrayMap1.equals((Object)persistentArrayMap0));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      
      KafkaSpout<KafkaSpout<String, KafkaSpoutStreamsNamedTopics>, OffsetAndMetadata> kafkaSpout2 = new KafkaSpout<KafkaSpout<String, KafkaSpoutStreamsNamedTopics>, OffsetAndMetadata>();
      assertNotNull(kafkaSpout2);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertEquals(0, kafkaSpout2.maxRetries);
      assertFalse(kafkaSpout2.initialized);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      
      SpoutOutputCollector spoutOutputCollector0 = kafkaSpout2.collector;
      assertNull(spoutOutputCollector0);
      
      kafkaSpout1.open(persistentArrayMap0, topologyContext0, spoutOutputCollector0);
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(0, persistentArrayMap0.count());
      assertEquals(0, persistentArrayMap1.capacity());
      assertEquals(0, persistentArrayMap1.count());
      assertEquals(0, stormTopology0.get_spouts_size());
      assertFalse(stormTopology0.is_set_dependency_artifacts());
      assertEquals(0, stormTopology0.get_worker_hooks_size());
      assertTrue(stormTopology0.is_set_state_spouts());
      assertEquals(0, stormTopology0.get_dependency_jars_size());
      assertTrue(stormTopology0.is_set_spouts());
      assertFalse(stormTopology0.is_set_dependency_jars());
      assertEquals(0, stormTopology0.get_dependency_artifacts_size());
      assertTrue(stormTopology0.is_set_bolts());
      assertFalse(stormTopology0.is_set_worker_hooks());
      assertEquals(0, stormTopology0.get_state_spouts_size());
      assertEquals(0, stormTopology0.get_bolts_size());
      assertEquals("false", atomicBoolean0.toString());
      assertFalse(atomicBoolean0.get());
      assertEquals("clojure.string$split", topologyContext0.getStormId());
      assertNull(topologyContext0.getThisComponentId());
      assertEquals("", topologyContext0.getCodeDir());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/storm/bd1f5c54752f67b484a83c26667331234234d3a3/evosuite_5", topologyContext0.getPIDDir());
      assertEquals(10000000, topologyContext0.getThisTaskId());
      assertEquals(Integer.MAX_VALUE, (int)topologyContext0.getThisWorkerPort());
      assertEquals(0, objectArray0.length);
      assertFalse(string0.equals((Object)string1));
      assertTrue(persistentArrayMap0.equals((Object)persistentArrayMap1));
      assertTrue(persistentArrayMap1.equals((Object)persistentArrayMap0));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertEquals(0, kafkaSpout2.maxRetries);
      assertFalse(kafkaSpout2.initialized);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals((-301), kafkaSpout1.maxRetries);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertTrue(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertNotSame(string0, string1);
      assertNotSame(persistentArrayMap0, persistentArrayMap1);
      assertNotSame(persistentArrayMap1, persistentArrayMap0);
      assertNotSame(string1, string0);
      
      long long0 = 0L;
      ISeq iSeq0 = LongRange.create((long) kafkaSpoutConfig0.DEFAULT_MAX_UNCOMMITTED_OFFSETS, long0);
      assertNotNull(iSeq0);
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(0, persistentArrayMap0.count());
      assertEquals(0, objectArray0.length);
      assertFalse(string0.equals((Object)string1));
      assertTrue(persistentArrayMap0.equals((Object)persistentArrayMap1));
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertNotSame(string0, string1);
      assertNotSame(persistentArrayMap0, persistentArrayMap1);
      
      PersistentHashSet persistentHashSet0 = PersistentHashSet.create(iSeq0);
      assertNotNull(persistentHashSet0);
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(0, persistentArrayMap0.count());
      assertEquals(0, objectArray0.length);
      assertFalse(string0.equals((Object)string1));
      assertTrue(persistentArrayMap0.equals((Object)persistentArrayMap1));
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertNotSame(string0, string1);
      assertNotSame(persistentArrayMap0, persistentArrayMap1);
      
      kafkaSpout1.emitted = (Set<KafkaSpoutMessageId>) persistentHashSet0;
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(0, persistentArrayMap0.count());
      assertEquals(1, kafkaSpout1.emitted.size());
      assertFalse(kafkaSpout1.emitted.isEmpty());
      
      Map<String, Object> map1 = kafkaSpout1.getComponentConfiguration();
      assertNotNull(map1);
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(0, persistentArrayMap0.count());
      assertFalse(map1.isEmpty());
      assertEquals(2, map1.size());
      assertEquals(0, objectArray0.length);
      assertFalse(string0.equals((Object)string1));
      assertTrue(persistentArrayMap0.equals((Object)persistentArrayMap1));
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals((-301), kafkaSpout1.maxRetries);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertTrue(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertNotSame(string0, string1);
      assertNotSame(persistentArrayMap0, persistentArrayMap1);
      
      KafkaSpout<String, Delayed> kafkaSpout3 = new KafkaSpout<String, Delayed>();
      assertNotNull(kafkaSpout3);
      assertFalse(kafkaSpout3.initialized);
      assertEquals(0L, kafkaSpout3.numUncommittedOffsets);
      assertEquals(0, kafkaSpout3.maxRetries);
      assertFalse(kafkaSpout3.consumerAutoCommitMode);
      
      // Undeclared exception!
      try { 
        kafkaSpout3.getWildCardTopics();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test103()  throws Throwable  {
      String string0 = "clojure.string$split";
      Object[] objectArray0 = new Object[0];
      PersistentArrayMap persistentArrayMap0 = PersistentArrayMap.createAsIfByAssoc(objectArray0);
      assertNotNull(persistentArrayMap0);
      assertEquals(0, persistentArrayMap0.count());
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(0, objectArray0.length);
      
      KafkaSpoutStreams kafkaSpoutStreams0 = null;
      KafkaSpoutConfig.FirstPollOffsetStrategy kafkaSpoutConfig_FirstPollOffsetStrategy0 = KafkaSpoutConfig.FirstPollOffsetStrategy.UNCOMMITTED_EARLIEST;
      int int0 = 472;
      KafkaSpoutConfig<KafkaSpoutMessageId, Delayed> kafkaSpoutConfig0 = (KafkaSpoutConfig<KafkaSpoutMessageId, Delayed>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaConsumerFactoryDefault<KafkaSpoutMessageId, Delayed> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<KafkaSpoutMessageId, Delayed>();
      assertNotNull(kafkaConsumerFactoryDefault0);
      
      KafkaSpout<KafkaSpoutMessageId, Delayed> kafkaSpout0 = new KafkaSpout<KafkaSpoutMessageId, Delayed>(kafkaSpoutConfig0, kafkaConsumerFactoryDefault0);
      assertNotNull(kafkaSpout0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      
      KafkaSpoutRetryService kafkaSpoutRetryService0 = kafkaSpout0.retryService;
      assertNull(kafkaSpoutRetryService0);
      
      boolean boolean0 = true;
      KafkaSpoutConfig<AbstractMap.SimpleEntry<Integer, ClusterSummary._Fields>, Object> kafkaSpoutConfig1 = (KafkaSpoutConfig<AbstractMap.SimpleEntry<Integer, ClusterSummary._Fields>, Object>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(kafkaSpoutConfig1).getConsumerGroupId();
      doReturn(kafkaSpoutConfig_FirstPollOffsetStrategy0).when(kafkaSpoutConfig1).getFirstPollOffsetStrategy();
      doReturn(persistentArrayMap0).when(kafkaSpoutConfig1).getKafkaProps();
      doReturn(kafkaSpoutStreams0).when(kafkaSpoutConfig1).getKafkaSpoutStreams();
      doReturn(int0).when(kafkaSpoutConfig1).getMaxTupleRetries();
      doReturn(kafkaSpoutRetryService0).when(kafkaSpoutConfig1).getRetryService();
      doReturn(kafkaSpout0.tuplesBuilder).when(kafkaSpoutConfig1).getTuplesBuilder();
      doReturn(boolean0).when(kafkaSpoutConfig1).isConsumerAutoCommitMode();
      KafkaConsumerFactoryDefault<AbstractMap.SimpleEntry<Integer, ClusterSummary._Fields>, Object> kafkaConsumerFactoryDefault1 = new KafkaConsumerFactoryDefault<AbstractMap.SimpleEntry<Integer, ClusterSummary._Fields>, Object>();
      assertNotNull(kafkaConsumerFactoryDefault1);
      
      KafkaSpout<AbstractMap.SimpleEntry<Integer, ClusterSummary._Fields>, Object> kafkaSpout1 = new KafkaSpout<AbstractMap.SimpleEntry<Integer, ClusterSummary._Fields>, Object>(kafkaSpoutConfig1, kafkaConsumerFactoryDefault1);
      assertNotNull(kafkaSpout1);
      assertEquals(0, persistentArrayMap0.count());
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(0, objectArray0.length);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      
      PersistentArrayMap persistentArrayMap1 = PersistentArrayMap.createAsIfByAssoc(objectArray0);
      assertNotNull(persistentArrayMap1);
      assertEquals(0, persistentArrayMap1.count());
      assertEquals(0, persistentArrayMap1.capacity());
      assertEquals(0, objectArray0.length);
      assertTrue(persistentArrayMap1.equals((Object)persistentArrayMap0));
      assertNotSame(persistentArrayMap1, persistentArrayMap0);
      
      StormTopology stormTopology0 = new StormTopology(persistentArrayMap0, persistentArrayMap0, persistentArrayMap1);
      assertNotNull(stormTopology0);
      assertEquals(0, persistentArrayMap0.count());
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(0, persistentArrayMap1.count());
      assertEquals(0, persistentArrayMap1.capacity());
      assertTrue(stormTopology0.is_set_bolts());
      assertEquals(0, stormTopology0.get_bolts_size());
      assertTrue(stormTopology0.is_set_state_spouts());
      assertEquals(0, stormTopology0.get_state_spouts_size());
      assertFalse(stormTopology0.is_set_dependency_artifacts());
      assertEquals(0, stormTopology0.get_spouts_size());
      assertEquals(0, stormTopology0.get_dependency_jars_size());
      assertEquals(0, stormTopology0.get_dependency_artifacts_size());
      assertTrue(stormTopology0.is_set_spouts());
      assertFalse(stormTopology0.is_set_worker_hooks());
      assertFalse(stormTopology0.is_set_dependency_jars());
      assertEquals(0, stormTopology0.get_worker_hooks_size());
      assertEquals(0, objectArray0.length);
      assertTrue(persistentArrayMap0.equals((Object)persistentArrayMap1));
      assertTrue(persistentArrayMap1.equals((Object)persistentArrayMap0));
      
      Map<String, Map<String, Fields>> map0 = null;
      String string1 = "";
      boolean boolean1 = true;
      Enumeration<TopicPartition> enumeration0 = (Enumeration<TopicPartition>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(boolean1).when(enumeration0).hasMoreElements();
      EnumerationSeq enumerationSeq0 = EnumerationSeq.create(enumeration0);
      assertNotNull(enumerationSeq0);
      assertFalse(enumerationSeq0.isEmpty());
      
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      assertNotNull(atomicBoolean0);
      assertEquals("false", atomicBoolean0.toString());
      assertFalse(atomicBoolean0.get());
      
      TopologyContext topologyContext0 = new TopologyContext(stormTopology0, persistentArrayMap1, persistentArrayMap1, persistentArrayMap0, map0, string0, string1, string1, (Integer) kafkaSpoutConfig1.DEFAULT_MAX_UNCOMMITTED_OFFSETS, (Integer) kafkaSpoutConfig1.DEFAULT_MAX_RETRIES, enumerationSeq0, persistentArrayMap1, persistentArrayMap1, persistentArrayMap0, persistentArrayMap0, atomicBoolean0);
      assertNotNull(topologyContext0);
      assertEquals(0, persistentArrayMap0.count());
      assertEquals(0, persistentArrayMap0.capacity());
      assertFalse(enumerationSeq0.isEmpty());
      assertEquals("false", atomicBoolean0.toString());
      assertFalse(atomicBoolean0.get());
      assertEquals(10000000, topologyContext0.getThisTaskId());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/storm/bd1f5c54752f67b484a83c26667331234234d3a3/evosuite_5", topologyContext0.getPIDDir());
      assertEquals("clojure.string$split", topologyContext0.getStormId());
      assertNull(topologyContext0.getThisComponentId());
      assertEquals("", topologyContext0.getCodeDir());
      assertEquals(Integer.MAX_VALUE, (int)topologyContext0.getThisWorkerPort());
      assertEquals(0, persistentArrayMap1.count());
      assertEquals(0, persistentArrayMap1.capacity());
      assertTrue(stormTopology0.is_set_bolts());
      assertEquals(0, stormTopology0.get_bolts_size());
      assertTrue(stormTopology0.is_set_state_spouts());
      assertEquals(0, stormTopology0.get_state_spouts_size());
      assertFalse(stormTopology0.is_set_dependency_artifacts());
      assertEquals(0, stormTopology0.get_spouts_size());
      assertEquals(0, stormTopology0.get_dependency_jars_size());
      assertEquals(0, stormTopology0.get_dependency_artifacts_size());
      assertTrue(stormTopology0.is_set_spouts());
      assertFalse(stormTopology0.is_set_worker_hooks());
      assertFalse(stormTopology0.is_set_dependency_jars());
      assertEquals(0, stormTopology0.get_worker_hooks_size());
      assertEquals(0, objectArray0.length);
      assertFalse(string0.equals((Object)string1));
      assertTrue(persistentArrayMap0.equals((Object)persistentArrayMap1));
      assertTrue(persistentArrayMap1.equals((Object)persistentArrayMap0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      
      KafkaSpout<KafkaSpout<String, KafkaSpoutStreamsNamedTopics>, OffsetAndMetadata> kafkaSpout2 = new KafkaSpout<KafkaSpout<String, KafkaSpoutStreamsNamedTopics>, OffsetAndMetadata>();
      assertNotNull(kafkaSpout2);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertEquals(0, kafkaSpout2.maxRetries);
      assertFalse(kafkaSpout2.initialized);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      
      SpoutOutputCollector spoutOutputCollector0 = kafkaSpout2.collector;
      assertNull(spoutOutputCollector0);
      
      kafkaSpout1.open(persistentArrayMap0, topologyContext0, spoutOutputCollector0);
      assertEquals(0, persistentArrayMap0.count());
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(0, persistentArrayMap1.count());
      assertEquals(0, persistentArrayMap1.capacity());
      assertTrue(stormTopology0.is_set_bolts());
      assertEquals(0, stormTopology0.get_bolts_size());
      assertTrue(stormTopology0.is_set_state_spouts());
      assertEquals(0, stormTopology0.get_state_spouts_size());
      assertFalse(stormTopology0.is_set_dependency_artifacts());
      assertEquals(0, stormTopology0.get_spouts_size());
      assertEquals(0, stormTopology0.get_dependency_jars_size());
      assertEquals(0, stormTopology0.get_dependency_artifacts_size());
      assertTrue(stormTopology0.is_set_spouts());
      assertFalse(stormTopology0.is_set_worker_hooks());
      assertFalse(stormTopology0.is_set_dependency_jars());
      assertEquals(0, stormTopology0.get_worker_hooks_size());
      assertFalse(enumerationSeq0.isEmpty());
      assertEquals("false", atomicBoolean0.toString());
      assertFalse(atomicBoolean0.get());
      assertEquals(10000000, topologyContext0.getThisTaskId());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/storm/bd1f5c54752f67b484a83c26667331234234d3a3/evosuite_5", topologyContext0.getPIDDir());
      assertEquals("clojure.string$split", topologyContext0.getStormId());
      assertNull(topologyContext0.getThisComponentId());
      assertEquals("", topologyContext0.getCodeDir());
      assertEquals(Integer.MAX_VALUE, (int)topologyContext0.getThisWorkerPort());
      assertEquals(0, objectArray0.length);
      assertFalse(string0.equals((Object)string1));
      assertTrue(persistentArrayMap0.equals((Object)persistentArrayMap1));
      assertTrue(persistentArrayMap1.equals((Object)persistentArrayMap0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertTrue(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(472, kafkaSpout1.maxRetries);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertEquals(0, kafkaSpout2.maxRetries);
      assertFalse(kafkaSpout2.initialized);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      assertNotSame(string0, string1);
      assertNotSame(persistentArrayMap0, persistentArrayMap1);
      assertNotSame(persistentArrayMap1, persistentArrayMap0);
      assertNotSame(string1, string0);
      
      long long0 = 0L;
      ISeq iSeq0 = LongRange.create((long) kafkaSpoutConfig1.DEFAULT_MAX_UNCOMMITTED_OFFSETS, long0);
      assertNotNull(iSeq0);
      assertEquals(0, persistentArrayMap0.count());
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(0, objectArray0.length);
      assertFalse(string0.equals((Object)string1));
      assertTrue(persistentArrayMap0.equals((Object)persistentArrayMap1));
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertNotSame(string0, string1);
      assertNotSame(persistentArrayMap0, persistentArrayMap1);
      
      PersistentHashSet persistentHashSet0 = PersistentHashSet.create(iSeq0);
      assertNotNull(persistentHashSet0);
      assertEquals(0, persistentArrayMap0.count());
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(0, objectArray0.length);
      assertFalse(string0.equals((Object)string1));
      assertTrue(persistentArrayMap0.equals((Object)persistentArrayMap1));
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertNotSame(string0, string1);
      assertNotSame(persistentArrayMap0, persistentArrayMap1);
      
      kafkaSpout1.emitted = (Set<KafkaSpoutMessageId>) persistentHashSet0;
      assertEquals(0, persistentArrayMap0.count());
      assertEquals(0, persistentArrayMap0.capacity());
      assertFalse(kafkaSpout1.emitted.isEmpty());
      assertEquals(1, kafkaSpout1.emitted.size());
      
      Map<String, Object> map1 = kafkaSpout1.getComponentConfiguration();
      assertNotNull(map1);
      assertEquals(0, persistentArrayMap0.count());
      assertEquals(0, persistentArrayMap0.capacity());
      assertFalse(map1.isEmpty());
      assertEquals(2, map1.size());
      assertEquals(0, objectArray0.length);
      assertFalse(string0.equals((Object)string1));
      assertTrue(persistentArrayMap0.equals((Object)persistentArrayMap1));
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertTrue(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(472, kafkaSpout1.maxRetries);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertNotSame(string0, string1);
      assertNotSame(persistentArrayMap0, persistentArrayMap1);
      
      KafkaSpout<String, Delayed> kafkaSpout3 = new KafkaSpout<String, Delayed>();
      assertNotNull(kafkaSpout3);
      assertEquals(0L, kafkaSpout3.numUncommittedOffsets);
      assertEquals(0, kafkaSpout3.maxRetries);
      assertFalse(kafkaSpout3.initialized);
      assertFalse(kafkaSpout3.consumerAutoCommitMode);
      
      // Undeclared exception!
      try { 
        kafkaSpout3.getWildCardTopics();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test104()  throws Throwable  {
      KafkaSpoutConfig<String, Delayed> kafkaSpoutConfig0 = (KafkaSpoutConfig<String, Delayed>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null, (KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<String, Delayed> kafkaSpout0 = new KafkaSpout<String, Delayed>(kafkaSpoutConfig0);
      assertNotNull(kafkaSpout0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout0.new OffsetEntry();
      assertNotNull(kafkaSpout_OffsetEntry0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      
      TopicPartition topicPartition0 = kafkaSpout_OffsetEntry0.tp;
      assertNull(topicPartition0);
      
      long long0 = 600L;
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry1 = kafkaSpout0.new OffsetEntry(topicPartition0, long0);
      assertNotNull(kafkaSpout_OffsetEntry1);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(599L, kafkaSpout_OffsetEntry1.committedOffset);
      assertEquals(600L, kafkaSpout_OffsetEntry1.initialFetchOffset);
      
      KafkaSpout<Object, TopicPartition> kafkaSpout1 = new KafkaSpout<Object, TopicPartition>(kafkaSpout0.kafkaSpoutConfig);
      assertNotNull(kafkaSpout1);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry2 = kafkaSpout1.new OffsetEntry();
      assertNotNull(kafkaSpout_OffsetEntry2);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertEquals(0L, kafkaSpout_OffsetEntry2.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry2.initialFetchOffset);
      
      OffsetAndMetadata offsetAndMetadata0 = kafkaSpout_OffsetEntry2.findNextCommitOffset();
      assertNull(offsetAndMetadata0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertEquals(0L, kafkaSpout_OffsetEntry2.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry2.initialFetchOffset);
      
      kafkaSpout_OffsetEntry1.commit(offsetAndMetadata0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(599L, kafkaSpout_OffsetEntry1.committedOffset);
      assertEquals(600L, kafkaSpout_OffsetEntry1.initialFetchOffset);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertEquals(0L, kafkaSpout_OffsetEntry2.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry2.initialFetchOffset);
      
      KafkaSpout<TopicPartition, Object> kafkaSpout2 = new KafkaSpout<TopicPartition, Object>();
      assertNotNull(kafkaSpout2);
      assertFalse(kafkaSpout2.initialized);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertEquals(0, kafkaSpout2.maxRetries);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      
      kafkaSpout2.nextTuple();
      assertFalse(kafkaSpout2.initialized);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertEquals(0, kafkaSpout2.maxRetries);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      
      KafkaSpout<KafkaSpoutStreamsNamedTopics, KafkaSpoutMessageId> kafkaSpout3 = new KafkaSpout<KafkaSpoutStreamsNamedTopics, KafkaSpoutMessageId>();
      assertNotNull(kafkaSpout3);
      assertFalse(kafkaSpout3.consumerAutoCommitMode);
      assertFalse(kafkaSpout3.initialized);
      assertEquals(0L, kafkaSpout3.numUncommittedOffsets);
      assertEquals(0, kafkaSpout3.maxRetries);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) kafkaSpout2;
      objectArray0[1] = (Object) kafkaSpout2;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) kafkaSpout3;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[4] = object1;
      objectArray0[5] = (Object) kafkaSpout_OffsetEntry0;
      PersistentArrayMap persistentArrayMap0 = new PersistentArrayMap(objectArray0);
      assertNotNull(persistentArrayMap0);
      assertEquals(3, persistentArrayMap0.capacity());
      assertEquals(3, persistentArrayMap0.count());
      assertEquals(6, objectArray0.length);
      
      StormTopology stormTopology0 = new StormTopology(persistentArrayMap0, persistentArrayMap0, persistentArrayMap0);
      assertNotNull(stormTopology0);
      assertEquals(3, persistentArrayMap0.capacity());
      assertEquals(3, persistentArrayMap0.count());
      assertTrue(stormTopology0.is_set_state_spouts());
      assertFalse(stormTopology0.is_set_worker_hooks());
      assertTrue(stormTopology0.is_set_bolts());
      assertEquals(3, stormTopology0.get_bolts_size());
      assertFalse(stormTopology0.is_set_dependency_jars());
      assertTrue(stormTopology0.is_set_spouts());
      assertEquals(0, stormTopology0.get_dependency_artifacts_size());
      assertEquals(0, stormTopology0.get_worker_hooks_size());
      assertEquals(0, stormTopology0.get_dependency_jars_size());
      assertFalse(stormTopology0.is_set_dependency_artifacts());
      assertEquals(3, stormTopology0.get_state_spouts_size());
      assertEquals(3, stormTopology0.get_spouts_size());
      assertEquals(6, objectArray0.length);
      
      PersistentArrayMap persistentArrayMap1 = new PersistentArrayMap(objectArray0);
      assertNotNull(persistentArrayMap1);
      assertEquals(3, persistentArrayMap1.capacity());
      assertEquals(3, persistentArrayMap1.count());
      assertEquals(6, objectArray0.length);
      assertTrue(persistentArrayMap1.equals((Object)persistentArrayMap0));
      
      String string0 = "Polled [{}] records from Kafka. [{}] uncommitted offsets across all topic partitions";
      String string1 = "}=()";
      Integer integer0 = null;
      Integer integer1 = Integer.getInteger(string1, kafkaSpout3.maxRetries);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(kafkaSpout3.consumerAutoCommitMode);
      assertFalse(kafkaSpout3.initialized);
      assertEquals(0L, kafkaSpout3.numUncommittedOffsets);
      assertEquals(0, kafkaSpout3.maxRetries);
      assertNotSame(string1, string0);
      
      APersistentMap.ValSeq aPersistentMap_ValSeq0 = APersistentMap.ValSeq.createFromMap(persistentArrayMap1);
      assertNotNull(aPersistentMap_ValSeq0);
      assertEquals(3, persistentArrayMap1.capacity());
      assertEquals(3, persistentArrayMap1.count());
      assertFalse(aPersistentMap_ValSeq0.isEmpty());
      assertEquals(6, objectArray0.length);
      assertTrue(persistentArrayMap1.equals((Object)persistentArrayMap0));
      assertNotSame(persistentArrayMap1, persistentArrayMap0);
      
      boolean boolean0 = false;
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(boolean0);
      assertNotNull(atomicBoolean0);
      assertFalse(atomicBoolean0.get());
      assertEquals("false", atomicBoolean0.toString());
      
      TopologyContext topologyContext0 = new TopologyContext(stormTopology0, kafkaSpout2.acked, persistentArrayMap0, persistentArrayMap1, persistentArrayMap0, string0, string1, string0, integer0, integer1, aPersistentMap_ValSeq0, persistentArrayMap0, persistentArrayMap1, persistentArrayMap0, persistentArrayMap1, atomicBoolean0);
      assertNotNull(topologyContext0);
      assertEquals("}=()", topologyContext0.getCodeDir());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/storm/bd1f5c54752f67b484a83c26667331234234d3a3/evosuite_5/Polled [{}] records from Kafka. [{}] uncommitted offsets across all topic partitions", topologyContext0.getPIDDir());
      assertEquals(0, (int)topologyContext0.getThisWorkerPort());
      assertEquals("Polled [{}] records from Kafka. [{}] uncommitted offsets across all topic partitions", topologyContext0.getStormId());
      assertEquals(3, persistentArrayMap0.capacity());
      assertEquals(3, persistentArrayMap0.count());
      assertTrue(stormTopology0.is_set_state_spouts());
      assertFalse(stormTopology0.is_set_worker_hooks());
      assertTrue(stormTopology0.is_set_bolts());
      assertEquals(3, stormTopology0.get_bolts_size());
      assertFalse(stormTopology0.is_set_dependency_jars());
      assertTrue(stormTopology0.is_set_spouts());
      assertEquals(0, stormTopology0.get_dependency_artifacts_size());
      assertEquals(0, stormTopology0.get_worker_hooks_size());
      assertEquals(0, stormTopology0.get_dependency_jars_size());
      assertFalse(stormTopology0.is_set_dependency_artifacts());
      assertEquals(3, stormTopology0.get_state_spouts_size());
      assertEquals(3, stormTopology0.get_spouts_size());
      assertEquals(3, persistentArrayMap1.capacity());
      assertEquals(3, persistentArrayMap1.count());
      assertFalse(aPersistentMap_ValSeq0.isEmpty());
      assertFalse(atomicBoolean0.get());
      assertEquals("false", atomicBoolean0.toString());
      assertEquals(6, objectArray0.length);
      assertTrue(persistentArrayMap0.equals((Object)persistentArrayMap1));
      assertTrue(persistentArrayMap1.equals((Object)persistentArrayMap0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(kafkaSpout2.initialized);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertEquals(0, kafkaSpout2.maxRetries);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      assertFalse(kafkaSpout3.consumerAutoCommitMode);
      assertFalse(kafkaSpout3.initialized);
      assertEquals(0L, kafkaSpout3.numUncommittedOffsets);
      assertEquals(0, kafkaSpout3.maxRetries);
      
      KafkaSpout<Object, KafkaSpoutStreamsWildcardTopics> kafkaSpout4 = new KafkaSpout<Object, KafkaSpoutStreamsWildcardTopics>();
      assertNotNull(kafkaSpout4);
      assertEquals(0, kafkaSpout4.maxRetries);
      assertEquals(0L, kafkaSpout4.numUncommittedOffsets);
      assertFalse(kafkaSpout4.consumerAutoCommitMode);
      assertFalse(kafkaSpout4.initialized);
      
      SpoutOutputCollector spoutOutputCollector0 = kafkaSpout4.collector;
      assertNull(spoutOutputCollector0);
      
      // Undeclared exception!
      try { 
        kafkaSpout3.open(kafkaSpout2.acked, topologyContext0, spoutOutputCollector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test105()  throws Throwable  {
      KafkaSpoutConfig<String, Delayed> kafkaSpoutConfig0 = (KafkaSpoutConfig<String, Delayed>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null, (KafkaSpoutStreams) null, (KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<String, Delayed> kafkaSpout0 = new KafkaSpout<String, Delayed>(kafkaSpoutConfig0);
      assertNotNull(kafkaSpout0);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout0.new OffsetEntry();
      assertNotNull(kafkaSpout_OffsetEntry0);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      
      TopicPartition topicPartition0 = kafkaSpout_OffsetEntry0.tp;
      assertNull(topicPartition0);
      
      long long0 = 600L;
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry1 = kafkaSpout0.new OffsetEntry(topicPartition0, long0);
      assertNotNull(kafkaSpout_OffsetEntry1);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(599L, kafkaSpout_OffsetEntry1.committedOffset);
      assertEquals(600L, kafkaSpout_OffsetEntry1.initialFetchOffset);
      
      KafkaSpout<Object, TopicPartition> kafkaSpout1 = new KafkaSpout<Object, TopicPartition>(kafkaSpout0.kafkaSpoutConfig);
      assertNotNull(kafkaSpout1);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry2 = kafkaSpout1.new OffsetEntry();
      assertNotNull(kafkaSpout_OffsetEntry2);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertEquals(0L, kafkaSpout_OffsetEntry2.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry2.committedOffset);
      
      KafkaSpoutMessageId kafkaSpoutMessageId0 = new KafkaSpoutMessageId(kafkaSpout_OffsetEntry1.tp, kafkaSpout_OffsetEntry0.committedOffset);
      assertNotNull(kafkaSpoutMessageId0);
      assertEquals(0L, kafkaSpoutMessageId0.offset());
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(599L, kafkaSpout_OffsetEntry1.committedOffset);
      assertEquals(600L, kafkaSpout_OffsetEntry1.initialFetchOffset);
      
      kafkaSpout_OffsetEntry2.add(kafkaSpoutMessageId0);
      assertEquals(0L, kafkaSpoutMessageId0.offset());
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(599L, kafkaSpout_OffsetEntry1.committedOffset);
      assertEquals(600L, kafkaSpout_OffsetEntry1.initialFetchOffset);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertEquals(0L, kafkaSpout_OffsetEntry2.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry2.committedOffset);
      
      OffsetAndMetadata offsetAndMetadata0 = kafkaSpout_OffsetEntry2.findNextCommitOffset();
      assertNotNull(offsetAndMetadata0);
      assertEquals("{topic-partition=null, offset=0, numFails=0, thread='TEST_EXECUTION_THREAD_1'}", offsetAndMetadata0.metadata());
      assertEquals(0L, offsetAndMetadata0.offset());
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertEquals(0L, kafkaSpout_OffsetEntry2.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry2.committedOffset);
      
      kafkaSpout_OffsetEntry1.commit(offsetAndMetadata0);
      assertEquals("{topic-partition=null, offset=0, numFails=0, thread='TEST_EXECUTION_THREAD_1'}", offsetAndMetadata0.metadata());
      assertEquals(0L, offsetAndMetadata0.offset());
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(599L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry1.committedOffset);
      assertEquals(600L, kafkaSpout_OffsetEntry1.initialFetchOffset);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertEquals(0L, kafkaSpout_OffsetEntry2.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry2.committedOffset);
      
      KafkaSpout<KafkaSpout.OffsetEntry, KafkaSpout.OffsetEntry> kafkaSpout2 = new KafkaSpout<KafkaSpout.OffsetEntry, KafkaSpout.OffsetEntry>(kafkaSpout1.kafkaSpoutConfig);
      assertNotNull(kafkaSpout2);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(599L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertEquals(0, kafkaSpout2.maxRetries);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      assertFalse(kafkaSpout2.initialized);
      
      OutputFieldsGetter outputFieldsGetter0 = new OutputFieldsGetter();
      assertNotNull(outputFieldsGetter0);
      
      StormTopology stormTopology0 = new StormTopology();
      assertNotNull(stormTopology0);
      assertEquals(0, stormTopology0.get_bolts_size());
      assertFalse(stormTopology0.is_set_spouts());
      assertFalse(stormTopology0.is_set_dependency_jars());
      assertFalse(stormTopology0.is_set_bolts());
      assertEquals(0, stormTopology0.get_dependency_artifacts_size());
      assertEquals(0, stormTopology0.get_dependency_jars_size());
      assertEquals(0, stormTopology0.get_state_spouts_size());
      assertEquals(0, stormTopology0.get_spouts_size());
      assertFalse(stormTopology0.is_set_dependency_artifacts());
      assertEquals(0, stormTopology0.get_worker_hooks_size());
      assertFalse(stormTopology0.is_set_worker_hooks());
      assertFalse(stormTopology0.is_set_state_spouts());
      
      StormTopology stormTopology1 = new StormTopology(stormTopology0);
      assertNotNull(stormTopology1);
      assertEquals(0, stormTopology0.get_bolts_size());
      assertFalse(stormTopology0.is_set_spouts());
      assertFalse(stormTopology0.is_set_dependency_jars());
      assertFalse(stormTopology0.is_set_bolts());
      assertEquals(0, stormTopology0.get_dependency_artifacts_size());
      assertEquals(0, stormTopology0.get_dependency_jars_size());
      assertEquals(0, stormTopology0.get_state_spouts_size());
      assertEquals(0, stormTopology0.get_spouts_size());
      assertFalse(stormTopology0.is_set_dependency_artifacts());
      assertEquals(0, stormTopology0.get_worker_hooks_size());
      assertFalse(stormTopology0.is_set_worker_hooks());
      assertFalse(stormTopology0.is_set_state_spouts());
      assertEquals(0, stormTopology1.get_dependency_jars_size());
      assertEquals(0, stormTopology1.get_dependency_artifacts_size());
      assertEquals(0, stormTopology1.get_spouts_size());
      assertEquals(0, stormTopology1.get_worker_hooks_size());
      assertFalse(stormTopology1.is_set_state_spouts());
      assertFalse(stormTopology1.is_set_bolts());
      assertFalse(stormTopology1.is_set_dependency_artifacts());
      assertEquals(0, stormTopology1.get_state_spouts_size());
      assertFalse(stormTopology1.is_set_spouts());
      assertEquals(0, stormTopology1.get_bolts_size());
      assertFalse(stormTopology1.is_set_worker_hooks());
      assertFalse(stormTopology1.is_set_dependency_jars());
      assertTrue(stormTopology1.equals((Object)stormTopology0));
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) offsetAndMetadata0;
      PersistentArrayMap persistentArrayMap0 = PersistentArrayMap.createAsIfByAssoc(objectArray0);
      assertNotNull(persistentArrayMap0);
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(0, persistentArrayMap0.count());
      assertEquals(1, objectArray0.length);
      
      pprint.format_integer pprint_format_integer0 = null;
      try {
        pprint_format_integer0 = new pprint.format_integer();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 11000)
  public void test106()  throws Throwable  {
      KafkaSpoutStreams kafkaSpoutStreams0 = null;
      Object object0 = new Object();
      assertNotNull(object0);
      
      MapEntry mapEntry0 = new MapEntry(object0, kafkaSpoutStreams0);
      assertNotNull(mapEntry0);
      assertEquals(2, mapEntry0.count());
      
      KafkaSpoutConfig<String, Delayed> kafkaSpoutConfig0 = (KafkaSpoutConfig<String, Delayed>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn(kafkaSpoutStreams0, kafkaSpoutStreams0, kafkaSpoutStreams0).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      doReturn(mapEntry0).when(kafkaSpoutConfig0).getSubscribedTopics();
      KafkaSpout<String, Delayed> kafkaSpout0 = new KafkaSpout<String, Delayed>(kafkaSpoutConfig0);
      assertNotNull(kafkaSpout0);
      assertEquals(2, mapEntry0.count());
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout0.new OffsetEntry();
      assertNotNull(kafkaSpout_OffsetEntry0);
      assertEquals(2, mapEntry0.count());
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      
      TopicPartition topicPartition0 = kafkaSpout_OffsetEntry0.tp;
      assertNull(topicPartition0);
      
      long long0 = 600L;
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry1 = kafkaSpout0.new OffsetEntry(topicPartition0, long0);
      assertNotNull(kafkaSpout_OffsetEntry1);
      assertEquals(2, mapEntry0.count());
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals(599L, kafkaSpout_OffsetEntry1.committedOffset);
      assertEquals(600L, kafkaSpout_OffsetEntry1.initialFetchOffset);
      
      KafkaSpout<Object, TopicPartition> kafkaSpout1 = new KafkaSpout<Object, TopicPartition>(kafkaSpout0.kafkaSpoutConfig);
      assertNotNull(kafkaSpout1);
      assertEquals(2, mapEntry0.count());
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry2 = kafkaSpout1.new OffsetEntry();
      assertNotNull(kafkaSpout_OffsetEntry2);
      assertEquals(2, mapEntry0.count());
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0L, kafkaSpout_OffsetEntry2.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry2.committedOffset);
      
      OffsetAndMetadata offsetAndMetadata0 = kafkaSpout_OffsetEntry2.findNextCommitOffset();
      assertNull(offsetAndMetadata0);
      assertEquals(2, mapEntry0.count());
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0L, kafkaSpout_OffsetEntry2.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry2.committedOffset);
      
      kafkaSpout_OffsetEntry1.commit(offsetAndMetadata0);
      assertEquals(2, mapEntry0.count());
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals(599L, kafkaSpout_OffsetEntry1.committedOffset);
      assertEquals(600L, kafkaSpout_OffsetEntry1.initialFetchOffset);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0L, kafkaSpout_OffsetEntry2.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry2.committedOffset);
      
      KafkaConsumerFactoryDefault<TopicPartition, OffsetAndMetadata> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<TopicPartition, OffsetAndMetadata>();
      assertNotNull(kafkaConsumerFactoryDefault0);
      
      KafkaSpout<TopicPartition, OffsetAndMetadata> kafkaSpout2 = new KafkaSpout<TopicPartition, OffsetAndMetadata>(kafkaSpout1.kafkaSpoutConfig, kafkaConsumerFactoryDefault0);
      assertNotNull(kafkaSpout2);
      assertEquals(2, mapEntry0.count());
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout2.maxRetries);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertFalse(kafkaSpout2.initialized);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      
      // Undeclared exception!
      try { 
        kafkaSpout2.getNamedTopics();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test107()  throws Throwable  {
      KafkaSpoutConfig<String, Delayed> kafkaSpoutConfig0 = (KafkaSpoutConfig<String, Delayed>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null, (KafkaSpoutStreams) null, (KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<String, Delayed> kafkaSpout0 = new KafkaSpout<String, Delayed>(kafkaSpoutConfig0);
      assertNotNull(kafkaSpout0);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout0.new OffsetEntry();
      assertNotNull(kafkaSpout_OffsetEntry0);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      
      TopicPartition topicPartition0 = kafkaSpout_OffsetEntry0.tp;
      assertNull(topicPartition0);
      
      long long0 = 600L;
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry1 = kafkaSpout0.new OffsetEntry(topicPartition0, long0);
      assertNotNull(kafkaSpout_OffsetEntry1);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals(599L, kafkaSpout_OffsetEntry1.committedOffset);
      assertEquals(600L, kafkaSpout_OffsetEntry1.initialFetchOffset);
      
      KafkaSpout<Object, TopicPartition> kafkaSpout1 = new KafkaSpout<Object, TopicPartition>(kafkaSpout0.kafkaSpoutConfig);
      assertNotNull(kafkaSpout1);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry2 = kafkaSpout1.new OffsetEntry();
      assertNotNull(kafkaSpout_OffsetEntry2);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout_OffsetEntry2.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry2.initialFetchOffset);
      
      OffsetAndMetadata offsetAndMetadata0 = kafkaSpout_OffsetEntry2.findNextCommitOffset();
      assertNull(offsetAndMetadata0);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout_OffsetEntry2.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry2.initialFetchOffset);
      
      kafkaSpout_OffsetEntry1.commit(offsetAndMetadata0);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals(599L, kafkaSpout_OffsetEntry1.committedOffset);
      assertEquals(600L, kafkaSpout_OffsetEntry1.initialFetchOffset);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout_OffsetEntry2.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry2.initialFetchOffset);
      
      KafkaSpout<TopicPartition, Object> kafkaSpout2 = new KafkaSpout<TopicPartition, Object>();
      assertNotNull(kafkaSpout2);
      assertEquals(0, kafkaSpout2.maxRetries);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertFalse(kafkaSpout2.initialized);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      
      kafkaSpout2.nextTuple();
      assertEquals(0, kafkaSpout2.maxRetries);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertFalse(kafkaSpout2.initialized);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      
      KafkaConsumerFactoryDefault<AbstractMap.SimpleImmutableEntry<ClusterSummary._Fields, KafkaSpoutStreamsNamedTopics>, Integer> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<AbstractMap.SimpleImmutableEntry<ClusterSummary._Fields, KafkaSpoutStreamsNamedTopics>, Integer>();
      assertNotNull(kafkaConsumerFactoryDefault0);
      
      KafkaSpout<AbstractMap.SimpleImmutableEntry<ClusterSummary._Fields, KafkaSpoutStreamsNamedTopics>, Integer> kafkaSpout3 = new KafkaSpout<AbstractMap.SimpleImmutableEntry<ClusterSummary._Fields, KafkaSpoutStreamsNamedTopics>, Integer>(kafkaSpout0.kafkaSpoutConfig, kafkaConsumerFactoryDefault0);
      assertNotNull(kafkaSpout3);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout3.numUncommittedOffsets);
      assertFalse(kafkaSpout3.initialized);
      assertFalse(kafkaSpout3.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout3.maxRetries);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) offsetAndMetadata0;
      objectArray0[1] = (Object) kafkaSpout_OffsetEntry0;
      objectArray0[2] = (Object) kafkaSpout_OffsetEntry2;
      objectArray0[3] = (Object) kafkaConsumerFactoryDefault0;
      objectArray0[4] = (Object) kafkaSpout0;
      PersistentArrayMap persistentArrayMap0 = PersistentArrayMap.createWithCheck(objectArray0);
      assertNotNull(persistentArrayMap0);
      assertEquals(2, persistentArrayMap0.capacity());
      assertEquals(2, persistentArrayMap0.count());
      assertEquals(5, objectArray0.length);
      
      ConsumerRecords<AbstractMap.SimpleImmutableEntry<ClusterSummary._Fields, KafkaSpoutStreamsNamedTopics>, Integer> consumerRecords0 = new ConsumerRecords<AbstractMap.SimpleImmutableEntry<ClusterSummary._Fields, KafkaSpoutStreamsNamedTopics>, Integer>(persistentArrayMap0);
      assertNotNull(consumerRecords0);
      assertEquals(2, persistentArrayMap0.capacity());
      assertEquals(2, persistentArrayMap0.count());
      assertFalse(consumerRecords0.isEmpty());
      assertEquals(5, objectArray0.length);
      
      // Undeclared exception!
      try { 
        kafkaSpout3.setWaitingToEmit(consumerRecords0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.storm.kafka.spout.KafkaSpout$OffsetEntry cannot be cast to java.util.List
         //
         verifyException("org.apache.kafka.clients.consumer.ConsumerRecords", e);
      }
  }

  @Test(timeout = 11000)
  public void test108()  throws Throwable  {
      Object[] objectArray0 = null;
      // Undeclared exception!
      try { 
        PersistentHashMap.createWithCheck(objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("clojure.lang.PersistentHashMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test109()  throws Throwable  {
      KafkaSpoutConfig<String, Delayed> kafkaSpoutConfig0 = (KafkaSpoutConfig<String, Delayed>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<String, Delayed> kafkaSpout0 = new KafkaSpout<String, Delayed>(kafkaSpoutConfig0);
      assertNotNull(kafkaSpout0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout0.new OffsetEntry();
      assertNotNull(kafkaSpout_OffsetEntry0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      
      HashMap<TopicPartition, List<ConsumerRecord<String, Delayed>>> hashMap0 = new HashMap<TopicPartition, List<ConsumerRecord<String, Delayed>>>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) hashMap0;
      objectArray0[1] = (Object) kafkaSpoutConfig0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) kafkaSpout_OffsetEntry0;
      objectArray0[4] = (Object) kafkaSpoutConfig0;
      int int0 = 2792;
      ArrayChunk arrayChunk0 = new ArrayChunk(objectArray0, int0, kafkaSpoutConfig0.DEFAULT_MAX_RETRIES);
      assertNotNull(arrayChunk0);
      assertEquals(2147480855, arrayChunk0.count());
      assertEquals(5, objectArray0.length);
      
      PersistentArrayMap persistentArrayMap0 = (PersistentArrayMap)PersistentArrayMap.create(hashMap0);
      assertNotNull(persistentArrayMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(0, persistentArrayMap0.count());
      
      PersistentVector persistentVector0 = PersistentVector.EMPTY;
      assertNotNull(persistentVector0);
      assertEquals(0, persistentVector0.count());
      assertEquals(5, persistentVector0.shift);
      
      int int1 = (-245);
      APersistentVector.SubVector aPersistentVector_SubVector0 = new APersistentVector.SubVector(persistentArrayMap0, persistentVector0, int1, int1);
      assertNotNull(aPersistentVector_SubVector0);
      assertEquals(0, aPersistentVector_SubVector0.count());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(0, persistentArrayMap0.count());
      assertEquals(0, persistentVector0.count());
      assertFalse(int1 == int0);
      assertEquals((-245), aPersistentVector_SubVector0.end);
      assertEquals((-245), aPersistentVector_SubVector0.start);
      assertEquals(5, persistentVector0.shift);
      
      APersistentVector.RSeq aPersistentVector_RSeq0 = new APersistentVector.RSeq(aPersistentVector_SubVector0, int0);
      assertNotNull(aPersistentVector_RSeq0);
      assertEquals(0, aPersistentVector_SubVector0.count());
      assertEquals(2793, aPersistentVector_RSeq0.count());
      assertEquals(2792, aPersistentVector_RSeq0.index());
      assertFalse(aPersistentVector_RSeq0.isEmpty());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(0, persistentArrayMap0.count());
      assertEquals(0, persistentVector0.count());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-245), aPersistentVector_SubVector0.end);
      assertEquals((-245), aPersistentVector_SubVector0.start);
      assertEquals(5, persistentVector0.shift);
      
      ChunkedCons chunkedCons0 = new ChunkedCons(arrayChunk0, aPersistentVector_RSeq0);
      assertNotNull(chunkedCons0);
      assertEquals(0, aPersistentVector_SubVector0.count());
      assertEquals(2793, aPersistentVector_RSeq0.count());
      assertEquals(2792, aPersistentVector_RSeq0.index());
      assertFalse(aPersistentVector_RSeq0.isEmpty());
      assertFalse(chunkedCons0.isEmpty());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(2147480855, arrayChunk0.count());
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(0, persistentArrayMap0.count());
      assertEquals(0, persistentVector0.count());
      assertEquals(5, objectArray0.length);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-245), aPersistentVector_SubVector0.end);
      assertEquals((-245), aPersistentVector_SubVector0.start);
      assertEquals(5, persistentVector0.shift);
      
      List<ConsumerRecord<String, Delayed>> list0 = hashMap0.put(kafkaSpout_OffsetEntry0.tp, chunkedCons0);
      assertNull(list0);
      assertEquals(0, aPersistentVector_SubVector0.count());
      assertEquals(2793, aPersistentVector_RSeq0.count());
      assertEquals(2792, aPersistentVector_RSeq0.index());
      assertFalse(aPersistentVector_RSeq0.isEmpty());
      assertFalse(chunkedCons0.isEmpty());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(2147480855, arrayChunk0.count());
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(0, persistentArrayMap0.count());
      assertEquals(0, persistentVector0.count());
      assertEquals(5, objectArray0.length);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-245), aPersistentVector_SubVector0.end);
      assertEquals((-245), aPersistentVector_SubVector0.start);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(5, persistentVector0.shift);
      
      ConsumerRecords<String, Delayed> consumerRecords0 = new ConsumerRecords<String, Delayed>(hashMap0);
      assertNotNull(consumerRecords0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(consumerRecords0.isEmpty());
      
      // Undeclared exception!
      try { 
        kafkaSpout0.setWaitingToEmit(consumerRecords0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class clojure.lang.RT
         //
         verifyException("clojure.lang.ASeq", e);
      }
  }

  @Test(timeout = 11000)
  public void test110()  throws Throwable  {
      KafkaSpoutConfig<String, Delayed> kafkaSpoutConfig0 = (KafkaSpoutConfig<String, Delayed>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null, (KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<String, Delayed> kafkaSpout0 = new KafkaSpout<String, Delayed>(kafkaSpoutConfig0);
      assertNotNull(kafkaSpout0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout0.new OffsetEntry();
      assertNotNull(kafkaSpout_OffsetEntry0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      
      HashMap<TopicPartition, List<ConsumerRecord<String, Delayed>>> hashMap0 = new HashMap<TopicPartition, List<ConsumerRecord<String, Delayed>>>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      List<ConsumerRecord<String, Delayed>> list0 = null;
      List<ConsumerRecord<String, Delayed>> list1 = hashMap0.put(kafkaSpout_OffsetEntry0.tp, list0);
      assertNull(list1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      
      ConsumerRecords<String, Delayed> consumerRecords0 = new ConsumerRecords<String, Delayed>(hashMap0);
      assertNotNull(consumerRecords0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(consumerRecords0.isEmpty());
      
      kafkaSpout0.setWaitingToEmit(consumerRecords0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(consumerRecords0.isEmpty());
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      
      TopicPartition topicPartition0 = kafkaSpout_OffsetEntry0.tp;
      assertNull(topicPartition0);
      
      long long0 = 600L;
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry1 = kafkaSpout0.new OffsetEntry(topicPartition0, long0);
      assertNotNull(kafkaSpout_OffsetEntry1);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals(599L, kafkaSpout_OffsetEntry1.committedOffset);
      assertEquals(600L, kafkaSpout_OffsetEntry1.initialFetchOffset);
      
      KafkaSpout<Object, TopicPartition> kafkaSpout1 = new KafkaSpout<Object, TopicPartition>(kafkaSpout0.kafkaSpoutConfig);
      assertNotNull(kafkaSpout1);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      
      boolean boolean0 = kafkaSpout_OffsetEntry1.isEmpty();
      assertTrue(boolean0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals(599L, kafkaSpout_OffsetEntry1.committedOffset);
      assertEquals(600L, kafkaSpout_OffsetEntry1.initialFetchOffset);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry2 = kafkaSpout1.new OffsetEntry();
      assertNotNull(kafkaSpout_OffsetEntry2);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout_OffsetEntry2.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry2.committedOffset);
      
      OffsetAndMetadata offsetAndMetadata0 = kafkaSpout_OffsetEntry2.findNextCommitOffset();
      assertNull(offsetAndMetadata0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout_OffsetEntry2.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry2.committedOffset);
      
      kafkaSpout_OffsetEntry1.commit(offsetAndMetadata0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals(599L, kafkaSpout_OffsetEntry1.committedOffset);
      assertEquals(600L, kafkaSpout_OffsetEntry1.initialFetchOffset);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout_OffsetEntry2.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry2.committedOffset);
      
      KafkaSpout<TopicPartition, Object> kafkaSpout2 = new KafkaSpout<TopicPartition, Object>();
      assertNotNull(kafkaSpout2);
      assertEquals(0, kafkaSpout2.maxRetries);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      assertFalse(kafkaSpout2.initialized);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      
      kafkaSpout2.nextTuple();
      assertEquals(0, kafkaSpout2.maxRetries);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      assertFalse(kafkaSpout2.initialized);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      
      KafkaSpout.OffsetComparator kafkaSpout_OffsetComparator0 = new KafkaSpout.OffsetComparator();
      assertNotNull(kafkaSpout_OffsetComparator0);
      
      String string0 = null;
      long long1 = (-1886L);
      long long2 = (-684L);
      TimestampType timestampType0 = TimestampType.NO_TIMESTAMP_TYPE;
      int int0 = (-2147483645);
      int int1 = (-2147483645);
      ClusterSummary._Fields clusterSummary__Fields0 = ClusterSummary._Fields.TOPOLOGIES;
      ICombiner<TopicPartition> iCombiner0 = (ICombiner<TopicPartition>) mock(ICombiner.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        KafkaSpoutConfig.FirstPollOffsetStrategy.valueOf(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 11000)
  public void test111()  throws Throwable  {
      long long0 = (-1242L);
      System.setCurrentTimeMillis(long0);
      String string0 = "clojure.core$byte_array__inliner__5138";
      PersistentHashMap persistentHashMap0 = PersistentHashMap.EMPTY;
      assertNotNull(persistentHashMap0);
      assertEquals(0, persistentHashMap0.count());
      
      KafkaSpout<TopicPartition, ClusterSummary._Fields> kafkaSpout0 = new KafkaSpout<TopicPartition, ClusterSummary._Fields>();
      assertNotNull(kafkaSpout0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      
      KafkaSpoutStreams kafkaSpoutStreams0 = kafkaSpout0.kafkaSpoutStreams;
      assertNull(kafkaSpoutStreams0);
      
      Deserializer<Object> deserializer0 = (Deserializer<Object>) mock(Deserializer.class, new ViolatedAssumptionAnswer());
      int int0 = 1024;
      Deserializer<OffsetAndMetadata> deserializer1 = (Deserializer<OffsetAndMetadata>) mock(Deserializer.class, new ViolatedAssumptionAnswer());
      KafkaSpoutConfig<Object, OffsetAndMetadata> kafkaSpoutConfig0 = (KafkaSpoutConfig<Object, OffsetAndMetadata>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(kafkaSpoutConfig0).getConsumerGroupId();
      doReturn(persistentHashMap0, persistentHashMap0).when(kafkaSpoutConfig0).getKafkaProps();
      doReturn(kafkaSpoutStreams0, kafkaSpout0.kafkaSpoutStreams).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      doReturn(deserializer0).when(kafkaSpoutConfig0).getKeyDeserializer();
      doReturn(int0).when(kafkaSpoutConfig0).getMaxUncommittedOffsets();
      doReturn(deserializer1).when(kafkaSpoutConfig0).getValueDeserializer();
      KafkaSpout<Object, OffsetAndMetadata> kafkaSpout1 = new KafkaSpout<Object, OffsetAndMetadata>(kafkaSpoutConfig0);
      assertNotNull(kafkaSpout1);
      assertEquals(0, persistentHashMap0.count());
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      
      boolean boolean0 = kafkaSpout1.poll();
      assertEquals(0, persistentHashMap0.count());
      assertTrue(boolean0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      
      KafkaSpout.OffsetComparator kafkaSpout_OffsetComparator0 = new KafkaSpout.OffsetComparator();
      assertNotNull(kafkaSpout_OffsetComparator0);
      
      TopicPartition topicPartition0 = null;
      long long1 = (-987L);
      KafkaSpoutMessageId kafkaSpoutMessageId0 = new KafkaSpoutMessageId(topicPartition0, long1);
      assertNotNull(kafkaSpoutMessageId0);
      assertEquals((-987L), kafkaSpoutMessageId0.offset());
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertFalse(long1 == long0);
      
      int int1 = kafkaSpout_OffsetComparator0.compare(kafkaSpoutMessageId0, kafkaSpoutMessageId0);
      assertEquals((-987L), kafkaSpoutMessageId0.offset());
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertFalse(long1 == long0);
      
      KafkaSpout.KafkaSpoutConsumerRebalanceListener kafkaSpout_KafkaSpoutConsumerRebalanceListener0 = kafkaSpout1.new KafkaSpoutConsumerRebalanceListener();
      assertNotNull(kafkaSpout_KafkaSpoutConsumerRebalanceListener0);
      assertEquals(0, persistentHashMap0.count());
      assertFalse(int0 == int1);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      
      KafkaConsumerFactoryDefault<String, KafkaSpout.OffsetEntry> kafkaConsumerFactoryDefault0 = new KafkaConsumerFactoryDefault<String, KafkaSpout.OffsetEntry>();
      assertNotNull(kafkaConsumerFactoryDefault0);
      
      KafkaSpout<String, KafkaSpout.OffsetEntry> kafkaSpout2 = new KafkaSpout<String, KafkaSpout.OffsetEntry>(kafkaSpout1.kafkaSpoutConfig, kafkaConsumerFactoryDefault0);
      assertNotNull(kafkaSpout2);
      assertEquals(0, persistentHashMap0.count());
      assertFalse(int0 == int1);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      assertFalse(kafkaSpout2.initialized);
      assertEquals(0, kafkaSpout2.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      
      Map<String, Object> map0 = kafkaSpout2.getComponentConfiguration();
      assertNotNull(map0);
      assertEquals(0, persistentHashMap0.count());
      assertEquals(2, map0.size());
      assertFalse(map0.isEmpty());
      assertFalse(int0 == int1);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      assertFalse(kafkaSpout2.initialized);
      assertEquals(0, kafkaSpout2.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      
      // Undeclared exception!
      try { 
        kafkaSpout2.activate();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to construct kafka consumer
         //
         verifyException("org.apache.kafka.clients.consumer.KafkaConsumer", e);
      }
  }

  @Test(timeout = 11000)
  public void test112()  throws Throwable  {
      KafkaSpoutConfig<String, Delayed> kafkaSpoutConfig0 = (KafkaSpoutConfig<String, Delayed>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null, (KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      KafkaSpout<String, Delayed> kafkaSpout0 = new KafkaSpout<String, Delayed>(kafkaSpoutConfig0);
      assertNotNull(kafkaSpout0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout0.new OffsetEntry();
      assertNotNull(kafkaSpout_OffsetEntry0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      
      long long0 = 600L;
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry1 = kafkaSpout0.new OffsetEntry(kafkaSpout_OffsetEntry0.tp, long0);
      assertNotNull(kafkaSpout_OffsetEntry1);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals(600L, kafkaSpout_OffsetEntry1.initialFetchOffset);
      assertEquals(599L, kafkaSpout_OffsetEntry1.committedOffset);
      
      KafkaSpout<Object, TopicPartition> kafkaSpout1 = new KafkaSpout<Object, TopicPartition>(kafkaSpout0.kafkaSpoutConfig);
      assertNotNull(kafkaSpout1);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry2 = kafkaSpout1.new OffsetEntry();
      assertNotNull(kafkaSpout_OffsetEntry2);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0L, kafkaSpout_OffsetEntry2.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry2.committedOffset);
      
      long long1 = 1051L;
      long long2 = 1430L;
      KafkaSpoutMessageId kafkaSpoutMessageId0 = new KafkaSpoutMessageId(kafkaSpout_OffsetEntry2.tp, long2);
      assertNotNull(kafkaSpoutMessageId0);
      assertEquals(1430L, kafkaSpoutMessageId0.offset());
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0L, kafkaSpout_OffsetEntry2.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry2.committedOffset);
      
      kafkaSpout_OffsetEntry2.add(kafkaSpoutMessageId0);
      assertEquals(1430L, kafkaSpoutMessageId0.offset());
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0L, kafkaSpout_OffsetEntry2.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry2.committedOffset);
      
      KafkaSpoutMessageId kafkaSpoutMessageId1 = new KafkaSpoutMessageId(kafkaSpout_OffsetEntry1.tp, long1);
      assertNotNull(kafkaSpoutMessageId1);
      assertEquals(0, kafkaSpoutMessageId1.numFails());
      assertEquals(1051L, kafkaSpoutMessageId1.offset());
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(long1 == long0);
      assertFalse(long1 == long2);
      assertFalse(kafkaSpoutMessageId1.equals((Object)kafkaSpoutMessageId0));
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals(600L, kafkaSpout_OffsetEntry1.initialFetchOffset);
      assertEquals(599L, kafkaSpout_OffsetEntry1.committedOffset);
      
      kafkaSpout_OffsetEntry2.add(kafkaSpoutMessageId1);
      assertEquals(0, kafkaSpoutMessageId1.numFails());
      assertEquals(1051L, kafkaSpoutMessageId1.offset());
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(long1 == long0);
      assertFalse(long1 == long2);
      assertFalse(kafkaSpoutMessageId1.equals((Object)kafkaSpoutMessageId0));
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals(600L, kafkaSpout_OffsetEntry1.initialFetchOffset);
      assertEquals(599L, kafkaSpout_OffsetEntry1.committedOffset);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0L, kafkaSpout_OffsetEntry2.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry2.committedOffset);
      assertNotSame(kafkaSpoutMessageId1, kafkaSpoutMessageId0);
      
      kafkaSpout_OffsetEntry2.tp = kafkaSpout_OffsetEntry1.tp;
      OffsetAndMetadata offsetAndMetadata0 = kafkaSpout_OffsetEntry2.findNextCommitOffset();
      assertNull(offsetAndMetadata0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0L, kafkaSpout_OffsetEntry2.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry2.committedOffset);
      
      kafkaSpout_OffsetEntry1.commit(offsetAndMetadata0);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals(600L, kafkaSpout_OffsetEntry1.initialFetchOffset);
      assertEquals(599L, kafkaSpout_OffsetEntry1.committedOffset);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0L, kafkaSpout_OffsetEntry2.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry2.committedOffset);
      
      KafkaSpout<KafkaSpoutStreamsNamedTopics, CombinedMetric> kafkaSpout2 = new KafkaSpout<KafkaSpoutStreamsNamedTopics, CombinedMetric>();
      assertNotNull(kafkaSpout2);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      assertFalse(kafkaSpout2.initialized);
      assertEquals(0, kafkaSpout2.maxRetries);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      
      boolean boolean0 = kafkaSpout2.waitingToEmit();
      assertFalse(boolean0);
      assertFalse(kafkaSpout2.consumerAutoCommitMode);
      assertFalse(kafkaSpout2.initialized);
      assertEquals(0, kafkaSpout2.maxRetries);
      assertEquals(0L, kafkaSpout2.numUncommittedOffsets);
      
      KafkaSpout<KafkaSpoutMessageId, Delayed> kafkaSpout3 = new KafkaSpout<KafkaSpoutMessageId, Delayed>();
      assertNotNull(kafkaSpout3);
      assertFalse(kafkaSpout3.initialized);
      assertEquals(0, kafkaSpout3.maxRetries);
      assertEquals(0L, kafkaSpout3.numUncommittedOffsets);
      assertFalse(kafkaSpout3.consumerAutoCommitMode);
      
      // Undeclared exception!
      try { 
        kafkaSpout3.activate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test113()  throws Throwable  {
      long long0 = (-1242L);
      System.setCurrentTimeMillis(long0);
      String string0 = "Tuple for record [{}] has already been emitted. Skipping";
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) string0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) string0;
      objectArray0[3] = (Object) string0;
      objectArray0[4] = (Object) string0;
      objectArray0[5] = (Object) string0;
      // Undeclared exception!
      try { 
        PersistentHashMap.createWithCheck(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate key: Tuple for record [{}] has already been emitted. Skipping
         //
         verifyException("clojure.lang.PersistentHashMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test114()  throws Throwable  {
      PersistentHashMap persistentHashMap0 = PersistentHashMap.EMPTY;
      assertNotNull(persistentHashMap0);
      assertEquals(0, persistentHashMap0.count());
      
      KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, AbstractMap.SimpleEntry<KafkaSpoutStreamsNamedTopics, ClusterSummary._Fields>> kafkaSpoutConfig0 = (KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, AbstractMap.SimpleEntry<KafkaSpoutStreamsNamedTopics, ClusterSummary._Fields>>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      doReturn((KafkaSpoutStreams) null).when(kafkaSpoutConfig0).getKafkaSpoutStreams();
      doReturn(0).when(kafkaSpoutConfig0).getMaxUncommittedOffsets();
      KafkaSpout<KafkaSpoutStreamsNamedTopics, AbstractMap.SimpleEntry<KafkaSpoutStreamsNamedTopics, ClusterSummary._Fields>> kafkaSpout0 = new KafkaSpout<KafkaSpoutStreamsNamedTopics, AbstractMap.SimpleEntry<KafkaSpoutStreamsNamedTopics, ClusterSummary._Fields>>(kafkaSpoutConfig0);
      assertNotNull(kafkaSpout0);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      
      kafkaSpout0.acked = (Map<TopicPartition, KafkaSpout.OffsetEntry>) persistentHashMap0;
      assertEquals(0, persistentHashMap0.count());
      assertEquals(0, kafkaSpout0.acked.size());
      assertTrue(kafkaSpout0.acked.isEmpty());
      
      boolean boolean0 = kafkaSpout0.poll();
      assertFalse(boolean0);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      
      // Undeclared exception!
      try { 
        kafkaSpout0.toString();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class clojure.lang.RT
         //
         verifyException("clojure.lang.APersistentMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test115()  throws Throwable  {
      KafkaSpoutConfig<String, Delayed> kafkaSpoutConfig0 = (KafkaSpoutConfig<String, Delayed>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      KafkaSpout<TopicPartition, Object> kafkaSpout0 = new KafkaSpout<TopicPartition, Object>();
      assertNotNull(kafkaSpout0);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      
      boolean boolean0 = true;
      kafkaSpout0.consumerAutoCommitMode = boolean0;
      kafkaSpout0.nextTuple();
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertTrue(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      
      KafkaSpout.OffsetComparator kafkaSpout_OffsetComparator0 = new KafkaSpout.OffsetComparator();
      assertNotNull(kafkaSpout_OffsetComparator0);
      
      KafkaSpout<Integer, ForkJoinTask<KafkaSpoutMessageId>> kafkaSpout1 = null;
      try {
        kafkaSpout1 = new KafkaSpout<Integer, ForkJoinTask<KafkaSpoutMessageId>>(kafkaSpout0.kafkaSpoutConfig);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test116()  throws Throwable  {
      KafkaSpoutConfig<String, Delayed> kafkaSpoutConfig0 = (KafkaSpoutConfig<String, Delayed>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      KafkaSpout<String, Delayed> kafkaSpout0 = new KafkaSpout<String, Delayed>();
      assertNotNull(kafkaSpout0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout0.new OffsetEntry();
      assertNotNull(kafkaSpout_OffsetEntry0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      
      long long0 = 2L;
      KafkaSpout<Object, TopicPartition> kafkaSpout1 = new KafkaSpout<Object, TopicPartition>();
      assertNotNull(kafkaSpout1);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      
      kafkaSpout1.emitted = kafkaSpout0.emitted;
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry1 = kafkaSpout1.new OffsetEntry();
      assertNotNull(kafkaSpout_OffsetEntry1);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0L, kafkaSpout_OffsetEntry1.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry1.committedOffset);
      
      String string0 = "g!$GW:Qj(l_-wjY$";
      long long1 = (-987L);
      String string1 = "";
      ConsumerRecord<String, Integer> consumerRecord0 = new ConsumerRecord<String, Integer>(string0, kafkaSpout1.maxRetries, long1, string1, (Integer) kafkaSpout0.maxRetries);
      assertNotNull(consumerRecord0);
      assertEquals((-1), consumerRecord0.serializedKeySize());
      assertEquals((-987L), consumerRecord0.offset());
      assertEquals(TimestampType.NO_TIMESTAMP_TYPE, consumerRecord0.timestampType());
      assertEquals(0, consumerRecord0.partition());
      assertEquals((-1), consumerRecord0.serializedValueSize());
      assertEquals((-1L), consumerRecord0.timestamp());
      assertEquals("g!$GW:Qj(l_-wjY$", consumerRecord0.topic());
      assertFalse(string0.equals((Object)string1));
      assertFalse(long1 == long0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals((-1L), ConsumerRecord.NO_TIMESTAMP);
      assertEquals((-1), ConsumerRecord.NULL_CHECKSUM);
      assertEquals((-1), ConsumerRecord.NULL_SIZE);
      
      KafkaSpoutMessageId kafkaSpoutMessageId0 = new KafkaSpoutMessageId(consumerRecord0);
      assertNotNull(kafkaSpoutMessageId0);
      assertEquals((-1), consumerRecord0.serializedKeySize());
      assertEquals((-987L), consumerRecord0.offset());
      assertEquals(TimestampType.NO_TIMESTAMP_TYPE, consumerRecord0.timestampType());
      assertEquals(0, consumerRecord0.partition());
      assertEquals((-1), consumerRecord0.serializedValueSize());
      assertEquals((-1L), consumerRecord0.timestamp());
      assertEquals("g!$GW:Qj(l_-wjY$", consumerRecord0.topic());
      assertEquals((-987L), kafkaSpoutMessageId0.offset());
      assertEquals("g!$GW:Qj(l_-wjY$", kafkaSpoutMessageId0.topic());
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertEquals(0, kafkaSpoutMessageId0.partition());
      assertFalse(string0.equals((Object)string1));
      assertFalse(long1 == long0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals((-1L), ConsumerRecord.NO_TIMESTAMP);
      assertEquals((-1), ConsumerRecord.NULL_CHECKSUM);
      assertEquals((-1), ConsumerRecord.NULL_SIZE);
      
      kafkaSpout_OffsetEntry1.add(kafkaSpoutMessageId0);
      assertEquals((-1), consumerRecord0.serializedKeySize());
      assertEquals((-987L), consumerRecord0.offset());
      assertEquals(TimestampType.NO_TIMESTAMP_TYPE, consumerRecord0.timestampType());
      assertEquals(0, consumerRecord0.partition());
      assertEquals((-1), consumerRecord0.serializedValueSize());
      assertEquals((-1L), consumerRecord0.timestamp());
      assertEquals("g!$GW:Qj(l_-wjY$", consumerRecord0.topic());
      assertEquals((-987L), kafkaSpoutMessageId0.offset());
      assertEquals("g!$GW:Qj(l_-wjY$", kafkaSpoutMessageId0.topic());
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertEquals(0, kafkaSpoutMessageId0.partition());
      assertFalse(string0.equals((Object)string1));
      assertFalse(long1 == long0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0L, kafkaSpout_OffsetEntry1.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry1.committedOffset);
      assertEquals((-1L), ConsumerRecord.NO_TIMESTAMP);
      assertEquals((-1), ConsumerRecord.NULL_CHECKSUM);
      assertEquals((-1), ConsumerRecord.NULL_SIZE);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      long long2 = 1051L;
      OffsetAndMetadata offsetAndMetadata0 = kafkaSpout_OffsetEntry1.findNextCommitOffset();
      assertNull(offsetAndMetadata0);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0L, kafkaSpout_OffsetEntry1.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry1.committedOffset);
  }

  @Test(timeout = 11000)
  public void test117()  throws Throwable  {
      KafkaSpout<Integer, TopicPartition> kafkaSpout0 = new KafkaSpout<Integer, TopicPartition>();
      assertNotNull(kafkaSpout0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      
      KafkaSpout.Timer kafkaSpout_Timer0 = kafkaSpout0.new Timer();
      assertNotNull(kafkaSpout_Timer0);
      assertEquals(0L, kafkaSpout_Timer0.period());
      assertEquals(0L, kafkaSpout_Timer0.delay());
      assertNull(kafkaSpout_Timer0.getTimeUnit());
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout_Timer0.delay);
      assertEquals(0L, kafkaSpout_Timer0.periodNanos);
      assertEquals(0L, kafkaSpout_Timer0.period);
      assertEquals(0L, kafkaSpout_Timer0.start);
      
      HashMap<TopicPartition, KafkaSpout.OffsetEntry> hashMap0 = new HashMap<TopicPartition, KafkaSpout.OffsetEntry>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      kafkaSpout0.acked = (Map<TopicPartition, KafkaSpout.OffsetEntry>) hashMap0;
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(kafkaSpout0.acked.isEmpty());
      assertEquals(0, kafkaSpout0.acked.size());
      
      boolean boolean0 = kafkaSpout_Timer0.isExpiredResetOnTrue();
      assertEquals(0L, kafkaSpout_Timer0.period());
      assertEquals(0L, kafkaSpout_Timer0.delay());
      assertNull(kafkaSpout_Timer0.getTimeUnit());
      assertTrue(boolean0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout_Timer0.delay);
      assertEquals(0L, kafkaSpout_Timer0.periodNanos);
      assertEquals(0L, kafkaSpout_Timer0.period);
      assertEquals(1392409281320000L, kafkaSpout_Timer0.start);
      
      boolean boolean1 = kafkaSpout_Timer0.isExpiredResetOnTrue();
      assertEquals(0L, kafkaSpout_Timer0.period());
      assertEquals(0L, kafkaSpout_Timer0.delay());
      assertNull(kafkaSpout_Timer0.getTimeUnit());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout_Timer0.delay);
      assertEquals(0L, kafkaSpout_Timer0.periodNanos);
      assertEquals(0L, kafkaSpout_Timer0.period);
      assertEquals(1392409281320000L, kafkaSpout_Timer0.start);
      
      KafkaSpout<ClusterSummary._Fields, TopicPartition> kafkaSpout1 = new KafkaSpout<ClusterSummary._Fields, TopicPartition>();
      assertNotNull(kafkaSpout1);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertEquals(0, kafkaSpout1.maxRetries);
      
      KafkaSpoutConfig<ClusterSummary._Fields, TopicPartition> kafkaSpoutConfig0 = (KafkaSpoutConfig<ClusterSummary._Fields, TopicPartition>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      boolean boolean2 = true;
      kafkaSpout1.initialized = boolean2;
      kafkaSpout1.kafkaSpoutConfig = kafkaSpoutConfig0;
      assertEquals(0L, kafkaSpout1.kafkaSpoutConfig.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpout1.kafkaSpoutConfig.getPollTimeoutMs());
      assertEquals(0, kafkaSpout1.kafkaSpoutConfig.getMaxTupleRetries());
      assertNull(kafkaSpout1.kafkaSpoutConfig.getConsumerGroupId());
      assertEquals(0, kafkaSpout1.kafkaSpoutConfig.getMaxUncommittedOffsets());
      assertFalse(kafkaSpout1.kafkaSpoutConfig.isConsumerAutoCommitMode());
      assertNull(kafkaSpout1.kafkaSpoutConfig.getFirstPollOffsetStrategy());
      
      // Undeclared exception!
      try { 
        kafkaSpout1.commit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpout", e);
      }
  }

  @Test(timeout = 11000)
  public void test118()  throws Throwable  {
      KafkaSpoutConfig<String, Delayed> kafkaSpoutConfig0 = (KafkaSpoutConfig<String, Delayed>) mock(KafkaSpoutConfig.class, new ViolatedAssumptionAnswer());
      KafkaSpout<String, Delayed> kafkaSpout0 = new KafkaSpout<String, Delayed>();
      assertNotNull(kafkaSpout0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry0 = kafkaSpout0.new OffsetEntry();
      assertNotNull(kafkaSpout_OffsetEntry0);
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertEquals(0L, kafkaSpout_OffsetEntry0.committedOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry0.initialFetchOffset);
      
      long long0 = 2L;
      KafkaSpout<Object, TopicPartition> kafkaSpout1 = new KafkaSpout<Object, TopicPartition>();
      assertNotNull(kafkaSpout1);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      
      kafkaSpout1.emitted = kafkaSpout0.emitted;
      KafkaSpout.OffsetEntry kafkaSpout_OffsetEntry1 = kafkaSpout1.new OffsetEntry();
      assertNotNull(kafkaSpout_OffsetEntry1);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertEquals(0L, kafkaSpout_OffsetEntry1.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry1.committedOffset);
      
      String string0 = "g!$GW:Qj(l_-wjY$";
      long long1 = (-987L);
      String string1 = "";
      ConsumerRecord<String, Integer> consumerRecord0 = new ConsumerRecord<String, Integer>(string0, kafkaSpout1.maxRetries, long1, string1, (Integer) kafkaSpout0.maxRetries);
      assertNotNull(consumerRecord0);
      assertEquals("g!$GW:Qj(l_-wjY$", consumerRecord0.topic());
      assertEquals((-1), consumerRecord0.serializedKeySize());
      assertEquals((-987L), consumerRecord0.offset());
      assertEquals(TimestampType.NO_TIMESTAMP_TYPE, consumerRecord0.timestampType());
      assertEquals(0, consumerRecord0.partition());
      assertEquals((-1), consumerRecord0.serializedValueSize());
      assertEquals((-1L), consumerRecord0.timestamp());
      assertFalse(string0.equals((Object)string1));
      assertFalse(long1 == long0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertEquals((-1L), ConsumerRecord.NO_TIMESTAMP);
      assertEquals((-1), ConsumerRecord.NULL_CHECKSUM);
      assertEquals((-1), ConsumerRecord.NULL_SIZE);
      
      KafkaSpoutMessageId kafkaSpoutMessageId0 = new KafkaSpoutMessageId(consumerRecord0);
      assertNotNull(kafkaSpoutMessageId0);
      assertEquals("g!$GW:Qj(l_-wjY$", consumerRecord0.topic());
      assertEquals((-1), consumerRecord0.serializedKeySize());
      assertEquals((-987L), consumerRecord0.offset());
      assertEquals(TimestampType.NO_TIMESTAMP_TYPE, consumerRecord0.timestampType());
      assertEquals(0, consumerRecord0.partition());
      assertEquals((-1), consumerRecord0.serializedValueSize());
      assertEquals((-1L), consumerRecord0.timestamp());
      assertEquals((-987L), kafkaSpoutMessageId0.offset());
      assertEquals("g!$GW:Qj(l_-wjY$", kafkaSpoutMessageId0.topic());
      assertEquals(0, kafkaSpoutMessageId0.partition());
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertFalse(string0.equals((Object)string1));
      assertFalse(long1 == long0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertEquals((-1L), ConsumerRecord.NO_TIMESTAMP);
      assertEquals((-1), ConsumerRecord.NULL_CHECKSUM);
      assertEquals((-1), ConsumerRecord.NULL_SIZE);
      
      kafkaSpout_OffsetEntry1.add(kafkaSpoutMessageId0);
      assertEquals("g!$GW:Qj(l_-wjY$", consumerRecord0.topic());
      assertEquals((-1), consumerRecord0.serializedKeySize());
      assertEquals((-987L), consumerRecord0.offset());
      assertEquals(TimestampType.NO_TIMESTAMP_TYPE, consumerRecord0.timestampType());
      assertEquals(0, consumerRecord0.partition());
      assertEquals((-1), consumerRecord0.serializedValueSize());
      assertEquals((-1L), consumerRecord0.timestamp());
      assertEquals((-987L), kafkaSpoutMessageId0.offset());
      assertEquals("g!$GW:Qj(l_-wjY$", kafkaSpoutMessageId0.topic());
      assertEquals(0, kafkaSpoutMessageId0.partition());
      assertEquals(0, kafkaSpoutMessageId0.numFails());
      assertFalse(string0.equals((Object)string1));
      assertFalse(long1 == long0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(kafkaSpout0.consumerAutoCommitMode);
      assertEquals(0L, kafkaSpout0.numUncommittedOffsets);
      assertEquals(0, kafkaSpout0.maxRetries);
      assertFalse(kafkaSpout0.initialized);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertEquals(0L, kafkaSpout_OffsetEntry1.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry1.committedOffset);
      assertEquals((-1L), ConsumerRecord.NO_TIMESTAMP);
      assertEquals((-1), ConsumerRecord.NULL_CHECKSUM);
      assertEquals((-1), ConsumerRecord.NULL_SIZE);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      kafkaSpout_OffsetEntry1.initialFetchOffset = kafkaSpoutConfig0.DEFAULT_POLL_TIMEOUT_MS;
      long long2 = 1055L;
      OffsetAndMetadata offsetAndMetadata0 = kafkaSpout_OffsetEntry1.findNextCommitOffset();
      assertNull(offsetAndMetadata0);
      assertFalse(kafkaSpout1.initialized);
      assertEquals(0L, kafkaSpout1.numUncommittedOffsets);
      assertFalse(kafkaSpout1.consumerAutoCommitMode);
      assertEquals(0, kafkaSpout1.maxRetries);
      assertEquals(200L, kafkaSpout_OffsetEntry1.initialFetchOffset);
      assertEquals(0L, kafkaSpout_OffsetEntry1.committedOffset);
  }
}
