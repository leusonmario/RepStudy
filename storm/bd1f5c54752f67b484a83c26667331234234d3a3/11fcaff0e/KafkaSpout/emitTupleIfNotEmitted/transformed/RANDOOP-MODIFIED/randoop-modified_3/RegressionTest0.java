import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test0001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0001");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.lang.CharSequence, java.lang.CharSequence>.KafkaSpoutConsumerRebalanceListener kafkaSpoutConsumerRebalanceListener1 = kafkaSpout0.new KafkaSpoutConsumerRebalanceListener();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$KafkaSpoutConsumerRebalanceListener with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0002");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        org.apache.kafka.common.TopicPartition topicPartition1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.lang.Object, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>.OffsetEntry offsetEntry3 = kafkaSpout0.new OffsetEntry(topicPartition1, (long) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$OffsetEntry with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0003");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>.Timer timer1 = kafkaSpout0.new Timer();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$Timer with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0004");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.lang.String, java.lang.Object> strKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.lang.String, java.lang.Object> strKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.String, java.lang.Object>(strKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0005");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>>.KafkaSpoutConsumerRebalanceListener kafkaSpoutConsumerRebalanceListener1 = kafkaSpout0.new KafkaSpoutConsumerRebalanceListener();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$KafkaSpoutConsumerRebalanceListener with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0006");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        org.apache.kafka.common.TopicPartition topicPartition1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.io.Serializable, java.io.Serializable>.OffsetEntry offsetEntry3 = kafkaSpout0.new OffsetEntry(topicPartition1, (long) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$OffsetEntry with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0007");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>>.Timer timer1 = kafkaSpout0.new Timer();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$Timer with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0008");
        long long0 = org.apache.kafka.clients.consumer.ConsumerRecord.NO_TIMESTAMP;
        org.junit.Assert.assertTrue("'" + long0 + "' != '" + (-1L) + "'", long0 == (-1L));
    }

    @Test
    public void test0009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0009");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.lang.Object, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>.KafkaSpoutConsumerRebalanceListener kafkaSpoutConsumerRebalanceListener1 = kafkaSpout0.new KafkaSpoutConsumerRebalanceListener();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$KafkaSpoutConsumerRebalanceListener with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0010");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.io.Serializable> objConsumerRecordKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.io.Serializable> objConsumerRecordKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.io.Serializable>(objConsumerRecordKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0011");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.io.Serializable, java.lang.CharSequence>.Timer timer1 = kafkaSpout0.new Timer();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$Timer with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0012");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.io.Serializable, java.lang.String>.Timer timer1 = kafkaSpout0.new Timer();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$Timer with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0013");
        int int0 = org.apache.kafka.clients.consumer.ConsumerRecord.NULL_SIZE;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + (-1) + "'", int0 == (-1));
    }

    @Test
    public void test0014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0014");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.lang.Object, java.lang.Comparable<java.lang.String>> objKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.lang.Object, java.lang.Comparable<java.lang.String>> objKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.Object, java.lang.Comparable<java.lang.String>>(objKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0015");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.util.Optional<java.lang.Integer>, java.lang.Comparable<java.lang.String>>.KafkaSpoutConsumerRebalanceListener kafkaSpoutConsumerRebalanceListener1 = kafkaSpout0.new KafkaSpoutConsumerRebalanceListener();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$KafkaSpoutConsumerRebalanceListener with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0016");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        org.apache.kafka.common.TopicPartition topicPartition1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.util.Optional<java.lang.Integer>, java.util.Optional<java.lang.Integer>>.OffsetEntry offsetEntry3 = kafkaSpout0.new OffsetEntry(topicPartition1, (long) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$OffsetEntry with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0017");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        java.util.concurrent.TimeUnit timeUnit3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.CharSequence>.Timer timer4 = kafkaSpout0.new Timer((long) '#', 1L, timeUnit3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$Timer with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0018");
        int int0 = org.apache.kafka.clients.consumer.ConsumerRecord.NULL_CHECKSUM;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + (-1) + "'", int0 == (-1));
    }

    @Test
    public void test0019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0019");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType12 = null;
        org.apache.kafka.common.record.TimestampType timestampType20 = null;
        java.lang.Object obj24 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("", 10, (long) (byte) -1, (long) '4', timestampType20, (long) (byte) 0, (int) (short) 10, (int) (byte) 100, obj24, (java.io.Serializable) 1);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String> objConsumerRecordConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String>("", (int) 'a', (long) (short) 10, (long) (byte) -1, timestampType12, (long) 'a', (int) (byte) -1, 0, objConsumerRecord26, "hi!");
        long long29 = objConsumerRecord26.checksum();
        java.util.Optional<java.lang.Integer> intOptional30 = objConsumerRecord26.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType31 = objConsumerRecord26.timestampType();
        long long32 = objConsumerRecord26.offset();
        int int33 = objConsumerRecord26.serializedValueSize();
        org.apache.kafka.common.header.Headers headers35 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("", (int) (short) 0, (long) (short) 0, (long) (short) 100, timestampType4, (java.lang.Long) 10L, (int) ' ', (int) (short) 10, (java.lang.Object) objConsumerRecord26, (java.io.Serializable) 10.0d, headers35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Headers cannot be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(intOptional30);
        org.junit.Assert.assertNull(timestampType31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 100 + "'", int33 == 100);
    }

    @Test
    public void test0020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0020");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer1 = null;
        offsetComparatorKafkaSpout0.kafkaConsumer = offsetComparatorKafkaConsumer1;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.emit();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0021");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer1 = null;
        offsetComparatorKafkaSpout0.kafkaConsumer = offsetComparatorKafkaConsumer1;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.subscribeKafkaConsumer();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0022");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.kafka.clients.consumer.ConsumerRebalanceListener, org.apache.storm.kafka.spout.KafkaSpout<java.lang.Object, java.io.Serializable>.OffsetEntry> consumerRebalanceListenerKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.kafka.clients.consumer.ConsumerRebalanceListener, org.apache.storm.kafka.spout.KafkaSpout<java.lang.Object, java.io.Serializable>.OffsetEntry>();
    }

    @Test
    public void test0023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0023");
        org.slf4j.Logger logger0 = null;
        org.apache.storm.kafka.spout.KafkaSpout.LOG = logger0;
    }

    @Test
    public void test0024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0024");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.deactivate();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0025");
        org.slf4j.Logger logger0 = org.apache.storm.kafka.spout.KafkaSpout.LOG;
        org.junit.Assert.assertNull(logger0);
    }

    @Test
    public void test0026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0026");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean1 = offsetComparatorKafkaSpout0.consumerAutoCommitMode;
        org.apache.kafka.common.TopicPartition topicPartition2 = null;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.setAcked(topicPartition2, (long) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0027");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.Iterable<org.apache.kafka.common.TopicPartition>, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, java.io.Serializable>.KafkaSpoutConsumerRebalanceListener> topicPartitionIterableKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.Iterable<org.apache.kafka.common.TopicPartition>, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, java.io.Serializable>.KafkaSpoutConsumerRebalanceListener>();
    }

    @Test
    public void test0028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0028");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>(offsetComparatorKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0029");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer1 = null;
        offsetComparatorKafkaSpout0.kafkaConsumer = offsetComparatorKafkaConsumer1;
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorConsumerRecord3 = null;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.emitTupleIfNotEmitted(offsetComparatorConsumerRecord3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0030");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean1 = offsetComparatorKafkaSpout0.consumerAutoCommitMode;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray2 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet3 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet3, kafkaSpoutMessageIdArray2);
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet3;
        org.apache.kafka.clients.consumer.ConsumerRecords<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorConsumerRecords6 = null;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.setWaitingToEmit(offsetComparatorConsumerRecords6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0031");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer1 = null;
        offsetComparatorKafkaSpout0.kafkaConsumer = offsetComparatorKafkaConsumer1;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Object> strMap3 = offsetComparatorKafkaSpout0.getComponentConfiguration();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0032");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator0 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator0;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId2 = null;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId3 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int4 = offsetComparator0.compare(kafkaSpoutMessageId2, kafkaSpoutMessageId3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0033");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> kafkaSpoutMessageIdSetKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> kafkaSpoutMessageIdSetKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>>(kafkaSpoutMessageIdSetKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0034");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer1 = null;
        offsetComparatorKafkaSpout0.kafkaConsumer = offsetComparatorKafkaConsumer1;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = offsetComparatorKafkaSpout0.getNamedTopics();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0035");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator8 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator8;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator10 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator10;
        org.apache.kafka.common.header.Headers headers12 = null;
        org.apache.kafka.common.record.TimestampType timestampType17 = null;
        org.apache.kafka.common.record.TimestampType timestampType25 = null;
        java.lang.Object obj29 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("", 10, (long) (byte) -1, (long) '4', timestampType25, (long) (byte) 0, (int) (short) 10, (int) (byte) 100, obj29, (java.io.Serializable) 1);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String> objConsumerRecordConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String>("", (int) 'a', (long) (short) 10, (long) (byte) -1, timestampType17, (long) 'a', (int) (byte) -1, 0, objConsumerRecord31, "hi!");
        long long34 = objConsumerRecord31.checksum();
        java.util.Optional<java.lang.Integer> intOptional35 = objConsumerRecord31.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional36 = objConsumerRecord31.leaderEpoch();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> offsetComparatorConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 100, null = 100, serialized key size = 10, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1), value = 1)", (-1), (long) (byte) 10, (long) (short) 10, timestampType4, (java.lang.Long) 1L, 100, (int) (short) 10, offsetComparator8, (java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator10, headers12, intOptional36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Headers cannot be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(intOptional35);
        org.junit.Assert.assertNotNull(intOptional36);
    }

    @Test
    public void test0036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0036");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.String, org.apache.kafka.common.header.Headers> strKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.String, org.apache.kafka.common.header.Headers>();
    }

    @Test
    public void test0037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0037");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType12 = null;
        java.lang.Object obj16 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord18 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("", 10, (long) (byte) -1, (long) '4', timestampType12, (long) (byte) 0, (int) (short) 10, (int) (byte) 100, obj16, (java.io.Serializable) 1);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String> objConsumerRecordConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String>("", (int) 'a', (long) (short) 10, (long) (byte) -1, timestampType4, (long) 'a', (int) (byte) -1, 0, objConsumerRecord18, "hi!");
        long long21 = objConsumerRecord18.checksum();
        java.util.Optional<java.lang.Integer> intOptional22 = objConsumerRecord18.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional23 = objConsumerRecord18.leaderEpoch();
        java.lang.Object obj24 = objConsumerRecord18.key();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass25 = obj24.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(intOptional22);
        org.junit.Assert.assertNotNull(intOptional23);
        org.junit.Assert.assertNull(obj24);
    }

    @Test
    public void test0038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0038");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType12 = null;
        java.lang.Object obj16 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord18 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("", 10, (long) (byte) -1, (long) '4', timestampType12, (long) (byte) 0, (int) (short) 10, (int) (byte) 100, obj16, (java.io.Serializable) 1);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String> objConsumerRecordConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String>("", (int) 'a', (long) (short) 10, (long) (byte) -1, timestampType4, (long) 'a', (int) (byte) -1, 0, objConsumerRecord18, "hi!");
        long long21 = objConsumerRecord18.checksum();
        java.util.Optional<java.lang.Integer> intOptional22 = objConsumerRecord18.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType23 = objConsumerRecord18.timestampType();
        long long24 = objConsumerRecord18.offset();
        org.apache.kafka.common.header.Headers headers25 = objConsumerRecord18.headers();
        int int26 = objConsumerRecord18.partition();
        java.lang.Class<?> wildcardClass27 = objConsumerRecord18.getClass();
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(intOptional22);
        org.junit.Assert.assertNull(timestampType23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertNotNull(headers25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0039");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.storm.kafka.spout.internal.KafkaConsumerFactory kafkaConsumerFactory1 = null;
        offsetComparatorKafkaSpout0.kafkaConsumerFactory = kafkaConsumerFactory1;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.activate();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0040");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.subscribeKafkaConsumer();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
    }

    @Test
    public void test0041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0041");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.Comparable<java.lang.String>, org.apache.storm.topology.IComponent> strComparableKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.Comparable<java.lang.String>, org.apache.storm.topology.IComponent>();
    }

    @Test
    public void test0042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0042");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.storm.kafka.spout.internal.KafkaConsumerFactory kafkaConsumerFactory1 = null;
        offsetComparatorKafkaSpout0.kafkaConsumerFactory = kafkaConsumerFactory1;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.shutdown();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0043");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.topology.IRichSpout, java.lang.Comparable<java.lang.String>> iRichSpoutKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IRichSpout, java.lang.Comparable<java.lang.String>> iRichSpoutKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IRichSpout, java.lang.Comparable<java.lang.String>>(iRichSpoutKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0044");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean1 = offsetComparatorKafkaSpout0.consumerAutoCommitMode;
        org.apache.kafka.common.TopicPartition topicPartition2 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection3 = offsetComparatorKafkaSpout0.toArrayList(topicPartition2);
        long long4 = offsetComparatorKafkaSpout0.numUncommittedOffsets;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.commitOffsetsForAckedTuples();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(topicPartitionCollection3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
    }

    @Test
    public void test0045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0045");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.base.BaseComponent, org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>> baseComponentKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.base.BaseComponent, org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>>();
    }

    @Test
    public void test0046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0046");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer1 = null;
        offsetComparatorKafkaSpout0.kafkaConsumer = offsetComparatorKafkaConsumer1;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout3 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean4 = offsetComparatorKafkaSpout3.consumerAutoCommitMode;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray5 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet6, kafkaSpoutMessageIdArray5);
        offsetComparatorKafkaSpout3.emitted = kafkaSpoutMessageIdSet6;
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet6;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.ack((java.lang.Object) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 100, null = 100, serialized key size = 10, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1), value = 1)");
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.String cannot be cast to org.apache.storm.kafka.spout.KafkaSpoutMessageId");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0047");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator0 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator0;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator2 = offsetComparator0.reversed();
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId3 = null;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId4 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int5 = offsetComparator0.compare(kafkaSpoutMessageId3, kafkaSpoutMessageId4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator2);
    }

    @Test
    public void test0048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0048");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        java.util.concurrent.TimeUnit timeUnit3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>.Timer timer4 = kafkaSpout0.new Timer(1L, (long) (short) 0, timeUnit3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$Timer with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0049");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.storm.kafka.spout.internal.KafkaConsumerFactory kafkaConsumerFactory1 = null;
        offsetComparatorKafkaSpout0.kafkaConsumerFactory = kafkaConsumerFactory1;
        org.apache.kafka.clients.consumer.ConsumerRecords<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorConsumerRecords3 = null;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.setWaitingToEmit(offsetComparatorConsumerRecords3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0050");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator0 = org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator1 = kafkaSpoutMessageIdComparator0.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator1;
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator0);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator1);
    }

    @Test
    public void test0051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0051");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.storm.kafka.spout.internal.KafkaConsumerFactory kafkaConsumerFactory1 = null;
        offsetComparatorKafkaSpout0.kafkaConsumerFactory = kafkaConsumerFactory1;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean3 = offsetComparatorKafkaSpout0.poll();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0052");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator0 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId1 = null;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId2 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int3 = offsetComparator0.compare(kafkaSpoutMessageId1, kafkaSpoutMessageId2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0053");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = offsetComparatorKafkaSpout0.getNamedTopics();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
    }

    @Test
    public void test0054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0054");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        java.util.concurrent.TimeUnit timeUnit3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.util.Collection<org.apache.kafka.common.TopicPartition>>.Timer timer4 = kafkaSpout0.new Timer((long) (byte) 0, 0L, timeUnit3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$Timer with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0055");
        org.apache.storm.kafka.spout.KafkaSpout<java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.topology.base.BaseRichSpout> kafkaSpoutMessageIdSetKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.topology.base.BaseRichSpout>();
    }

    @Test
    public void test0056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0056");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.lang.reflect.Type, org.apache.kafka.clients.consumer.ConsumerRebalanceListener> typeKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.Type, org.apache.kafka.clients.consumer.ConsumerRebalanceListener> typeKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.Type, org.apache.kafka.clients.consumer.ConsumerRebalanceListener>(typeKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0057");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig5 = offsetComparatorKafkaSpout0.kafkaSpoutConfig;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean6 = offsetComparatorKafkaSpout0.commit();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNull(offsetComparatorKafkaSpoutConfig5);
    }

    @Test
    public void test0058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0058");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator0 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator0;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator2 = offsetComparator0.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator4 = kafkaSpoutMessageIdComparator2.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator3;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator6 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator6;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator8 = offsetComparator6.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator9 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator10 = kafkaSpoutMessageIdComparator8.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator9);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator8;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator12 = org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator13 = kafkaSpoutMessageIdComparator8.thenComparing(kafkaSpoutMessageIdComparator12);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator14 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator14;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator16 = offsetComparator14.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator17 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator18 = kafkaSpoutMessageIdComparator16.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator17);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator19 = kafkaSpoutMessageIdComparator18.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator20 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator20;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator22 = offsetComparator20.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator23 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator24 = kafkaSpoutMessageIdComparator22.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator23);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator23;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator26 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator27 = offsetComparator23.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator26);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator28 = kafkaSpoutMessageIdComparator18.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator23);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator29 = kafkaSpoutMessageIdComparator12.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator23);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator30 = offsetComparator3.thenComparing(kafkaSpoutMessageIdComparator29);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId31 = null;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId32 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int33 = offsetComparator3.compare(kafkaSpoutMessageId31, kafkaSpoutMessageId32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator2);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator8);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator10);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator12);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator13);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator16);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator18);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator19);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator22);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator24);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator27);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator28);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator29);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator30);
    }

    @Test
    public void test0059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0059");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.topology.base.BaseRichSpout, java.lang.Object> baseRichSpoutKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.base.BaseRichSpout, java.lang.Object> baseRichSpoutKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.base.BaseRichSpout, java.lang.Object>(baseRichSpoutKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0060");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig5 = offsetComparatorKafkaSpout0.kafkaSpoutConfig;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.commitOffsetsForAckedTuples();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNull(offsetComparatorKafkaSpoutConfig5);
    }

    @Test
    public void test0061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0061");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IRichSpout, org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>>.Timer>.Timer timer1 = kafkaSpout0.new Timer();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$Timer with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0062");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator0 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator0;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator2 = offsetComparator0.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator4 = kafkaSpoutMessageIdComparator2.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator5 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator5;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator7 = offsetComparator5.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator8 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator9 = kafkaSpoutMessageIdComparator7.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator8);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator7;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator11 = org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator12 = kafkaSpoutMessageIdComparator7.thenComparing(kafkaSpoutMessageIdComparator11);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator13 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator13;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator15 = offsetComparator13.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator16 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator17 = kafkaSpoutMessageIdComparator15.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator16);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator18 = kafkaSpoutMessageIdComparator17.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator19 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator19;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator21 = offsetComparator19.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator22 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator23 = kafkaSpoutMessageIdComparator21.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator22);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator22;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator25 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator26 = offsetComparator22.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator25);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator27 = kafkaSpoutMessageIdComparator17.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator22);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator28 = kafkaSpoutMessageIdComparator11.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator22);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator29 = offsetComparator3.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator22);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator30 = offsetComparator3.reversed();
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId31 = null;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId32 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int33 = offsetComparator3.compare(kafkaSpoutMessageId31, kafkaSpoutMessageId32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator2);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator7);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator9);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator11);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator12);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator15);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator17);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator18);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator21);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator23);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator26);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator27);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator28);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator29);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator30);
    }

    @Test
    public void test0063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0063");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig5 = offsetComparatorKafkaSpout0.kafkaSpoutConfig;
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig6 = offsetComparatorKafkaSpout0.kafkaSpoutConfig;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.fail((java.lang.Object) 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Long cannot be cast to org.apache.storm.kafka.spout.KafkaSpoutMessageId");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNull(offsetComparatorKafkaSpoutConfig5);
        org.junit.Assert.assertNull(offsetComparatorKafkaSpoutConfig6);
    }

    @Test
    public void test0064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0064");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.util.RandomAccess, org.apache.kafka.clients.consumer.ConsumerRebalanceListener> randomAccessKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.util.RandomAccess, org.apache.kafka.clients.consumer.ConsumerRebalanceListener> randomAccessKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<java.util.RandomAccess, org.apache.kafka.clients.consumer.ConsumerRebalanceListener>(randomAccessKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0065");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray5 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet6, kafkaSpoutMessageIdArray5);
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet6;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.kafka.clients.consumer.ConsumerRecords<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorConsumerRecords9 = offsetComparatorKafkaSpout0.pollKafkaBroker();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0066");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        java.util.Map<org.apache.kafka.common.TopicPartition, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>.OffsetEntry> topicPartitionMap5 = null;
        offsetComparatorKafkaSpout0.acked = topicPartitionMap5;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Object> strMap7 = offsetComparatorKafkaSpout0.getComponentConfiguration();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
    }

    @Test
    public void test0067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0067");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.Comparable<java.lang.String>, java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> strComparableKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.Comparable<java.lang.String>, java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>();
    }

    @Test
    public void test0068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0068");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray5 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet6, kafkaSpoutMessageIdArray5);
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet6;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor9 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor9;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.nextTuple();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0069");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.Object> kafkaSpoutMessageIdSetKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.Object> kafkaSpoutMessageIdSetKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.Object>(kafkaSpoutMessageIdSetKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0070");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("hi!", (int) (short) -1, (long) 0, 52L, timestampType4, (long) 35, 10, 1, (java.lang.Object) (byte) 1, (java.io.Serializable) 10.0d);
        java.lang.String str11 = objConsumerRecord10.toString();
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ConsumerRecord(topic = hi!, partition = -1, leaderEpoch = null, offset = 0, null = 52, serialized key size = 10, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = 10.0)" + "'", str11, "ConsumerRecord(topic = hi!, partition = -1, leaderEpoch = null, offset = 0, null = 52, serialized key size = 10, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = 10.0)");
    }

    @Test
    public void test0071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0071");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray5 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet6, kafkaSpoutMessageIdArray5);
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet6;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor9 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor9;
        org.apache.storm.kafka.spout.internal.KafkaConsumerFactory kafkaConsumerFactory11 = offsetComparatorKafkaSpout0.kafkaConsumerFactory;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = offsetComparatorKafkaSpout0.getNamedTopics();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(kafkaConsumerFactory11);
    }

    @Test
    public void test0072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0072");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout3 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor4 = null;
        offsetComparatorKafkaSpout3.waitingToEmit = offsetComparatorConsumerRecordItor4;
        org.apache.kafka.common.TopicPartition topicPartition6 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection7 = offsetComparatorKafkaSpout3.toArrayList(topicPartition6);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray8 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet9 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet9, kafkaSpoutMessageIdArray8);
        offsetComparatorKafkaSpout3.emitted = kafkaSpoutMessageIdSet9;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor12 = null;
        offsetComparatorKafkaSpout3.waitingToEmit = offsetComparatorConsumerRecordItor12;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator20 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout21 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer22 = null;
        offsetComparatorKafkaSpout21.kafkaConsumer = offsetComparatorKafkaConsumer22;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout24 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean25 = offsetComparatorKafkaSpout24.consumerAutoCommitMode;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray26 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet27 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet27, kafkaSpoutMessageIdArray26);
        offsetComparatorKafkaSpout24.emitted = kafkaSpoutMessageIdSet27;
        offsetComparatorKafkaSpout21.emitted = kafkaSpoutMessageIdSet27;
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> offsetComparatorConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)", (int) (short) -1, (long) 0, offsetComparator20, (java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet27);
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> iComponentKafkaSpout32 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.topology.IRichSpout> kafkaSpoutMessageIdSetConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.topology.IRichSpout>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)", (int) (byte) -1, (long) 1, kafkaSpoutMessageIdSet27, (org.apache.storm.topology.IRichSpout) iComponentKafkaSpout32);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>, java.lang.Cloneable> offsetComparatorKafkaSpoutConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>, java.lang.Cloneable>("", (int) (byte) 1, (long) '4', offsetComparatorKafkaSpout3, (java.lang.Cloneable) kafkaSpoutMessageIdSet27);
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout3.emit();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection7);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0073");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig5 = offsetComparatorKafkaSpout0.kafkaSpoutConfig;
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig6 = offsetComparatorKafkaSpout0.kafkaSpoutConfig;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNull(offsetComparatorKafkaSpoutConfig5);
        org.junit.Assert.assertNull(offsetComparatorKafkaSpoutConfig6);
    }

    @Test
    public void test0074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0074");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.Iterable<org.apache.kafka.common.TopicPartition>, java.util.Collection<org.apache.kafka.common.TopicPartition>> topicPartitionIterableKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.Iterable<org.apache.kafka.common.TopicPartition>, java.util.Collection<org.apache.kafka.common.TopicPartition>>();
    }

    @Test
    public void test0075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0075");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        org.apache.kafka.common.TopicPartition topicPartition1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.topology.base.BaseRichSpout>.OffsetEntry offsetEntry3 = kafkaSpout0.new OffsetEntry(topicPartition1, (long) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$OffsetEntry with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0076");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator0 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator0;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator2 = offsetComparator0.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator4 = kafkaSpoutMessageIdComparator2.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator5 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator5;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator7 = offsetComparator5.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator8 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator9 = kafkaSpoutMessageIdComparator7.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator8);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator7;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator11 = org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator12 = kafkaSpoutMessageIdComparator7.thenComparing(kafkaSpoutMessageIdComparator11);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator13 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator13;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator15 = offsetComparator13.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator16 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator17 = kafkaSpoutMessageIdComparator15.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator16);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator18 = kafkaSpoutMessageIdComparator17.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator19 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator19;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator21 = offsetComparator19.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator22 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator23 = kafkaSpoutMessageIdComparator21.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator22);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator22;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator25 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator26 = offsetComparator22.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator25);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator27 = kafkaSpoutMessageIdComparator17.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator22);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator28 = kafkaSpoutMessageIdComparator11.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator22);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator29 = offsetComparator3.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator22);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId30 = null;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId31 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int32 = offsetComparator3.compare(kafkaSpoutMessageId30, kafkaSpoutMessageId31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator2);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator7);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator9);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator11);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator12);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator15);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator17);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator18);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator21);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator23);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator26);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator27);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator28);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator29);
    }

    @Test
    public void test0077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0077");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray5 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet6, kafkaSpoutMessageIdArray5);
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet6;
        offsetComparatorKafkaSpout0.maxRetries = 100;
        org.apache.kafka.common.record.TimestampType timestampType15 = null;
        org.apache.kafka.common.record.TimestampType timestampType23 = null;
        java.lang.Object obj27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("", 10, (long) (byte) -1, (long) '4', timestampType23, (long) (byte) 0, (int) (short) 10, (int) (byte) 100, obj27, (java.io.Serializable) 1);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String> objConsumerRecordConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String>("", (int) 'a', (long) (short) 10, (long) (byte) -1, timestampType15, (long) 'a', (int) (byte) -1, 0, objConsumerRecord29, "hi!");
        long long32 = objConsumerRecord29.checksum();
        java.util.Optional<java.lang.Integer> intOptional33 = objConsumerRecord29.leaderEpoch();
        int int34 = objConsumerRecord29.serializedValueSize();
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.fail((java.lang.Object) int34);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Integer cannot be cast to org.apache.storm.kafka.spout.KafkaSpoutMessageId");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(intOptional33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
    }

    @Test
    public void test0078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0078");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.Cloneable>.Timer timer1 = kafkaSpout0.new Timer();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$Timer with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0079");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.base.BaseRichSpout, org.apache.storm.topology.base.BaseComponent>.KafkaSpoutConsumerRebalanceListener kafkaSpoutConsumerRebalanceListener1 = kafkaSpout0.new KafkaSpoutConsumerRebalanceListener();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$KafkaSpoutConsumerRebalanceListener with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0080");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig5 = offsetComparatorKafkaSpout0.kafkaSpoutConfig;
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig6 = offsetComparatorKafkaSpout0.kafkaSpoutConfig;
        boolean boolean7 = offsetComparatorKafkaSpout0.waitingToEmit();
        org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy firstPollOffsetStrategy8 = null;
        offsetComparatorKafkaSpout0.firstPollOffsetStrategy = firstPollOffsetStrategy8;
        org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy firstPollOffsetStrategy10 = offsetComparatorKafkaSpout0.firstPollOffsetStrategy;
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorConsumerRecord11 = null;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.emitTupleIfNotEmitted(offsetComparatorConsumerRecord11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNull(offsetComparatorKafkaSpoutConfig5);
        org.junit.Assert.assertNull(offsetComparatorKafkaSpoutConfig6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(firstPollOffsetStrategy10);
    }

    @Test
    public void test0081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0081");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean1 = offsetComparatorKafkaSpout0.consumerAutoCommitMode;
        org.apache.kafka.common.TopicPartition topicPartition2 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection3 = offsetComparatorKafkaSpout0.toArrayList(topicPartition2);
        org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy firstPollOffsetStrategy4 = null;
        offsetComparatorKafkaSpout0.firstPollOffsetStrategy = firstPollOffsetStrategy4;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean6 = offsetComparatorKafkaSpout0.commit();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(topicPartitionCollection3);
    }

    @Test
    public void test0082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0082");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        java.util.concurrent.TimeUnit timeUnit3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IRichSpout, java.lang.CharSequence>.Timer timer4 = kafkaSpout0.new Timer((long) (-1), (long) (byte) 10, timeUnit3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$Timer with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0083");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.storm.kafka.spout.internal.KafkaConsumerFactory kafkaConsumerFactory1 = null;
        offsetComparatorKafkaSpout0.kafkaConsumerFactory = kafkaConsumerFactory1;
        org.apache.storm.topology.OutputFieldsDeclarer outputFieldsDeclarer3 = null;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.declareOutputFields(outputFieldsDeclarer3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0084");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.lang.CharSequence, java.util.Set<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> charSequenceKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.lang.CharSequence, java.util.Set<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> charSequenceKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.CharSequence, java.util.Set<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>(charSequenceKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0085");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray5 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet6, kafkaSpoutMessageIdArray5);
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet6;
        java.util.Map<org.apache.kafka.common.TopicPartition, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>.OffsetEntry> topicPartitionMap9 = null;
        offsetComparatorKafkaSpout0.acked = topicPartitionMap9;
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService11 = offsetComparatorKafkaSpout0.retryService;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = offsetComparatorKafkaSpout0.getNamedTopics();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(kafkaSpoutRetryService11);
    }

    @Test
    public void test0086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0086");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        java.util.Set<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet3 = offsetComparatorKafkaSpout0.emitted;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(kafkaSpoutMessageIdSet3);
    }

    @Test
    public void test0087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0087");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig5 = offsetComparatorKafkaSpout0.kafkaSpoutConfig;
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig6 = offsetComparatorKafkaSpout0.kafkaSpoutConfig;
        boolean boolean7 = offsetComparatorKafkaSpout0.waitingToEmit();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean8 = offsetComparatorKafkaSpout0.poll();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNull(offsetComparatorKafkaSpoutConfig5);
        org.junit.Assert.assertNull(offsetComparatorKafkaSpoutConfig6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0088");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.String, java.lang.CharSequence> strKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.String, java.lang.CharSequence>();
    }

    @Test
    public void test0089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0089");
        org.apache.storm.kafka.spout.KafkaSpout<java.util.AbstractCollection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.kafka.common.header.Headers> kafkaSpoutMessageIdCollectionKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.util.AbstractCollection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.kafka.common.header.Headers>();
    }

    @Test
    public void test0090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0090");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.lang.Object, org.apache.storm.topology.base.BaseRichSpout>.KafkaSpoutConsumerRebalanceListener kafkaSpoutConsumerRebalanceListener1 = kafkaSpout0.new KafkaSpoutConsumerRebalanceListener();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$KafkaSpoutConsumerRebalanceListener with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0091");
        org.apache.storm.kafka.spout.KafkaSpout<java.util.AbstractList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.util.ArrayList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> kafkaSpoutMessageIdListKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.util.AbstractList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.util.ArrayList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>();
    }

    @Test
    public void test0092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0092");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        java.util.Map<org.apache.kafka.common.TopicPartition, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>.OffsetEntry> topicPartitionMap5 = null;
        offsetComparatorKafkaSpout0.acked = topicPartitionMap5;
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService7 = offsetComparatorKafkaSpout0.retryService;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.emit();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNull(kafkaSpoutRetryService7);
    }

    @Test
    public void test0093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0093");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator0 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator0;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator2 = offsetComparator0.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator4 = kafkaSpoutMessageIdComparator2.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator2;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator6 = org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator7 = kafkaSpoutMessageIdComparator2.thenComparing(kafkaSpoutMessageIdComparator6);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator8 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator8;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator10 = offsetComparator8.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator11 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator12 = kafkaSpoutMessageIdComparator10.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator11);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator13 = kafkaSpoutMessageIdComparator12.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator14 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator14;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator16 = offsetComparator14.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator17 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator18 = kafkaSpoutMessageIdComparator16.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator17);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator17;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator20 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator21 = offsetComparator17.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator20);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator22 = kafkaSpoutMessageIdComparator12.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator17);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator23 = kafkaSpoutMessageIdComparator6.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator17);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator17;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId25 = null;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId26 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int27 = offsetComparator17.compare(kafkaSpoutMessageId25, kafkaSpoutMessageId26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator2);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator6);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator7);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator10);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator12);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator13);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator16);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator18);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator21);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator22);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator23);
    }

    @Test
    public void test0094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0094");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor3 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor3;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean5 = offsetComparatorKafkaSpout0.commit();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0095");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer1 = null;
        offsetComparatorKafkaSpout0.kafkaConsumer = offsetComparatorKafkaConsumer1;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout3 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean4 = offsetComparatorKafkaSpout3.consumerAutoCommitMode;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray5 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet6, kafkaSpoutMessageIdArray5);
        offsetComparatorKafkaSpout3.emitted = kafkaSpoutMessageIdSet6;
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet6;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = offsetComparatorKafkaSpout0.getNamedTopics();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0096");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.util.RandomAccess, java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> randomAccessKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.util.RandomAccess, java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> randomAccessKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<java.util.RandomAccess, java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>(randomAccessKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0097");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.AnnotatedElement, java.util.ArrayList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>.KafkaSpoutConsumerRebalanceListener kafkaSpoutConsumerRebalanceListener1 = kafkaSpout0.new KafkaSpoutConsumerRebalanceListener();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$KafkaSpoutConsumerRebalanceListener with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0098");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<org.apache.kafka.common.header.Headers, org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>>.KafkaSpoutConsumerRebalanceListener kafkaSpoutConsumerRebalanceListener1 = kafkaSpout0.new KafkaSpoutConsumerRebalanceListener();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$KafkaSpoutConsumerRebalanceListener with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0099");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.lang.reflect.AnnotatedElement, java.util.AbstractCollection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> annotatedElementKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.AnnotatedElement, java.util.AbstractCollection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> annotatedElementKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.AnnotatedElement, java.util.AbstractCollection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>(annotatedElementKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0100");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator0 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator0;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator2 = offsetComparator0.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator4 = kafkaSpoutMessageIdComparator2.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator2;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator6 = org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator7 = kafkaSpoutMessageIdComparator2.thenComparing(kafkaSpoutMessageIdComparator6);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator8 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator8;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator10 = offsetComparator8.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator11 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator12 = kafkaSpoutMessageIdComparator10.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator11);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator13 = kafkaSpoutMessageIdComparator12.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator14 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator14;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator16 = offsetComparator14.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator17 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator18 = kafkaSpoutMessageIdComparator16.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator17);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator17;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator20 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator21 = offsetComparator17.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator20);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator22 = kafkaSpoutMessageIdComparator12.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator17);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator23 = kafkaSpoutMessageIdComparator6.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator17);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId24 = null;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId25 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int26 = offsetComparator17.compare(kafkaSpoutMessageId24, kafkaSpoutMessageId25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator2);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator6);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator7);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator10);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator12);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator13);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator16);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator18);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator21);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator22);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator23);
    }

    @Test
    public void test0101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0101");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.base.BaseRichSpout, java.util.Collection<org.apache.kafka.common.TopicPartition>> baseRichSpoutKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.base.BaseRichSpout, java.util.Collection<org.apache.kafka.common.TopicPartition>>();
    }

    @Test
    public void test0102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0102");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig5 = offsetComparatorKafkaSpout0.kafkaSpoutConfig;
        org.apache.kafka.common.TopicPartition topicPartition6 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection7 = offsetComparatorKafkaSpout0.toArrayList(topicPartition6);
        java.util.Map map8 = null;
        org.apache.storm.task.TopologyContext topologyContext9 = null;
        org.apache.storm.spout.SpoutOutputCollector spoutOutputCollector10 = null;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.open(map8, topologyContext9, spoutOutputCollector10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNull(offsetComparatorKafkaSpoutConfig5);
        org.junit.Assert.assertNotNull(topicPartitionCollection7);
    }

    @Test
    public void test0103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0103");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator0 = org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator1 = kafkaSpoutMessageIdComparator0.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator0;
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator0);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator1);
    }

    @Test
    public void test0104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0104");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout3 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor4 = null;
        offsetComparatorKafkaSpout3.waitingToEmit = offsetComparatorConsumerRecordItor4;
        org.apache.kafka.common.TopicPartition topicPartition6 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection7 = offsetComparatorKafkaSpout3.toArrayList(topicPartition6);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray8 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet9 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet9, kafkaSpoutMessageIdArray8);
        offsetComparatorKafkaSpout3.emitted = kafkaSpoutMessageIdSet9;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor12 = null;
        offsetComparatorKafkaSpout3.waitingToEmit = offsetComparatorConsumerRecordItor12;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator20 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout21 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer22 = null;
        offsetComparatorKafkaSpout21.kafkaConsumer = offsetComparatorKafkaConsumer22;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout24 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean25 = offsetComparatorKafkaSpout24.consumerAutoCommitMode;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray26 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet27 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet27, kafkaSpoutMessageIdArray26);
        offsetComparatorKafkaSpout24.emitted = kafkaSpoutMessageIdSet27;
        offsetComparatorKafkaSpout21.emitted = kafkaSpoutMessageIdSet27;
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> offsetComparatorConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)", (int) (short) -1, (long) 0, offsetComparator20, (java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet27);
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> iComponentKafkaSpout32 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.topology.IRichSpout> kafkaSpoutMessageIdSetConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.topology.IRichSpout>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)", (int) (byte) -1, (long) 1, kafkaSpoutMessageIdSet27, (org.apache.storm.topology.IRichSpout) iComponentKafkaSpout32);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>, java.lang.Cloneable> offsetComparatorKafkaSpoutConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>, java.lang.Cloneable>("", (int) (byte) 1, (long) '4', offsetComparatorKafkaSpout3, (java.lang.Cloneable) kafkaSpoutMessageIdSet27);
        org.apache.kafka.clients.consumer.ConsumerRecords<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorConsumerRecords35 = null;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout3.setWaitingToEmit(offsetComparatorConsumerRecords35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection7);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0105");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean1 = offsetComparatorKafkaSpout0.consumerAutoCommitMode;
        org.apache.kafka.common.TopicPartition topicPartition2 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection3 = offsetComparatorKafkaSpout0.toArrayList(topicPartition2);
        org.apache.kafka.clients.consumer.ConsumerRecords<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorConsumerRecords4 = null;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.setWaitingToEmit(offsetComparatorConsumerRecords4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(topicPartitionCollection3);
    }

    @Test
    public void test0106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0106");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator0 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator0;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator2 = offsetComparator0.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator4 = kafkaSpoutMessageIdComparator2.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator2;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator6 = org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator7 = kafkaSpoutMessageIdComparator2.thenComparing(kafkaSpoutMessageIdComparator6);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator6;
        java.lang.Class<?> wildcardClass9 = kafkaSpoutMessageIdComparator6.getClass();
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator2);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator6);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator7);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0107");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, java.io.Serializable>.KafkaSpoutConsumerRebalanceListener, org.apache.kafka.common.header.Headers> kafkaSpoutConsumerRebalanceListenerKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, java.io.Serializable>.KafkaSpoutConsumerRebalanceListener, org.apache.kafka.common.header.Headers>();
        java.lang.Class<?> wildcardClass1 = kafkaSpoutConsumerRebalanceListenerKafkaSpout0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test0108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0108");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.Iterable<org.apache.kafka.common.TopicPartition>, org.apache.storm.topology.base.BaseComponent> topicPartitionIterableKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.Iterable<org.apache.kafka.common.TopicPartition>, org.apache.storm.topology.base.BaseComponent>();
    }

    @Test
    public void test0109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0109");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.lang.Object, org.apache.storm.topology.IComponent> objKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.lang.Object, org.apache.storm.topology.IComponent> objKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.Object, org.apache.storm.topology.IComponent>(objKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0110");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer1 = null;
        offsetComparatorKafkaSpout0.kafkaConsumer = offsetComparatorKafkaConsumer1;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout3 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean4 = offsetComparatorKafkaSpout3.consumerAutoCommitMode;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray5 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet6, kafkaSpoutMessageIdArray5);
        offsetComparatorKafkaSpout3.emitted = kafkaSpoutMessageIdSet6;
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet6;
        org.apache.storm.spout.SpoutOutputCollector spoutOutputCollector10 = null;
        offsetComparatorKafkaSpout0.collector = spoutOutputCollector10;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Object> strMap12 = offsetComparatorKafkaSpout0.getComponentConfiguration();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0111");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig5 = offsetComparatorKafkaSpout0.kafkaSpoutConfig;
        org.apache.storm.spout.SpoutOutputCollector spoutOutputCollector6 = offsetComparatorKafkaSpout0.collector;
        java.util.Set<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet7 = offsetComparatorKafkaSpout0.emitted;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.subscribeKafkaConsumer();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNull(offsetComparatorKafkaSpoutConfig5);
        org.junit.Assert.assertNull(spoutOutputCollector6);
        org.junit.Assert.assertNull(kafkaSpoutMessageIdSet7);
    }

    @Test
    public void test0112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0112");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean1 = offsetComparatorKafkaSpout0.consumerAutoCommitMode;
        int int2 = offsetComparatorKafkaSpout0.maxRetries;
        org.apache.storm.topology.OutputFieldsDeclarer outputFieldsDeclarer3 = null;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.declareOutputFields(outputFieldsDeclarer3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test0113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0113");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig5 = offsetComparatorKafkaSpout0.kafkaSpoutConfig;
        org.apache.storm.spout.SpoutOutputCollector spoutOutputCollector6 = offsetComparatorKafkaSpout0.collector;
        java.util.Set<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet7 = offsetComparatorKafkaSpout0.emitted;
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig8 = offsetComparatorKafkaSpout0.kafkaSpoutConfig;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.doSeekRetriableTopicPartitions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNull(offsetComparatorKafkaSpoutConfig5);
        org.junit.Assert.assertNull(spoutOutputCollector6);
        org.junit.Assert.assertNull(kafkaSpoutMessageIdSet7);
        org.junit.Assert.assertNull(offsetComparatorKafkaSpoutConfig8);
    }

    @Test
    public void test0114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0114");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean1 = offsetComparatorKafkaSpout0.consumerAutoCommitMode;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray2 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet3 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet3, kafkaSpoutMessageIdArray2);
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet3;
        boolean boolean6 = offsetComparatorKafkaSpout0.waitingToEmit();
        org.apache.kafka.common.record.TimestampType timestampType11 = null;
        org.apache.storm.topology.base.BaseRichSpout baseRichSpout15 = null;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray16 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.ArrayList<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdList17 = new java.util.ArrayList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdList17, kafkaSpoutMessageIdArray16);
        org.apache.kafka.common.record.TimestampType timestampType23 = null;
        org.apache.kafka.common.record.TimestampType timestampType31 = null;
        java.lang.Object obj35 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("", 10, (long) (byte) -1, (long) '4', timestampType31, (long) (byte) 0, (int) (short) 10, (int) (byte) 100, obj35, (java.io.Serializable) 1);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String> objConsumerRecordConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String>("", (int) 'a', (long) (short) 10, (long) (byte) -1, timestampType23, (long) 'a', (int) (byte) -1, 0, objConsumerRecord37, "hi!");
        long long40 = objConsumerRecord37.checksum();
        java.util.Optional<java.lang.Integer> intOptional41 = objConsumerRecord37.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType42 = objConsumerRecord37.timestampType();
        org.apache.kafka.common.header.Headers headers43 = objConsumerRecord37.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.topology.base.BaseRichSpout, java.util.AbstractCollection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> baseRichSpoutConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.topology.base.BaseRichSpout, java.util.AbstractCollection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>("", (int) (byte) 1, (long) (byte) 0, (long) ' ', timestampType11, (java.lang.Long) 1L, (int) (short) -1, (int) '4', baseRichSpout15, (java.util.AbstractCollection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdList17, headers43);
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.ack((java.lang.Object) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Byte cannot be cast to org.apache.storm.kafka.spout.KafkaSpoutMessageId");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(intOptional41);
        org.junit.Assert.assertNull(timestampType42);
        org.junit.Assert.assertNotNull(headers43);
    }

    @Test
    public void test0115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0115");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig5 = offsetComparatorKafkaSpout0.kafkaSpoutConfig;
        org.apache.storm.spout.SpoutOutputCollector spoutOutputCollector6 = offsetComparatorKafkaSpout0.collector;
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorConsumerRecord7 = null;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.emitTupleIfNotEmitted(offsetComparatorConsumerRecord7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNull(offsetComparatorKafkaSpoutConfig5);
        org.junit.Assert.assertNull(spoutOutputCollector6);
    }

    @Test
    public void test0116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0116");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        java.util.Set<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet3 = offsetComparatorKafkaSpout0.emitted;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.doSeekRetriableTopicPartitions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(kafkaSpoutMessageIdSet3);
    }

    @Test
    public void test0117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0117");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray5 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet6, kafkaSpoutMessageIdArray5);
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet6;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor9 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor9;
        org.apache.storm.kafka.spout.internal.KafkaConsumerFactory kafkaConsumerFactory11 = offsetComparatorKafkaSpout0.kafkaConsumerFactory;
        org.apache.kafka.common.TopicPartition topicPartition12 = null;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.setAcked(topicPartition12, (long) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(kafkaConsumerFactory11);
    }

    @Test
    public void test0118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0118");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator0 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator0;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator2 = offsetComparator0.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator4 = kafkaSpoutMessageIdComparator2.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator5 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator5;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator7 = kafkaSpoutMessageIdComparator2.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator5);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId8 = null;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId9 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int10 = offsetComparator5.compare(kafkaSpoutMessageId8, kafkaSpoutMessageId9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator2);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator7);
    }

    @Test
    public void test0119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0119");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.spout.ISpout, java.util.List<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> iSpoutKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.spout.ISpout, java.util.List<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> iSpoutKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.spout.ISpout, java.util.List<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>(iSpoutKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0120");
        org.apache.storm.kafka.spout.KafkaSpout<java.util.ArrayList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.reflect.Type> kafkaSpoutMessageIdListKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.util.ArrayList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.reflect.Type>();
    }

    @Test
    public void test0121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0121");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.lang.String, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> strKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.lang.String, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> strKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.String, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>(strKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0122");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout9 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor10 = null;
        offsetComparatorKafkaSpout9.waitingToEmit = offsetComparatorConsumerRecordItor10;
        org.apache.kafka.common.TopicPartition topicPartition12 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection13 = offsetComparatorKafkaSpout9.toArrayList(topicPartition12);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray14 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet15 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet15, kafkaSpoutMessageIdArray14);
        offsetComparatorKafkaSpout9.emitted = kafkaSpoutMessageIdSet15;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor18 = null;
        offsetComparatorKafkaSpout9.waitingToEmit = offsetComparatorConsumerRecordItor18;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator26 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout27 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer28 = null;
        offsetComparatorKafkaSpout27.kafkaConsumer = offsetComparatorKafkaConsumer28;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout30 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean31 = offsetComparatorKafkaSpout30.consumerAutoCommitMode;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray32 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet33 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet33, kafkaSpoutMessageIdArray32);
        offsetComparatorKafkaSpout30.emitted = kafkaSpoutMessageIdSet33;
        offsetComparatorKafkaSpout27.emitted = kafkaSpoutMessageIdSet33;
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> offsetComparatorConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)", (int) (short) -1, (long) 0, offsetComparator26, (java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet33);
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> iComponentKafkaSpout38 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.topology.IRichSpout> kafkaSpoutMessageIdSetConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.topology.IRichSpout>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)", (int) (byte) -1, (long) 1, kafkaSpoutMessageIdSet33, (org.apache.storm.topology.IRichSpout) iComponentKafkaSpout38);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>, java.lang.Cloneable> offsetComparatorKafkaSpoutConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>, java.lang.Cloneable>("", (int) (byte) 1, (long) '4', offsetComparatorKafkaSpout9, (java.lang.Cloneable) kafkaSpoutMessageIdSet33);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)", (int) (short) 0, (long) 10, (java.lang.Object) kafkaSpoutMessageIdSet33, (java.io.Serializable) 0);
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout46 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean47 = offsetComparatorKafkaSpout46.consumerAutoCommitMode;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray48 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet49 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet49, kafkaSpoutMessageIdArray48);
        offsetComparatorKafkaSpout46.emitted = kafkaSpoutMessageIdSet49;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.CharSequence> kafkaSpoutMessageIdSetConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 100, null = 100, serialized key size = 10, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1), value = 1)", (int) (short) 100, (long) (byte) 10, kafkaSpoutMessageIdSet49, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 100, null = 100, serialized key size = 10, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1), value = 1)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.Cloneable> kafkaSpoutMessageIdSetConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.Cloneable>("ConsumerRecord(topic = hi!, partition = -1, leaderEpoch = null, offset = 0, null = 52, serialized key size = 10, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = 10.0)", (int) 'a', (long) (byte) 1, kafkaSpoutMessageIdSet33, (java.lang.Cloneable) kafkaSpoutMessageIdSet49);
        org.junit.Assert.assertNotNull(topicPartitionCollection13);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test0123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0123");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray5 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet6, kafkaSpoutMessageIdArray5);
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet6;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor9 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor9;
        long long11 = offsetComparatorKafkaSpout0.numUncommittedOffsets;
        org.apache.kafka.common.TopicPartition topicPartition12 = null;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.setAcked(topicPartition12, (long) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test0124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0124");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray5 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet6, kafkaSpoutMessageIdArray5);
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet6;
        java.util.Map<org.apache.kafka.common.TopicPartition, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>.OffsetEntry> topicPartitionMap9 = null;
        offsetComparatorKafkaSpout0.acked = topicPartitionMap9;
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService11 = offsetComparatorKafkaSpout0.retryService;
        long long12 = offsetComparatorKafkaSpout0.numUncommittedOffsets;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.subscribeKafkaConsumer();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(kafkaSpoutRetryService11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test0125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0125");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.CharSequence, org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator> charSequenceKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.CharSequence, org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator>();
        java.lang.Class<?> wildcardClass1 = charSequenceKafkaSpout0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test0126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0126");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        org.apache.kafka.common.TopicPartition topicPartition1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>.OffsetEntry offsetEntry3 = kafkaSpout0.new OffsetEntry(topicPartition1, 10L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$OffsetEntry with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0127");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, java.lang.Iterable<org.apache.kafka.common.TopicPartition>>.KafkaSpoutConsumerRebalanceListener kafkaSpoutConsumerRebalanceListener1 = kafkaSpout0.new KafkaSpoutConsumerRebalanceListener();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$KafkaSpoutConsumerRebalanceListener with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0128");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        org.apache.kafka.common.TopicPartition topicPartition1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.util.Collection<org.apache.kafka.common.TopicPartition>, java.lang.Comparable<java.lang.String>>.OffsetEntry offsetEntry3 = kafkaSpout0.new OffsetEntry(topicPartition1, (long) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$OffsetEntry with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0129");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        org.apache.kafka.common.TopicPartition topicPartition1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, java.io.Serializable>.KafkaSpoutConsumerRebalanceListener, java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>.OffsetEntry offsetEntry3 = kafkaSpout0.new OffsetEntry(topicPartition1, (long) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$OffsetEntry with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0130");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig5 = offsetComparatorKafkaSpout0.kafkaSpoutConfig;
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig6 = offsetComparatorKafkaSpout0.kafkaSpoutConfig;
        java.util.Map<org.apache.kafka.common.TopicPartition, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>.OffsetEntry> topicPartitionMap7 = null;
        offsetComparatorKafkaSpout0.acked = topicPartitionMap7;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean9 = offsetComparatorKafkaSpout0.commit();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNull(offsetComparatorKafkaSpoutConfig5);
        org.junit.Assert.assertNull(offsetComparatorKafkaSpoutConfig6);
    }

    @Test
    public void test0131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0131");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.storm.kafka.spout.internal.KafkaConsumerFactory kafkaConsumerFactory1 = null;
        offsetComparatorKafkaSpout0.kafkaConsumerFactory = kafkaConsumerFactory1;
        org.apache.storm.spout.SpoutOutputCollector spoutOutputCollector3 = offsetComparatorKafkaSpout0.collector;
        org.apache.kafka.clients.consumer.ConsumerRecords<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorConsumerRecords4 = null;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.setWaitingToEmit(offsetComparatorConsumerRecords4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(spoutOutputCollector3);
    }

    @Test
    public void test0132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0132");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer1 = null;
        offsetComparatorKafkaSpout0.kafkaConsumer = offsetComparatorKafkaConsumer1;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout3 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean4 = offsetComparatorKafkaSpout3.consumerAutoCommitMode;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray5 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet6, kafkaSpoutMessageIdArray5);
        offsetComparatorKafkaSpout3.emitted = kafkaSpoutMessageIdSet6;
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet6;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = offsetComparatorKafkaSpout0.getWildCardTopics();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0133");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean1 = offsetComparatorKafkaSpout0.consumerAutoCommitMode;
        int int2 = offsetComparatorKafkaSpout0.maxRetries;
        boolean boolean3 = offsetComparatorKafkaSpout0.waitingToEmit();
        java.util.Map<org.apache.kafka.common.TopicPartition, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>.OffsetEntry> topicPartitionMap4 = null;
        offsetComparatorKafkaSpout0.acked = topicPartitionMap4;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.kafka.clients.consumer.ConsumerRecords<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorConsumerRecords6 = offsetComparatorKafkaSpout0.pollKafkaBroker();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0134");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray5 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet6, kafkaSpoutMessageIdArray5);
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet6;
        java.util.Map<org.apache.kafka.common.TopicPartition, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>.OffsetEntry> topicPartitionMap9 = null;
        offsetComparatorKafkaSpout0.acked = topicPartitionMap9;
        java.util.Map<org.apache.kafka.common.TopicPartition, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>.OffsetEntry> topicPartitionMap11 = offsetComparatorKafkaSpout0.acked;
        int int12 = offsetComparatorKafkaSpout0.maxRetries;
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorConsumerRecord13 = null;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.emitTupleIfNotEmitted(offsetComparatorConsumerRecord13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(topicPartitionMap11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test0135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0135");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig5 = offsetComparatorKafkaSpout0.kafkaSpoutConfig;
        org.apache.storm.spout.SpoutOutputCollector spoutOutputCollector6 = offsetComparatorKafkaSpout0.collector;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.activate();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNull(offsetComparatorKafkaSpoutConfig5);
        org.junit.Assert.assertNull(spoutOutputCollector6);
    }

    @Test
    public void test0136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0136");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator0 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator0;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator2 = offsetComparator0.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator4 = kafkaSpoutMessageIdComparator2.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator5 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator5;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator7 = offsetComparator5.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator8 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator9 = kafkaSpoutMessageIdComparator7.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator8);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator7;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator11 = org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator12 = kafkaSpoutMessageIdComparator7.thenComparing(kafkaSpoutMessageIdComparator11);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator13 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator13;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator15 = offsetComparator13.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator16 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator17 = kafkaSpoutMessageIdComparator15.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator16);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator18 = kafkaSpoutMessageIdComparator17.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator19 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator19;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator21 = offsetComparator19.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator22 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator23 = kafkaSpoutMessageIdComparator21.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator22);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator22;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator25 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator26 = offsetComparator22.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator25);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator27 = kafkaSpoutMessageIdComparator17.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator22);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator28 = kafkaSpoutMessageIdComparator11.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator22);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator29 = offsetComparator3.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator22);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator30 = offsetComparator3.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator31 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator31;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator33 = offsetComparator31.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator34 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator35 = kafkaSpoutMessageIdComparator33.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator34);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator36 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator36;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator38 = kafkaSpoutMessageIdComparator33.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator36);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator39 = offsetComparator3.thenComparing(kafkaSpoutMessageIdComparator33);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId40 = null;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId41 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int42 = offsetComparator3.compare(kafkaSpoutMessageId40, kafkaSpoutMessageId41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator2);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator7);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator9);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator11);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator12);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator15);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator17);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator18);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator21);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator23);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator26);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator27);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator28);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator29);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator30);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator33);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator35);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator38);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator39);
    }

    @Test
    public void test0137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0137");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>.Timer timer1 = kafkaSpout0.new Timer();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$Timer with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0138");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>, org.apache.storm.spout.ISpout> offsetComparatorKafkaSpoutKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>, org.apache.storm.spout.ISpout> offsetComparatorKafkaSpoutKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>, org.apache.storm.spout.ISpout>(offsetComparatorKafkaSpoutKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0139");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        java.util.Set<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet3 = offsetComparatorKafkaSpout0.emitted;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.deactivate();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(kafkaSpoutMessageIdSet3);
    }

    @Test
    public void test0140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0140");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, java.io.Serializable>.KafkaSpoutConsumerRebalanceListener> iComponentKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, java.io.Serializable>.KafkaSpoutConsumerRebalanceListener>();
    }

    @Test
    public void test0141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0141");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout3 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor4 = null;
        offsetComparatorKafkaSpout3.waitingToEmit = offsetComparatorConsumerRecordItor4;
        org.apache.kafka.common.TopicPartition topicPartition6 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection7 = offsetComparatorKafkaSpout3.toArrayList(topicPartition6);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray8 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet9 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet9, kafkaSpoutMessageIdArray8);
        offsetComparatorKafkaSpout3.emitted = kafkaSpoutMessageIdSet9;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout15 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor16 = null;
        offsetComparatorKafkaSpout15.waitingToEmit = offsetComparatorConsumerRecordItor16;
        org.apache.kafka.common.TopicPartition topicPartition18 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection19 = offsetComparatorKafkaSpout15.toArrayList(topicPartition18);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray20 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet21 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet21, kafkaSpoutMessageIdArray20);
        offsetComparatorKafkaSpout15.emitted = kafkaSpoutMessageIdSet21;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor24 = null;
        offsetComparatorKafkaSpout15.waitingToEmit = offsetComparatorConsumerRecordItor24;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator32 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout33 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer34 = null;
        offsetComparatorKafkaSpout33.kafkaConsumer = offsetComparatorKafkaConsumer34;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout36 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean37 = offsetComparatorKafkaSpout36.consumerAutoCommitMode;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray38 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet39 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet39, kafkaSpoutMessageIdArray38);
        offsetComparatorKafkaSpout36.emitted = kafkaSpoutMessageIdSet39;
        offsetComparatorKafkaSpout33.emitted = kafkaSpoutMessageIdSet39;
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> offsetComparatorConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)", (int) (short) -1, (long) 0, offsetComparator32, (java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet39);
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> iComponentKafkaSpout44 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.topology.IRichSpout> kafkaSpoutMessageIdSetConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.topology.IRichSpout>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)", (int) (byte) -1, (long) 1, kafkaSpoutMessageIdSet39, (org.apache.storm.topology.IRichSpout) iComponentKafkaSpout44);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>, java.lang.Cloneable> offsetComparatorKafkaSpoutConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>, java.lang.Cloneable>("", (int) (byte) 1, (long) '4', offsetComparatorKafkaSpout15, (java.lang.Cloneable) kafkaSpoutMessageIdSet39);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>("", (int) 'a', (long) (short) 0, (java.io.Serializable) offsetComparatorKafkaSpout3, (java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet39);
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>.Timer timer48 = offsetComparatorKafkaSpout3.commitTimer;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout3.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection7);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(topicPartitionCollection19);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(timer48);
    }

    @Test
    public void test0142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0142");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig5 = offsetComparatorKafkaSpout0.kafkaSpoutConfig;
        org.apache.storm.spout.SpoutOutputCollector spoutOutputCollector6 = offsetComparatorKafkaSpout0.collector;
        java.util.Set<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet7 = offsetComparatorKafkaSpout0.emitted;
        org.apache.kafka.common.TopicPartition topicPartition8 = null;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.setAcked(topicPartition8, (long) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNull(offsetComparatorKafkaSpoutConfig5);
        org.junit.Assert.assertNull(spoutOutputCollector6);
        org.junit.Assert.assertNull(kafkaSpoutMessageIdSet7);
    }

    @Test
    public void test0143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0143");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        org.apache.kafka.common.TopicPartition topicPartition1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<org.apache.kafka.clients.consumer.ConsumerRebalanceListener, java.lang.reflect.GenericDeclaration>.OffsetEntry offsetEntry3 = kafkaSpout0.new OffsetEntry(topicPartition1, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$OffsetEntry with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0144");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.kafka.common.TopicPartition topicPartition1 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection2 = offsetComparatorKafkaSpout0.toArrayList(topicPartition1);
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.commitOffsetsForAckedTuples();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection2);
    }

    @Test
    public void test0145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0145");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray5 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet6, kafkaSpoutMessageIdArray5);
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet6;
        offsetComparatorKafkaSpout0.maxRetries = 100;
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService11 = null;
        offsetComparatorKafkaSpout0.retryService = kafkaSpoutRetryService11;
        org.apache.storm.kafka.spout.KafkaSpoutStreams kafkaSpoutStreams13 = offsetComparatorKafkaSpout0.kafkaSpoutStreams;
        boolean boolean14 = offsetComparatorKafkaSpout0.initialized;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.commitOffsetsForAckedTuples();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(kafkaSpoutStreams13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0146");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.Cloneable> kafkaSpoutMessageIdSetKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.Cloneable> kafkaSpoutMessageIdSetKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.Cloneable>(kafkaSpoutMessageIdSetKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0147");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        org.apache.kafka.common.TopicPartition topicPartition1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>.OffsetEntry offsetEntry3 = kafkaSpout0.new OffsetEntry(topicPartition1, (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$OffsetEntry with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0148");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator0 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator0;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator2 = offsetComparator0.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator4 = kafkaSpoutMessageIdComparator2.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator3;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator6 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator7 = offsetComparator3.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator6);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator8 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator8;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator10 = kafkaSpoutMessageIdComparator7.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator8);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId11 = null;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId12 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int13 = offsetComparator8.compare(kafkaSpoutMessageId11, kafkaSpoutMessageId12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator2);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator7);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator10);
    }

    @Test
    public void test0149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0149");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, org.apache.kafka.common.header.Headers>.OffsetEntry offsetEntry1 = kafkaSpout0.new OffsetEntry();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$OffsetEntry with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0150");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout3 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor4 = null;
        offsetComparatorKafkaSpout3.waitingToEmit = offsetComparatorConsumerRecordItor4;
        org.apache.kafka.common.TopicPartition topicPartition6 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection7 = offsetComparatorKafkaSpout3.toArrayList(topicPartition6);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray8 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet9 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet9, kafkaSpoutMessageIdArray8);
        offsetComparatorKafkaSpout3.emitted = kafkaSpoutMessageIdSet9;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout15 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor16 = null;
        offsetComparatorKafkaSpout15.waitingToEmit = offsetComparatorConsumerRecordItor16;
        org.apache.kafka.common.TopicPartition topicPartition18 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection19 = offsetComparatorKafkaSpout15.toArrayList(topicPartition18);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray20 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet21 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet21, kafkaSpoutMessageIdArray20);
        offsetComparatorKafkaSpout15.emitted = kafkaSpoutMessageIdSet21;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor24 = null;
        offsetComparatorKafkaSpout15.waitingToEmit = offsetComparatorConsumerRecordItor24;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator32 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout33 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer34 = null;
        offsetComparatorKafkaSpout33.kafkaConsumer = offsetComparatorKafkaConsumer34;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout36 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean37 = offsetComparatorKafkaSpout36.consumerAutoCommitMode;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray38 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet39 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet39, kafkaSpoutMessageIdArray38);
        offsetComparatorKafkaSpout36.emitted = kafkaSpoutMessageIdSet39;
        offsetComparatorKafkaSpout33.emitted = kafkaSpoutMessageIdSet39;
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> offsetComparatorConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)", (int) (short) -1, (long) 0, offsetComparator32, (java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet39);
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> iComponentKafkaSpout44 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.topology.IRichSpout> kafkaSpoutMessageIdSetConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.topology.IRichSpout>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)", (int) (byte) -1, (long) 1, kafkaSpoutMessageIdSet39, (org.apache.storm.topology.IRichSpout) iComponentKafkaSpout44);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>, java.lang.Cloneable> offsetComparatorKafkaSpoutConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>, java.lang.Cloneable>("", (int) (byte) 1, (long) '4', offsetComparatorKafkaSpout15, (java.lang.Cloneable) kafkaSpoutMessageIdSet39);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>("", (int) 'a', (long) (short) 0, (java.io.Serializable) offsetComparatorKafkaSpout3, (java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet39);
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>.Timer timer48 = offsetComparatorKafkaSpout3.commitTimer;
        org.apache.kafka.clients.consumer.ConsumerRecords<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorConsumerRecords49 = null;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout3.setWaitingToEmit(offsetComparatorConsumerRecords49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection7);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(topicPartitionCollection19);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(timer48);
    }

    @Test
    public void test0151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0151");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.kafka.common.header.Headers, java.lang.CharSequence> headersKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.kafka.common.header.Headers, java.lang.CharSequence>();
    }

    @Test
    public void test0152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0152");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator0 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator0;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator2 = offsetComparator0.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator4 = kafkaSpoutMessageIdComparator2.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator5 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator5;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator7 = kafkaSpoutMessageIdComparator2.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator5);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator5;
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator2);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator7);
    }

    @Test
    public void test0153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0153");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig5 = offsetComparatorKafkaSpout0.kafkaSpoutConfig;
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig6 = offsetComparatorKafkaSpout0.kafkaSpoutConfig;
        boolean boolean7 = offsetComparatorKafkaSpout0.waitingToEmit();
        org.apache.kafka.common.TopicPartition topicPartition8 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection9 = offsetComparatorKafkaSpout0.toArrayList(topicPartition8);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean10 = offsetComparatorKafkaSpout0.commit();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNull(offsetComparatorKafkaSpoutConfig5);
        org.junit.Assert.assertNull(offsetComparatorKafkaSpoutConfig6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(topicPartitionCollection9);
    }

    @Test
    public void test0154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0154");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType12 = null;
        org.apache.kafka.common.record.TimestampType timestampType20 = null;
        java.lang.Object obj24 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("", 10, (long) (byte) -1, (long) '4', timestampType20, (long) (byte) 0, (int) (short) 10, (int) (byte) 100, obj24, (java.io.Serializable) 1);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String> objConsumerRecordConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String>("", (int) 'a', (long) (short) 10, (long) (byte) -1, timestampType12, (long) 'a', (int) (byte) -1, 0, objConsumerRecord26, "hi!");
        long long29 = objConsumerRecord26.checksum();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("", (int) (short) 100, (long) 100, (long) (short) 100, timestampType4, (long) '4', (int) (byte) 10, (int) (short) 10, (java.lang.Object) objConsumerRecord26, (java.io.Serializable) 1L);
        long long32 = objConsumerRecord26.checksum();
        org.apache.kafka.common.header.Headers headers33 = objConsumerRecord26.headers();
        long long34 = objConsumerRecord26.offset();
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(headers33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
    }

    @Test
    public void test0155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0155");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator0 = org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator1 = kafkaSpoutMessageIdComparator0.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator2 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator2;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator4 = offsetComparator2.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator5 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator6 = kafkaSpoutMessageIdComparator4.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator5);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator7 = kafkaSpoutMessageIdComparator6.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator8 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator8;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator10 = offsetComparator8.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator11 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator12 = kafkaSpoutMessageIdComparator10.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator11);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator11;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator14 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator15 = offsetComparator11.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator14);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator16 = kafkaSpoutMessageIdComparator6.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator11);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator17 = kafkaSpoutMessageIdComparator0.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator11);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId18 = null;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId19 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int20 = offsetComparator11.compare(kafkaSpoutMessageId18, kafkaSpoutMessageId19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator0);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator1);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator6);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator7);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator10);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator12);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator15);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator16);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator17);
    }

    @Test
    public void test0156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0156");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, org.apache.storm.topology.base.BaseRichSpout> genericDeclarationKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.GenericDeclaration, org.apache.storm.topology.base.BaseRichSpout>();
    }

    @Test
    public void test0157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0157");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray5 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet6, kafkaSpoutMessageIdArray5);
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet6;
        java.util.Map<org.apache.kafka.common.TopicPartition, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>.OffsetEntry> topicPartitionMap9 = null;
        offsetComparatorKafkaSpout0.acked = topicPartitionMap9;
        java.util.Map<org.apache.kafka.common.TopicPartition, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>.OffsetEntry> topicPartitionMap11 = offsetComparatorKafkaSpout0.acked;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = offsetComparatorKafkaSpout0.getNamedTopics();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(topicPartitionMap11);
    }

    @Test
    public void test0158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0158");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.lang.Cloneable, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> cloneableKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.lang.Cloneable, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> cloneableKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.Cloneable, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>>(cloneableKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0159");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig5 = offsetComparatorKafkaSpout0.kafkaSpoutConfig;
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig6 = offsetComparatorKafkaSpout0.kafkaSpoutConfig;
        org.apache.storm.kafka.spout.internal.KafkaConsumerFactory kafkaConsumerFactory7 = null;
        offsetComparatorKafkaSpout0.kafkaConsumerFactory = kafkaConsumerFactory7;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNull(offsetComparatorKafkaSpoutConfig5);
        org.junit.Assert.assertNull(offsetComparatorKafkaSpoutConfig6);
    }

    @Test
    public void test0160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0160");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig5 = offsetComparatorKafkaSpout0.kafkaSpoutConfig;
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig6 = offsetComparatorKafkaSpout0.kafkaSpoutConfig;
        boolean boolean7 = offsetComparatorKafkaSpout0.waitingToEmit();
        org.apache.kafka.clients.consumer.ConsumerRecords<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorConsumerRecords8 = null;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.setWaitingToEmit(offsetComparatorConsumerRecords8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNull(offsetComparatorKafkaSpoutConfig5);
        org.junit.Assert.assertNull(offsetComparatorKafkaSpoutConfig6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0161");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer1 = null;
        offsetComparatorKafkaSpout0.kafkaConsumer = offsetComparatorKafkaConsumer1;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.doSeekRetriableTopicPartitions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0162");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout<java.lang.Object, java.io.Serializable>.OffsetEntry, org.apache.storm.kafka.spout.KafkaSpout<java.lang.Object, java.io.Serializable>.OffsetEntry>.KafkaSpoutConsumerRebalanceListener kafkaSpoutConsumerRebalanceListener1 = kafkaSpout0.new KafkaSpoutConsumerRebalanceListener();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$KafkaSpoutConsumerRebalanceListener with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0163");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        org.apache.kafka.common.TopicPartition topicPartition1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout<java.lang.Object, java.io.Serializable>.OffsetEntry, java.lang.Cloneable>.OffsetEntry offsetEntry3 = kafkaSpout0.new OffsetEntry(topicPartition1, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$OffsetEntry with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0164");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.kafka.clients.consumer.ConsumerRebalanceListener, java.lang.Iterable<org.apache.kafka.common.TopicPartition>> consumerRebalanceListenerKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.kafka.clients.consumer.ConsumerRebalanceListener, java.lang.Iterable<org.apache.kafka.common.TopicPartition>>();
    }

    @Test
    public void test0165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0165");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean1 = offsetComparatorKafkaSpout0.consumerAutoCommitMode;
        org.apache.kafka.common.TopicPartition topicPartition2 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection3 = offsetComparatorKafkaSpout0.toArrayList(topicPartition2);
        long long4 = offsetComparatorKafkaSpout0.numUncommittedOffsets;
        long long5 = offsetComparatorKafkaSpout0.numUncommittedOffsets;
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer6 = null;
        offsetComparatorKafkaSpout0.kafkaConsumer = offsetComparatorKafkaConsumer6;
        offsetComparatorKafkaSpout0.maxRetries = (short) 0;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Object> strMap10 = offsetComparatorKafkaSpout0.getComponentConfiguration();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(topicPartitionCollection3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
    }

    @Test
    public void test0166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0166");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig5 = offsetComparatorKafkaSpout0.kafkaSpoutConfig;
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig6 = offsetComparatorKafkaSpout0.kafkaSpoutConfig;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.nextTuple();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNull(offsetComparatorKafkaSpoutConfig5);
        org.junit.Assert.assertNull(offsetComparatorKafkaSpoutConfig6);
    }

    @Test
    public void test0167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0167");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.kafka.common.TopicPartition topicPartition1 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection2 = offsetComparatorKafkaSpout0.toArrayList(topicPartition1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.kafka.clients.consumer.ConsumerRecords<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorConsumerRecords3 = offsetComparatorKafkaSpout0.pollKafkaBroker();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection2);
    }

    @Test
    public void test0168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0168");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig5 = offsetComparatorKafkaSpout0.kafkaSpoutConfig;
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig6 = offsetComparatorKafkaSpout0.kafkaSpoutConfig;
        java.util.Map<org.apache.kafka.common.TopicPartition, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>.OffsetEntry> topicPartitionMap7 = null;
        offsetComparatorKafkaSpout0.acked = topicPartitionMap7;
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorConsumerRecord9 = null;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.emitTupleIfNotEmitted(offsetComparatorConsumerRecord9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNull(offsetComparatorKafkaSpoutConfig5);
        org.junit.Assert.assertNull(offsetComparatorKafkaSpoutConfig6);
    }

    @Test
    public void test0169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0169");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator0 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator0;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator2 = offsetComparator0.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator4 = kafkaSpoutMessageIdComparator2.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator2;
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator2;
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator2;
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator2);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator4);
    }

    @Test
    public void test0170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0170");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType13 = null;
        org.apache.kafka.common.record.TimestampType timestampType21 = null;
        org.apache.kafka.common.record.TimestampType timestampType29 = null;
        java.lang.Object obj33 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("", 10, (long) (byte) -1, (long) '4', timestampType29, (long) (byte) 0, (int) (short) 10, (int) (byte) 100, obj33, (java.io.Serializable) 1);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String> objConsumerRecordConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String>("", (int) 'a', (long) (short) 10, (long) (byte) -1, timestampType21, (long) 'a', (int) (byte) -1, 0, objConsumerRecord35, "hi!");
        long long38 = objConsumerRecord35.checksum();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("", (int) (short) 100, (long) 100, (long) (short) 100, timestampType13, (long) '4', (int) (byte) 10, (int) (short) 10, (java.lang.Object) objConsumerRecord35, (java.io.Serializable) 1L);
        org.apache.kafka.common.header.Headers headers41 = objConsumerRecord35.headers();
        org.apache.kafka.common.record.TimestampType timestampType46 = null;
        org.apache.kafka.common.record.TimestampType timestampType54 = null;
        java.lang.Object obj58 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("", 10, (long) (byte) -1, (long) '4', timestampType54, (long) (byte) 0, (int) (short) 10, (int) (byte) 100, obj58, (java.io.Serializable) 1);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String> objConsumerRecordConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String>("", (int) 'a', (long) (short) 10, (long) (byte) -1, timestampType46, (long) 'a', (int) (byte) -1, 0, objConsumerRecord60, "hi!");
        long long63 = objConsumerRecord60.checksum();
        java.util.Optional<java.lang.Integer> intOptional64 = objConsumerRecord60.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType65 = objConsumerRecord60.timestampType();
        org.apache.kafka.common.header.Headers headers66 = objConsumerRecord60.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, org.apache.kafka.common.header.Headers> charSequenceConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, org.apache.kafka.common.header.Headers>("", (int) (short) 10, (long) (short) -1, (long) (short) -1, timestampType4, (java.lang.Long) 1L, (int) (short) -1, 0, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = -1, leaderEpoch = null, offset = 0, null = 52, serialized key size = 10, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = 10.0)", headers41, headers66);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(headers41);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(intOptional64);
        org.junit.Assert.assertNull(timestampType65);
        org.junit.Assert.assertNotNull(headers66);
    }

    @Test
    public void test0171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0171");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, org.apache.storm.topology.base.BaseRichSpout> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, org.apache.storm.topology.base.BaseRichSpout>();
    }

    @Test
    public void test0172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0172");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.storm.kafka.spout.internal.KafkaConsumerFactory kafkaConsumerFactory1 = null;
        offsetComparatorKafkaSpout0.kafkaConsumerFactory = kafkaConsumerFactory1;
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer3 = offsetComparatorKafkaSpout0.kafkaConsumer;
        boolean boolean4 = offsetComparatorKafkaSpout0.waitingToEmit();
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.commitOffsetsForAckedTuples();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(offsetComparatorKafkaConsumer3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0173");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean1 = offsetComparatorKafkaSpout0.consumerAutoCommitMode;
        int int2 = offsetComparatorKafkaSpout0.maxRetries;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor3 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor3;
        org.apache.kafka.common.TopicPartition topicPartition5 = null;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.setAcked(topicPartition5, (long) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test0174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0174");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig5 = offsetComparatorKafkaSpout0.kafkaSpoutConfig;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.doSeekRetriableTopicPartitions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNull(offsetComparatorKafkaSpoutConfig5);
    }

    @Test
    public void test0175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0175");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer1 = null;
        offsetComparatorKafkaSpout0.kafkaConsumer = offsetComparatorKafkaConsumer1;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout3 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean4 = offsetComparatorKafkaSpout3.consumerAutoCommitMode;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray5 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet6, kafkaSpoutMessageIdArray5);
        offsetComparatorKafkaSpout3.emitted = kafkaSpoutMessageIdSet6;
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet6;
        java.util.Map<org.apache.kafka.common.TopicPartition, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>.OffsetEntry> topicPartitionMap10 = null;
        offsetComparatorKafkaSpout0.acked = topicPartitionMap10;
        org.apache.storm.spout.SpoutOutputCollector spoutOutputCollector12 = null;
        offsetComparatorKafkaSpout0.collector = spoutOutputCollector12;
        java.util.Set<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet14 = offsetComparatorKafkaSpout0.emitted;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.deactivate();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdSet14);
    }

    @Test
    public void test0176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0176");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray5 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet6, kafkaSpoutMessageIdArray5);
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet6;
        java.util.Map<org.apache.kafka.common.TopicPartition, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>.OffsetEntry> topicPartitionMap9 = null;
        offsetComparatorKafkaSpout0.acked = topicPartitionMap9;
        java.util.Map<org.apache.kafka.common.TopicPartition, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>.OffsetEntry> topicPartitionMap11 = offsetComparatorKafkaSpout0.acked;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.nextTuple();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(topicPartitionMap11);
    }

    @Test
    public void test0177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0177");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer1 = null;
        offsetComparatorKafkaSpout0.kafkaConsumer = offsetComparatorKafkaConsumer1;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout3 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean4 = offsetComparatorKafkaSpout3.consumerAutoCommitMode;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray5 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet6, kafkaSpoutMessageIdArray5);
        offsetComparatorKafkaSpout3.emitted = kafkaSpoutMessageIdSet6;
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet6;
        java.util.Map<org.apache.kafka.common.TopicPartition, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>.OffsetEntry> topicPartitionMap10 = null;
        offsetComparatorKafkaSpout0.acked = topicPartitionMap10;
        org.apache.storm.spout.SpoutOutputCollector spoutOutputCollector12 = null;
        offsetComparatorKafkaSpout0.collector = spoutOutputCollector12;
        java.util.Set<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet14 = offsetComparatorKafkaSpout0.emitted;
        org.apache.storm.kafka.spout.KafkaSpoutTuplesBuilder<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutTuplesBuilder15 = null;
        offsetComparatorKafkaSpout0.tuplesBuilder = offsetComparatorKafkaSpoutTuplesBuilder15;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.deactivate();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdSet14);
    }

    @Test
    public void test0178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0178");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig5 = offsetComparatorKafkaSpout0.kafkaSpoutConfig;
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig6 = offsetComparatorKafkaSpout0.kafkaSpoutConfig;
        boolean boolean7 = offsetComparatorKafkaSpout0.waitingToEmit();
        org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy firstPollOffsetStrategy8 = null;
        offsetComparatorKafkaSpout0.firstPollOffsetStrategy = firstPollOffsetStrategy8;
        org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy firstPollOffsetStrategy10 = offsetComparatorKafkaSpout0.firstPollOffsetStrategy;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.kafka.clients.consumer.ConsumerRecords<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorConsumerRecords11 = offsetComparatorKafkaSpout0.pollKafkaBroker();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNull(offsetComparatorKafkaSpoutConfig5);
        org.junit.Assert.assertNull(offsetComparatorKafkaSpoutConfig6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(firstPollOffsetStrategy10);
    }

    @Test
    public void test0179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0179");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer1 = null;
        offsetComparatorKafkaSpout0.kafkaConsumer = offsetComparatorKafkaConsumer1;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout3 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean4 = offsetComparatorKafkaSpout3.consumerAutoCommitMode;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray5 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet6, kafkaSpoutMessageIdArray5);
        offsetComparatorKafkaSpout3.emitted = kafkaSpoutMessageIdSet6;
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet6;
        org.apache.storm.spout.SpoutOutputCollector spoutOutputCollector10 = null;
        offsetComparatorKafkaSpout0.collector = spoutOutputCollector10;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.emit();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0180");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator0 = null;
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator0;
    }

    @Test
    public void test0181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0181");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.Iterable<org.apache.kafka.common.TopicPartition>, java.lang.Object> topicPartitionIterableKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.Iterable<org.apache.kafka.common.TopicPartition>, java.lang.Object>();
    }

    @Test
    public void test0182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0182");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean1 = offsetComparatorKafkaSpout0.consumerAutoCommitMode;
        org.apache.kafka.common.TopicPartition topicPartition2 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection3 = offsetComparatorKafkaSpout0.toArrayList(topicPartition2);
        long long4 = offsetComparatorKafkaSpout0.numUncommittedOffsets;
        long long5 = offsetComparatorKafkaSpout0.numUncommittedOffsets;
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer6 = null;
        offsetComparatorKafkaSpout0.kafkaConsumer = offsetComparatorKafkaConsumer6;
        offsetComparatorKafkaSpout0.maxRetries = (short) 0;
        org.apache.storm.kafka.spout.KafkaSpoutStreams kafkaSpoutStreams10 = null;
        offsetComparatorKafkaSpout0.kafkaSpoutStreams = kafkaSpoutStreams10;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.kafka.clients.consumer.ConsumerRecords<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorConsumerRecords12 = offsetComparatorKafkaSpout0.pollKafkaBroker();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(topicPartitionCollection3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
    }

    @Test
    public void test0183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0183");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor3 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor3;
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig5 = null;
        offsetComparatorKafkaSpout0.kafkaSpoutConfig = offsetComparatorKafkaSpoutConfig5;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor7 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor7;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean9 = offsetComparatorKafkaSpout0.poll();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0184");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.kafka.common.TopicPartition topicPartition1 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection2 = offsetComparatorKafkaSpout0.toArrayList(topicPartition1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Object> strMap3 = offsetComparatorKafkaSpout0.getComponentConfiguration();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection2);
    }

    @Test
    public void test0185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0185");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray5 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet6, kafkaSpoutMessageIdArray5);
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet6;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor9 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor9;
        long long11 = offsetComparatorKafkaSpout0.numUncommittedOffsets;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean12 = offsetComparatorKafkaSpout0.poll();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test0186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0186");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        org.apache.kafka.common.TopicPartition topicPartition1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<org.apache.kafka.common.record.TimestampType, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>.OffsetEntry offsetEntry3 = kafkaSpout0.new OffsetEntry(topicPartition1, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$OffsetEntry with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0187");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType12 = null;
        org.apache.kafka.common.record.TimestampType timestampType20 = null;
        java.lang.Object obj24 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("", 10, (long) (byte) -1, (long) '4', timestampType20, (long) (byte) 0, (int) (short) 10, (int) (byte) 100, obj24, (java.io.Serializable) 1);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String> objConsumerRecordConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String>("", (int) 'a', (long) (short) 10, (long) (byte) -1, timestampType12, (long) 'a', (int) (byte) -1, 0, objConsumerRecord26, "hi!");
        long long29 = objConsumerRecord26.checksum();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("", (int) (short) 100, (long) 100, (long) (short) 100, timestampType4, (long) '4', (int) (byte) 10, (int) (short) 10, (java.lang.Object) objConsumerRecord26, (java.io.Serializable) 1L);
        long long32 = objConsumerRecord26.checksum();
        java.io.Serializable serializable33 = objConsumerRecord26.value();
        java.lang.String str34 = objConsumerRecord26.toString();
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertEquals("'" + serializable33 + "' != '" + 1 + "'", serializable33, 1);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)" + "'", str34, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)");
    }

    @Test
    public void test0188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0188");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.util.AbstractList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.CharSequence> kafkaSpoutMessageIdListKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.util.AbstractList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.CharSequence> kafkaSpoutMessageIdListKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<java.util.AbstractList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.CharSequence>(kafkaSpoutMessageIdListKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0189");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig5 = offsetComparatorKafkaSpout0.kafkaSpoutConfig;
        org.apache.storm.topology.OutputFieldsDeclarer outputFieldsDeclarer6 = null;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.declareOutputFields(outputFieldsDeclarer6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNull(offsetComparatorKafkaSpoutConfig5);
    }

    @Test
    public void test0190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0190");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.util.Collection<org.apache.kafka.common.TopicPartition>> timestampTypeEnumKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.util.Collection<org.apache.kafka.common.TopicPartition>> timestampTypeEnumKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.util.Collection<org.apache.kafka.common.TopicPartition>>(timestampTypeEnumKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0191");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.topology.base.BaseRichSpout, org.apache.storm.topology.base.BaseRichSpout> baseRichSpoutKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.base.BaseRichSpout, org.apache.storm.topology.base.BaseRichSpout> baseRichSpoutKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.base.BaseRichSpout, org.apache.storm.topology.base.BaseRichSpout>(baseRichSpoutKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0192");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig5 = offsetComparatorKafkaSpout0.kafkaSpoutConfig;
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig6 = offsetComparatorKafkaSpout0.kafkaSpoutConfig;
        boolean boolean7 = offsetComparatorKafkaSpout0.waitingToEmit();
        org.apache.kafka.common.TopicPartition topicPartition8 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection9 = offsetComparatorKafkaSpout0.toArrayList(topicPartition8);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = offsetComparatorKafkaSpout0.getWildCardTopics();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNull(offsetComparatorKafkaSpoutConfig5);
        org.junit.Assert.assertNull(offsetComparatorKafkaSpoutConfig6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(topicPartitionCollection9);
    }

    @Test
    public void test0193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0193");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer1 = null;
        offsetComparatorKafkaSpout0.kafkaConsumer = offsetComparatorKafkaConsumer1;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout3 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean4 = offsetComparatorKafkaSpout3.consumerAutoCommitMode;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray5 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet6, kafkaSpoutMessageIdArray5);
        offsetComparatorKafkaSpout3.emitted = kafkaSpoutMessageIdSet6;
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet6;
        org.apache.storm.spout.SpoutOutputCollector spoutOutputCollector10 = null;
        offsetComparatorKafkaSpout0.collector = spoutOutputCollector10;
        java.util.Map<org.apache.kafka.common.TopicPartition, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>.OffsetEntry> topicPartitionMap12 = null;
        offsetComparatorKafkaSpout0.acked = topicPartitionMap12;
        org.apache.storm.kafka.spout.internal.KafkaConsumerFactory kafkaConsumerFactory14 = offsetComparatorKafkaSpout0.kafkaConsumerFactory;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = offsetComparatorKafkaSpout0.getNamedTopics();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(kafkaConsumerFactory14);
    }

    @Test
    public void test0194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0194");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator0 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator0;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator2 = offsetComparator0.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator4 = kafkaSpoutMessageIdComparator2.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator5 = kafkaSpoutMessageIdComparator4.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator6 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator6;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator8 = offsetComparator6.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator9 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator10 = kafkaSpoutMessageIdComparator8.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator9);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator9;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator12 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator13 = offsetComparator9.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator12);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator14 = kafkaSpoutMessageIdComparator4.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator9);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator15 = org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator16 = kafkaSpoutMessageIdComparator15.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator17 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator17;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator19 = offsetComparator17.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator20 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator21 = kafkaSpoutMessageIdComparator19.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator20);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator22 = kafkaSpoutMessageIdComparator21.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator23 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator23;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator25 = offsetComparator23.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator26 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator27 = kafkaSpoutMessageIdComparator25.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator26);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator26;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator29 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator30 = offsetComparator26.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator29);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator31 = kafkaSpoutMessageIdComparator21.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator26);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator32 = kafkaSpoutMessageIdComparator15.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator26);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator33 = kafkaSpoutMessageIdComparator14.thenComparing(kafkaSpoutMessageIdComparator15);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator34 = kafkaSpoutMessageIdComparator15.reversed();
        java.lang.Class<?> wildcardClass35 = kafkaSpoutMessageIdComparator34.getClass();
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator2);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator5);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator8);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator10);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator13);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator14);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator15);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator16);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator19);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator21);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator22);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator25);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator27);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator30);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator31);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator32);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator33);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0195");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer1 = null;
        offsetComparatorKafkaSpout0.kafkaConsumer = offsetComparatorKafkaConsumer1;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout3 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean4 = offsetComparatorKafkaSpout3.consumerAutoCommitMode;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray5 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet6, kafkaSpoutMessageIdArray5);
        offsetComparatorKafkaSpout3.emitted = kafkaSpoutMessageIdSet6;
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet6;
        org.apache.storm.spout.SpoutOutputCollector spoutOutputCollector10 = null;
        offsetComparatorKafkaSpout0.collector = spoutOutputCollector10;
        java.util.Map<org.apache.kafka.common.TopicPartition, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>.OffsetEntry> topicPartitionMap12 = null;
        offsetComparatorKafkaSpout0.acked = topicPartitionMap12;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0196");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray5 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet6, kafkaSpoutMessageIdArray5);
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet6;
        java.util.Map<org.apache.kafka.common.TopicPartition, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>.OffsetEntry> topicPartitionMap9 = null;
        offsetComparatorKafkaSpout0.acked = topicPartitionMap9;
        java.util.Map<org.apache.kafka.common.TopicPartition, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>.OffsetEntry> topicPartitionMap11 = offsetComparatorKafkaSpout0.acked;
        int int12 = offsetComparatorKafkaSpout0.maxRetries;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Object> strMap13 = offsetComparatorKafkaSpout0.getComponentConfiguration();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(topicPartitionMap11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test0197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0197");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("hi!", (int) (byte) 1, (long) (byte) 100, (java.lang.Object) true, (java.io.Serializable) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 100, null = 100, serialized key size = 10, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1), value = 1)");
        long long6 = objConsumerRecord5.checksum();
        long long7 = objConsumerRecord5.checksum();
        java.util.Optional<java.lang.Integer> intOptional8 = objConsumerRecord5.leaderEpoch();
        long long9 = objConsumerRecord5.checksum();
        long long10 = objConsumerRecord5.offset();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 100L + "'", long10 == 100L);
    }

    @Test
    public void test0198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0198");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer1 = null;
        offsetComparatorKafkaSpout0.kafkaConsumer = offsetComparatorKafkaConsumer1;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout3 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean4 = offsetComparatorKafkaSpout3.consumerAutoCommitMode;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray5 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet6, kafkaSpoutMessageIdArray5);
        offsetComparatorKafkaSpout3.emitted = kafkaSpoutMessageIdSet6;
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet6;
        boolean boolean10 = offsetComparatorKafkaSpout0.consumerAutoCommitMode;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Object> strMap11 = offsetComparatorKafkaSpout0.getComponentConfiguration();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0199");
        org.apache.kafka.clients.consumer.ConsumerRebalanceListener consumerRebalanceListener3 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRebalanceListener, java.lang.CharSequence> consumerRebalanceListenerConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRebalanceListener, java.lang.CharSequence>("", 0, 52L, consumerRebalanceListener3, (java.lang.CharSequence) "");
    }

    @Test
    public void test0200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0200");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.spout.ISpout, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> iSpoutKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.spout.ISpout, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> iSpoutKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.spout.ISpout, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>(iSpoutKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0201");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean1 = offsetComparatorKafkaSpout0.consumerAutoCommitMode;
        org.apache.kafka.common.TopicPartition topicPartition2 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection3 = offsetComparatorKafkaSpout0.toArrayList(topicPartition2);
        long long4 = offsetComparatorKafkaSpout0.numUncommittedOffsets;
        long long5 = offsetComparatorKafkaSpout0.numUncommittedOffsets;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor6 = offsetComparatorKafkaSpout0.waitingToEmit;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean7 = offsetComparatorKafkaSpout0.poll();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(topicPartitionCollection3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(offsetComparatorConsumerRecordItor6);
    }

    @Test
    public void test0202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0202");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.lang.CharSequence, java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> charSequenceKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.lang.CharSequence, java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> charSequenceKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.CharSequence, java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>(charSequenceKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0203");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout7 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor8 = null;
        offsetComparatorKafkaSpout7.waitingToEmit = offsetComparatorConsumerRecordItor8;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord11 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("hi!", (int) (byte) 0, 1L, (java.lang.Object) offsetComparatorConsumerRecordItor8, (java.io.Serializable) (-1));
        long long12 = objConsumerRecord11.offset();
        org.apache.kafka.common.record.TimestampType timestampType13 = objConsumerRecord11.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator17 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator17;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator19 = offsetComparator17.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator20 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator21 = kafkaSpoutMessageIdComparator19.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator20);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator20;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator23 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator24 = offsetComparator20.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator23);
        org.apache.kafka.common.record.TimestampType timestampType29 = null;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator33 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator33;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator35 = offsetComparator33.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator36 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator37 = kafkaSpoutMessageIdComparator35.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator36);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator38 = kafkaSpoutMessageIdComparator37.reversed();
        org.apache.kafka.common.record.TimestampType timestampType43 = null;
        org.apache.storm.topology.base.BaseRichSpout baseRichSpout47 = null;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray48 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.ArrayList<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdList49 = new java.util.ArrayList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdList49, kafkaSpoutMessageIdArray48);
        org.apache.kafka.common.record.TimestampType timestampType55 = null;
        org.apache.kafka.common.record.TimestampType timestampType63 = null;
        java.lang.Object obj67 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord69 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("", 10, (long) (byte) -1, (long) '4', timestampType63, (long) (byte) 0, (int) (short) 10, (int) (byte) 100, obj67, (java.io.Serializable) 1);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String> objConsumerRecordConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String>("", (int) 'a', (long) (short) 10, (long) (byte) -1, timestampType55, (long) 'a', (int) (byte) -1, 0, objConsumerRecord69, "hi!");
        long long72 = objConsumerRecord69.checksum();
        java.util.Optional<java.lang.Integer> intOptional73 = objConsumerRecord69.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType74 = objConsumerRecord69.timestampType();
        org.apache.kafka.common.header.Headers headers75 = objConsumerRecord69.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.topology.base.BaseRichSpout, java.util.AbstractCollection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> baseRichSpoutConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.topology.base.BaseRichSpout, java.util.AbstractCollection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>("", (int) (byte) 1, (long) (byte) 0, (long) ' ', timestampType43, (java.lang.Long) 1L, (int) (short) -1, (int) '4', baseRichSpout47, (java.util.AbstractCollection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdList49, headers75);
        java.lang.Class<?> wildcardClass77 = kafkaSpoutMessageIdList49.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.reflect.Type> kafkaSpoutMessageIdComparatorConsumerRecord78 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.reflect.Type>("hi!", (int) 'a', (long) (byte) 100, 1L, timestampType29, (long) (short) 0, (int) ' ', (int) (byte) 100, kafkaSpoutMessageIdComparator37, (java.lang.reflect.Type) wildcardClass77);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1), partition = 0, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = [], value = 0)", 10, (long) 10, (long) '#', timestampType13, (long) (byte) 1, (int) (byte) 10, (int) (byte) -1, (java.lang.Object) kafkaSpoutMessageIdComparator24, (java.io.Serializable) timestampType29);
        org.apache.kafka.common.record.TimestampType timestampType80 = objConsumerRecord79.timestampType();
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator19);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator21);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator24);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator35);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator37);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator38);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertNotNull(intOptional73);
        org.junit.Assert.assertNull(timestampType74);
        org.junit.Assert.assertNotNull(headers75);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertTrue("'" + timestampType80 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType80.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test0204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0204");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType14 = null;
        org.apache.kafka.common.record.TimestampType timestampType22 = null;
        java.lang.Object obj26 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("", 10, (long) (byte) -1, (long) '4', timestampType22, (long) (byte) 0, (int) (short) 10, (int) (byte) 100, obj26, (java.io.Serializable) 1);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String> objConsumerRecordConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String>("", (int) 'a', (long) (short) 10, (long) (byte) -1, timestampType14, (long) 'a', (int) (byte) -1, 0, objConsumerRecord28, "hi!");
        long long31 = objConsumerRecord28.checksum();
        java.util.Optional<java.lang.Integer> intOptional32 = objConsumerRecord28.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType33 = objConsumerRecord28.timestampType();
        long long34 = objConsumerRecord28.offset();
        org.apache.kafka.common.header.Headers headers35 = objConsumerRecord28.headers();
        org.apache.kafka.common.record.TimestampType timestampType40 = null;
        org.apache.kafka.common.record.TimestampType timestampType48 = null;
        java.lang.Object obj52 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("", 10, (long) (byte) -1, (long) '4', timestampType48, (long) (byte) 0, (int) (short) 10, (int) (byte) 100, obj52, (java.io.Serializable) 1);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String> objConsumerRecordConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String>("", (int) 'a', (long) (short) 10, (long) (byte) -1, timestampType40, (long) 'a', (int) (byte) -1, 0, objConsumerRecord54, "hi!");
        long long57 = objConsumerRecord54.checksum();
        java.util.Optional<java.lang.Integer> intOptional58 = objConsumerRecord54.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType59 = objConsumerRecord54.timestampType();
        long long60 = objConsumerRecord54.offset();
        java.lang.Object obj61 = objConsumerRecord54.key();
        java.util.Optional<java.lang.Integer> intOptional62 = objConsumerRecord54.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)", (int) '#', 100L, (long) 'a', timestampType4, (java.lang.Long) (-1L), (int) '4', (int) '4', (java.lang.Object) (byte) -1, (java.io.Serializable) 0.0d, headers35, intOptional62);
        int int64 = objConsumerRecord63.partition();
        org.apache.kafka.common.header.Headers headers65 = objConsumerRecord63.headers();
        java.lang.Class<?> wildcardClass66 = objConsumerRecord63.getClass();
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(intOptional32);
        org.junit.Assert.assertNull(timestampType33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
        org.junit.Assert.assertNotNull(headers35);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(intOptional58);
        org.junit.Assert.assertNull(timestampType59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-1L) + "'", long60 == (-1L));
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertNotNull(intOptional62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 35 + "'", int64 == 35);
        org.junit.Assert.assertNotNull(headers65);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test0205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0205");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        java.lang.Object obj8 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("", 10, (long) (byte) -1, (long) '4', timestampType4, (long) (byte) 0, (int) (short) 10, (int) (byte) 100, obj8, (java.io.Serializable) 1);
        long long11 = objConsumerRecord10.checksum();
        org.apache.kafka.common.record.TimestampType timestampType12 = objConsumerRecord10.timestampType();
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNull(timestampType12);
    }

    @Test
    public void test0206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0206");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor3 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor3;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.deactivate();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0207");
        org.apache.storm.kafka.spout.KafkaSpout<java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.io.Serializable> kafkaSpoutMessageIdSetKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.io.Serializable>();
    }

    @Test
    public void test0208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0208");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor3 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor3;
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig5 = null;
        offsetComparatorKafkaSpout0.kafkaSpoutConfig = offsetComparatorKafkaSpoutConfig5;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor7 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor7;
        org.apache.storm.kafka.spout.KafkaSpoutTuplesBuilder<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutTuplesBuilder9 = offsetComparatorKafkaSpout0.tuplesBuilder;
        boolean boolean10 = offsetComparatorKafkaSpout0.consumerAutoCommitMode;
        org.junit.Assert.assertNull(offsetComparatorKafkaSpoutTuplesBuilder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0209");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray5 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet6, kafkaSpoutMessageIdArray5);
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet6;
        offsetComparatorKafkaSpout0.maxRetries = 100;
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService11 = null;
        offsetComparatorKafkaSpout0.retryService = kafkaSpoutRetryService11;
        org.apache.storm.kafka.spout.KafkaSpoutStreams kafkaSpoutStreams13 = offsetComparatorKafkaSpout0.kafkaSpoutStreams;
        boolean boolean14 = offsetComparatorKafkaSpout0.initialized;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean15 = offsetComparatorKafkaSpout0.poll();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(kafkaSpoutStreams13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0210");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean1 = offsetComparatorKafkaSpout0.consumerAutoCommitMode;
        org.apache.kafka.common.TopicPartition topicPartition2 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection3 = offsetComparatorKafkaSpout0.toArrayList(topicPartition2);
        long long4 = offsetComparatorKafkaSpout0.numUncommittedOffsets;
        long long5 = offsetComparatorKafkaSpout0.numUncommittedOffsets;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor6 = offsetComparatorKafkaSpout0.waitingToEmit;
        org.apache.storm.spout.SpoutOutputCollector spoutOutputCollector7 = offsetComparatorKafkaSpout0.collector;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(topicPartitionCollection3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(offsetComparatorConsumerRecordItor6);
        org.junit.Assert.assertNull(spoutOutputCollector7);
    }

    @Test
    public void test0211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0211");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout<java.lang.Object, java.io.Serializable>.OffsetEntry, org.apache.kafka.common.header.Headers>.KafkaSpoutConsumerRebalanceListener kafkaSpoutConsumerRebalanceListener1 = kafkaSpout0.new KafkaSpoutConsumerRebalanceListener();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$KafkaSpoutConsumerRebalanceListener with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0212");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.util.AbstractCollection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.util.AbstractList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> kafkaSpoutMessageIdCollectionKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.util.AbstractCollection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.util.AbstractList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> kafkaSpoutMessageIdCollectionKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<java.util.AbstractCollection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.util.AbstractList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>(kafkaSpoutMessageIdCollectionKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0213");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean1 = offsetComparatorKafkaSpout0.consumerAutoCommitMode;
        org.apache.kafka.common.TopicPartition topicPartition2 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection3 = offsetComparatorKafkaSpout0.toArrayList(topicPartition2);
        long long4 = offsetComparatorKafkaSpout0.numUncommittedOffsets;
        long long5 = offsetComparatorKafkaSpout0.numUncommittedOffsets;
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer6 = null;
        offsetComparatorKafkaSpout0.kafkaConsumer = offsetComparatorKafkaConsumer6;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.shutdown();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(topicPartitionCollection3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
    }

    @Test
    public void test0214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0214");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.doSeekRetriableTopicPartitions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0215");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout7 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor8 = null;
        offsetComparatorKafkaSpout7.waitingToEmit = offsetComparatorConsumerRecordItor8;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord11 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("hi!", (int) (byte) 0, 1L, (java.lang.Object) offsetComparatorConsumerRecordItor8, (java.io.Serializable) (-1));
        org.apache.kafka.common.header.Headers headers12 = objConsumerRecord11.headers();
        org.apache.kafka.common.record.TimestampType timestampType13 = objConsumerRecord11.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout20 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor21 = null;
        offsetComparatorKafkaSpout20.waitingToEmit = offsetComparatorConsumerRecordItor21;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("hi!", (int) (byte) 0, 1L, (java.lang.Object) offsetComparatorConsumerRecordItor21, (java.io.Serializable) (-1));
        long long25 = objConsumerRecord24.offset();
        org.apache.kafka.common.record.TimestampType timestampType26 = objConsumerRecord24.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout27 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor28 = null;
        offsetComparatorKafkaSpout27.waitingToEmit = offsetComparatorConsumerRecordItor28;
        org.apache.kafka.common.TopicPartition topicPartition30 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection31 = offsetComparatorKafkaSpout27.toArrayList(topicPartition30);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray32 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet33 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet33, kafkaSpoutMessageIdArray32);
        offsetComparatorKafkaSpout27.emitted = kafkaSpoutMessageIdSet33;
        java.util.Map<org.apache.kafka.common.TopicPartition, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>.OffsetEntry> topicPartitionMap36 = null;
        offsetComparatorKafkaSpout27.acked = topicPartitionMap36;
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService38 = offsetComparatorKafkaSpout27.retryService;
        org.apache.kafka.common.header.Headers headers39 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("hi!", (int) ' ', (long) 35, (long) (byte) 0, timestampType13, (java.lang.Long) 52L, (int) (byte) -1, (int) (short) 0, (java.lang.Object) timestampType26, (java.io.Serializable) offsetComparatorKafkaSpout27, headers39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Headers cannot be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(headers12);
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertTrue("'" + timestampType26 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType26.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(topicPartitionCollection31);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(kafkaSpoutRetryService38);
    }

    @Test
    public void test0216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0216");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer1 = null;
        offsetComparatorKafkaSpout0.kafkaConsumer = offsetComparatorKafkaConsumer1;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout3 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean4 = offsetComparatorKafkaSpout3.consumerAutoCommitMode;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray5 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet6, kafkaSpoutMessageIdArray5);
        offsetComparatorKafkaSpout3.emitted = kafkaSpoutMessageIdSet6;
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet6;
        org.apache.storm.spout.SpoutOutputCollector spoutOutputCollector10 = null;
        offsetComparatorKafkaSpout0.collector = spoutOutputCollector10;
        java.util.Map<org.apache.kafka.common.TopicPartition, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>.OffsetEntry> topicPartitionMap12 = null;
        offsetComparatorKafkaSpout0.acked = topicPartitionMap12;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.subscribeKafkaConsumer();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0217");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType12 = null;
        java.lang.Object obj16 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord18 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("", 10, (long) (byte) -1, (long) '4', timestampType12, (long) (byte) 0, (int) (short) 10, (int) (byte) 100, obj16, (java.io.Serializable) 1);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String> objConsumerRecordConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String>("", (int) 'a', (long) (short) 10, (long) (byte) -1, timestampType4, (long) 'a', (int) (byte) -1, 0, objConsumerRecord18, "hi!");
        long long21 = objConsumerRecord18.checksum();
        java.util.Optional<java.lang.Integer> intOptional22 = objConsumerRecord18.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType23 = objConsumerRecord18.timestampType();
        int int24 = objConsumerRecord18.serializedKeySize();
        long long25 = objConsumerRecord18.timestamp();
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(intOptional22);
        org.junit.Assert.assertNull(timestampType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 52L + "'", long25 == 52L);
    }

    @Test
    public void test0218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0218");
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator0 = org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator1 = kafkaSpoutMessageIdComparator0.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator2 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator2;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator4 = offsetComparator2.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator5 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator6 = kafkaSpoutMessageIdComparator4.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator5);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator7 = kafkaSpoutMessageIdComparator6.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator8 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator8;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator10 = offsetComparator8.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator11 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator12 = kafkaSpoutMessageIdComparator10.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator11);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator11;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator14 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator15 = offsetComparator11.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator14);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator16 = kafkaSpoutMessageIdComparator6.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator11);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator17 = kafkaSpoutMessageIdComparator0.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator11);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator11;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId19 = null;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId20 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int21 = offsetComparator11.compare(kafkaSpoutMessageId19, kafkaSpoutMessageId20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator0);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator1);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator6);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator7);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator10);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator12);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator15);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator16);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator17);
    }

    @Test
    public void test0219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0219");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig5 = offsetComparatorKafkaSpout0.kafkaSpoutConfig;
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig6 = offsetComparatorKafkaSpout0.kafkaSpoutConfig;
        boolean boolean7 = offsetComparatorKafkaSpout0.waitingToEmit();
        org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy firstPollOffsetStrategy8 = null;
        offsetComparatorKafkaSpout0.firstPollOffsetStrategy = firstPollOffsetStrategy8;
        org.apache.storm.kafka.spout.KafkaSpoutTuplesBuilder<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutTuplesBuilder10 = null;
        offsetComparatorKafkaSpout0.tuplesBuilder = offsetComparatorKafkaSpoutTuplesBuilder10;
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorConsumerRecord12 = null;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.emitTupleIfNotEmitted(offsetComparatorConsumerRecord12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNull(offsetComparatorKafkaSpoutConfig5);
        org.junit.Assert.assertNull(offsetComparatorKafkaSpoutConfig6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0220");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout3 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor4 = null;
        offsetComparatorKafkaSpout3.waitingToEmit = offsetComparatorConsumerRecordItor4;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord7 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("hi!", (int) (byte) 0, 1L, (java.lang.Object) offsetComparatorConsumerRecordItor4, (java.io.Serializable) (-1));
        java.lang.String str8 = objConsumerRecord7.toString();
        java.io.Serializable serializable9 = objConsumerRecord7.value();
        int int10 = objConsumerRecord7.serializedKeySize();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = -1)" + "'", str8, "ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = -1)");
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (-1) + "'", serializable9, (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test0221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0221");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray5 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet6, kafkaSpoutMessageIdArray5);
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet6;
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig9 = offsetComparatorKafkaSpout0.kafkaSpoutConfig;
        org.apache.storm.topology.OutputFieldsDeclarer outputFieldsDeclarer10 = null;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.declareOutputFields(outputFieldsDeclarer10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(offsetComparatorKafkaSpoutConfig9);
    }

    @Test
    public void test0222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0222");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray5 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet6, kafkaSpoutMessageIdArray5);
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet6;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean9 = offsetComparatorKafkaSpout0.commit();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0223");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator0 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator0;
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator0;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId3 = null;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId4 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int5 = offsetComparator0.compare(kafkaSpoutMessageId3, kafkaSpoutMessageId4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0224");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray5 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet6, kafkaSpoutMessageIdArray5);
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet6;
        offsetComparatorKafkaSpout0.maxRetries = 100;
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService11 = null;
        offsetComparatorKafkaSpout0.retryService = kafkaSpoutRetryService11;
        org.apache.storm.kafka.spout.KafkaSpoutStreams kafkaSpoutStreams13 = offsetComparatorKafkaSpout0.kafkaSpoutStreams;
        boolean boolean14 = offsetComparatorKafkaSpout0.initialized;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.deactivate();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(kafkaSpoutStreams13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0225");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor3 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor3;
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig5 = null;
        offsetComparatorKafkaSpout0.kafkaSpoutConfig = offsetComparatorKafkaSpoutConfig5;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor7 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor7;
        org.apache.storm.kafka.spout.KafkaSpoutTuplesBuilder<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutTuplesBuilder9 = offsetComparatorKafkaSpout0.tuplesBuilder;
        org.apache.storm.kafka.spout.KafkaSpoutTuplesBuilder<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutTuplesBuilder10 = offsetComparatorKafkaSpout0.tuplesBuilder;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = offsetComparatorKafkaSpout0.getWildCardTopics();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(offsetComparatorKafkaSpoutTuplesBuilder9);
        org.junit.Assert.assertNull(offsetComparatorKafkaSpoutTuplesBuilder10);
    }

    @Test
    public void test0226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0226");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout3 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor4 = null;
        offsetComparatorKafkaSpout3.waitingToEmit = offsetComparatorConsumerRecordItor4;
        org.apache.kafka.common.TopicPartition topicPartition6 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection7 = offsetComparatorKafkaSpout3.toArrayList(topicPartition6);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray8 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet9 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet9, kafkaSpoutMessageIdArray8);
        offsetComparatorKafkaSpout3.emitted = kafkaSpoutMessageIdSet9;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout15 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor16 = null;
        offsetComparatorKafkaSpout15.waitingToEmit = offsetComparatorConsumerRecordItor16;
        org.apache.kafka.common.TopicPartition topicPartition18 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection19 = offsetComparatorKafkaSpout15.toArrayList(topicPartition18);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray20 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet21 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet21, kafkaSpoutMessageIdArray20);
        offsetComparatorKafkaSpout15.emitted = kafkaSpoutMessageIdSet21;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor24 = null;
        offsetComparatorKafkaSpout15.waitingToEmit = offsetComparatorConsumerRecordItor24;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator32 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout33 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer34 = null;
        offsetComparatorKafkaSpout33.kafkaConsumer = offsetComparatorKafkaConsumer34;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout36 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean37 = offsetComparatorKafkaSpout36.consumerAutoCommitMode;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray38 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet39 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet39, kafkaSpoutMessageIdArray38);
        offsetComparatorKafkaSpout36.emitted = kafkaSpoutMessageIdSet39;
        offsetComparatorKafkaSpout33.emitted = kafkaSpoutMessageIdSet39;
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> offsetComparatorConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)", (int) (short) -1, (long) 0, offsetComparator32, (java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet39);
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> iComponentKafkaSpout44 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.topology.IRichSpout> kafkaSpoutMessageIdSetConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.topology.IRichSpout>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)", (int) (byte) -1, (long) 1, kafkaSpoutMessageIdSet39, (org.apache.storm.topology.IRichSpout) iComponentKafkaSpout44);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>, java.lang.Cloneable> offsetComparatorKafkaSpoutConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>, java.lang.Cloneable>("", (int) (byte) 1, (long) '4', offsetComparatorKafkaSpout15, (java.lang.Cloneable) kafkaSpoutMessageIdSet39);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>("", (int) 'a', (long) (short) 0, (java.io.Serializable) offsetComparatorKafkaSpout3, (java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet39);
        offsetComparatorKafkaSpout3.numUncommittedOffsets = 52L;
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer50 = null;
        offsetComparatorKafkaSpout3.kafkaConsumer = offsetComparatorKafkaConsumer50;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout3.doSeekRetriableTopicPartitions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection7);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(topicPartitionCollection19);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test0227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0227");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.storm.kafka.spout.internal.KafkaConsumerFactory kafkaConsumerFactory1 = null;
        offsetComparatorKafkaSpout0.kafkaConsumerFactory = kafkaConsumerFactory1;
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer3 = offsetComparatorKafkaSpout0.kafkaConsumer;
        boolean boolean4 = offsetComparatorKafkaSpout0.waitingToEmit();
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.shutdown();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(offsetComparatorKafkaConsumer3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0228");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.common.record.TimestampType timestampType17 = null;
        org.apache.kafka.common.record.TimestampType timestampType25 = null;
        java.lang.Object obj29 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("", 10, (long) (byte) -1, (long) '4', timestampType25, (long) (byte) 0, (int) (short) 10, (int) (byte) 100, obj29, (java.io.Serializable) 1);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String> objConsumerRecordConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String>("", (int) 'a', (long) (short) 10, (long) (byte) -1, timestampType17, (long) 'a', (int) (byte) -1, 0, objConsumerRecord31, "hi!");
        long long34 = objConsumerRecord31.checksum();
        java.util.Optional<java.lang.Integer> intOptional35 = objConsumerRecord31.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType36 = objConsumerRecord31.timestampType();
        int int37 = objConsumerRecord31.partition();
        org.apache.kafka.common.record.TimestampType timestampType38 = objConsumerRecord31.timestampType();
        org.apache.kafka.common.header.Headers headers39 = objConsumerRecord31.headers();
        org.apache.kafka.common.record.TimestampType timestampType44 = null;
        org.apache.kafka.common.record.TimestampType timestampType52 = null;
        java.lang.Object obj56 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("", 10, (long) (byte) -1, (long) '4', timestampType52, (long) (byte) 0, (int) (short) 10, (int) (byte) 100, obj56, (java.io.Serializable) 1);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String> objConsumerRecordConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String>("", (int) 'a', (long) (short) 10, (long) (byte) -1, timestampType44, (long) 'a', (int) (byte) -1, 0, objConsumerRecord58, "hi!");
        long long61 = objConsumerRecord58.checksum();
        java.util.Optional<java.lang.Integer> intOptional62 = objConsumerRecord58.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType63 = objConsumerRecord58.timestampType();
        long long64 = objConsumerRecord58.offset();
        org.apache.kafka.common.header.Headers headers65 = objConsumerRecord58.headers();
        int int66 = objConsumerRecord58.partition();
        java.util.Optional<java.lang.Integer> intOptional67 = objConsumerRecord58.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.String> charSequenceConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.String>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)", 35, (long) 0, (long) 35, timestampType7, (java.lang.Long) (-1L), (int) (byte) -1, 0, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)", "KafkaSpout{acked=null, emitted=[]}", headers39, intOptional67);
        java.util.Optional<java.lang.Integer> intOptional69 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, java.util.Optional<java.lang.Integer>> headersConsumerRecord70 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, java.util.Optional<java.lang.Integer>>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 100, null = 100, serialized key size = 10, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1), value = 1)", 100, (long) (short) 1, headers39, intOptional69);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(intOptional35);
        org.junit.Assert.assertNull(timestampType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertNull(timestampType38);
        org.junit.Assert.assertNotNull(headers39);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(intOptional62);
        org.junit.Assert.assertNull(timestampType63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + (-1L) + "'", long64 == (-1L));
        org.junit.Assert.assertNotNull(headers65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10 + "'", int66 == 10);
        org.junit.Assert.assertNotNull(intOptional67);
    }

    @Test
    public void test0229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0229");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.util.RandomAccess, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> randomAccessKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.util.RandomAccess, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> randomAccessKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<java.util.RandomAccess, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>(randomAccessKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0230");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        java.util.concurrent.TimeUnit timeUnit3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.util.Optional<java.lang.Integer>, org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>>.Timer timer4 = kafkaSpout0.new Timer((long) 0, (long) '4', timeUnit3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$Timer with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0231");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig5 = offsetComparatorKafkaSpout0.kafkaSpoutConfig;
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig6 = offsetComparatorKafkaSpout0.kafkaSpoutConfig;
        boolean boolean7 = offsetComparatorKafkaSpout0.waitingToEmit();
        org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy firstPollOffsetStrategy8 = null;
        offsetComparatorKafkaSpout0.firstPollOffsetStrategy = firstPollOffsetStrategy8;
        org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy firstPollOffsetStrategy10 = offsetComparatorKafkaSpout0.firstPollOffsetStrategy;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.subscribeKafkaConsumer();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNull(offsetComparatorKafkaSpoutConfig5);
        org.junit.Assert.assertNull(offsetComparatorKafkaSpoutConfig6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(firstPollOffsetStrategy10);
    }

    @Test
    public void test0232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0232");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean1 = offsetComparatorKafkaSpout0.consumerAutoCommitMode;
        int int2 = offsetComparatorKafkaSpout0.maxRetries;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor3 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor3;
        boolean boolean5 = offsetComparatorKafkaSpout0.initialized;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator6 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator6;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator8 = offsetComparator6.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator9 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator10 = kafkaSpoutMessageIdComparator8.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator9);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator8;
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator8;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator13 = kafkaSpoutMessageIdComparator8.reversed();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator14 = kafkaSpoutMessageIdComparator8.reversed();
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.ack((java.lang.Object) kafkaSpoutMessageIdComparator8);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.util.Collections$ReverseComparator2 cannot be cast to org.apache.storm.kafka.spout.KafkaSpoutMessageId");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator8);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator10);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator13);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator14);
    }

    @Test
    public void test0233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0233");
        org.apache.storm.kafka.spout.KafkaSpout<java.util.Optional<java.lang.Integer>, java.lang.Cloneable> intOptionalKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.util.Optional<java.lang.Integer>, java.lang.Cloneable>();
    }

    @Test
    public void test0234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0234");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray5 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet6, kafkaSpoutMessageIdArray5);
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet6;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor9 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor9;
        org.apache.storm.kafka.spout.internal.KafkaConsumerFactory kafkaConsumerFactory11 = offsetComparatorKafkaSpout0.kafkaConsumerFactory;
        java.lang.String str12 = offsetComparatorKafkaSpout0.toString();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor13 = offsetComparatorKafkaSpout0.waitingToEmit;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(kafkaConsumerFactory11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "KafkaSpout{acked=null, emitted=[]}" + "'", str12, "KafkaSpout{acked=null, emitted=[]}");
        org.junit.Assert.assertNull(offsetComparatorConsumerRecordItor13);
    }

    @Test
    public void test0235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0235");
        org.apache.storm.kafka.spout.KafkaSpout<java.util.RandomAccess, java.util.Optional<java.lang.Integer>> randomAccessKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.util.RandomAccess, java.util.Optional<java.lang.Integer>>();
    }

    @Test
    public void test0236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0236");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray5 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet6, kafkaSpoutMessageIdArray5);
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet6;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor9 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor9;
        org.apache.storm.kafka.spout.internal.KafkaConsumerFactory kafkaConsumerFactory11 = offsetComparatorKafkaSpout0.kafkaConsumerFactory;
        java.lang.String str12 = offsetComparatorKafkaSpout0.toString();
        org.apache.storm.spout.SpoutOutputCollector spoutOutputCollector13 = null;
        offsetComparatorKafkaSpout0.collector = spoutOutputCollector13;
        org.apache.kafka.common.TopicPartition topicPartition15 = null;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.setAcked(topicPartition15, (long) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(kafkaConsumerFactory11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "KafkaSpout{acked=null, emitted=[]}" + "'", str12, "KafkaSpout{acked=null, emitted=[]}");
    }

    @Test
    public void test0237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0237");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray5 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet6, kafkaSpoutMessageIdArray5);
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet6;
        java.util.Map<org.apache.kafka.common.TopicPartition, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>.OffsetEntry> topicPartitionMap9 = null;
        offsetComparatorKafkaSpout0.acked = topicPartitionMap9;
        java.util.Map<org.apache.kafka.common.TopicPartition, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>.OffsetEntry> topicPartitionMap11 = offsetComparatorKafkaSpout0.acked;
        int int12 = offsetComparatorKafkaSpout0.maxRetries;
        org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy firstPollOffsetStrategy13 = null;
        offsetComparatorKafkaSpout0.firstPollOffsetStrategy = firstPollOffsetStrategy13;
        org.apache.kafka.common.record.TimestampType timestampType19 = null;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> iComponentKafkaSpout24 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("", (int) (byte) 100, (long) 0, (long) 'a', timestampType19, 100L, 35, (int) (byte) 10, (java.lang.Object) 10, (java.io.Serializable) iComponentKafkaSpout24);
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.ack((java.lang.Object) objConsumerRecord25);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.kafka.clients.consumer.ConsumerRecord cannot be cast to org.apache.storm.kafka.spout.KafkaSpoutMessageId");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(topicPartitionMap11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test0238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0238");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.kafka.common.record.TimestampType, java.lang.Iterable<org.apache.kafka.common.TopicPartition>> timestampTypeKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<org.apache.kafka.common.record.TimestampType, java.lang.Iterable<org.apache.kafka.common.TopicPartition>> timestampTypeKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.kafka.common.record.TimestampType, java.lang.Iterable<org.apache.kafka.common.TopicPartition>>(timestampTypeKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0239");
        org.apache.storm.kafka.spout.KafkaSpout<java.util.RandomAccess, org.apache.storm.topology.base.BaseRichSpout> randomAccessKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.util.RandomAccess, org.apache.storm.topology.base.BaseRichSpout>();
    }

    @Test
    public void test0240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0240");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator0 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator0;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator2 = offsetComparator0.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator4 = kafkaSpoutMessageIdComparator2.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator2;
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator2;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator7 = kafkaSpoutMessageIdComparator2.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator2;
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator2;
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator2);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator7);
    }

    @Test
    public void test0241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0241");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean1 = offsetComparatorKafkaSpout0.consumerAutoCommitMode;
        org.apache.kafka.common.TopicPartition topicPartition2 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection3 = offsetComparatorKafkaSpout0.toArrayList(topicPartition2);
        long long4 = offsetComparatorKafkaSpout0.numUncommittedOffsets;
        long long5 = offsetComparatorKafkaSpout0.numUncommittedOffsets;
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer6 = null;
        offsetComparatorKafkaSpout0.kafkaConsumer = offsetComparatorKafkaConsumer6;
        offsetComparatorKafkaSpout0.maxRetries = (short) 0;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = offsetComparatorKafkaSpout0.getNamedTopics();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(topicPartitionCollection3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
    }

    @Test
    public void test0242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0242");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray5 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet6, kafkaSpoutMessageIdArray5);
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet6;
        offsetComparatorKafkaSpout0.maxRetries = 100;
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService11 = null;
        offsetComparatorKafkaSpout0.retryService = kafkaSpoutRetryService11;
        org.apache.storm.kafka.spout.KafkaSpoutStreams kafkaSpoutStreams13 = offsetComparatorKafkaSpout0.kafkaSpoutStreams;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.activate();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(kafkaSpoutStreams13);
    }

    @Test
    public void test0243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0243");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean1 = offsetComparatorKafkaSpout0.consumerAutoCommitMode;
        org.apache.kafka.common.TopicPartition topicPartition2 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection3 = offsetComparatorKafkaSpout0.toArrayList(topicPartition2);
        long long4 = offsetComparatorKafkaSpout0.numUncommittedOffsets;
        long long5 = offsetComparatorKafkaSpout0.numUncommittedOffsets;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor6 = offsetComparatorKafkaSpout0.waitingToEmit;
        offsetComparatorKafkaSpout0.consumerAutoCommitMode = true;
        long long9 = offsetComparatorKafkaSpout0.numUncommittedOffsets;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor10 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor10;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean12 = offsetComparatorKafkaSpout0.poll();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(topicPartitionCollection3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(offsetComparatorConsumerRecordItor6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test0244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0244");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> offsetComparatorKafkaSpoutKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>();
    }

    @Test
    public void test0245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0245");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType12 = null;
        java.lang.Object obj16 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord18 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("", 10, (long) (byte) -1, (long) '4', timestampType12, (long) (byte) 0, (int) (short) 10, (int) (byte) 100, obj16, (java.io.Serializable) 1);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String> objConsumerRecordConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String>("", (int) 'a', (long) (short) 10, (long) (byte) -1, timestampType4, (long) 'a', (int) (byte) -1, 0, objConsumerRecord18, "hi!");
        long long21 = objConsumerRecord18.checksum();
        java.util.Optional<java.lang.Integer> intOptional22 = objConsumerRecord18.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType23 = objConsumerRecord18.timestampType();
        long long24 = objConsumerRecord18.offset();
        int int25 = objConsumerRecord18.serializedValueSize();
        java.lang.String str26 = objConsumerRecord18.toString();
        long long27 = objConsumerRecord18.checksum();
        int int28 = objConsumerRecord18.serializedValueSize();
        java.io.Serializable serializable29 = objConsumerRecord18.value();
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(intOptional22);
        org.junit.Assert.assertNull(timestampType23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)" + "'", str26, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertEquals("'" + serializable29 + "' != '" + 1 + "'", serializable29, 1);
    }

    @Test
    public void test0246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0246");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray5 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet6, kafkaSpoutMessageIdArray5);
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet6;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor9 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor9;
        org.apache.storm.kafka.spout.internal.KafkaConsumerFactory kafkaConsumerFactory11 = offsetComparatorKafkaSpout0.kafkaConsumerFactory;
        java.lang.String str12 = offsetComparatorKafkaSpout0.toString();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor13 = offsetComparatorKafkaSpout0.waitingToEmit;
        org.apache.storm.kafka.spout.internal.KafkaConsumerFactory kafkaConsumerFactory14 = null;
        offsetComparatorKafkaSpout0.kafkaConsumerFactory = kafkaConsumerFactory14;
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService16 = offsetComparatorKafkaSpout0.retryService;
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService17 = offsetComparatorKafkaSpout0.retryService;
        org.apache.storm.kafka.spout.KafkaSpoutStreams kafkaSpoutStreams18 = null;
        offsetComparatorKafkaSpout0.kafkaSpoutStreams = kafkaSpoutStreams18;
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(kafkaConsumerFactory11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "KafkaSpout{acked=null, emitted=[]}" + "'", str12, "KafkaSpout{acked=null, emitted=[]}");
        org.junit.Assert.assertNull(offsetComparatorConsumerRecordItor13);
        org.junit.Assert.assertNull(kafkaSpoutRetryService16);
        org.junit.Assert.assertNull(kafkaSpoutRetryService17);
    }

    @Test
    public void test0247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0247");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator0 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator0;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator2 = offsetComparator0.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator4 = kafkaSpoutMessageIdComparator2.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator3;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator6 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator7 = offsetComparator3.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator6);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator8 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator8;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator10 = offsetComparator8.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator11 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator12 = kafkaSpoutMessageIdComparator10.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator11);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator10;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator14 = org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator15 = kafkaSpoutMessageIdComparator10.thenComparing(kafkaSpoutMessageIdComparator14);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator16 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator16;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator18 = offsetComparator16.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator19 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator20 = kafkaSpoutMessageIdComparator18.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator19);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator21 = kafkaSpoutMessageIdComparator20.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator22 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator22;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator24 = offsetComparator22.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator25 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator26 = kafkaSpoutMessageIdComparator24.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator25);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator25;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator28 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator29 = offsetComparator25.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator28);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator30 = kafkaSpoutMessageIdComparator20.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator25);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator31 = kafkaSpoutMessageIdComparator14.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator25);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator25;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator33 = offsetComparator6.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator25);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId34 = null;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId35 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int36 = offsetComparator25.compare(kafkaSpoutMessageId34, kafkaSpoutMessageId35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator2);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator7);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator10);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator12);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator14);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator15);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator18);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator20);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator21);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator24);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator26);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator29);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator30);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator31);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator33);
    }

    @Test
    public void test0248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0248");
        org.apache.kafka.common.record.TimestampType timestampType8 = null;
        org.apache.kafka.common.record.TimestampType timestampType16 = null;
        java.lang.Object obj20 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord22 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("", 10, (long) (byte) -1, (long) '4', timestampType16, (long) (byte) 0, (int) (short) 10, (int) (byte) 100, obj20, (java.io.Serializable) 1);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String> objConsumerRecordConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String>("", (int) 'a', (long) (short) 10, (long) (byte) -1, timestampType8, (long) 'a', (int) (byte) -1, 0, objConsumerRecord22, "hi!");
        long long25 = objConsumerRecord22.checksum();
        java.util.Optional<java.lang.Integer> intOptional26 = objConsumerRecord22.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType27 = objConsumerRecord22.timestampType();
        long long28 = objConsumerRecord22.offset();
        org.apache.kafka.common.header.Headers headers29 = objConsumerRecord22.headers();
        int int30 = objConsumerRecord22.partition();
        java.util.Optional<java.lang.Integer> intOptional31 = objConsumerRecord22.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.util.Optional<java.lang.Integer>> strComparableConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.util.Optional<java.lang.Integer>>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1), partition = 35, leaderEpoch = null, offset = 100, null = 97, serialized key size = 52, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = 0.0)", (int) (short) 0, (long) 10, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = -1)", intOptional31);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(intOptional26);
        org.junit.Assert.assertNull(timestampType27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertNotNull(headers29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertNotNull(intOptional31);
    }

    @Test
    public void test0249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0249");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor3 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor3;
        offsetComparatorKafkaSpout0.maxRetries = (short) 100;
        offsetComparatorKafkaSpout0.consumerAutoCommitMode = true;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.kafka.clients.consumer.ConsumerRecords<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorConsumerRecords9 = offsetComparatorKafkaSpout0.pollKafkaBroker();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0250");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray5 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet6, kafkaSpoutMessageIdArray5);
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet6;
        java.util.Map<org.apache.kafka.common.TopicPartition, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>.OffsetEntry> topicPartitionMap9 = null;
        offsetComparatorKafkaSpout0.acked = topicPartitionMap9;
        java.util.Map<org.apache.kafka.common.TopicPartition, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>.OffsetEntry> topicPartitionMap11 = offsetComparatorKafkaSpout0.acked;
        int int12 = offsetComparatorKafkaSpout0.maxRetries;
        offsetComparatorKafkaSpout0.numUncommittedOffsets = (-1L);
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.shutdown();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(topicPartitionMap11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test0251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0251");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType12 = null;
        java.lang.Object obj16 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord18 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("", 10, (long) (byte) -1, (long) '4', timestampType12, (long) (byte) 0, (int) (short) 10, (int) (byte) 100, obj16, (java.io.Serializable) 1);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String> objConsumerRecordConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String>("", (int) 'a', (long) (short) 10, (long) (byte) -1, timestampType4, (long) 'a', (int) (byte) -1, 0, objConsumerRecord18, "hi!");
        long long21 = objConsumerRecord18.checksum();
        java.util.Optional<java.lang.Integer> intOptional22 = objConsumerRecord18.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType23 = objConsumerRecord18.timestampType();
        long long24 = objConsumerRecord18.offset();
        org.apache.kafka.common.header.Headers headers25 = objConsumerRecord18.headers();
        int int26 = objConsumerRecord18.partition();
        java.util.Optional<java.lang.Integer> intOptional27 = objConsumerRecord18.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional28 = objConsumerRecord18.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType29 = objConsumerRecord18.timestampType();
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(intOptional22);
        org.junit.Assert.assertNull(timestampType23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertNotNull(headers25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(intOptional27);
        org.junit.Assert.assertNotNull(intOptional28);
        org.junit.Assert.assertNull(timestampType29);
    }

    @Test
    public void test0252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0252");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        java.util.Map<org.apache.kafka.common.TopicPartition, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>.OffsetEntry> topicPartitionMap5 = null;
        offsetComparatorKafkaSpout0.acked = topicPartitionMap5;
        offsetComparatorKafkaSpout0.consumerAutoCommitMode = false;
        org.apache.storm.kafka.spout.KafkaSpoutStreams kafkaSpoutStreams9 = offsetComparatorKafkaSpout0.kafkaSpoutStreams;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.activate();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNull(kafkaSpoutStreams9);
    }

    @Test
    public void test0253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0253");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.Object, org.apache.kafka.common.header.Headers> objKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.Object, org.apache.kafka.common.header.Headers>();
    }

    @Test
    public void test0254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0254");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>, java.util.AbstractList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> offsetComparatorKafkaSpoutKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>, java.util.AbstractList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> offsetComparatorKafkaSpoutKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>, java.util.AbstractList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>(offsetComparatorKafkaSpoutKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0255");
        org.apache.storm.kafka.spout.KafkaSpout<java.util.Optional<java.lang.Integer>, org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>> intOptionalKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.util.Optional<java.lang.Integer>, org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>>();
    }

    @Test
    public void test0256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0256");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout3 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor4 = null;
        offsetComparatorKafkaSpout3.waitingToEmit = offsetComparatorConsumerRecordItor4;
        org.apache.kafka.common.TopicPartition topicPartition6 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection7 = offsetComparatorKafkaSpout3.toArrayList(topicPartition6);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray8 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet9 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet9, kafkaSpoutMessageIdArray8);
        offsetComparatorKafkaSpout3.emitted = kafkaSpoutMessageIdSet9;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout15 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor16 = null;
        offsetComparatorKafkaSpout15.waitingToEmit = offsetComparatorConsumerRecordItor16;
        org.apache.kafka.common.TopicPartition topicPartition18 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection19 = offsetComparatorKafkaSpout15.toArrayList(topicPartition18);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray20 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet21 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet21, kafkaSpoutMessageIdArray20);
        offsetComparatorKafkaSpout15.emitted = kafkaSpoutMessageIdSet21;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor24 = null;
        offsetComparatorKafkaSpout15.waitingToEmit = offsetComparatorConsumerRecordItor24;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator32 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout33 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer34 = null;
        offsetComparatorKafkaSpout33.kafkaConsumer = offsetComparatorKafkaConsumer34;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout36 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean37 = offsetComparatorKafkaSpout36.consumerAutoCommitMode;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray38 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet39 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet39, kafkaSpoutMessageIdArray38);
        offsetComparatorKafkaSpout36.emitted = kafkaSpoutMessageIdSet39;
        offsetComparatorKafkaSpout33.emitted = kafkaSpoutMessageIdSet39;
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> offsetComparatorConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)", (int) (short) -1, (long) 0, offsetComparator32, (java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet39);
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> iComponentKafkaSpout44 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.topology.IRichSpout> kafkaSpoutMessageIdSetConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.topology.IRichSpout>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)", (int) (byte) -1, (long) 1, kafkaSpoutMessageIdSet39, (org.apache.storm.topology.IRichSpout) iComponentKafkaSpout44);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>, java.lang.Cloneable> offsetComparatorKafkaSpoutConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>, java.lang.Cloneable>("", (int) (byte) 1, (long) '4', offsetComparatorKafkaSpout15, (java.lang.Cloneable) kafkaSpoutMessageIdSet39);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>("", (int) 'a', (long) (short) 0, (java.io.Serializable) offsetComparatorKafkaSpout3, (java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet39);
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer48 = offsetComparatorKafkaSpout3.kafkaConsumer;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout3.emit();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection7);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(topicPartitionCollection19);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(offsetComparatorKafkaConsumer48);
    }

    @Test
    public void test0257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0257");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig5 = offsetComparatorKafkaSpout0.kafkaSpoutConfig;
        org.apache.storm.spout.SpoutOutputCollector spoutOutputCollector6 = offsetComparatorKafkaSpout0.collector;
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig7 = null;
        offsetComparatorKafkaSpout0.kafkaSpoutConfig = offsetComparatorKafkaSpoutConfig7;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean9 = offsetComparatorKafkaSpout0.poll();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNull(offsetComparatorKafkaSpoutConfig5);
        org.junit.Assert.assertNull(spoutOutputCollector6);
    }

    @Test
    public void test0258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0258");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean1 = offsetComparatorKafkaSpout0.consumerAutoCommitMode;
        org.apache.kafka.common.TopicPartition topicPartition2 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection3 = offsetComparatorKafkaSpout0.toArrayList(topicPartition2);
        long long4 = offsetComparatorKafkaSpout0.numUncommittedOffsets;
        long long5 = offsetComparatorKafkaSpout0.numUncommittedOffsets;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor6 = offsetComparatorKafkaSpout0.waitingToEmit;
        org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy firstPollOffsetStrategy7 = null;
        offsetComparatorKafkaSpout0.firstPollOffsetStrategy = firstPollOffsetStrategy7;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = offsetComparatorKafkaSpout0.getNamedTopics();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(topicPartitionCollection3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(offsetComparatorConsumerRecordItor6);
    }

    @Test
    public void test0259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0259");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean1 = offsetComparatorKafkaSpout0.consumerAutoCommitMode;
        org.apache.kafka.common.TopicPartition topicPartition2 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection3 = offsetComparatorKafkaSpout0.toArrayList(topicPartition2);
        long long4 = offsetComparatorKafkaSpout0.numUncommittedOffsets;
        long long5 = offsetComparatorKafkaSpout0.numUncommittedOffsets;
        java.lang.Class<?> wildcardClass6 = offsetComparatorKafkaSpout0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(topicPartitionCollection3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0260");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, java.io.Serializable>.KafkaSpoutConsumerRebalanceListener, java.util.RandomAccess>.KafkaSpoutConsumerRebalanceListener kafkaSpoutConsumerRebalanceListener1 = kafkaSpout0.new KafkaSpoutConsumerRebalanceListener();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$KafkaSpoutConsumerRebalanceListener with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0261");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        java.util.concurrent.TimeUnit timeUnit3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.lang.Cloneable, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>.Timer timer4 = kafkaSpout0.new Timer(52L, 0L, timeUnit3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$Timer with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0262");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray5 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet6, kafkaSpoutMessageIdArray5);
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet6;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor9 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor9;
        org.apache.storm.kafka.spout.internal.KafkaConsumerFactory kafkaConsumerFactory11 = offsetComparatorKafkaSpout0.kafkaConsumerFactory;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.activate();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(kafkaConsumerFactory11);
    }

    @Test
    public void test0263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0263");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig5 = offsetComparatorKafkaSpout0.kafkaSpoutConfig;
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig6 = offsetComparatorKafkaSpout0.kafkaSpoutConfig;
        boolean boolean7 = offsetComparatorKafkaSpout0.waitingToEmit();
        offsetComparatorKafkaSpout0.consumerAutoCommitMode = false;
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService10 = offsetComparatorKafkaSpout0.retryService;
        org.apache.storm.topology.OutputFieldsDeclarer outputFieldsDeclarer11 = null;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.declareOutputFields(outputFieldsDeclarer11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNull(offsetComparatorKafkaSpoutConfig5);
        org.junit.Assert.assertNull(offsetComparatorKafkaSpoutConfig6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(kafkaSpoutRetryService10);
    }

    @Test
    public void test0264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0264");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        java.util.concurrent.TimeUnit timeUnit3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.lang.String, java.lang.CharSequence>.Timer timer4 = kafkaSpout0.new Timer((long) 0, 0L, timeUnit3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$Timer with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0265");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType12 = null;
        java.lang.Object obj16 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord18 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("", 10, (long) (byte) -1, (long) '4', timestampType12, (long) (byte) 0, (int) (short) 10, (int) (byte) 100, obj16, (java.io.Serializable) 1);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String> objConsumerRecordConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String>("", (int) 'a', (long) (short) 10, (long) (byte) -1, timestampType4, (long) 'a', (int) (byte) -1, 0, objConsumerRecord18, "hi!");
        long long21 = objConsumerRecord18.checksum();
        java.util.Optional<java.lang.Integer> intOptional22 = objConsumerRecord18.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType23 = objConsumerRecord18.timestampType();
        long long24 = objConsumerRecord18.offset();
        org.apache.kafka.common.header.Headers headers25 = objConsumerRecord18.headers();
        int int26 = objConsumerRecord18.partition();
        java.util.Optional<java.lang.Integer> intOptional27 = objConsumerRecord18.leaderEpoch();
        java.io.Serializable serializable28 = objConsumerRecord18.value();
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(intOptional22);
        org.junit.Assert.assertNull(timestampType23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertNotNull(headers25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(intOptional27);
        org.junit.Assert.assertEquals("'" + serializable28 + "' != '" + 1 + "'", serializable28, 1);
    }

    @Test
    public void test0266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0266");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray5 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet6, kafkaSpoutMessageIdArray5);
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet6;
        java.util.Map<org.apache.kafka.common.TopicPartition, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>.OffsetEntry> topicPartitionMap9 = null;
        offsetComparatorKafkaSpout0.acked = topicPartitionMap9;
        java.util.Map<org.apache.kafka.common.TopicPartition, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>.OffsetEntry> topicPartitionMap11 = offsetComparatorKafkaSpout0.acked;
        int int12 = offsetComparatorKafkaSpout0.maxRetries;
        offsetComparatorKafkaSpout0.numUncommittedOffsets = (-1L);
        org.apache.storm.kafka.spout.internal.KafkaConsumerFactory kafkaConsumerFactory15 = null;
        offsetComparatorKafkaSpout0.kafkaConsumerFactory = kafkaConsumerFactory15;
        org.apache.storm.topology.OutputFieldsDeclarer outputFieldsDeclarer17 = null;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.declareOutputFields(outputFieldsDeclarer17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(topicPartitionMap11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test0267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0267");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.lang.reflect.Type, java.lang.String> typeKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.Type, java.lang.String> typeKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.Type, java.lang.String>(typeKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0268");
        org.apache.storm.kafka.spout.KafkaSpout<java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.util.List<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> kafkaSpoutMessageIdSetKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.util.List<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>();
    }

    @Test
    public void test0269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0269");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean1 = offsetComparatorKafkaSpout0.consumerAutoCommitMode;
        org.apache.kafka.common.TopicPartition topicPartition2 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection3 = offsetComparatorKafkaSpout0.toArrayList(topicPartition2);
        org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy firstPollOffsetStrategy4 = null;
        offsetComparatorKafkaSpout0.firstPollOffsetStrategy = firstPollOffsetStrategy4;
        org.apache.kafka.common.TopicPartition topicPartition6 = null;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.setAcked(topicPartition6, (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(topicPartitionCollection3);
    }

    @Test
    public void test0270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0270");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig5 = offsetComparatorKafkaSpout0.kafkaSpoutConfig;
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig6 = offsetComparatorKafkaSpout0.kafkaSpoutConfig;
        boolean boolean7 = offsetComparatorKafkaSpout0.waitingToEmit();
        org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy firstPollOffsetStrategy8 = null;
        offsetComparatorKafkaSpout0.firstPollOffsetStrategy = firstPollOffsetStrategy8;
        org.apache.storm.kafka.spout.KafkaSpoutTuplesBuilder<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutTuplesBuilder10 = null;
        offsetComparatorKafkaSpout0.tuplesBuilder = offsetComparatorKafkaSpoutTuplesBuilder10;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.activate();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNull(offsetComparatorKafkaSpoutConfig5);
        org.junit.Assert.assertNull(offsetComparatorKafkaSpoutConfig6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0271");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout3 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor4 = null;
        offsetComparatorKafkaSpout3.waitingToEmit = offsetComparatorConsumerRecordItor4;
        org.apache.kafka.common.TopicPartition topicPartition6 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection7 = offsetComparatorKafkaSpout3.toArrayList(topicPartition6);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray8 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet9 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet9, kafkaSpoutMessageIdArray8);
        offsetComparatorKafkaSpout3.emitted = kafkaSpoutMessageIdSet9;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout15 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor16 = null;
        offsetComparatorKafkaSpout15.waitingToEmit = offsetComparatorConsumerRecordItor16;
        org.apache.kafka.common.TopicPartition topicPartition18 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection19 = offsetComparatorKafkaSpout15.toArrayList(topicPartition18);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray20 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet21 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet21, kafkaSpoutMessageIdArray20);
        offsetComparatorKafkaSpout15.emitted = kafkaSpoutMessageIdSet21;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor24 = null;
        offsetComparatorKafkaSpout15.waitingToEmit = offsetComparatorConsumerRecordItor24;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator32 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout33 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer34 = null;
        offsetComparatorKafkaSpout33.kafkaConsumer = offsetComparatorKafkaConsumer34;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout36 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean37 = offsetComparatorKafkaSpout36.consumerAutoCommitMode;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray38 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet39 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet39, kafkaSpoutMessageIdArray38);
        offsetComparatorKafkaSpout36.emitted = kafkaSpoutMessageIdSet39;
        offsetComparatorKafkaSpout33.emitted = kafkaSpoutMessageIdSet39;
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> offsetComparatorConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)", (int) (short) -1, (long) 0, offsetComparator32, (java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet39);
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> iComponentKafkaSpout44 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.topology.IRichSpout> kafkaSpoutMessageIdSetConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.topology.IRichSpout>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)", (int) (byte) -1, (long) 1, kafkaSpoutMessageIdSet39, (org.apache.storm.topology.IRichSpout) iComponentKafkaSpout44);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>, java.lang.Cloneable> offsetComparatorKafkaSpoutConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>, java.lang.Cloneable>("", (int) (byte) 1, (long) '4', offsetComparatorKafkaSpout15, (java.lang.Cloneable) kafkaSpoutMessageIdSet39);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>("", (int) 'a', (long) (short) 0, (java.io.Serializable) offsetComparatorKafkaSpout3, (java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet39);
        offsetComparatorKafkaSpout3.numUncommittedOffsets = 52L;
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer50 = null;
        offsetComparatorKafkaSpout3.kafkaConsumer = offsetComparatorKafkaConsumer50;
        long long52 = offsetComparatorKafkaSpout3.numUncommittedOffsets;
        org.junit.Assert.assertNotNull(topicPartitionCollection7);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(topicPartitionCollection19);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 52L + "'", long52 == 52L);
    }

    @Test
    public void test0272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0272");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.base.BaseRichSpout, java.lang.Object> baseRichSpoutKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.base.BaseRichSpout, java.lang.Object>();
    }

    @Test
    public void test0273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0273");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.util.AbstractCollection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.io.Serializable>.OffsetEntry offsetEntry1 = kafkaSpout0.new OffsetEntry();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$OffsetEntry with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0274");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        java.util.concurrent.TimeUnit timeUnit3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, org.apache.storm.topology.IComponent>.Timer timer4 = kafkaSpout0.new Timer((long) 35, 52L, timeUnit3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$Timer with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0275");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean1 = offsetComparatorKafkaSpout0.consumerAutoCommitMode;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray2 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet3 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet3, kafkaSpoutMessageIdArray2);
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet3;
        org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy firstPollOffsetStrategy6 = offsetComparatorKafkaSpout0.firstPollOffsetStrategy;
        org.apache.storm.topology.OutputFieldsDeclarer outputFieldsDeclarer7 = null;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.declareOutputFields(outputFieldsDeclarer7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(firstPollOffsetStrategy6);
    }

    @Test
    public void test0276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0276");
        org.apache.storm.kafka.spout.KafkaSpout<java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> kafkaSpoutMessageIdSetKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>();
    }

    @Test
    public void test0277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0277");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType12 = null;
        org.apache.kafka.common.record.TimestampType timestampType20 = null;
        java.lang.Object obj24 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("", 10, (long) (byte) -1, (long) '4', timestampType20, (long) (byte) 0, (int) (short) 10, (int) (byte) 100, obj24, (java.io.Serializable) 1);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String> objConsumerRecordConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String>("", (int) 'a', (long) (short) 10, (long) (byte) -1, timestampType12, (long) 'a', (int) (byte) -1, 0, objConsumerRecord26, "hi!");
        long long29 = objConsumerRecord26.checksum();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("", (int) (short) 100, (long) 100, (long) (short) 100, timestampType4, (long) '4', (int) (byte) 10, (int) (short) 10, (java.lang.Object) objConsumerRecord26, (java.io.Serializable) 1L);
        long long32 = objConsumerRecord26.checksum();
        org.apache.kafka.common.record.TimestampType timestampType33 = objConsumerRecord26.timestampType();
        java.lang.String str34 = objConsumerRecord26.toString();
        long long35 = objConsumerRecord26.offset();
        java.lang.Class<?> wildcardClass36 = objConsumerRecord26.getClass();
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNull(timestampType33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)" + "'", str34, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0278");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.util.AbstractList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>> kafkaSpoutMessageIdListKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.util.AbstractList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>> kafkaSpoutMessageIdListKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<java.util.AbstractList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>>(kafkaSpoutMessageIdListKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0279");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.lang.Iterable<org.apache.kafka.common.TopicPartition>, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>.OffsetEntry offsetEntry1 = kafkaSpout0.new OffsetEntry();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$OffsetEntry with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0280");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType12 = null;
        java.lang.Object obj16 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord18 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("", 10, (long) (byte) -1, (long) '4', timestampType12, (long) (byte) 0, (int) (short) 10, (int) (byte) 100, obj16, (java.io.Serializable) 1);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String> objConsumerRecordConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String>("", (int) 'a', (long) (short) 10, (long) (byte) -1, timestampType4, (long) 'a', (int) (byte) -1, 0, objConsumerRecord18, "hi!");
        int int21 = objConsumerRecord18.serializedKeySize();
        long long22 = objConsumerRecord18.checksum();
        java.io.Serializable serializable23 = objConsumerRecord18.value();
        java.lang.Object obj24 = objConsumerRecord18.key();
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertEquals("'" + serializable23 + "' != '" + 1 + "'", serializable23, 1);
        org.junit.Assert.assertNull(obj24);
    }

    @Test
    public void test0281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0281");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer1 = null;
        offsetComparatorKafkaSpout0.kafkaConsumer = offsetComparatorKafkaConsumer1;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout3 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean4 = offsetComparatorKafkaSpout3.consumerAutoCommitMode;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray5 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet6, kafkaSpoutMessageIdArray5);
        offsetComparatorKafkaSpout3.emitted = kafkaSpoutMessageIdSet6;
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet6;
        org.apache.storm.spout.SpoutOutputCollector spoutOutputCollector10 = null;
        offsetComparatorKafkaSpout0.collector = spoutOutputCollector10;
        java.util.Map<org.apache.kafka.common.TopicPartition, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>.OffsetEntry> topicPartitionMap12 = null;
        offsetComparatorKafkaSpout0.acked = topicPartitionMap12;
        org.apache.storm.topology.OutputFieldsDeclarer outputFieldsDeclarer14 = null;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.declareOutputFields(outputFieldsDeclarer14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0282");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator0 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator0;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator2 = offsetComparator0.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator4 = kafkaSpoutMessageIdComparator2.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator5 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator5;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator7 = offsetComparator5.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator8 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator9 = kafkaSpoutMessageIdComparator7.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator8);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator7;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator11 = org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator12 = kafkaSpoutMessageIdComparator7.thenComparing(kafkaSpoutMessageIdComparator11);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator13 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator13;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator15 = offsetComparator13.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator16 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator17 = kafkaSpoutMessageIdComparator15.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator16);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator18 = kafkaSpoutMessageIdComparator17.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator19 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator19;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator21 = offsetComparator19.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator22 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator23 = kafkaSpoutMessageIdComparator21.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator22);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator22;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator25 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator26 = offsetComparator22.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator25);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator27 = kafkaSpoutMessageIdComparator17.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator22);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator28 = kafkaSpoutMessageIdComparator11.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator22);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator29 = offsetComparator3.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator22);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator30 = offsetComparator3.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator31 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator31;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator33 = offsetComparator31.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator34 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator35 = kafkaSpoutMessageIdComparator33.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator34);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator36 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator36;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator38 = kafkaSpoutMessageIdComparator33.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator36);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator39 = offsetComparator3.thenComparing(kafkaSpoutMessageIdComparator33);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator3;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator41 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator41;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator43 = offsetComparator41.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator44 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator45 = kafkaSpoutMessageIdComparator43.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator44);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator46 = kafkaSpoutMessageIdComparator45.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator47 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator47;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator49 = offsetComparator47.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator50 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator51 = kafkaSpoutMessageIdComparator49.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator50);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator50;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator53 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator54 = offsetComparator50.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator53);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator55 = kafkaSpoutMessageIdComparator45.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator50);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator56 = org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator57 = kafkaSpoutMessageIdComparator56.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator58 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator58;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator60 = offsetComparator58.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator61 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator62 = kafkaSpoutMessageIdComparator60.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator61);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator63 = kafkaSpoutMessageIdComparator62.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator64 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator64;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator66 = offsetComparator64.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator67 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator68 = kafkaSpoutMessageIdComparator66.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator67);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator67;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator70 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator71 = offsetComparator67.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator70);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator72 = kafkaSpoutMessageIdComparator62.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator67);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator73 = kafkaSpoutMessageIdComparator56.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator67);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator74 = kafkaSpoutMessageIdComparator55.thenComparing(kafkaSpoutMessageIdComparator56);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator75 = kafkaSpoutMessageIdComparator56.reversed();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator76 = offsetComparator3.thenComparing(kafkaSpoutMessageIdComparator56);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator3;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId78 = null;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId79 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int80 = offsetComparator3.compare(kafkaSpoutMessageId78, kafkaSpoutMessageId79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator2);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator7);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator9);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator11);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator12);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator15);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator17);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator18);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator21);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator23);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator26);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator27);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator28);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator29);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator30);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator33);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator35);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator38);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator39);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator43);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator45);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator46);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator49);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator51);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator54);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator55);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator56);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator57);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator60);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator62);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator63);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator66);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator68);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator71);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator72);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator73);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator74);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator75);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator76);
    }

    @Test
    public void test0283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0283");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout3 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor4 = null;
        offsetComparatorKafkaSpout3.waitingToEmit = offsetComparatorConsumerRecordItor4;
        org.apache.kafka.common.TopicPartition topicPartition6 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection7 = offsetComparatorKafkaSpout3.toArrayList(topicPartition6);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray8 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet9 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet9, kafkaSpoutMessageIdArray8);
        offsetComparatorKafkaSpout3.emitted = kafkaSpoutMessageIdSet9;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout15 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor16 = null;
        offsetComparatorKafkaSpout15.waitingToEmit = offsetComparatorConsumerRecordItor16;
        org.apache.kafka.common.TopicPartition topicPartition18 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection19 = offsetComparatorKafkaSpout15.toArrayList(topicPartition18);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray20 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet21 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet21, kafkaSpoutMessageIdArray20);
        offsetComparatorKafkaSpout15.emitted = kafkaSpoutMessageIdSet21;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor24 = null;
        offsetComparatorKafkaSpout15.waitingToEmit = offsetComparatorConsumerRecordItor24;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator32 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout33 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer34 = null;
        offsetComparatorKafkaSpout33.kafkaConsumer = offsetComparatorKafkaConsumer34;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout36 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean37 = offsetComparatorKafkaSpout36.consumerAutoCommitMode;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray38 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet39 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet39, kafkaSpoutMessageIdArray38);
        offsetComparatorKafkaSpout36.emitted = kafkaSpoutMessageIdSet39;
        offsetComparatorKafkaSpout33.emitted = kafkaSpoutMessageIdSet39;
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> offsetComparatorConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)", (int) (short) -1, (long) 0, offsetComparator32, (java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet39);
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> iComponentKafkaSpout44 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.topology.IRichSpout> kafkaSpoutMessageIdSetConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.topology.IRichSpout>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)", (int) (byte) -1, (long) 1, kafkaSpoutMessageIdSet39, (org.apache.storm.topology.IRichSpout) iComponentKafkaSpout44);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>, java.lang.Cloneable> offsetComparatorKafkaSpoutConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>, java.lang.Cloneable>("", (int) (byte) 1, (long) '4', offsetComparatorKafkaSpout15, (java.lang.Cloneable) kafkaSpoutMessageIdSet39);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>("", (int) 'a', (long) (short) 0, (java.io.Serializable) offsetComparatorKafkaSpout3, (java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet39);
        offsetComparatorKafkaSpout3.numUncommittedOffsets = 52L;
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer50 = null;
        offsetComparatorKafkaSpout3.kafkaConsumer = offsetComparatorKafkaConsumer50;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Object> strMap52 = offsetComparatorKafkaSpout3.getComponentConfiguration();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection7);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(topicPartitionCollection19);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test0284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0284");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.kafka.common.record.TimestampType, java.lang.Cloneable> timestampTypeKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<org.apache.kafka.common.record.TimestampType, java.lang.Cloneable> timestampTypeKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.kafka.common.record.TimestampType, java.lang.Cloneable>(timestampTypeKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0285");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, java.io.Serializable>.KafkaSpoutConsumerRebalanceListener, org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator>.Timer timer1 = kafkaSpout0.new Timer();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$Timer with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0286");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator0 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator0;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator2 = offsetComparator0.reversed();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator3 = offsetComparator0.reversed();
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId4 = null;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId5 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int6 = offsetComparator0.compare(kafkaSpoutMessageId4, kafkaSpoutMessageId5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator2);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator3);
    }

    @Test
    public void test0287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0287");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.Class<?>, java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> wildcardClassKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.Class<?>, java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>();
    }

    @Test
    public void test0288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0288");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray5 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet6, kafkaSpoutMessageIdArray5);
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet6;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor9 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor9;
        org.apache.storm.kafka.spout.internal.KafkaConsumerFactory kafkaConsumerFactory11 = offsetComparatorKafkaSpout0.kafkaConsumerFactory;
        java.lang.String str12 = offsetComparatorKafkaSpout0.toString();
        java.util.Set<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet13 = offsetComparatorKafkaSpout0.emitted;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean14 = offsetComparatorKafkaSpout0.commit();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(kafkaConsumerFactory11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "KafkaSpout{acked=null, emitted=[]}" + "'", str12, "KafkaSpout{acked=null, emitted=[]}");
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdSet13);
    }

    @Test
    public void test0289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0289");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean1 = offsetComparatorKafkaSpout0.consumerAutoCommitMode;
        org.apache.kafka.common.TopicPartition topicPartition2 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection3 = offsetComparatorKafkaSpout0.toArrayList(topicPartition2);
        long long4 = offsetComparatorKafkaSpout0.numUncommittedOffsets;
        long long5 = offsetComparatorKafkaSpout0.numUncommittedOffsets;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor6 = offsetComparatorKafkaSpout0.waitingToEmit;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.kafka.clients.consumer.ConsumerRecords<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorConsumerRecords7 = offsetComparatorKafkaSpout0.pollKafkaBroker();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(topicPartitionCollection3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(offsetComparatorConsumerRecordItor6);
    }

    @Test
    public void test0290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0290");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray5 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet6, kafkaSpoutMessageIdArray5);
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet6;
        java.util.Map<org.apache.kafka.common.TopicPartition, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>.OffsetEntry> topicPartitionMap9 = null;
        offsetComparatorKafkaSpout0.acked = topicPartitionMap9;
        org.apache.storm.spout.SpoutOutputCollector spoutOutputCollector11 = offsetComparatorKafkaSpout0.collector;
        java.util.Map<org.apache.kafka.common.TopicPartition, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>.OffsetEntry> topicPartitionMap12 = offsetComparatorKafkaSpout0.acked;
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService13 = null;
        offsetComparatorKafkaSpout0.retryService = kafkaSpoutRetryService13;
        org.apache.kafka.clients.consumer.ConsumerRecords<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorConsumerRecords15 = null;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.setWaitingToEmit(offsetComparatorConsumerRecords15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(spoutOutputCollector11);
        org.junit.Assert.assertNull(topicPartitionMap12);
    }

    @Test
    public void test0291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0291");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig5 = offsetComparatorKafkaSpout0.kafkaSpoutConfig;
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig6 = offsetComparatorKafkaSpout0.kafkaSpoutConfig;
        boolean boolean7 = offsetComparatorKafkaSpout0.waitingToEmit();
        org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy firstPollOffsetStrategy8 = null;
        offsetComparatorKafkaSpout0.firstPollOffsetStrategy = firstPollOffsetStrategy8;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean10 = offsetComparatorKafkaSpout0.commit();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNull(offsetComparatorKafkaSpoutConfig5);
        org.junit.Assert.assertNull(offsetComparatorKafkaSpoutConfig6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0292");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout3 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor4 = null;
        offsetComparatorKafkaSpout3.waitingToEmit = offsetComparatorConsumerRecordItor4;
        org.apache.kafka.common.TopicPartition topicPartition6 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection7 = offsetComparatorKafkaSpout3.toArrayList(topicPartition6);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray8 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet9 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet9, kafkaSpoutMessageIdArray8);
        offsetComparatorKafkaSpout3.emitted = kafkaSpoutMessageIdSet9;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout15 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor16 = null;
        offsetComparatorKafkaSpout15.waitingToEmit = offsetComparatorConsumerRecordItor16;
        org.apache.kafka.common.TopicPartition topicPartition18 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection19 = offsetComparatorKafkaSpout15.toArrayList(topicPartition18);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray20 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet21 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet21, kafkaSpoutMessageIdArray20);
        offsetComparatorKafkaSpout15.emitted = kafkaSpoutMessageIdSet21;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor24 = null;
        offsetComparatorKafkaSpout15.waitingToEmit = offsetComparatorConsumerRecordItor24;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator32 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout33 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer34 = null;
        offsetComparatorKafkaSpout33.kafkaConsumer = offsetComparatorKafkaConsumer34;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout36 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean37 = offsetComparatorKafkaSpout36.consumerAutoCommitMode;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray38 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet39 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet39, kafkaSpoutMessageIdArray38);
        offsetComparatorKafkaSpout36.emitted = kafkaSpoutMessageIdSet39;
        offsetComparatorKafkaSpout33.emitted = kafkaSpoutMessageIdSet39;
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> offsetComparatorConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)", (int) (short) -1, (long) 0, offsetComparator32, (java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet39);
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> iComponentKafkaSpout44 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.topology.IRichSpout> kafkaSpoutMessageIdSetConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.topology.IRichSpout>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)", (int) (byte) -1, (long) 1, kafkaSpoutMessageIdSet39, (org.apache.storm.topology.IRichSpout) iComponentKafkaSpout44);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>, java.lang.Cloneable> offsetComparatorKafkaSpoutConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>, java.lang.Cloneable>("", (int) (byte) 1, (long) '4', offsetComparatorKafkaSpout15, (java.lang.Cloneable) kafkaSpoutMessageIdSet39);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>("", (int) 'a', (long) (short) 0, (java.io.Serializable) offsetComparatorKafkaSpout3, (java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet39);
        offsetComparatorKafkaSpout3.numUncommittedOffsets = 52L;
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer50 = null;
        offsetComparatorKafkaSpout3.kafkaConsumer = offsetComparatorKafkaConsumer50;
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig52 = offsetComparatorKafkaSpout3.kafkaSpoutConfig;
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorConsumerRecord53 = null;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout3.emitTupleIfNotEmitted(offsetComparatorConsumerRecord53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection7);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(topicPartitionCollection19);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(offsetComparatorKafkaSpoutConfig52);
    }

    @Test
    public void test0293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0293");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator0 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator1 = offsetComparator0.reversed();
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId2 = null;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId3 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int4 = offsetComparator0.compare(kafkaSpoutMessageId2, kafkaSpoutMessageId3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator1);
    }

    @Test
    public void test0294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0294");
        java.io.Serializable serializable4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1), partition = 35, leaderEpoch = null, offset = 100, null = 97, serialized key size = 52, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = 0.0)", (int) (byte) 100, (-1L), (java.lang.Object) 52L, serializable4);
        long long6 = objConsumerRecord5.checksum();
        long long7 = objConsumerRecord5.timestamp();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
    }

    @Test
    public void test0295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0295");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.Iterable<org.apache.kafka.common.TopicPartition>, java.lang.Comparable<java.lang.String>> topicPartitionIterableKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.Iterable<org.apache.kafka.common.TopicPartition>, java.lang.Comparable<java.lang.String>>();
    }

    @Test
    public void test0296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0296");
        java.io.Serializable serializable4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1), partition = 35, leaderEpoch = null, offset = 100, null = 97, serialized key size = 52, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = 0.0)", (int) (byte) 100, (-1L), (java.lang.Object) 52L, serializable4);
        java.util.Optional<java.lang.Integer> intOptional6 = objConsumerRecord5.leaderEpoch();
        org.junit.Assert.assertNotNull(intOptional6);
    }

    @Test
    public void test0297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0297");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray5 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet6, kafkaSpoutMessageIdArray5);
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet6;
        java.util.Map<org.apache.kafka.common.TopicPartition, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>.OffsetEntry> topicPartitionMap9 = null;
        offsetComparatorKafkaSpout0.acked = topicPartitionMap9;
        java.util.Map<org.apache.kafka.common.TopicPartition, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>.OffsetEntry> topicPartitionMap11 = offsetComparatorKafkaSpout0.acked;
        boolean boolean12 = offsetComparatorKafkaSpout0.waitingToEmit();
        org.apache.kafka.clients.consumer.ConsumerRecords<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorConsumerRecords13 = null;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.setWaitingToEmit(offsetComparatorConsumerRecords13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(topicPartitionMap11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0298");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout3 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor4 = null;
        offsetComparatorKafkaSpout3.waitingToEmit = offsetComparatorConsumerRecordItor4;
        org.apache.kafka.common.TopicPartition topicPartition6 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection7 = offsetComparatorKafkaSpout3.toArrayList(topicPartition6);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray8 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet9 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet9, kafkaSpoutMessageIdArray8);
        offsetComparatorKafkaSpout3.emitted = kafkaSpoutMessageIdSet9;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout15 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor16 = null;
        offsetComparatorKafkaSpout15.waitingToEmit = offsetComparatorConsumerRecordItor16;
        org.apache.kafka.common.TopicPartition topicPartition18 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection19 = offsetComparatorKafkaSpout15.toArrayList(topicPartition18);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray20 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet21 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet21, kafkaSpoutMessageIdArray20);
        offsetComparatorKafkaSpout15.emitted = kafkaSpoutMessageIdSet21;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor24 = null;
        offsetComparatorKafkaSpout15.waitingToEmit = offsetComparatorConsumerRecordItor24;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator32 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout33 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer34 = null;
        offsetComparatorKafkaSpout33.kafkaConsumer = offsetComparatorKafkaConsumer34;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout36 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean37 = offsetComparatorKafkaSpout36.consumerAutoCommitMode;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray38 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet39 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet39, kafkaSpoutMessageIdArray38);
        offsetComparatorKafkaSpout36.emitted = kafkaSpoutMessageIdSet39;
        offsetComparatorKafkaSpout33.emitted = kafkaSpoutMessageIdSet39;
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> offsetComparatorConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)", (int) (short) -1, (long) 0, offsetComparator32, (java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet39);
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> iComponentKafkaSpout44 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.topology.IRichSpout> kafkaSpoutMessageIdSetConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.topology.IRichSpout>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)", (int) (byte) -1, (long) 1, kafkaSpoutMessageIdSet39, (org.apache.storm.topology.IRichSpout) iComponentKafkaSpout44);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>, java.lang.Cloneable> offsetComparatorKafkaSpoutConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>, java.lang.Cloneable>("", (int) (byte) 1, (long) '4', offsetComparatorKafkaSpout15, (java.lang.Cloneable) kafkaSpoutMessageIdSet39);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>("", (int) 'a', (long) (short) 0, (java.io.Serializable) offsetComparatorKafkaSpout3, (java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet39);
        offsetComparatorKafkaSpout3.numUncommittedOffsets = 52L;
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer50 = null;
        offsetComparatorKafkaSpout3.kafkaConsumer = offsetComparatorKafkaConsumer50;
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer52 = offsetComparatorKafkaSpout3.kafkaConsumer;
        java.util.Map map53 = null;
        org.apache.storm.task.TopologyContext topologyContext54 = null;
        org.apache.storm.spout.SpoutOutputCollector spoutOutputCollector55 = null;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout3.open(map53, topologyContext54, spoutOutputCollector55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection7);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(topicPartitionCollection19);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(offsetComparatorKafkaConsumer52);
    }

    @Test
    public void test0299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0299");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray5 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet6, kafkaSpoutMessageIdArray5);
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet6;
        offsetComparatorKafkaSpout0.maxRetries = 100;
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService11 = null;
        offsetComparatorKafkaSpout0.retryService = kafkaSpoutRetryService11;
        org.apache.storm.kafka.spout.KafkaSpoutStreams kafkaSpoutStreams13 = offsetComparatorKafkaSpout0.kafkaSpoutStreams;
        offsetComparatorKafkaSpout0.initialized = false;
        org.apache.kafka.common.TopicPartition topicPartition16 = null;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.setAcked(topicPartition16, (long) 35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(kafkaSpoutStreams13);
    }

    @Test
    public void test0300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0300");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.Type, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> typeKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.Type, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>>();
    }

    @Test
    public void test0301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0301");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.AnnotatedElement, java.lang.Iterable<org.apache.kafka.common.TopicPartition>> annotatedElementKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.AnnotatedElement, java.lang.Iterable<org.apache.kafka.common.TopicPartition>>();
    }

    @Test
    public void test0302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0302");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator0 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator0;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator2 = offsetComparator0.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator4 = kafkaSpoutMessageIdComparator2.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator2;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator6 = org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator7 = kafkaSpoutMessageIdComparator2.thenComparing(kafkaSpoutMessageIdComparator6);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator8 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator8;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator10 = offsetComparator8.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator11 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator12 = kafkaSpoutMessageIdComparator10.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator11);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator13 = kafkaSpoutMessageIdComparator12.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator14 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator14;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator16 = offsetComparator14.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator17 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator18 = kafkaSpoutMessageIdComparator16.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator17);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator17;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator20 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator21 = offsetComparator17.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator20);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator22 = kafkaSpoutMessageIdComparator12.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator17);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator23 = kafkaSpoutMessageIdComparator6.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator17);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator24 = offsetComparator17.reversed();
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId25 = null;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId26 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int27 = offsetComparator17.compare(kafkaSpoutMessageId25, kafkaSpoutMessageId26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator2);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator6);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator7);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator10);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator12);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator13);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator16);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator18);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator21);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator22);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator23);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator24);
    }

    @Test
    public void test0303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0303");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray5 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet6, kafkaSpoutMessageIdArray5);
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet6;
        java.util.Map<org.apache.kafka.common.TopicPartition, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>.OffsetEntry> topicPartitionMap9 = null;
        offsetComparatorKafkaSpout0.acked = topicPartitionMap9;
        org.apache.storm.spout.SpoutOutputCollector spoutOutputCollector11 = offsetComparatorKafkaSpout0.collector;
        org.apache.storm.kafka.spout.internal.KafkaConsumerFactory kafkaConsumerFactory12 = null;
        offsetComparatorKafkaSpout0.kafkaConsumerFactory = kafkaConsumerFactory12;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean14 = offsetComparatorKafkaSpout0.commit();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(spoutOutputCollector11);
    }

    @Test
    public void test0304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0304");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>, java.util.List<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> offsetComparatorKafkaSpoutKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>, java.util.List<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>();
    }

    @Test
    public void test0305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0305");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig5 = offsetComparatorKafkaSpout0.kafkaSpoutConfig;
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig6 = offsetComparatorKafkaSpout0.kafkaSpoutConfig;
        java.util.Map<org.apache.kafka.common.TopicPartition, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>.OffsetEntry> topicPartitionMap7 = null;
        offsetComparatorKafkaSpout0.acked = topicPartitionMap7;
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer9 = offsetComparatorKafkaSpout0.kafkaConsumer;
        java.lang.String str10 = offsetComparatorKafkaSpout0.toString();
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout11 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean12 = offsetComparatorKafkaSpout11.consumerAutoCommitMode;
        org.apache.kafka.common.TopicPartition topicPartition13 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection14 = offsetComparatorKafkaSpout11.toArrayList(topicPartition13);
        long long15 = offsetComparatorKafkaSpout11.numUncommittedOffsets;
        long long16 = offsetComparatorKafkaSpout11.numUncommittedOffsets;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor17 = offsetComparatorKafkaSpout11.waitingToEmit;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.fail((java.lang.Object) offsetComparatorConsumerRecordItor17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNull(offsetComparatorKafkaSpoutConfig5);
        org.junit.Assert.assertNull(offsetComparatorKafkaSpoutConfig6);
        org.junit.Assert.assertNull(offsetComparatorKafkaConsumer9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "KafkaSpout{acked=null, emitted=null}" + "'", str10, "KafkaSpout{acked=null, emitted=null}");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(topicPartitionCollection14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNull(offsetComparatorConsumerRecordItor17);
    }

    @Test
    public void test0306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0306");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.util.AbstractList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.util.List<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> kafkaSpoutMessageIdListKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.util.AbstractList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.util.List<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> kafkaSpoutMessageIdListKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<java.util.AbstractList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.util.List<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>(kafkaSpoutMessageIdListKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0307");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.util.ArrayList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.util.Collection<org.apache.kafka.common.TopicPartition>> kafkaSpoutMessageIdListKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.util.ArrayList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.util.Collection<org.apache.kafka.common.TopicPartition>> kafkaSpoutMessageIdListKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<java.util.ArrayList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.util.Collection<org.apache.kafka.common.TopicPartition>>(kafkaSpoutMessageIdListKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0308");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray5 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet6, kafkaSpoutMessageIdArray5);
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet6;
        java.util.Map<org.apache.kafka.common.TopicPartition, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>.OffsetEntry> topicPartitionMap9 = null;
        offsetComparatorKafkaSpout0.acked = topicPartitionMap9;
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService11 = offsetComparatorKafkaSpout0.retryService;
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService12 = offsetComparatorKafkaSpout0.retryService;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = offsetComparatorKafkaSpout0.getNamedTopics();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(kafkaSpoutRetryService11);
        org.junit.Assert.assertNull(kafkaSpoutRetryService12);
    }

    @Test
    public void test0309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0309");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean1 = offsetComparatorKafkaSpout0.consumerAutoCommitMode;
        org.apache.kafka.common.TopicPartition topicPartition2 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection3 = offsetComparatorKafkaSpout0.toArrayList(topicPartition2);
        org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy firstPollOffsetStrategy4 = null;
        offsetComparatorKafkaSpout0.firstPollOffsetStrategy = firstPollOffsetStrategy4;
        org.apache.storm.kafka.spout.internal.KafkaConsumerFactory kafkaConsumerFactory6 = null;
        offsetComparatorKafkaSpout0.kafkaConsumerFactory = kafkaConsumerFactory6;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = offsetComparatorKafkaSpout0.getNamedTopics();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(topicPartitionCollection3);
    }

    @Test
    public void test0310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0310");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.kafka.common.TopicPartition topicPartition1 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection2 = offsetComparatorKafkaSpout0.toArrayList(topicPartition1);
        org.apache.storm.spout.SpoutOutputCollector spoutOutputCollector3 = null;
        offsetComparatorKafkaSpout0.collector = spoutOutputCollector3;
        org.apache.storm.spout.SpoutOutputCollector spoutOutputCollector5 = offsetComparatorKafkaSpout0.collector;
        boolean boolean6 = offsetComparatorKafkaSpout0.consumerAutoCommitMode;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.activate();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection2);
        org.junit.Assert.assertNull(spoutOutputCollector5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0311");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.kafka.common.TopicPartition topicPartition1 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection2 = offsetComparatorKafkaSpout0.toArrayList(topicPartition1);
        org.apache.storm.spout.SpoutOutputCollector spoutOutputCollector3 = null;
        offsetComparatorKafkaSpout0.collector = spoutOutputCollector3;
        org.apache.storm.spout.SpoutOutputCollector spoutOutputCollector5 = offsetComparatorKafkaSpout0.collector;
        boolean boolean6 = offsetComparatorKafkaSpout0.consumerAutoCommitMode;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection2);
        org.junit.Assert.assertNull(spoutOutputCollector5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0312");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig5 = offsetComparatorKafkaSpout0.kafkaSpoutConfig;
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig6 = offsetComparatorKafkaSpout0.kafkaSpoutConfig;
        boolean boolean7 = offsetComparatorKafkaSpout0.waitingToEmit();
        offsetComparatorKafkaSpout0.consumerAutoCommitMode = false;
        java.util.Map<org.apache.kafka.common.TopicPartition, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>.OffsetEntry> topicPartitionMap10 = offsetComparatorKafkaSpout0.acked;
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService11 = offsetComparatorKafkaSpout0.retryService;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.doSeekRetriableTopicPartitions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNull(offsetComparatorKafkaSpoutConfig5);
        org.junit.Assert.assertNull(offsetComparatorKafkaSpoutConfig6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(topicPartitionMap10);
        org.junit.Assert.assertNull(kafkaSpoutRetryService11);
    }

    @Test
    public void test0313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0313");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.lang.reflect.AnnotatedElement, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> annotatedElementKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.AnnotatedElement, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> annotatedElementKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.AnnotatedElement, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>(annotatedElementKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0314");
        java.lang.Object obj3 = null;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout7 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor8 = null;
        offsetComparatorKafkaSpout7.waitingToEmit = offsetComparatorConsumerRecordItor8;
        org.apache.kafka.common.TopicPartition topicPartition10 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection11 = offsetComparatorKafkaSpout7.toArrayList(topicPartition10);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray12 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet13 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet13, kafkaSpoutMessageIdArray12);
        offsetComparatorKafkaSpout7.emitted = kafkaSpoutMessageIdSet13;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout19 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor20 = null;
        offsetComparatorKafkaSpout19.waitingToEmit = offsetComparatorConsumerRecordItor20;
        org.apache.kafka.common.TopicPartition topicPartition22 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection23 = offsetComparatorKafkaSpout19.toArrayList(topicPartition22);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray24 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet25 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet25, kafkaSpoutMessageIdArray24);
        offsetComparatorKafkaSpout19.emitted = kafkaSpoutMessageIdSet25;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor28 = null;
        offsetComparatorKafkaSpout19.waitingToEmit = offsetComparatorConsumerRecordItor28;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator36 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout37 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer38 = null;
        offsetComparatorKafkaSpout37.kafkaConsumer = offsetComparatorKafkaConsumer38;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout40 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean41 = offsetComparatorKafkaSpout40.consumerAutoCommitMode;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray42 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet43 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet43, kafkaSpoutMessageIdArray42);
        offsetComparatorKafkaSpout40.emitted = kafkaSpoutMessageIdSet43;
        offsetComparatorKafkaSpout37.emitted = kafkaSpoutMessageIdSet43;
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> offsetComparatorConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)", (int) (short) -1, (long) 0, offsetComparator36, (java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet43);
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> iComponentKafkaSpout48 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.topology.IRichSpout> kafkaSpoutMessageIdSetConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.topology.IRichSpout>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)", (int) (byte) -1, (long) 1, kafkaSpoutMessageIdSet43, (org.apache.storm.topology.IRichSpout) iComponentKafkaSpout48);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>, java.lang.Cloneable> offsetComparatorKafkaSpoutConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>, java.lang.Cloneable>("", (int) (byte) 1, (long) '4', offsetComparatorKafkaSpout19, (java.lang.Cloneable) kafkaSpoutMessageIdSet43);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> serializableConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>("", (int) 'a', (long) (short) 0, (java.io.Serializable) offsetComparatorKafkaSpout7, (java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet43);
        offsetComparatorKafkaSpout7.numUncommittedOffsets = 52L;
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer54 = null;
        offsetComparatorKafkaSpout7.kafkaConsumer = offsetComparatorKafkaConsumer54;
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer56 = offsetComparatorKafkaSpout7.kafkaConsumer;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("KafkaSpout{acked=null, emitted=null}", 1, (long) (short) -1, obj3, (java.io.Serializable) offsetComparatorKafkaSpout7);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean58 = offsetComparatorKafkaSpout7.poll();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection11);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(topicPartitionCollection23);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(offsetComparatorKafkaConsumer56);
    }

    @Test
    public void test0315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0315");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean1 = offsetComparatorKafkaSpout0.consumerAutoCommitMode;
        org.apache.kafka.common.TopicPartition topicPartition2 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection3 = offsetComparatorKafkaSpout0.toArrayList(topicPartition2);
        long long4 = offsetComparatorKafkaSpout0.numUncommittedOffsets;
        long long5 = offsetComparatorKafkaSpout0.numUncommittedOffsets;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor6 = offsetComparatorKafkaSpout0.waitingToEmit;
        offsetComparatorKafkaSpout0.consumerAutoCommitMode = true;
        long long9 = offsetComparatorKafkaSpout0.numUncommittedOffsets;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.nextTuple();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(topicPartitionCollection3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(offsetComparatorConsumerRecordItor6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test0316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0316");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType12 = null;
        java.lang.Object obj16 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord18 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("", 10, (long) (byte) -1, (long) '4', timestampType12, (long) (byte) 0, (int) (short) 10, (int) (byte) 100, obj16, (java.io.Serializable) 1);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String> objConsumerRecordConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String>("", (int) 'a', (long) (short) 10, (long) (byte) -1, timestampType4, (long) 'a', (int) (byte) -1, 0, objConsumerRecord18, "hi!");
        long long21 = objConsumerRecord18.checksum();
        java.util.Optional<java.lang.Integer> intOptional22 = objConsumerRecord18.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType23 = objConsumerRecord18.timestampType();
        long long24 = objConsumerRecord18.offset();
        org.apache.kafka.common.header.Headers headers25 = objConsumerRecord18.headers();
        int int26 = objConsumerRecord18.partition();
        int int27 = objConsumerRecord18.serializedKeySize();
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(intOptional22);
        org.junit.Assert.assertNull(timestampType23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertNotNull(headers25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
    }

    @Test
    public void test0317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0317");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.lang.Comparable<java.lang.String>, org.apache.kafka.common.record.TimestampType> strComparableKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.lang.Comparable<java.lang.String>, org.apache.kafka.common.record.TimestampType> strComparableKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.Comparable<java.lang.String>, org.apache.kafka.common.record.TimestampType>(strComparableKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0318");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        java.util.concurrent.TimeUnit timeUnit3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.base.BaseComponent, java.lang.Cloneable>.Timer timer4 = kafkaSpout0.new Timer((long) 10, 52L, timeUnit3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$Timer with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0319");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.io.Serializable, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> serializableKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.io.Serializable, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> serializableKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<java.io.Serializable, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>(serializableKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0320");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.CharSequence, org.apache.kafka.common.record.TimestampType> charSequenceKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.CharSequence, org.apache.kafka.common.record.TimestampType>();
    }

    @Test
    public void test0321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0321");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor3 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor3;
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig5 = null;
        offsetComparatorKafkaSpout0.kafkaSpoutConfig = offsetComparatorKafkaSpoutConfig5;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor7 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor7;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = offsetComparatorKafkaSpout0.getNamedTopics();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0322");
        org.apache.storm.kafka.spout.KafkaSpout<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> kafkaSpoutMessageIdComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>();
        java.lang.Class<?> wildcardClass1 = kafkaSpoutMessageIdComparatorKafkaSpout0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test0323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0323");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        java.lang.Object obj8 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("", 10, (long) (byte) -1, (long) '4', timestampType4, (long) (byte) 0, (int) (short) 10, (int) (byte) 100, obj8, (java.io.Serializable) 1);
        long long11 = objConsumerRecord10.checksum();
        int int12 = objConsumerRecord10.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional13 = objConsumerRecord10.leaderEpoch();
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(intOptional13);
    }

    @Test
    public void test0324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0324");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer1 = null;
        offsetComparatorKafkaSpout0.kafkaConsumer = offsetComparatorKafkaConsumer1;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout3 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean4 = offsetComparatorKafkaSpout3.consumerAutoCommitMode;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray5 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet6, kafkaSpoutMessageIdArray5);
        offsetComparatorKafkaSpout3.emitted = kafkaSpoutMessageIdSet6;
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet6;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.doSeekRetriableTopicPartitions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0325");
        org.apache.storm.kafka.spout.KafkaSpout<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.reflect.GenericDeclaration> kafkaSpoutMessageIdComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.reflect.GenericDeclaration>();
    }

    @Test
    public void test0326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0326");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator0 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator0;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator2 = offsetComparator0.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator4 = kafkaSpoutMessageIdComparator2.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator5 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator5;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator7 = offsetComparator5.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator8 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator9 = kafkaSpoutMessageIdComparator7.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator8);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator7;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator11 = org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator12 = kafkaSpoutMessageIdComparator7.thenComparing(kafkaSpoutMessageIdComparator11);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator13 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator13;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator15 = offsetComparator13.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator16 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator17 = kafkaSpoutMessageIdComparator15.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator16);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator18 = kafkaSpoutMessageIdComparator17.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator19 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator19;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator21 = offsetComparator19.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator22 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator23 = kafkaSpoutMessageIdComparator21.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator22);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator22;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator25 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator26 = offsetComparator22.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator25);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator27 = kafkaSpoutMessageIdComparator17.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator22);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator28 = kafkaSpoutMessageIdComparator11.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator22);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator29 = offsetComparator3.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator22);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator30 = offsetComparator3.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator31 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator31;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator33 = offsetComparator31.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator34 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator35 = kafkaSpoutMessageIdComparator33.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator34);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator36 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator36;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator38 = kafkaSpoutMessageIdComparator33.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator36);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator39 = offsetComparator3.thenComparing(kafkaSpoutMessageIdComparator33);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator3;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId41 = null;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId42 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int43 = offsetComparator3.compare(kafkaSpoutMessageId41, kafkaSpoutMessageId42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator2);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator7);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator9);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator11);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator12);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator15);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator17);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator18);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator21);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator23);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator26);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator27);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator28);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator29);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator30);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator33);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator35);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator38);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator39);
    }

    @Test
    public void test0327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0327");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean1 = offsetComparatorKafkaSpout0.consumerAutoCommitMode;
        org.apache.kafka.common.TopicPartition topicPartition2 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection3 = offsetComparatorKafkaSpout0.toArrayList(topicPartition2);
        long long4 = offsetComparatorKafkaSpout0.numUncommittedOffsets;
        long long5 = offsetComparatorKafkaSpout0.numUncommittedOffsets;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor6 = offsetComparatorKafkaSpout0.waitingToEmit;
        offsetComparatorKafkaSpout0.consumerAutoCommitMode = true;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout9 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor10 = null;
        offsetComparatorKafkaSpout9.waitingToEmit = offsetComparatorConsumerRecordItor10;
        org.apache.kafka.common.TopicPartition topicPartition12 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection13 = offsetComparatorKafkaSpout9.toArrayList(topicPartition12);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray14 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet15 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet15, kafkaSpoutMessageIdArray14);
        offsetComparatorKafkaSpout9.emitted = kafkaSpoutMessageIdSet15;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor18 = null;
        offsetComparatorKafkaSpout9.waitingToEmit = offsetComparatorConsumerRecordItor18;
        org.apache.storm.kafka.spout.internal.KafkaConsumerFactory kafkaConsumerFactory20 = offsetComparatorKafkaSpout9.kafkaConsumerFactory;
        java.lang.String str21 = offsetComparatorKafkaSpout9.toString();
        java.util.Set<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet22 = offsetComparatorKafkaSpout9.emitted;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.ack((java.lang.Object) kafkaSpoutMessageIdSet22);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.util.LinkedHashSet cannot be cast to org.apache.storm.kafka.spout.KafkaSpoutMessageId");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(topicPartitionCollection3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(offsetComparatorConsumerRecordItor6);
        org.junit.Assert.assertNotNull(topicPartitionCollection13);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(kafkaConsumerFactory20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "KafkaSpout{acked=null, emitted=[]}" + "'", str21, "KafkaSpout{acked=null, emitted=[]}");
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdSet22);
    }

    @Test
    public void test0328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0328");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray5 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet6, kafkaSpoutMessageIdArray5);
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet6;
        java.util.Map<org.apache.kafka.common.TopicPartition, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>.OffsetEntry> topicPartitionMap9 = null;
        offsetComparatorKafkaSpout0.acked = topicPartitionMap9;
        java.util.Map<org.apache.kafka.common.TopicPartition, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>.OffsetEntry> topicPartitionMap11 = offsetComparatorKafkaSpout0.acked;
        int int12 = offsetComparatorKafkaSpout0.maxRetries;
        org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy firstPollOffsetStrategy13 = null;
        offsetComparatorKafkaSpout0.firstPollOffsetStrategy = firstPollOffsetStrategy13;
        org.apache.kafka.clients.consumer.ConsumerRecords<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorConsumerRecords15 = null;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.setWaitingToEmit(offsetComparatorConsumerRecords15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(topicPartitionMap11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test0329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0329");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout3 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor4 = null;
        offsetComparatorKafkaSpout3.waitingToEmit = offsetComparatorConsumerRecordItor4;
        org.apache.kafka.common.TopicPartition topicPartition6 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection7 = offsetComparatorKafkaSpout3.toArrayList(topicPartition6);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray8 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet9 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet9, kafkaSpoutMessageIdArray8);
        offsetComparatorKafkaSpout3.emitted = kafkaSpoutMessageIdSet9;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout15 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor16 = null;
        offsetComparatorKafkaSpout15.waitingToEmit = offsetComparatorConsumerRecordItor16;
        org.apache.kafka.common.TopicPartition topicPartition18 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection19 = offsetComparatorKafkaSpout15.toArrayList(topicPartition18);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray20 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet21 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet21, kafkaSpoutMessageIdArray20);
        offsetComparatorKafkaSpout15.emitted = kafkaSpoutMessageIdSet21;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor24 = null;
        offsetComparatorKafkaSpout15.waitingToEmit = offsetComparatorConsumerRecordItor24;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator32 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout33 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer34 = null;
        offsetComparatorKafkaSpout33.kafkaConsumer = offsetComparatorKafkaConsumer34;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout36 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean37 = offsetComparatorKafkaSpout36.consumerAutoCommitMode;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray38 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet39 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet39, kafkaSpoutMessageIdArray38);
        offsetComparatorKafkaSpout36.emitted = kafkaSpoutMessageIdSet39;
        offsetComparatorKafkaSpout33.emitted = kafkaSpoutMessageIdSet39;
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> offsetComparatorConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)", (int) (short) -1, (long) 0, offsetComparator32, (java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet39);
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> iComponentKafkaSpout44 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.topology.IRichSpout> kafkaSpoutMessageIdSetConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.topology.IRichSpout>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)", (int) (byte) -1, (long) 1, kafkaSpoutMessageIdSet39, (org.apache.storm.topology.IRichSpout) iComponentKafkaSpout44);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>, java.lang.Cloneable> offsetComparatorKafkaSpoutConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>, java.lang.Cloneable>("", (int) (byte) 1, (long) '4', offsetComparatorKafkaSpout15, (java.lang.Cloneable) kafkaSpoutMessageIdSet39);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>("", (int) 'a', (long) (short) 0, (java.io.Serializable) offsetComparatorKafkaSpout3, (java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet39);
        org.apache.storm.kafka.spout.KafkaSpoutTuplesBuilder<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutTuplesBuilder48 = null;
        offsetComparatorKafkaSpout3.tuplesBuilder = offsetComparatorKafkaSpoutTuplesBuilder48;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.kafka.clients.consumer.ConsumerRecords<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorConsumerRecords50 = offsetComparatorKafkaSpout3.pollKafkaBroker();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection7);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(topicPartitionCollection19);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test0330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0330");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator3;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator5 = offsetComparator3.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator6 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator7 = kafkaSpoutMessageIdComparator5.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator6);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator5;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator9 = org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator10 = kafkaSpoutMessageIdComparator5.thenComparing(kafkaSpoutMessageIdComparator9);
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout11 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean12 = offsetComparatorKafkaSpout11.consumerAutoCommitMode;
        org.apache.kafka.common.TopicPartition topicPartition13 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection14 = offsetComparatorKafkaSpout11.toArrayList(topicPartition13);
        org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy firstPollOffsetStrategy15 = null;
        offsetComparatorKafkaSpout11.firstPollOffsetStrategy = firstPollOffsetStrategy15;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("", (int) '#', (long) (short) 100, (java.lang.Object) kafkaSpoutMessageIdComparator10, (java.io.Serializable) offsetComparatorKafkaSpout11);
        long long18 = objConsumerRecord17.timestamp();
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator5);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator7);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator9);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(topicPartitionCollection14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
    }

    @Test
    public void test0331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0331");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.lang.reflect.AnnotatedElement, java.lang.Iterable<org.apache.kafka.common.TopicPartition>> annotatedElementKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.AnnotatedElement, java.lang.Iterable<org.apache.kafka.common.TopicPartition>> annotatedElementKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.AnnotatedElement, java.lang.Iterable<org.apache.kafka.common.TopicPartition>>(annotatedElementKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0332");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean1 = offsetComparatorKafkaSpout0.consumerAutoCommitMode;
        int int2 = offsetComparatorKafkaSpout0.maxRetries;
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer3 = null;
        offsetComparatorKafkaSpout0.kafkaConsumer = offsetComparatorKafkaConsumer3;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.activate();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test0333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0333");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator0 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator0;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator2 = offsetComparator0.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator4 = kafkaSpoutMessageIdComparator2.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator2;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator6 = org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator7 = kafkaSpoutMessageIdComparator2.thenComparing(kafkaSpoutMessageIdComparator6);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator8 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator8;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator10 = offsetComparator8.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator11 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator12 = kafkaSpoutMessageIdComparator10.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator11);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator13 = kafkaSpoutMessageIdComparator12.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator14 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator14;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator16 = offsetComparator14.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator17 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator18 = kafkaSpoutMessageIdComparator16.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator17);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator17;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator20 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator21 = offsetComparator17.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator20);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator22 = kafkaSpoutMessageIdComparator12.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator17);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator23 = kafkaSpoutMessageIdComparator6.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator17);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator17;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator25 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator25;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator27 = offsetComparator25.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator28 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator29 = kafkaSpoutMessageIdComparator27.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator28);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator30 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator30;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator32 = kafkaSpoutMessageIdComparator27.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator30);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator33 = offsetComparator17.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator30);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId34 = null;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId35 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int36 = offsetComparator17.compare(kafkaSpoutMessageId34, kafkaSpoutMessageId35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator2);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator6);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator7);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator10);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator12);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator13);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator16);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator18);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator21);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator22);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator23);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator27);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator29);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator32);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator33);
    }

    @Test
    public void test0334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0334");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.lang.CharSequence, java.util.List<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> charSequenceKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.lang.CharSequence, java.util.List<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> charSequenceKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.CharSequence, java.util.List<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>(charSequenceKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0335");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray5 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet6, kafkaSpoutMessageIdArray5);
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet6;
        offsetComparatorKafkaSpout0.maxRetries = 100;
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService11 = null;
        offsetComparatorKafkaSpout0.retryService = kafkaSpoutRetryService11;
        org.apache.storm.kafka.spout.KafkaSpoutStreams kafkaSpoutStreams13 = offsetComparatorKafkaSpout0.kafkaSpoutStreams;
        offsetComparatorKafkaSpout0.initialized = false;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = offsetComparatorKafkaSpout0.getNamedTopics();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(kafkaSpoutStreams13);
    }

    @Test
    public void test0336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0336");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType12 = null;
        org.apache.kafka.common.record.TimestampType timestampType20 = null;
        java.lang.Object obj24 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("", 10, (long) (byte) -1, (long) '4', timestampType20, (long) (byte) 0, (int) (short) 10, (int) (byte) 100, obj24, (java.io.Serializable) 1);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String> objConsumerRecordConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String>("", (int) 'a', (long) (short) 10, (long) (byte) -1, timestampType12, (long) 'a', (int) (byte) -1, 0, objConsumerRecord26, "hi!");
        long long29 = objConsumerRecord26.checksum();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("", (int) (short) 100, (long) 100, (long) (short) 100, timestampType4, (long) '4', (int) (byte) 10, (int) (short) 10, (java.lang.Object) objConsumerRecord26, (java.io.Serializable) 1L);
        long long32 = objConsumerRecord26.checksum();
        org.apache.kafka.common.record.TimestampType timestampType33 = objConsumerRecord26.timestampType();
        java.lang.String str34 = objConsumerRecord26.toString();
        java.util.Optional<java.lang.Integer> intOptional35 = objConsumerRecord26.leaderEpoch();
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNull(timestampType33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)" + "'", str34, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)");
        org.junit.Assert.assertNotNull(intOptional35);
    }

    @Test
    public void test0337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0337");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType12 = null;
        org.apache.kafka.common.record.TimestampType timestampType20 = null;
        java.lang.Object obj24 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("", 10, (long) (byte) -1, (long) '4', timestampType20, (long) (byte) 0, (int) (short) 10, (int) (byte) 100, obj24, (java.io.Serializable) 1);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String> objConsumerRecordConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String>("", (int) 'a', (long) (short) 10, (long) (byte) -1, timestampType12, (long) 'a', (int) (byte) -1, 0, objConsumerRecord26, "hi!");
        long long29 = objConsumerRecord26.checksum();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("", (int) (short) 100, (long) 100, (long) (short) 100, timestampType4, (long) '4', (int) (byte) 10, (int) (short) 10, (java.lang.Object) objConsumerRecord26, (java.io.Serializable) 1L);
        java.lang.String str32 = objConsumerRecord31.toString();
        java.lang.Class<?> wildcardClass33 = objConsumerRecord31.getClass();
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 100, null = 100, serialized key size = 10, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1), value = 1)" + "'", str32, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 100, null = 100, serialized key size = 10, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1), value = 1)");
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0338");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig5 = offsetComparatorKafkaSpout0.kafkaSpoutConfig;
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig6 = offsetComparatorKafkaSpout0.kafkaSpoutConfig;
        boolean boolean7 = offsetComparatorKafkaSpout0.waitingToEmit();
        org.apache.kafka.common.TopicPartition topicPartition8 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection9 = offsetComparatorKafkaSpout0.toArrayList(topicPartition8);
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer10 = null;
        offsetComparatorKafkaSpout0.kafkaConsumer = offsetComparatorKafkaConsumer10;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.deactivate();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNull(offsetComparatorKafkaSpoutConfig5);
        org.junit.Assert.assertNull(offsetComparatorKafkaSpoutConfig6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(topicPartitionCollection9);
    }

    @Test
    public void test0339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0339");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig5 = offsetComparatorKafkaSpout0.kafkaSpoutConfig;
        org.apache.storm.spout.SpoutOutputCollector spoutOutputCollector6 = offsetComparatorKafkaSpout0.collector;
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig7 = null;
        offsetComparatorKafkaSpout0.kafkaSpoutConfig = offsetComparatorKafkaSpoutConfig7;
        java.util.Map map9 = null;
        org.apache.storm.task.TopologyContext topologyContext10 = null;
        org.apache.storm.spout.SpoutOutputCollector spoutOutputCollector11 = null;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.open(map9, topologyContext10, spoutOutputCollector11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNull(offsetComparatorKafkaSpoutConfig5);
        org.junit.Assert.assertNull(spoutOutputCollector6);
    }

    @Test
    public void test0340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0340");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig5 = offsetComparatorKafkaSpout0.kafkaSpoutConfig;
        org.apache.storm.spout.SpoutOutputCollector spoutOutputCollector6 = offsetComparatorKafkaSpout0.collector;
        java.util.Set<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet7 = offsetComparatorKafkaSpout0.emitted;
        org.apache.storm.kafka.spout.internal.KafkaConsumerFactory kafkaConsumerFactory8 = null;
        offsetComparatorKafkaSpout0.kafkaConsumerFactory = kafkaConsumerFactory8;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.subscribeKafkaConsumer();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNull(offsetComparatorKafkaSpoutConfig5);
        org.junit.Assert.assertNull(spoutOutputCollector6);
        org.junit.Assert.assertNull(kafkaSpoutMessageIdSet7);
    }

    @Test
    public void test0341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0341");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray5 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet6, kafkaSpoutMessageIdArray5);
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet6;
        java.util.Map<org.apache.kafka.common.TopicPartition, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>.OffsetEntry> topicPartitionMap9 = null;
        offsetComparatorKafkaSpout0.acked = topicPartitionMap9;
        java.util.Map<org.apache.kafka.common.TopicPartition, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>.OffsetEntry> topicPartitionMap11 = offsetComparatorKafkaSpout0.acked;
        java.util.Map map12 = null;
        org.apache.storm.task.TopologyContext topologyContext13 = null;
        org.apache.storm.spout.SpoutOutputCollector spoutOutputCollector14 = null;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.open(map12, topologyContext13, spoutOutputCollector14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(topicPartitionMap11);
    }

    @Test
    public void test0342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0342");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout6 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor7 = null;
        offsetComparatorKafkaSpout6.waitingToEmit = offsetComparatorConsumerRecordItor7;
        org.apache.kafka.common.TopicPartition topicPartition9 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection10 = offsetComparatorKafkaSpout6.toArrayList(topicPartition9);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray11 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet12 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet12, kafkaSpoutMessageIdArray11);
        offsetComparatorKafkaSpout6.emitted = kafkaSpoutMessageIdSet12;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor15 = null;
        offsetComparatorKafkaSpout6.waitingToEmit = offsetComparatorConsumerRecordItor15;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator23 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout24 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer25 = null;
        offsetComparatorKafkaSpout24.kafkaConsumer = offsetComparatorKafkaConsumer25;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout27 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean28 = offsetComparatorKafkaSpout27.consumerAutoCommitMode;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray29 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet30 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet30, kafkaSpoutMessageIdArray29);
        offsetComparatorKafkaSpout27.emitted = kafkaSpoutMessageIdSet30;
        offsetComparatorKafkaSpout24.emitted = kafkaSpoutMessageIdSet30;
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> offsetComparatorConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)", (int) (short) -1, (long) 0, offsetComparator23, (java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet30);
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> iComponentKafkaSpout35 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.topology.IRichSpout> kafkaSpoutMessageIdSetConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.topology.IRichSpout>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)", (int) (byte) -1, (long) 1, kafkaSpoutMessageIdSet30, (org.apache.storm.topology.IRichSpout) iComponentKafkaSpout35);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>, java.lang.Cloneable> offsetComparatorKafkaSpoutConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>, java.lang.Cloneable>("", (int) (byte) 1, (long) '4', offsetComparatorKafkaSpout6, (java.lang.Cloneable) kafkaSpoutMessageIdSet30);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)", (int) (short) 0, (long) 10, (java.lang.Object) kafkaSpoutMessageIdSet30, (java.io.Serializable) 0);
        java.lang.String str40 = objConsumerRecord39.topic();
        org.apache.kafka.common.record.TimestampType timestampType41 = objConsumerRecord39.timestampType();
        java.io.Serializable serializable42 = objConsumerRecord39.value();
        long long43 = objConsumerRecord39.checksum();
        org.junit.Assert.assertNotNull(topicPartitionCollection10);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)" + "'", str40, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)");
        org.junit.Assert.assertTrue("'" + timestampType41 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType41.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable42 + "' != '" + 0 + "'", serializable42, 0);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-1L) + "'", long43 == (-1L));
    }

    @Test
    public void test0343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0343");
        org.apache.storm.kafka.spout.KafkaSpout<java.io.Serializable, org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>> serializableKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.io.Serializable, org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>>();
    }

    @Test
    public void test0344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0344");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.lang.String, org.apache.storm.topology.IRichSpout>.KafkaSpoutConsumerRebalanceListener kafkaSpoutConsumerRebalanceListener1 = kafkaSpout0.new KafkaSpoutConsumerRebalanceListener();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$KafkaSpoutConsumerRebalanceListener with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0345");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer1 = null;
        offsetComparatorKafkaSpout0.kafkaConsumer = offsetComparatorKafkaConsumer1;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout3 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean4 = offsetComparatorKafkaSpout3.consumerAutoCommitMode;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray5 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet6, kafkaSpoutMessageIdArray5);
        offsetComparatorKafkaSpout3.emitted = kafkaSpoutMessageIdSet6;
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet6;
        java.util.Map<org.apache.kafka.common.TopicPartition, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>.OffsetEntry> topicPartitionMap10 = null;
        offsetComparatorKafkaSpout0.acked = topicPartitionMap10;
        org.apache.storm.spout.SpoutOutputCollector spoutOutputCollector12 = null;
        offsetComparatorKafkaSpout0.collector = spoutOutputCollector12;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.kafka.clients.consumer.ConsumerRecords<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorConsumerRecords14 = offsetComparatorKafkaSpout0.pollKafkaBroker();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0346");
        org.apache.storm.kafka.spout.KafkaSpout<java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.kafka.common.header.Headers> kafkaSpoutMessageIdSetKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.kafka.common.header.Headers>();
    }

    @Test
    public void test0347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0347");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService5 = offsetComparatorKafkaSpout0.retryService;
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer6 = null;
        offsetComparatorKafkaSpout0.kafkaConsumer = offsetComparatorKafkaConsumer6;
        boolean boolean8 = offsetComparatorKafkaSpout0.initialized;
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNull(kafkaSpoutRetryService5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0348");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.lang.Iterable<org.apache.kafka.common.TopicPartition>, java.lang.reflect.Type> topicPartitionIterableKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.lang.Iterable<org.apache.kafka.common.TopicPartition>, java.lang.reflect.Type> topicPartitionIterableKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.Iterable<org.apache.kafka.common.TopicPartition>, java.lang.reflect.Type>(topicPartitionIterableKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0349");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.lang.String, java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>.OffsetEntry offsetEntry1 = kafkaSpout0.new OffsetEntry();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$OffsetEntry with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0350");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.storm.kafka.spout.internal.KafkaConsumerFactory kafkaConsumerFactory1 = null;
        offsetComparatorKafkaSpout0.kafkaConsumerFactory = kafkaConsumerFactory1;
        org.apache.storm.spout.SpoutOutputCollector spoutOutputCollector3 = offsetComparatorKafkaSpout0.collector;
        java.util.Map map4 = null;
        org.apache.storm.task.TopologyContext topologyContext5 = null;
        org.apache.storm.spout.SpoutOutputCollector spoutOutputCollector6 = null;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.open(map4, topologyContext5, spoutOutputCollector6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(spoutOutputCollector3);
    }

    @Test
    public void test0351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0351");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.storm.kafka.spout.internal.KafkaConsumerFactory kafkaConsumerFactory1 = null;
        offsetComparatorKafkaSpout0.kafkaConsumerFactory = kafkaConsumerFactory1;
        org.apache.storm.spout.SpoutOutputCollector spoutOutputCollector3 = offsetComparatorKafkaSpout0.collector;
        org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy firstPollOffsetStrategy4 = offsetComparatorKafkaSpout0.firstPollOffsetStrategy;
        org.apache.kafka.common.TopicPartition topicPartition5 = null;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.setAcked(topicPartition5, (long) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(spoutOutputCollector3);
        org.junit.Assert.assertNull(firstPollOffsetStrategy4);
    }

    @Test
    public void test0352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0352");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig5 = offsetComparatorKafkaSpout0.kafkaSpoutConfig;
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig6 = offsetComparatorKafkaSpout0.kafkaSpoutConfig;
        boolean boolean7 = offsetComparatorKafkaSpout0.waitingToEmit();
        org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy firstPollOffsetStrategy8 = offsetComparatorKafkaSpout0.firstPollOffsetStrategy;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean9 = offsetComparatorKafkaSpout0.poll();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNull(offsetComparatorKafkaSpoutConfig5);
        org.junit.Assert.assertNull(offsetComparatorKafkaSpoutConfig6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(firstPollOffsetStrategy8);
    }

    @Test
    public void test0353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0353");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray5 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet6, kafkaSpoutMessageIdArray5);
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet6;
        offsetComparatorKafkaSpout0.maxRetries = 100;
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService11 = null;
        offsetComparatorKafkaSpout0.retryService = kafkaSpoutRetryService11;
        org.apache.storm.kafka.spout.KafkaSpoutStreams kafkaSpoutStreams13 = offsetComparatorKafkaSpout0.kafkaSpoutStreams;
        boolean boolean14 = offsetComparatorKafkaSpout0.initialized;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.emit();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(kafkaSpoutStreams13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0354");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator0 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator0;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator2 = offsetComparator0.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator4 = kafkaSpoutMessageIdComparator2.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator2;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator6 = org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator7 = kafkaSpoutMessageIdComparator2.thenComparing(kafkaSpoutMessageIdComparator6);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator8 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator8;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator10 = offsetComparator8.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator11 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator12 = kafkaSpoutMessageIdComparator10.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator11);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator13 = kafkaSpoutMessageIdComparator12.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator14 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator14;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator16 = offsetComparator14.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator17 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator18 = kafkaSpoutMessageIdComparator16.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator17);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator17;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator20 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator21 = offsetComparator17.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator20);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator22 = kafkaSpoutMessageIdComparator12.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator17);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator23 = kafkaSpoutMessageIdComparator6.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator17);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator24 = offsetComparator17.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator24;
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator2);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator6);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator7);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator10);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator12);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator13);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator16);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator18);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator21);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator22);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator23);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator24);
    }

    @Test
    public void test0355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0355");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.storm.kafka.spout.internal.KafkaConsumerFactory kafkaConsumerFactory1 = null;
        offsetComparatorKafkaSpout0.kafkaConsumerFactory = kafkaConsumerFactory1;
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer3 = offsetComparatorKafkaSpout0.kafkaConsumer;
        boolean boolean4 = offsetComparatorKafkaSpout0.waitingToEmit();
        org.apache.kafka.clients.consumer.ConsumerRecords<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorConsumerRecords5 = null;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.setWaitingToEmit(offsetComparatorConsumerRecords5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(offsetComparatorKafkaConsumer3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0356");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray5 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet6, kafkaSpoutMessageIdArray5);
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet6;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor9 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor9;
        org.apache.storm.kafka.spout.internal.KafkaConsumerFactory kafkaConsumerFactory11 = offsetComparatorKafkaSpout0.kafkaConsumerFactory;
        java.lang.String str12 = offsetComparatorKafkaSpout0.toString();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor13 = offsetComparatorKafkaSpout0.waitingToEmit;
        org.apache.storm.kafka.spout.internal.KafkaConsumerFactory kafkaConsumerFactory14 = null;
        offsetComparatorKafkaSpout0.kafkaConsumerFactory = kafkaConsumerFactory14;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.deactivate();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(kafkaConsumerFactory11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "KafkaSpout{acked=null, emitted=[]}" + "'", str12, "KafkaSpout{acked=null, emitted=[]}");
        org.junit.Assert.assertNull(offsetComparatorConsumerRecordItor13);
    }

    @Test
    public void test0357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0357");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean1 = offsetComparatorKafkaSpout0.consumerAutoCommitMode;
        int int2 = offsetComparatorKafkaSpout0.maxRetries;
        java.util.Map map3 = null;
        org.apache.storm.task.TopologyContext topologyContext4 = null;
        org.apache.storm.spout.SpoutOutputCollector spoutOutputCollector5 = null;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.open(map3, topologyContext4, spoutOutputCollector5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test0358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0358");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray5 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet6, kafkaSpoutMessageIdArray5);
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet6;
        java.util.Map<org.apache.kafka.common.TopicPartition, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>.OffsetEntry> topicPartitionMap9 = null;
        offsetComparatorKafkaSpout0.acked = topicPartitionMap9;
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService11 = offsetComparatorKafkaSpout0.retryService;
        long long12 = offsetComparatorKafkaSpout0.numUncommittedOffsets;
        offsetComparatorKafkaSpout0.initialized = false;
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService15 = null;
        offsetComparatorKafkaSpout0.retryService = kafkaSpoutRetryService15;
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(kafkaSpoutRetryService11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test0359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0359");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.topology.IRichSpout> kafkaSpoutMessageIdComparatorKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.topology.IRichSpout> kafkaSpoutMessageIdComparatorKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.topology.IRichSpout>(kafkaSpoutMessageIdComparatorKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0360");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.io.Serializable, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>>.KafkaSpoutConsumerRebalanceListener kafkaSpoutConsumerRebalanceListener1 = kafkaSpout0.new KafkaSpoutConsumerRebalanceListener();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$KafkaSpoutConsumerRebalanceListener with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0361");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        org.apache.kafka.common.TopicPartition topicPartition1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.reflect.GenericDeclaration>.OffsetEntry offsetEntry3 = kafkaSpout0.new OffsetEntry(topicPartition1, (long) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$OffsetEntry with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0362");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean1 = offsetComparatorKafkaSpout0.consumerAutoCommitMode;
        org.apache.kafka.common.TopicPartition topicPartition2 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection3 = offsetComparatorKafkaSpout0.toArrayList(topicPartition2);
        org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy firstPollOffsetStrategy4 = null;
        offsetComparatorKafkaSpout0.firstPollOffsetStrategy = firstPollOffsetStrategy4;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.emit();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(topicPartitionCollection3);
    }

    @Test
    public void test0363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0363");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.lang.Comparable<java.lang.String>> timestampTypeEnumKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.lang.Comparable<java.lang.String>> timestampTypeEnumKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.lang.Comparable<java.lang.String>>(timestampTypeEnumKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0364");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.Cloneable, org.apache.storm.topology.IComponent> cloneableKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.Cloneable, org.apache.storm.topology.IComponent>();
    }

    @Test
    public void test0365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0365");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout3 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor4 = null;
        offsetComparatorKafkaSpout3.waitingToEmit = offsetComparatorConsumerRecordItor4;
        org.apache.kafka.common.TopicPartition topicPartition6 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection7 = offsetComparatorKafkaSpout3.toArrayList(topicPartition6);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray8 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet9 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet9, kafkaSpoutMessageIdArray8);
        offsetComparatorKafkaSpout3.emitted = kafkaSpoutMessageIdSet9;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout15 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor16 = null;
        offsetComparatorKafkaSpout15.waitingToEmit = offsetComparatorConsumerRecordItor16;
        org.apache.kafka.common.TopicPartition topicPartition18 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection19 = offsetComparatorKafkaSpout15.toArrayList(topicPartition18);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray20 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet21 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet21, kafkaSpoutMessageIdArray20);
        offsetComparatorKafkaSpout15.emitted = kafkaSpoutMessageIdSet21;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor24 = null;
        offsetComparatorKafkaSpout15.waitingToEmit = offsetComparatorConsumerRecordItor24;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator32 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout33 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer34 = null;
        offsetComparatorKafkaSpout33.kafkaConsumer = offsetComparatorKafkaConsumer34;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout36 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean37 = offsetComparatorKafkaSpout36.consumerAutoCommitMode;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray38 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet39 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet39, kafkaSpoutMessageIdArray38);
        offsetComparatorKafkaSpout36.emitted = kafkaSpoutMessageIdSet39;
        offsetComparatorKafkaSpout33.emitted = kafkaSpoutMessageIdSet39;
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> offsetComparatorConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)", (int) (short) -1, (long) 0, offsetComparator32, (java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet39);
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> iComponentKafkaSpout44 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.topology.IRichSpout> kafkaSpoutMessageIdSetConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.topology.IRichSpout>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)", (int) (byte) -1, (long) 1, kafkaSpoutMessageIdSet39, (org.apache.storm.topology.IRichSpout) iComponentKafkaSpout44);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>, java.lang.Cloneable> offsetComparatorKafkaSpoutConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>, java.lang.Cloneable>("", (int) (byte) 1, (long) '4', offsetComparatorKafkaSpout15, (java.lang.Cloneable) kafkaSpoutMessageIdSet39);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>("", (int) 'a', (long) (short) 0, (java.io.Serializable) offsetComparatorKafkaSpout3, (java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet39);
        offsetComparatorKafkaSpout3.numUncommittedOffsets = 52L;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout3.activate();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection7);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(topicPartitionCollection19);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test0366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0366");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer1 = null;
        offsetComparatorKafkaSpout0.kafkaConsumer = offsetComparatorKafkaConsumer1;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout3 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean4 = offsetComparatorKafkaSpout3.consumerAutoCommitMode;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray5 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet6, kafkaSpoutMessageIdArray5);
        offsetComparatorKafkaSpout3.emitted = kafkaSpoutMessageIdSet6;
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet6;
        org.apache.storm.spout.SpoutOutputCollector spoutOutputCollector10 = null;
        offsetComparatorKafkaSpout0.collector = spoutOutputCollector10;
        java.util.Map<org.apache.kafka.common.TopicPartition, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>.OffsetEntry> topicPartitionMap12 = null;
        offsetComparatorKafkaSpout0.acked = topicPartitionMap12;
        java.lang.String str14 = offsetComparatorKafkaSpout0.toString();
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.commitOffsetsForAckedTuples();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "KafkaSpout{acked=null, emitted=[]}" + "'", str14, "KafkaSpout{acked=null, emitted=[]}");
    }

    @Test
    public void test0367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0367");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray5 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet6, kafkaSpoutMessageIdArray5);
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet6;
        offsetComparatorKafkaSpout0.maxRetries = 100;
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService11 = null;
        offsetComparatorKafkaSpout0.retryService = kafkaSpoutRetryService11;
        org.apache.storm.kafka.spout.KafkaSpoutStreams kafkaSpoutStreams13 = offsetComparatorKafkaSpout0.kafkaSpoutStreams;
        boolean boolean14 = offsetComparatorKafkaSpout0.initialized;
        int int15 = offsetComparatorKafkaSpout0.maxRetries;
        org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy firstPollOffsetStrategy16 = offsetComparatorKafkaSpout0.firstPollOffsetStrategy;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(kafkaSpoutStreams13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNull(firstPollOffsetStrategy16);
    }

    @Test
    public void test0368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0368");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray5 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet6, kafkaSpoutMessageIdArray5);
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet6;
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig9 = offsetComparatorKafkaSpout0.kafkaSpoutConfig;
        org.apache.storm.kafka.spout.KafkaSpoutStreams kafkaSpoutStreams10 = offsetComparatorKafkaSpout0.kafkaSpoutStreams;
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorConsumerRecord11 = null;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.emitTupleIfNotEmitted(offsetComparatorConsumerRecord11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(offsetComparatorKafkaSpoutConfig9);
        org.junit.Assert.assertNull(kafkaSpoutStreams10);
    }

    @Test
    public void test0369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0369");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        java.lang.Object obj8 = new java.lang.Object();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("hi!", (int) (byte) 0, (long) '#', (long) 0, timestampType4, 0L, (-1), (int) (short) 0, obj8, (java.io.Serializable) 100.0f);
        java.lang.String str11 = objConsumerRecord10.topic();
        java.io.Serializable serializable12 = objConsumerRecord10.value();
        java.util.Optional<java.lang.Integer> intOptional13 = objConsumerRecord10.leaderEpoch();
        java.lang.Class<?> wildcardClass14 = intOptional13.getClass();
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + 100.0f + "'", serializable12, 100.0f);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0370");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout7 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor8 = null;
        offsetComparatorKafkaSpout7.waitingToEmit = offsetComparatorConsumerRecordItor8;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord11 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("hi!", (int) (byte) 0, 1L, (java.lang.Object) offsetComparatorConsumerRecordItor8, (java.io.Serializable) (-1));
        long long12 = objConsumerRecord11.offset();
        org.apache.kafka.common.record.TimestampType timestampType13 = objConsumerRecord11.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator17 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator17;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator19 = offsetComparator17.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator20 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator21 = kafkaSpoutMessageIdComparator19.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator20);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator20;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator23 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator24 = offsetComparator20.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator23);
        org.apache.kafka.common.record.TimestampType timestampType29 = null;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator33 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator33;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator35 = offsetComparator33.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator36 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator37 = kafkaSpoutMessageIdComparator35.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator36);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator38 = kafkaSpoutMessageIdComparator37.reversed();
        org.apache.kafka.common.record.TimestampType timestampType43 = null;
        org.apache.storm.topology.base.BaseRichSpout baseRichSpout47 = null;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray48 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.ArrayList<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdList49 = new java.util.ArrayList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdList49, kafkaSpoutMessageIdArray48);
        org.apache.kafka.common.record.TimestampType timestampType55 = null;
        org.apache.kafka.common.record.TimestampType timestampType63 = null;
        java.lang.Object obj67 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord69 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("", 10, (long) (byte) -1, (long) '4', timestampType63, (long) (byte) 0, (int) (short) 10, (int) (byte) 100, obj67, (java.io.Serializable) 1);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String> objConsumerRecordConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String>("", (int) 'a', (long) (short) 10, (long) (byte) -1, timestampType55, (long) 'a', (int) (byte) -1, 0, objConsumerRecord69, "hi!");
        long long72 = objConsumerRecord69.checksum();
        java.util.Optional<java.lang.Integer> intOptional73 = objConsumerRecord69.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType74 = objConsumerRecord69.timestampType();
        org.apache.kafka.common.header.Headers headers75 = objConsumerRecord69.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.topology.base.BaseRichSpout, java.util.AbstractCollection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> baseRichSpoutConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.topology.base.BaseRichSpout, java.util.AbstractCollection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>("", (int) (byte) 1, (long) (byte) 0, (long) ' ', timestampType43, (java.lang.Long) 1L, (int) (short) -1, (int) '4', baseRichSpout47, (java.util.AbstractCollection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdList49, headers75);
        java.lang.Class<?> wildcardClass77 = kafkaSpoutMessageIdList49.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.reflect.Type> kafkaSpoutMessageIdComparatorConsumerRecord78 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.reflect.Type>("hi!", (int) 'a', (long) (byte) 100, 1L, timestampType29, (long) (short) 0, (int) ' ', (int) (byte) 100, kafkaSpoutMessageIdComparator37, (java.lang.reflect.Type) wildcardClass77);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1), partition = 0, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = [], value = 0)", 10, (long) 10, (long) '#', timestampType13, (long) (byte) 1, (int) (byte) 10, (int) (byte) -1, (java.lang.Object) kafkaSpoutMessageIdComparator24, (java.io.Serializable) timestampType29);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator24;
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator19);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator21);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator24);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator35);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator37);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator38);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertNotNull(intOptional73);
        org.junit.Assert.assertNull(timestampType74);
        org.junit.Assert.assertNotNull(headers75);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test0371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0371");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.kafka.clients.consumer.ConsumerRebalanceListener, java.lang.reflect.AnnotatedElement> consumerRebalanceListenerKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<org.apache.kafka.clients.consumer.ConsumerRebalanceListener, java.lang.reflect.AnnotatedElement> consumerRebalanceListenerKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.kafka.clients.consumer.ConsumerRebalanceListener, java.lang.reflect.AnnotatedElement>(consumerRebalanceListenerKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0372");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.util.List<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.topology.IComponent>.KafkaSpoutConsumerRebalanceListener kafkaSpoutConsumerRebalanceListener1 = kafkaSpout0.new KafkaSpoutConsumerRebalanceListener();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$KafkaSpoutConsumerRebalanceListener with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0373");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType12 = null;
        org.apache.kafka.common.record.TimestampType timestampType20 = null;
        java.lang.Object obj24 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("", 10, (long) (byte) -1, (long) '4', timestampType20, (long) (byte) 0, (int) (short) 10, (int) (byte) 100, obj24, (java.io.Serializable) 1);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String> objConsumerRecordConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String>("", (int) 'a', (long) (short) 10, (long) (byte) -1, timestampType12, (long) 'a', (int) (byte) -1, 0, objConsumerRecord26, "hi!");
        long long29 = objConsumerRecord26.checksum();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("", (int) (short) 100, (long) 100, (long) (short) 100, timestampType4, (long) '4', (int) (byte) 10, (int) (short) 10, (java.lang.Object) objConsumerRecord26, (java.io.Serializable) 1L);
        long long32 = objConsumerRecord26.checksum();
        java.lang.Object obj33 = objConsumerRecord26.key();
        java.util.Optional<java.lang.Integer> intOptional34 = objConsumerRecord26.leaderEpoch();
        org.apache.kafka.common.header.Headers headers35 = objConsumerRecord26.headers();
        int int36 = objConsumerRecord26.partition();
        java.lang.Object obj37 = objConsumerRecord26.key();
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(intOptional34);
        org.junit.Assert.assertNotNull(headers35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNull(obj37);
    }

    @Test
    public void test0374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0374");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout3 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor4 = null;
        offsetComparatorKafkaSpout3.waitingToEmit = offsetComparatorConsumerRecordItor4;
        org.apache.kafka.common.TopicPartition topicPartition6 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection7 = offsetComparatorKafkaSpout3.toArrayList(topicPartition6);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray8 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet9 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet9, kafkaSpoutMessageIdArray8);
        offsetComparatorKafkaSpout3.emitted = kafkaSpoutMessageIdSet9;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout15 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor16 = null;
        offsetComparatorKafkaSpout15.waitingToEmit = offsetComparatorConsumerRecordItor16;
        org.apache.kafka.common.TopicPartition topicPartition18 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection19 = offsetComparatorKafkaSpout15.toArrayList(topicPartition18);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray20 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet21 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet21, kafkaSpoutMessageIdArray20);
        offsetComparatorKafkaSpout15.emitted = kafkaSpoutMessageIdSet21;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor24 = null;
        offsetComparatorKafkaSpout15.waitingToEmit = offsetComparatorConsumerRecordItor24;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator32 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout33 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer34 = null;
        offsetComparatorKafkaSpout33.kafkaConsumer = offsetComparatorKafkaConsumer34;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout36 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean37 = offsetComparatorKafkaSpout36.consumerAutoCommitMode;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray38 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet39 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet39, kafkaSpoutMessageIdArray38);
        offsetComparatorKafkaSpout36.emitted = kafkaSpoutMessageIdSet39;
        offsetComparatorKafkaSpout33.emitted = kafkaSpoutMessageIdSet39;
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> offsetComparatorConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)", (int) (short) -1, (long) 0, offsetComparator32, (java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet39);
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> iComponentKafkaSpout44 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.topology.IRichSpout> kafkaSpoutMessageIdSetConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.topology.IRichSpout>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)", (int) (byte) -1, (long) 1, kafkaSpoutMessageIdSet39, (org.apache.storm.topology.IRichSpout) iComponentKafkaSpout44);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>, java.lang.Cloneable> offsetComparatorKafkaSpoutConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>, java.lang.Cloneable>("", (int) (byte) 1, (long) '4', offsetComparatorKafkaSpout15, (java.lang.Cloneable) kafkaSpoutMessageIdSet39);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>("", (int) 'a', (long) (short) 0, (java.io.Serializable) offsetComparatorKafkaSpout3, (java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet39);
        org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy firstPollOffsetStrategy48 = null;
        offsetComparatorKafkaSpout3.firstPollOffsetStrategy = firstPollOffsetStrategy48;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout3.subscribeKafkaConsumer();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection7);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(topicPartitionCollection19);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test0375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0375");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.storm.kafka.spout.internal.KafkaConsumerFactory kafkaConsumerFactory1 = null;
        offsetComparatorKafkaSpout0.kafkaConsumerFactory = kafkaConsumerFactory1;
        org.apache.storm.spout.SpoutOutputCollector spoutOutputCollector3 = offsetComparatorKafkaSpout0.collector;
        org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy firstPollOffsetStrategy4 = offsetComparatorKafkaSpout0.firstPollOffsetStrategy;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.commitOffsetsForAckedTuples();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(spoutOutputCollector3);
        org.junit.Assert.assertNull(firstPollOffsetStrategy4);
    }

    @Test
    public void test0376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0376");
        org.apache.storm.kafka.spout.KafkaSpout<java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.kafka.common.record.TimestampType> kafkaSpoutMessageIdSetKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.kafka.common.record.TimestampType>();
    }

    @Test
    public void test0377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0377");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.kafka.common.TopicPartition topicPartition1 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection2 = offsetComparatorKafkaSpout0.toArrayList(topicPartition1);
        org.apache.storm.spout.SpoutOutputCollector spoutOutputCollector3 = null;
        offsetComparatorKafkaSpout0.collector = spoutOutputCollector3;
        int int5 = offsetComparatorKafkaSpout0.maxRetries;
        org.junit.Assert.assertNotNull(topicPartitionCollection2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test0378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0378");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout3 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor4 = null;
        offsetComparatorKafkaSpout3.waitingToEmit = offsetComparatorConsumerRecordItor4;
        org.apache.kafka.common.TopicPartition topicPartition6 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection7 = offsetComparatorKafkaSpout3.toArrayList(topicPartition6);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray8 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet9 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet9, kafkaSpoutMessageIdArray8);
        offsetComparatorKafkaSpout3.emitted = kafkaSpoutMessageIdSet9;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout15 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor16 = null;
        offsetComparatorKafkaSpout15.waitingToEmit = offsetComparatorConsumerRecordItor16;
        org.apache.kafka.common.TopicPartition topicPartition18 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection19 = offsetComparatorKafkaSpout15.toArrayList(topicPartition18);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray20 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet21 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet21, kafkaSpoutMessageIdArray20);
        offsetComparatorKafkaSpout15.emitted = kafkaSpoutMessageIdSet21;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor24 = null;
        offsetComparatorKafkaSpout15.waitingToEmit = offsetComparatorConsumerRecordItor24;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator32 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout33 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer34 = null;
        offsetComparatorKafkaSpout33.kafkaConsumer = offsetComparatorKafkaConsumer34;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout36 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean37 = offsetComparatorKafkaSpout36.consumerAutoCommitMode;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray38 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet39 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet39, kafkaSpoutMessageIdArray38);
        offsetComparatorKafkaSpout36.emitted = kafkaSpoutMessageIdSet39;
        offsetComparatorKafkaSpout33.emitted = kafkaSpoutMessageIdSet39;
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> offsetComparatorConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)", (int) (short) -1, (long) 0, offsetComparator32, (java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet39);
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> iComponentKafkaSpout44 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.topology.IRichSpout> kafkaSpoutMessageIdSetConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.topology.IRichSpout>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)", (int) (byte) -1, (long) 1, kafkaSpoutMessageIdSet39, (org.apache.storm.topology.IRichSpout) iComponentKafkaSpout44);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>, java.lang.Cloneable> offsetComparatorKafkaSpoutConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>, java.lang.Cloneable>("", (int) (byte) 1, (long) '4', offsetComparatorKafkaSpout15, (java.lang.Cloneable) kafkaSpoutMessageIdSet39);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>("", (int) 'a', (long) (short) 0, (java.io.Serializable) offsetComparatorKafkaSpout3, (java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet39);
        offsetComparatorKafkaSpout3.numUncommittedOffsets = 52L;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str50 = offsetComparatorKafkaSpout3.getWildCardTopics();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection7);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(topicPartitionCollection19);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test0379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0379");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator3;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator5 = offsetComparator3.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator6 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator7 = kafkaSpoutMessageIdComparator5.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator6);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator5;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator9 = org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator10 = kafkaSpoutMessageIdComparator5.thenComparing(kafkaSpoutMessageIdComparator9);
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout11 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean12 = offsetComparatorKafkaSpout11.consumerAutoCommitMode;
        org.apache.kafka.common.TopicPartition topicPartition13 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection14 = offsetComparatorKafkaSpout11.toArrayList(topicPartition13);
        org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy firstPollOffsetStrategy15 = null;
        offsetComparatorKafkaSpout11.firstPollOffsetStrategy = firstPollOffsetStrategy15;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("", (int) '#', (long) (short) 100, (java.lang.Object) kafkaSpoutMessageIdComparator10, (java.io.Serializable) offsetComparatorKafkaSpout11);
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout11.shutdown();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator5);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator7);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator9);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(topicPartitionCollection14);
    }

    @Test
    public void test0380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0380");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray5 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet6, kafkaSpoutMessageIdArray5);
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet6;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor9 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor9;
        org.apache.storm.kafka.spout.internal.KafkaConsumerFactory kafkaConsumerFactory11 = offsetComparatorKafkaSpout0.kafkaConsumerFactory;
        java.lang.String str12 = offsetComparatorKafkaSpout0.toString();
        org.apache.storm.spout.SpoutOutputCollector spoutOutputCollector13 = null;
        offsetComparatorKafkaSpout0.collector = spoutOutputCollector13;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = offsetComparatorKafkaSpout0.getWildCardTopics();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(kafkaConsumerFactory11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "KafkaSpout{acked=null, emitted=[]}" + "'", str12, "KafkaSpout{acked=null, emitted=[]}");
    }

    @Test
    public void test0381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0381");
        org.apache.storm.kafka.spout.KafkaSpout<java.util.AbstractCollection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.util.Optional<java.lang.Integer>> kafkaSpoutMessageIdCollectionKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.util.AbstractCollection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.util.Optional<java.lang.Integer>>();
    }

    @Test
    public void test0382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0382");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray5 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet6, kafkaSpoutMessageIdArray5);
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet6;
        java.util.Map<org.apache.kafka.common.TopicPartition, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>.OffsetEntry> topicPartitionMap9 = null;
        offsetComparatorKafkaSpout0.acked = topicPartitionMap9;
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService11 = offsetComparatorKafkaSpout0.retryService;
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService12 = offsetComparatorKafkaSpout0.retryService;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.subscribeKafkaConsumer();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(kafkaSpoutRetryService11);
        org.junit.Assert.assertNull(kafkaSpoutRetryService12);
    }

    @Test
    public void test0383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0383");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        java.util.Map<org.apache.kafka.common.TopicPartition, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>.OffsetEntry> topicPartitionMap5 = null;
        offsetComparatorKafkaSpout0.acked = topicPartitionMap5;
        org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy firstPollOffsetStrategy7 = null;
        offsetComparatorKafkaSpout0.firstPollOffsetStrategy = firstPollOffsetStrategy7;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.doSeekRetriableTopicPartitions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
    }

    @Test
    public void test0384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0384");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray5 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet6, kafkaSpoutMessageIdArray5);
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet6;
        java.util.Map<org.apache.kafka.common.TopicPartition, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>.OffsetEntry> topicPartitionMap9 = null;
        offsetComparatorKafkaSpout0.acked = topicPartitionMap9;
        java.util.Map<org.apache.kafka.common.TopicPartition, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>.OffsetEntry> topicPartitionMap11 = offsetComparatorKafkaSpout0.acked;
        int int12 = offsetComparatorKafkaSpout0.maxRetries;
        offsetComparatorKafkaSpout0.numUncommittedOffsets = (-1L);
        org.apache.storm.kafka.spout.internal.KafkaConsumerFactory kafkaConsumerFactory15 = null;
        offsetComparatorKafkaSpout0.kafkaConsumerFactory = kafkaConsumerFactory15;
        org.apache.storm.kafka.spout.KafkaSpoutStreams kafkaSpoutStreams17 = null;
        offsetComparatorKafkaSpout0.kafkaSpoutStreams = kafkaSpoutStreams17;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor19 = offsetComparatorKafkaSpout0.waitingToEmit;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.emit();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(topicPartitionMap11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(offsetComparatorConsumerRecordItor19);
    }

    @Test
    public void test0385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0385");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator0 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator0;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator2 = offsetComparator0.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator4 = kafkaSpoutMessageIdComparator2.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator3;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator6 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator7 = offsetComparator3.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator6);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator6;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId9 = null;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId10 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int11 = offsetComparator6.compare(kafkaSpoutMessageId9, kafkaSpoutMessageId10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator2);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator7);
    }

    @Test
    public void test0386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0386");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        org.apache.kafka.common.TopicPartition topicPartition1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.spout.ISpout, org.apache.kafka.common.header.Headers>.OffsetEntry offsetEntry3 = kafkaSpout0.new OffsetEntry(topicPartition1, (long) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$OffsetEntry with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0387");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.reflect.GenericDeclaration> kafkaSpoutMessageIdComparatorKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.reflect.GenericDeclaration> kafkaSpoutMessageIdComparatorKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.reflect.GenericDeclaration>(kafkaSpoutMessageIdComparatorKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0388");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator0 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator0;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator2 = offsetComparator0.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator4 = kafkaSpoutMessageIdComparator2.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator3;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator6 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator7 = offsetComparator3.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator6);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator8 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator8;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator10 = offsetComparator8.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator11 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator12 = kafkaSpoutMessageIdComparator10.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator11);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator10;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator14 = org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator15 = kafkaSpoutMessageIdComparator10.thenComparing(kafkaSpoutMessageIdComparator14);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator16 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator16;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator18 = offsetComparator16.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator19 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator20 = kafkaSpoutMessageIdComparator18.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator19);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator21 = kafkaSpoutMessageIdComparator20.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator22 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator22;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator24 = offsetComparator22.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator25 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator26 = kafkaSpoutMessageIdComparator24.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator25);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator25;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator28 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator29 = offsetComparator25.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator28);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator30 = kafkaSpoutMessageIdComparator20.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator25);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator31 = kafkaSpoutMessageIdComparator14.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator25);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator25;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator33 = offsetComparator6.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator25);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId34 = null;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId35 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int36 = offsetComparator6.compare(kafkaSpoutMessageId34, kafkaSpoutMessageId35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator2);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator7);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator10);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator12);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator14);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator15);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator18);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator20);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator21);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator24);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator26);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator29);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator30);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator31);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator33);
    }

    @Test
    public void test0389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0389");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer1 = null;
        offsetComparatorKafkaSpout0.kafkaConsumer = offsetComparatorKafkaConsumer1;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout3 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean4 = offsetComparatorKafkaSpout3.consumerAutoCommitMode;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray5 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet6, kafkaSpoutMessageIdArray5);
        offsetComparatorKafkaSpout3.emitted = kafkaSpoutMessageIdSet6;
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet6;
        boolean boolean10 = offsetComparatorKafkaSpout0.consumerAutoCommitMode;
        org.apache.kafka.common.TopicPartition topicPartition11 = null;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.setAcked(topicPartition11, (long) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0390");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.common.record.TimestampType timestampType15 = null;
        java.lang.Object obj19 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("", 10, (long) (byte) -1, (long) '4', timestampType15, (long) (byte) 0, (int) (short) 10, (int) (byte) 100, obj19, (java.io.Serializable) 1);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String> objConsumerRecordConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String>("", (int) 'a', (long) (short) 10, (long) (byte) -1, timestampType7, (long) 'a', (int) (byte) -1, 0, objConsumerRecord21, "hi!");
        long long24 = objConsumerRecord21.checksum();
        java.util.Optional<java.lang.Integer> intOptional25 = objConsumerRecord21.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType30 = null;
        org.apache.storm.topology.base.BaseRichSpout baseRichSpout34 = null;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray35 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.ArrayList<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdList36 = new java.util.ArrayList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdList36, kafkaSpoutMessageIdArray35);
        org.apache.kafka.common.record.TimestampType timestampType42 = null;
        org.apache.kafka.common.record.TimestampType timestampType50 = null;
        java.lang.Object obj54 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("", 10, (long) (byte) -1, (long) '4', timestampType50, (long) (byte) 0, (int) (short) 10, (int) (byte) 100, obj54, (java.io.Serializable) 1);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String> objConsumerRecordConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String>("", (int) 'a', (long) (short) 10, (long) (byte) -1, timestampType42, (long) 'a', (int) (byte) -1, 0, objConsumerRecord56, "hi!");
        long long59 = objConsumerRecord56.checksum();
        java.util.Optional<java.lang.Integer> intOptional60 = objConsumerRecord56.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType61 = objConsumerRecord56.timestampType();
        org.apache.kafka.common.header.Headers headers62 = objConsumerRecord56.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.topology.base.BaseRichSpout, java.util.AbstractCollection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> baseRichSpoutConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.topology.base.BaseRichSpout, java.util.AbstractCollection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>("", (int) (byte) 1, (long) (byte) 0, (long) ' ', timestampType30, (java.lang.Long) 1L, (int) (short) -1, (int) '4', baseRichSpout34, (java.util.AbstractCollection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdList36, headers62);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, org.apache.kafka.common.header.Headers> intOptionalConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, org.apache.kafka.common.header.Headers>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 100, null = 100, serialized key size = 10, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1), value = 1)", (int) (byte) 0, (long) 0, intOptional25, headers62);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(intOptional25);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(intOptional60);
        org.junit.Assert.assertNull(timestampType61);
        org.junit.Assert.assertNotNull(headers62);
    }

    @Test
    public void test0391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0391");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator14 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout15 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer16 = null;
        offsetComparatorKafkaSpout15.kafkaConsumer = offsetComparatorKafkaConsumer16;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout18 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean19 = offsetComparatorKafkaSpout18.consumerAutoCommitMode;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray20 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet21 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet21, kafkaSpoutMessageIdArray20);
        offsetComparatorKafkaSpout18.emitted = kafkaSpoutMessageIdSet21;
        offsetComparatorKafkaSpout15.emitted = kafkaSpoutMessageIdSet21;
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> offsetComparatorConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)", (int) (short) -1, (long) 0, offsetComparator14, (java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet21);
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> iComponentKafkaSpout26 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.topology.IRichSpout> kafkaSpoutMessageIdSetConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.topology.IRichSpout>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)", (int) (byte) -1, (long) 1, kafkaSpoutMessageIdSet21, (org.apache.storm.topology.IRichSpout) iComponentKafkaSpout26);
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout28 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer29 = null;
        offsetComparatorKafkaSpout28.kafkaConsumer = offsetComparatorKafkaConsumer29;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout31 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean32 = offsetComparatorKafkaSpout31.consumerAutoCommitMode;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray33 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet34 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet34, kafkaSpoutMessageIdArray33);
        offsetComparatorKafkaSpout31.emitted = kafkaSpoutMessageIdSet34;
        offsetComparatorKafkaSpout28.emitted = kafkaSpoutMessageIdSet34;
        java.util.Map<org.apache.kafka.common.TopicPartition, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>.OffsetEntry> topicPartitionMap38 = null;
        offsetComparatorKafkaSpout28.acked = topicPartitionMap38;
        org.apache.kafka.common.record.TimestampType timestampType47 = null;
        org.apache.kafka.common.record.TimestampType timestampType55 = null;
        org.apache.kafka.common.record.TimestampType timestampType63 = null;
        java.lang.Object obj67 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord69 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("", 10, (long) (byte) -1, (long) '4', timestampType63, (long) (byte) 0, (int) (short) 10, (int) (byte) 100, obj67, (java.io.Serializable) 1);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String> objConsumerRecordConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String>("", (int) 'a', (long) (short) 10, (long) (byte) -1, timestampType55, (long) 'a', (int) (byte) -1, 0, objConsumerRecord69, "hi!");
        long long72 = objConsumerRecord69.checksum();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("", (int) (short) 100, (long) 100, (long) (short) 100, timestampType47, (long) '4', (int) (byte) 10, (int) (short) 10, (java.lang.Object) objConsumerRecord69, (java.io.Serializable) 1L);
        java.lang.Object obj75 = objConsumerRecord74.key();
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.base.BaseComponent, java.util.AbstractCollection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> baseComponentKafkaSpout76 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.base.BaseComponent, java.util.AbstractCollection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("hi!", (int) ' ', (long) (-1), (java.lang.Object) objConsumerRecord74, (java.io.Serializable) baseComponentKafkaSpout76);
        org.apache.kafka.common.header.Headers headers78 = objConsumerRecord77.headers();
        java.util.Optional<java.lang.Integer> intOptional79 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("", (int) (byte) -1, (long) '4', (long) (byte) 100, timestampType4, (java.lang.Long) 0L, (int) ' ', 0, (java.lang.Object) iComponentKafkaSpout26, (java.io.Serializable) offsetComparatorKafkaSpout28, headers78, intOptional79);
        org.apache.storm.spout.SpoutOutputCollector spoutOutputCollector81 = offsetComparatorKafkaSpout28.collector;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor82 = null;
        offsetComparatorKafkaSpout28.waitingToEmit = offsetComparatorConsumerRecordItor82;
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertEquals(obj75.toString(), "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj75), "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj75), "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)");
        org.junit.Assert.assertNotNull(headers78);
        org.junit.Assert.assertNull(spoutOutputCollector81);
    }

    @Test
    public void test0392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0392");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        java.util.concurrent.TimeUnit timeUnit3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.util.ArrayList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.kafka.spout.KafkaSpout<java.lang.Object, java.io.Serializable>.OffsetEntry>.Timer timer4 = kafkaSpout0.new Timer((-1L), (long) 32, timeUnit3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$Timer with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0393");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType12 = null;
        java.lang.Object obj16 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord18 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("", 10, (long) (byte) -1, (long) '4', timestampType12, (long) (byte) 0, (int) (short) 10, (int) (byte) 100, obj16, (java.io.Serializable) 1);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String> objConsumerRecordConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String>("", (int) 'a', (long) (short) 10, (long) (byte) -1, timestampType4, (long) 'a', (int) (byte) -1, 0, objConsumerRecord18, "hi!");
        long long21 = objConsumerRecord18.checksum();
        long long22 = objConsumerRecord18.timestamp();
        long long23 = objConsumerRecord18.timestamp();
        int int24 = objConsumerRecord18.serializedValueSize();
        int int25 = objConsumerRecord18.serializedKeySize();
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 52L + "'", long22 == 52L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 52L + "'", long23 == 52L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
    }

    @Test
    public void test0394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0394");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean1 = offsetComparatorKafkaSpout0.consumerAutoCommitMode;
        int int2 = offsetComparatorKafkaSpout0.maxRetries;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor3 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor3;
        boolean boolean5 = offsetComparatorKafkaSpout0.initialized;
        java.util.Set<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = offsetComparatorKafkaSpout0.emitted;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(kafkaSpoutMessageIdSet6);
    }

    @Test
    public void test0395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0395");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType12 = null;
        java.lang.Object obj16 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord18 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("", 10, (long) (byte) -1, (long) '4', timestampType12, (long) (byte) 0, (int) (short) 10, (int) (byte) 100, obj16, (java.io.Serializable) 1);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String> objConsumerRecordConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String>("", (int) 'a', (long) (short) 10, (long) (byte) -1, timestampType4, (long) 'a', (int) (byte) -1, 0, objConsumerRecord18, "hi!");
        long long21 = objConsumerRecord18.checksum();
        java.util.Optional<java.lang.Integer> intOptional22 = objConsumerRecord18.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType23 = objConsumerRecord18.timestampType();
        long long24 = objConsumerRecord18.offset();
        int int25 = objConsumerRecord18.serializedValueSize();
        java.lang.String str26 = objConsumerRecord18.toString();
        long long27 = objConsumerRecord18.checksum();
        java.lang.String str28 = objConsumerRecord18.topic();
        java.lang.String str29 = objConsumerRecord18.topic();
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(intOptional22);
        org.junit.Assert.assertNull(timestampType23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)" + "'", str26, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
    }

    @Test
    public void test0396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0396");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        java.lang.Object obj8 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("", 10, (long) (byte) -1, (long) '4', timestampType4, (long) (byte) 0, (int) (short) 10, (int) (byte) 100, obj8, (java.io.Serializable) 1);
        java.lang.Object obj11 = objConsumerRecord10.key();
        int int12 = objConsumerRecord10.serializedValueSize();
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
    }

    @Test
    public void test0397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0397");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer1 = null;
        offsetComparatorKafkaSpout0.kafkaConsumer = offsetComparatorKafkaConsumer1;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout3 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean4 = offsetComparatorKafkaSpout3.consumerAutoCommitMode;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray5 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet6, kafkaSpoutMessageIdArray5);
        offsetComparatorKafkaSpout3.emitted = kafkaSpoutMessageIdSet6;
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet6;
        java.util.Map<org.apache.kafka.common.TopicPartition, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>.OffsetEntry> topicPartitionMap10 = null;
        offsetComparatorKafkaSpout0.acked = topicPartitionMap10;
        org.apache.storm.spout.SpoutOutputCollector spoutOutputCollector12 = null;
        offsetComparatorKafkaSpout0.collector = spoutOutputCollector12;
        java.util.Set<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet14 = offsetComparatorKafkaSpout0.emitted;
        org.apache.storm.kafka.spout.KafkaSpoutTuplesBuilder<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutTuplesBuilder15 = null;
        offsetComparatorKafkaSpout0.tuplesBuilder = offsetComparatorKafkaSpoutTuplesBuilder15;
        boolean boolean17 = offsetComparatorKafkaSpout0.initialized;
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig18 = null;
        offsetComparatorKafkaSpout0.kafkaSpoutConfig = offsetComparatorKafkaSpoutConfig18;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout20 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor21 = null;
        offsetComparatorKafkaSpout20.waitingToEmit = offsetComparatorConsumerRecordItor21;
        org.apache.kafka.common.TopicPartition topicPartition23 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection24 = offsetComparatorKafkaSpout20.toArrayList(topicPartition23);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray25 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet26 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet26, kafkaSpoutMessageIdArray25);
        offsetComparatorKafkaSpout20.emitted = kafkaSpoutMessageIdSet26;
        java.util.Map<org.apache.kafka.common.TopicPartition, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>.OffsetEntry> topicPartitionMap29 = null;
        offsetComparatorKafkaSpout20.acked = topicPartitionMap29;
        java.util.Map<org.apache.kafka.common.TopicPartition, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>.OffsetEntry> topicPartitionMap31 = offsetComparatorKafkaSpout20.acked;
        int int32 = offsetComparatorKafkaSpout20.maxRetries;
        org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy firstPollOffsetStrategy33 = null;
        offsetComparatorKafkaSpout20.firstPollOffsetStrategy = firstPollOffsetStrategy33;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout35 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer36 = null;
        offsetComparatorKafkaSpout35.kafkaConsumer = offsetComparatorKafkaConsumer36;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout38 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean39 = offsetComparatorKafkaSpout38.consumerAutoCommitMode;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray40 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet41 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet41, kafkaSpoutMessageIdArray40);
        offsetComparatorKafkaSpout38.emitted = kafkaSpoutMessageIdSet41;
        offsetComparatorKafkaSpout35.emitted = kafkaSpoutMessageIdSet41;
        org.apache.storm.spout.SpoutOutputCollector spoutOutputCollector45 = null;
        offsetComparatorKafkaSpout35.collector = spoutOutputCollector45;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor47 = offsetComparatorKafkaSpout35.waitingToEmit;
        java.util.Set<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet48 = offsetComparatorKafkaSpout35.emitted;
        offsetComparatorKafkaSpout20.emitted = kafkaSpoutMessageIdSet48;
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet48;
        org.apache.kafka.clients.consumer.ConsumerRecords<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorConsumerRecords51 = null;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.setWaitingToEmit(offsetComparatorConsumerRecords51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdSet14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(topicPartitionCollection24);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(topicPartitionMap31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(offsetComparatorConsumerRecordItor47);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdSet48);
    }

    @Test
    public void test0398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0398");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        java.lang.Object obj8 = new java.lang.Object();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("hi!", (int) (byte) 0, (long) '#', (long) 0, timestampType4, 0L, (-1), (int) (short) 0, obj8, (java.io.Serializable) 100.0f);
        java.lang.Object obj11 = objConsumerRecord10.key();
        java.io.Serializable serializable12 = objConsumerRecord10.value();
        long long13 = objConsumerRecord10.checksum();
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + 100.0f + "'", serializable12, 100.0f);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test0399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0399");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        java.lang.Object obj8 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("", 10, (long) (byte) -1, (long) '4', timestampType4, (long) (byte) 0, (int) (short) 10, (int) (byte) 100, obj8, (java.io.Serializable) 1);
        int int11 = objConsumerRecord10.serializedKeySize();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
    }

    @Test
    public void test0400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0400");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.storm.kafka.spout.internal.KafkaConsumerFactory kafkaConsumerFactory1 = null;
        offsetComparatorKafkaSpout0.kafkaConsumerFactory = kafkaConsumerFactory1;
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer3 = offsetComparatorKafkaSpout0.kafkaConsumer;
        boolean boolean4 = offsetComparatorKafkaSpout0.waitingToEmit();
        org.apache.storm.topology.OutputFieldsDeclarer outputFieldsDeclarer5 = null;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.declareOutputFields(outputFieldsDeclarer5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(offsetComparatorKafkaConsumer3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0401");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IRichSpout, org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>>.Timer, org.apache.kafka.common.header.Headers> timerKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IRichSpout, org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>>.Timer, org.apache.kafka.common.header.Headers>();
    }

    @Test
    public void test0402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0402");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray5 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet6, kafkaSpoutMessageIdArray5);
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet6;
        java.util.Map<org.apache.kafka.common.TopicPartition, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>.OffsetEntry> topicPartitionMap9 = null;
        offsetComparatorKafkaSpout0.acked = topicPartitionMap9;
        org.apache.storm.spout.SpoutOutputCollector spoutOutputCollector11 = offsetComparatorKafkaSpout0.collector;
        java.util.Map<org.apache.kafka.common.TopicPartition, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>.OffsetEntry> topicPartitionMap12 = offsetComparatorKafkaSpout0.acked;
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService13 = null;
        offsetComparatorKafkaSpout0.retryService = kafkaSpoutRetryService13;
        java.util.Set<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet15 = offsetComparatorKafkaSpout0.emitted;
        org.apache.kafka.clients.consumer.ConsumerRecords<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorConsumerRecords16 = null;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.setWaitingToEmit(offsetComparatorConsumerRecords16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(spoutOutputCollector11);
        org.junit.Assert.assertNull(topicPartitionMap12);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdSet15);
    }

    @Test
    public void test0403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0403");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType12 = null;
        java.lang.Object obj16 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord18 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("", 10, (long) (byte) -1, (long) '4', timestampType12, (long) (byte) 0, (int) (short) 10, (int) (byte) 100, obj16, (java.io.Serializable) 1);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String> objConsumerRecordConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String>("", (int) 'a', (long) (short) 10, (long) (byte) -1, timestampType4, (long) 'a', (int) (byte) -1, 0, objConsumerRecord18, "hi!");
        long long21 = objConsumerRecord18.checksum();
        long long22 = objConsumerRecord18.timestamp();
        java.lang.String str23 = objConsumerRecord18.toString();
        int int24 = objConsumerRecord18.serializedKeySize();
        int int25 = objConsumerRecord18.serializedValueSize();
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 52L + "'", long22 == 52L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)" + "'", str23, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
    }

    @Test
    public void test0404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0404");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor3 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor3;
        offsetComparatorKafkaSpout0.maxRetries = (short) 100;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.deactivate();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0405");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig5 = offsetComparatorKafkaSpout0.kafkaSpoutConfig;
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig6 = offsetComparatorKafkaSpout0.kafkaSpoutConfig;
        boolean boolean7 = offsetComparatorKafkaSpout0.waitingToEmit();
        org.apache.kafka.common.TopicPartition topicPartition8 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection9 = offsetComparatorKafkaSpout0.toArrayList(topicPartition8);
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.subscribeKafkaConsumer();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNull(offsetComparatorKafkaSpoutConfig5);
        org.junit.Assert.assertNull(offsetComparatorKafkaSpoutConfig6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(topicPartitionCollection9);
    }

    @Test
    public void test0406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0406");
        org.apache.storm.kafka.spout.KafkaSpout<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.util.Collection<org.apache.kafka.common.TopicPartition>> kafkaSpoutMessageIdComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.util.Collection<org.apache.kafka.common.TopicPartition>>();
    }

    @Test
    public void test0407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0407");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout3 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor4 = null;
        offsetComparatorKafkaSpout3.waitingToEmit = offsetComparatorConsumerRecordItor4;
        org.apache.kafka.common.TopicPartition topicPartition6 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection7 = offsetComparatorKafkaSpout3.toArrayList(topicPartition6);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray8 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet9 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet9, kafkaSpoutMessageIdArray8);
        offsetComparatorKafkaSpout3.emitted = kafkaSpoutMessageIdSet9;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout15 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor16 = null;
        offsetComparatorKafkaSpout15.waitingToEmit = offsetComparatorConsumerRecordItor16;
        org.apache.kafka.common.TopicPartition topicPartition18 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection19 = offsetComparatorKafkaSpout15.toArrayList(topicPartition18);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray20 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet21 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet21, kafkaSpoutMessageIdArray20);
        offsetComparatorKafkaSpout15.emitted = kafkaSpoutMessageIdSet21;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor24 = null;
        offsetComparatorKafkaSpout15.waitingToEmit = offsetComparatorConsumerRecordItor24;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator32 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout33 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer34 = null;
        offsetComparatorKafkaSpout33.kafkaConsumer = offsetComparatorKafkaConsumer34;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout36 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean37 = offsetComparatorKafkaSpout36.consumerAutoCommitMode;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray38 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet39 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet39, kafkaSpoutMessageIdArray38);
        offsetComparatorKafkaSpout36.emitted = kafkaSpoutMessageIdSet39;
        offsetComparatorKafkaSpout33.emitted = kafkaSpoutMessageIdSet39;
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> offsetComparatorConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)", (int) (short) -1, (long) 0, offsetComparator32, (java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet39);
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> iComponentKafkaSpout44 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.topology.IRichSpout> kafkaSpoutMessageIdSetConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.topology.IRichSpout>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)", (int) (byte) -1, (long) 1, kafkaSpoutMessageIdSet39, (org.apache.storm.topology.IRichSpout) iComponentKafkaSpout44);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>, java.lang.Cloneable> offsetComparatorKafkaSpoutConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>, java.lang.Cloneable>("", (int) (byte) 1, (long) '4', offsetComparatorKafkaSpout15, (java.lang.Cloneable) kafkaSpoutMessageIdSet39);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>("", (int) 'a', (long) (short) 0, (java.io.Serializable) offsetComparatorKafkaSpout3, (java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet39);
        org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy firstPollOffsetStrategy48 = null;
        offsetComparatorKafkaSpout3.firstPollOffsetStrategy = firstPollOffsetStrategy48;
        java.util.Map map50 = null;
        org.apache.storm.task.TopologyContext topologyContext51 = null;
        org.apache.storm.spout.SpoutOutputCollector spoutOutputCollector52 = null;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout3.open(map50, topologyContext51, spoutOutputCollector52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection7);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(topicPartitionCollection19);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test0408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0408");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer1 = null;
        offsetComparatorKafkaSpout0.kafkaConsumer = offsetComparatorKafkaConsumer1;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout3 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean4 = offsetComparatorKafkaSpout3.consumerAutoCommitMode;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray5 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet6, kafkaSpoutMessageIdArray5);
        offsetComparatorKafkaSpout3.emitted = kafkaSpoutMessageIdSet6;
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet6;
        java.util.Map<org.apache.kafka.common.TopicPartition, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>.OffsetEntry> topicPartitionMap10 = null;
        offsetComparatorKafkaSpout0.acked = topicPartitionMap10;
        org.apache.storm.spout.SpoutOutputCollector spoutOutputCollector12 = null;
        offsetComparatorKafkaSpout0.collector = spoutOutputCollector12;
        java.util.Set<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet14 = offsetComparatorKafkaSpout0.emitted;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = offsetComparatorKafkaSpout0.getNamedTopics();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdSet14);
    }

    @Test
    public void test0409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0409");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        java.lang.Object obj8 = new java.lang.Object();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("hi!", (int) (byte) 0, (long) '#', (long) 0, timestampType4, 0L, (-1), (int) (short) 0, obj8, (java.io.Serializable) 100.0f);
        long long11 = objConsumerRecord10.checksum();
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test0410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0410");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.topology.base.BaseComponent, java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> baseComponentKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.base.BaseComponent, java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> baseComponentKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.base.BaseComponent, java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>(baseComponentKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0411");
        org.apache.kafka.clients.consumer.ConsumerRebalanceListener consumerRebalanceListener3 = null;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout4 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor5 = null;
        offsetComparatorKafkaSpout4.waitingToEmit = offsetComparatorConsumerRecordItor5;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor7 = null;
        offsetComparatorKafkaSpout4.waitingToEmit = offsetComparatorConsumerRecordItor7;
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig9 = null;
        offsetComparatorKafkaSpout4.kafkaSpoutConfig = offsetComparatorKafkaSpoutConfig9;
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRebalanceListener, org.apache.storm.spout.ISpout> consumerRebalanceListenerConsumerRecord11 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRebalanceListener, org.apache.storm.spout.ISpout>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1), partition = 35, leaderEpoch = null, offset = 100, null = 97, serialized key size = 52, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = 0.0)", 10, (long) (byte) 10, consumerRebalanceListener3, (org.apache.storm.spout.ISpout) offsetComparatorKafkaSpout4);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorConsumerRecord12 = null;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout4.emitTupleIfNotEmitted(offsetComparatorConsumerRecord12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0412");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        org.apache.kafka.common.TopicPartition topicPartition1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.util.RandomAccess>.OffsetEntry offsetEntry3 = kafkaSpout0.new OffsetEntry(topicPartition1, (long) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$OffsetEntry with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0413");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator0 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator0;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator2 = offsetComparator0.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator4 = kafkaSpoutMessageIdComparator2.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator2;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator6 = org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator7 = kafkaSpoutMessageIdComparator2.thenComparing(kafkaSpoutMessageIdComparator6);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator2;
        java.lang.Class<?> wildcardClass9 = kafkaSpoutMessageIdComparator2.getClass();
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator2);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator6);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator7);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0414");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        java.lang.Object obj8 = new java.lang.Object();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("hi!", (int) (byte) 0, (long) '#', (long) 0, timestampType4, 0L, (-1), (int) (short) 0, obj8, (java.io.Serializable) 100.0f);
        java.lang.Object obj11 = objConsumerRecord10.key();
        java.io.Serializable serializable12 = objConsumerRecord10.value();
        java.io.Serializable serializable13 = objConsumerRecord10.value();
        long long14 = objConsumerRecord10.timestamp();
        long long15 = objConsumerRecord10.offset();
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + 100.0f + "'", serializable12, 100.0f);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + 100.0f + "'", serializable13, 100.0f);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 35L + "'", long15 == 35L);
    }

    @Test
    public void test0415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0415");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator0 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator0;
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator0;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator3 = offsetComparator0.reversed();
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId4 = null;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId5 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int6 = offsetComparator0.compare(kafkaSpoutMessageId4, kafkaSpoutMessageId5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator3);
    }

    @Test
    public void test0416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0416");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean1 = offsetComparatorKafkaSpout0.consumerAutoCommitMode;
        int int2 = offsetComparatorKafkaSpout0.maxRetries;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor3 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor3;
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig5 = null;
        offsetComparatorKafkaSpout0.kafkaSpoutConfig = offsetComparatorKafkaSpoutConfig5;
        offsetComparatorKafkaSpout0.maxRetries = 32;
        org.apache.kafka.clients.consumer.ConsumerRecords<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorConsumerRecords9 = null;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.setWaitingToEmit(offsetComparatorConsumerRecords9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test0417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0417");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout9 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor10 = null;
        offsetComparatorKafkaSpout9.waitingToEmit = offsetComparatorConsumerRecordItor10;
        org.apache.kafka.common.TopicPartition topicPartition12 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection13 = offsetComparatorKafkaSpout9.toArrayList(topicPartition12);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray14 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet15 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet15, kafkaSpoutMessageIdArray14);
        offsetComparatorKafkaSpout9.emitted = kafkaSpoutMessageIdSet15;
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig18 = offsetComparatorKafkaSpout9.kafkaSpoutConfig;
        org.apache.storm.kafka.spout.KafkaSpoutStreams kafkaSpoutStreams19 = offsetComparatorKafkaSpout9.kafkaSpoutStreams;
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService20 = null;
        offsetComparatorKafkaSpout9.retryService = kafkaSpoutRetryService20;
        org.apache.kafka.common.record.TimestampType timestampType26 = null;
        java.lang.Object obj30 = new java.lang.Object();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator31 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator31;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator33 = offsetComparator31.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator34 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator35 = kafkaSpoutMessageIdComparator33.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator34);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator36 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator36;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator38 = kafkaSpoutMessageIdComparator33.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator36);
        java.lang.Class<?> wildcardClass39 = kafkaSpoutMessageIdComparator38.getClass();
        org.apache.kafka.common.record.TimestampType timestampType47 = null;
        org.apache.kafka.common.record.TimestampType timestampType55 = null;
        org.apache.kafka.common.record.TimestampType timestampType63 = null;
        java.lang.Object obj67 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord69 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("", 10, (long) (byte) -1, (long) '4', timestampType63, (long) (byte) 0, (int) (short) 10, (int) (byte) 100, obj67, (java.io.Serializable) 1);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String> objConsumerRecordConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String>("", (int) 'a', (long) (short) 10, (long) (byte) -1, timestampType55, (long) 'a', (int) (byte) -1, 0, objConsumerRecord69, "hi!");
        long long72 = objConsumerRecord69.checksum();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("", (int) (short) 100, (long) 100, (long) (short) 100, timestampType47, (long) '4', (int) (byte) 10, (int) (short) 10, (java.lang.Object) objConsumerRecord69, (java.io.Serializable) 1L);
        java.lang.Object obj75 = objConsumerRecord74.key();
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.base.BaseComponent, java.util.AbstractCollection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> baseComponentKafkaSpout76 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.base.BaseComponent, java.util.AbstractCollection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("hi!", (int) ' ', (long) (-1), (java.lang.Object) objConsumerRecord74, (java.io.Serializable) baseComponentKafkaSpout76);
        org.apache.kafka.common.header.Headers headers78 = objConsumerRecord77.headers();
        org.apache.kafka.common.record.TimestampType timestampType83 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord89 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("hi!", (int) (short) -1, (long) 0, 52L, timestampType83, (long) 35, 10, 1, (java.lang.Object) (byte) 1, (java.io.Serializable) 10.0d);
        java.util.Optional<java.lang.Integer> intOptional90 = objConsumerRecord89.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord91 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("hi!", 100, 0L, (long) (byte) -1, timestampType26, (java.lang.Long) 1L, (int) (byte) 100, (int) (byte) -1, obj30, (java.io.Serializable) wildcardClass39, headers78, intOptional90);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, org.apache.storm.topology.IRichSpout> charSequenceConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, org.apache.storm.topology.IRichSpout>("ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = -1)", (int) (byte) 0, (long) 'a', (long) 1, timestampType4, (java.lang.Long) 52L, (int) (byte) 0, (int) 'a', (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = -1)", (org.apache.storm.topology.IRichSpout) offsetComparatorKafkaSpout9, headers78);
        offsetComparatorKafkaSpout9.numUncommittedOffsets = (short) 1;
        org.junit.Assert.assertNotNull(topicPartitionCollection13);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(offsetComparatorKafkaSpoutConfig18);
        org.junit.Assert.assertNull(kafkaSpoutStreams19);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator33);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator35);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertEquals(obj75.toString(), "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj75), "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj75), "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)");
        org.junit.Assert.assertNotNull(headers78);
        org.junit.Assert.assertNotNull(intOptional90);
    }

    @Test
    public void test0418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0418");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout11 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean12 = offsetComparatorKafkaSpout11.consumerAutoCommitMode;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray13 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet14 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet14, kafkaSpoutMessageIdArray13);
        offsetComparatorKafkaSpout11.emitted = kafkaSpoutMessageIdSet14;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdSetConsumerRecord18 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>("hi!", 10, (long) (byte) -1, (java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet14, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 100, null = 100, serialized key size = 10, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1), value = 1)");
        java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet19 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Cloneable, java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> cloneableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Cloneable, java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1), partition = 0, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = [], value = 0)", (int) 'a', (long) '#', 97L, timestampType4, (long) (short) 0, (int) (byte) 0, (int) (byte) 0, (java.lang.Cloneable) kafkaSpoutMessageIdSet14, kafkaSpoutMessageIdSet19);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0419");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout6 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor7 = null;
        offsetComparatorKafkaSpout6.waitingToEmit = offsetComparatorConsumerRecordItor7;
        org.apache.kafka.common.TopicPartition topicPartition9 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection10 = offsetComparatorKafkaSpout6.toArrayList(topicPartition9);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray11 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet12 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet12, kafkaSpoutMessageIdArray11);
        offsetComparatorKafkaSpout6.emitted = kafkaSpoutMessageIdSet12;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor15 = null;
        offsetComparatorKafkaSpout6.waitingToEmit = offsetComparatorConsumerRecordItor15;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator23 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout24 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer25 = null;
        offsetComparatorKafkaSpout24.kafkaConsumer = offsetComparatorKafkaConsumer25;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout27 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean28 = offsetComparatorKafkaSpout27.consumerAutoCommitMode;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray29 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet30 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet30, kafkaSpoutMessageIdArray29);
        offsetComparatorKafkaSpout27.emitted = kafkaSpoutMessageIdSet30;
        offsetComparatorKafkaSpout24.emitted = kafkaSpoutMessageIdSet30;
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> offsetComparatorConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)", (int) (short) -1, (long) 0, offsetComparator23, (java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet30);
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> iComponentKafkaSpout35 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.topology.IRichSpout> kafkaSpoutMessageIdSetConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.topology.IRichSpout>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)", (int) (byte) -1, (long) 1, kafkaSpoutMessageIdSet30, (org.apache.storm.topology.IRichSpout) iComponentKafkaSpout35);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>, java.lang.Cloneable> offsetComparatorKafkaSpoutConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>, java.lang.Cloneable>("", (int) (byte) 1, (long) '4', offsetComparatorKafkaSpout6, (java.lang.Cloneable) kafkaSpoutMessageIdSet30);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)", (int) (short) 0, (long) 10, (java.lang.Object) kafkaSpoutMessageIdSet30, (java.io.Serializable) 0);
        int int40 = objConsumerRecord39.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType41 = objConsumerRecord39.timestampType();
        java.lang.Class<?> wildcardClass42 = timestampType41.getClass();
        org.junit.Assert.assertNotNull(topicPartitionCollection10);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType41 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType41.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0420");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray5 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet6, kafkaSpoutMessageIdArray5);
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet6;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor9 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor9;
        org.apache.kafka.common.TopicPartition topicPartition11 = null;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.setAcked(topicPartition11, (long) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0421");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.kafka.common.record.TimestampType, org.apache.storm.spout.ISpout> timestampTypeKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<org.apache.kafka.common.record.TimestampType, org.apache.storm.spout.ISpout> timestampTypeKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.kafka.common.record.TimestampType, org.apache.storm.spout.ISpout>(timestampTypeKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0422");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        org.apache.kafka.common.TopicPartition topicPartition1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator>.OffsetEntry offsetEntry3 = kafkaSpout0.new OffsetEntry(topicPartition1, (long) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$OffsetEntry with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0423");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.lang.reflect.Type, java.lang.Comparable<java.lang.String>> typeKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.Type, java.lang.Comparable<java.lang.String>> typeKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.Type, java.lang.Comparable<java.lang.String>>(typeKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0424");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String> kafkaSpoutMessageIdComparatorKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.String>(kafkaSpoutMessageIdComparatorKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0425");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean1 = offsetComparatorKafkaSpout0.consumerAutoCommitMode;
        org.apache.kafka.common.TopicPartition topicPartition2 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection3 = offsetComparatorKafkaSpout0.toArrayList(topicPartition2);
        long long4 = offsetComparatorKafkaSpout0.numUncommittedOffsets;
        long long5 = offsetComparatorKafkaSpout0.numUncommittedOffsets;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor6 = offsetComparatorKafkaSpout0.waitingToEmit;
        offsetComparatorKafkaSpout0.consumerAutoCommitMode = true;
        long long9 = offsetComparatorKafkaSpout0.numUncommittedOffsets;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor10 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor10;
        java.util.Map<org.apache.kafka.common.TopicPartition, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>.OffsetEntry> topicPartitionMap12 = offsetComparatorKafkaSpout0.acked;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = offsetComparatorKafkaSpout0.getNamedTopics();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(topicPartitionCollection3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(offsetComparatorConsumerRecordItor6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(topicPartitionMap12);
    }

    @Test
    public void test0426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0426");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.io.Serializable, java.lang.String>.OffsetEntry offsetEntry1 = kafkaSpout0.new OffsetEntry();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$OffsetEntry with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0427");
        org.apache.storm.kafka.spout.KafkaSpout<java.util.AbstractList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.util.Optional<java.lang.Integer>> kafkaSpoutMessageIdListKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.util.AbstractList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.util.Optional<java.lang.Integer>>();
    }

    @Test
    public void test0428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0428");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.kafka.common.TopicPartition topicPartition1 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection2 = offsetComparatorKafkaSpout0.toArrayList(topicPartition1);
        org.apache.storm.spout.SpoutOutputCollector spoutOutputCollector3 = null;
        offsetComparatorKafkaSpout0.collector = spoutOutputCollector3;
        org.apache.storm.spout.SpoutOutputCollector spoutOutputCollector5 = offsetComparatorKafkaSpout0.collector;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.doSeekRetriableTopicPartitions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection2);
        org.junit.Assert.assertNull(spoutOutputCollector5);
    }

    @Test
    public void test0429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0429");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig5 = offsetComparatorKafkaSpout0.kafkaSpoutConfig;
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig6 = offsetComparatorKafkaSpout0.kafkaSpoutConfig;
        boolean boolean7 = offsetComparatorKafkaSpout0.waitingToEmit();
        org.apache.kafka.common.TopicPartition topicPartition8 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection9 = offsetComparatorKafkaSpout0.toArrayList(topicPartition8);
        offsetComparatorKafkaSpout0.maxRetries = (short) 0;
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNull(offsetComparatorKafkaSpoutConfig5);
        org.junit.Assert.assertNull(offsetComparatorKafkaSpoutConfig6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(topicPartitionCollection9);
    }

    @Test
    public void test0430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0430");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator0 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator0;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator2 = offsetComparator0.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator4 = kafkaSpoutMessageIdComparator2.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator2;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator6 = org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator7 = kafkaSpoutMessageIdComparator2.thenComparing(kafkaSpoutMessageIdComparator6);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator8 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator8;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator10 = offsetComparator8.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator11 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator12 = kafkaSpoutMessageIdComparator10.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator11);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator10;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator14 = org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator15 = kafkaSpoutMessageIdComparator10.thenComparing(kafkaSpoutMessageIdComparator14);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator16 = kafkaSpoutMessageIdComparator7.thenComparing(kafkaSpoutMessageIdComparator14);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator17 = kafkaSpoutMessageIdComparator14.reversed();
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator2);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator6);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator7);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator10);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator12);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator14);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator15);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator16);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator17);
    }

    @Test
    public void test0431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0431");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean1 = offsetComparatorKafkaSpout0.consumerAutoCommitMode;
        org.apache.kafka.common.TopicPartition topicPartition2 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection3 = offsetComparatorKafkaSpout0.toArrayList(topicPartition2);
        long long4 = offsetComparatorKafkaSpout0.numUncommittedOffsets;
        long long5 = offsetComparatorKafkaSpout0.numUncommittedOffsets;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor6 = offsetComparatorKafkaSpout0.waitingToEmit;
        offsetComparatorKafkaSpout0.consumerAutoCommitMode = true;
        long long9 = offsetComparatorKafkaSpout0.numUncommittedOffsets;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor10 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor10;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.commitOffsetsForAckedTuples();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(topicPartitionCollection3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(offsetComparatorConsumerRecordItor6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test0432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0432");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.lang.String, java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> strKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.lang.String, java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> strKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.String, java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>(strKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0433");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout7 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean8 = offsetComparatorKafkaSpout7.consumerAutoCommitMode;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray9 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet10 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet10, kafkaSpoutMessageIdArray9);
        offsetComparatorKafkaSpout7.emitted = kafkaSpoutMessageIdSet10;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.CharSequence> kafkaSpoutMessageIdSetConsumerRecord14 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 100, null = 100, serialized key size = 10, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1), value = 1)", (int) (short) 100, (long) (byte) 10, kafkaSpoutMessageIdSet10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 100, null = 100, serialized key size = 10, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1), value = 1)");
        java.lang.Class<?> wildcardClass15 = kafkaSpoutMessageIdSetConsumerRecord14.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>("KafkaSpout{acked=null, emitted=null}", (int) (byte) 0, 10L, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 100, null = 100, serialized key size = 10, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1), value = 1)", (java.lang.reflect.AnnotatedElement) wildcardClass15);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0434");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.kafka.common.record.TimestampType, java.util.ArrayList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> timestampTypeKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<org.apache.kafka.common.record.TimestampType, java.util.ArrayList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> timestampTypeKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.kafka.common.record.TimestampType, java.util.ArrayList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>(timestampTypeKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0435");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.lang.Cloneable, java.util.ArrayList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> cloneableKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.lang.Cloneable, java.util.ArrayList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> cloneableKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.Cloneable, java.util.ArrayList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>(cloneableKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0436");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("hi!", (int) (short) -1, (long) 0, 52L, timestampType4, (long) 35, 10, 1, (java.lang.Object) (byte) 1, (java.io.Serializable) 10.0d);
        java.util.Optional<java.lang.Integer> intOptional11 = objConsumerRecord10.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional12 = objConsumerRecord10.leaderEpoch();
        java.lang.Object obj13 = objConsumerRecord10.key();
        java.lang.String str14 = objConsumerRecord10.topic();
        org.junit.Assert.assertNotNull(intOptional11);
        org.junit.Assert.assertNotNull(intOptional12);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + (byte) 1 + "'", obj13, (byte) 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
    }

    @Test
    public void test0437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0437");
        org.apache.storm.kafka.spout.KafkaSpout<java.util.RandomAccess, java.util.List<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> randomAccessKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.util.RandomAccess, java.util.List<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>();
    }

    @Test
    public void test0438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0438");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<org.apache.kafka.common.header.Headers, java.util.AbstractList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>.KafkaSpoutConsumerRebalanceListener kafkaSpoutConsumerRebalanceListener1 = kafkaSpout0.new KafkaSpoutConsumerRebalanceListener();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$KafkaSpoutConsumerRebalanceListener with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0439");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType12 = null;
        java.lang.Object obj16 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord18 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("", 10, (long) (byte) -1, (long) '4', timestampType12, (long) (byte) 0, (int) (short) 10, (int) (byte) 100, obj16, (java.io.Serializable) 1);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String> objConsumerRecordConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String>("", (int) 'a', (long) (short) 10, (long) (byte) -1, timestampType4, (long) 'a', (int) (byte) -1, 0, objConsumerRecord18, "hi!");
        long long21 = objConsumerRecord18.checksum();
        java.util.Optional<java.lang.Integer> intOptional22 = objConsumerRecord18.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType23 = objConsumerRecord18.timestampType();
        long long24 = objConsumerRecord18.offset();
        java.lang.Object obj25 = objConsumerRecord18.key();
        java.util.Optional<java.lang.Integer> intOptional26 = objConsumerRecord18.leaderEpoch();
        java.lang.Class<?> wildcardClass27 = objConsumerRecord18.getClass();
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(intOptional22);
        org.junit.Assert.assertNull(timestampType23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNotNull(intOptional26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0440");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.Cloneable> objConsumerRecordKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.Cloneable> objConsumerRecordKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.Cloneable>(objConsumerRecordKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0441");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType12 = null;
        java.lang.Object obj16 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord18 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("", 10, (long) (byte) -1, (long) '4', timestampType12, (long) (byte) 0, (int) (short) 10, (int) (byte) 100, obj16, (java.io.Serializable) 1);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String> objConsumerRecordConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String>("", (int) 'a', (long) (short) 10, (long) (byte) -1, timestampType4, (long) 'a', (int) (byte) -1, 0, objConsumerRecord18, "hi!");
        long long21 = objConsumerRecord18.checksum();
        java.util.Optional<java.lang.Integer> intOptional22 = objConsumerRecord18.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType23 = objConsumerRecord18.timestampType();
        long long24 = objConsumerRecord18.offset();
        org.apache.kafka.common.header.Headers headers25 = objConsumerRecord18.headers();
        int int26 = objConsumerRecord18.partition();
        java.util.Optional<java.lang.Integer> intOptional27 = objConsumerRecord18.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional28 = objConsumerRecord18.leaderEpoch();
        org.apache.kafka.common.header.Headers headers29 = objConsumerRecord18.headers();
        java.lang.Class<?> wildcardClass30 = objConsumerRecord18.getClass();
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(intOptional22);
        org.junit.Assert.assertNull(timestampType23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertNotNull(headers25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(intOptional27);
        org.junit.Assert.assertNotNull(intOptional28);
        org.junit.Assert.assertNotNull(headers29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0442");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout3 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor4 = null;
        offsetComparatorKafkaSpout3.waitingToEmit = offsetComparatorConsumerRecordItor4;
        org.apache.kafka.common.TopicPartition topicPartition6 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection7 = offsetComparatorKafkaSpout3.toArrayList(topicPartition6);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray8 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet9 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet9, kafkaSpoutMessageIdArray8);
        offsetComparatorKafkaSpout3.emitted = kafkaSpoutMessageIdSet9;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout15 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor16 = null;
        offsetComparatorKafkaSpout15.waitingToEmit = offsetComparatorConsumerRecordItor16;
        org.apache.kafka.common.TopicPartition topicPartition18 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection19 = offsetComparatorKafkaSpout15.toArrayList(topicPartition18);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray20 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet21 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet21, kafkaSpoutMessageIdArray20);
        offsetComparatorKafkaSpout15.emitted = kafkaSpoutMessageIdSet21;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor24 = null;
        offsetComparatorKafkaSpout15.waitingToEmit = offsetComparatorConsumerRecordItor24;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator32 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout33 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer34 = null;
        offsetComparatorKafkaSpout33.kafkaConsumer = offsetComparatorKafkaConsumer34;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout36 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean37 = offsetComparatorKafkaSpout36.consumerAutoCommitMode;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray38 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet39 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet39, kafkaSpoutMessageIdArray38);
        offsetComparatorKafkaSpout36.emitted = kafkaSpoutMessageIdSet39;
        offsetComparatorKafkaSpout33.emitted = kafkaSpoutMessageIdSet39;
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> offsetComparatorConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)", (int) (short) -1, (long) 0, offsetComparator32, (java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet39);
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> iComponentKafkaSpout44 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.topology.IRichSpout> kafkaSpoutMessageIdSetConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.topology.IRichSpout>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)", (int) (byte) -1, (long) 1, kafkaSpoutMessageIdSet39, (org.apache.storm.topology.IRichSpout) iComponentKafkaSpout44);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>, java.lang.Cloneable> offsetComparatorKafkaSpoutConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>, java.lang.Cloneable>("", (int) (byte) 1, (long) '4', offsetComparatorKafkaSpout15, (java.lang.Cloneable) kafkaSpoutMessageIdSet39);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>("", (int) 'a', (long) (short) 0, (java.io.Serializable) offsetComparatorKafkaSpout3, (java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet39);
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>.Timer timer48 = offsetComparatorKafkaSpout3.commitTimer;
        offsetComparatorKafkaSpout3.consumerAutoCommitMode = false;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout3.doSeekRetriableTopicPartitions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection7);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(topicPartitionCollection19);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(timer48);
    }

    @Test
    public void test0443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0443");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        java.util.concurrent.TimeUnit timeUnit3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.lang.Cloneable, java.io.Serializable>.Timer timer4 = kafkaSpout0.new Timer(52L, (long) 10, timeUnit3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$Timer with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0444");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer1 = null;
        offsetComparatorKafkaSpout0.kafkaConsumer = offsetComparatorKafkaConsumer1;
        org.apache.storm.kafka.spout.KafkaSpoutStreams kafkaSpoutStreams3 = offsetComparatorKafkaSpout0.kafkaSpoutStreams;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.emit();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(kafkaSpoutStreams3);
    }

    @Test
    public void test0445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0445");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator0 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator0;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator2 = offsetComparator0.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator4 = kafkaSpoutMessageIdComparator2.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator5 = kafkaSpoutMessageIdComparator4.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator6 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator6;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator8 = offsetComparator6.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator9 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator10 = kafkaSpoutMessageIdComparator8.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator9);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator9;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator12 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator13 = offsetComparator9.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator12);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator14 = kafkaSpoutMessageIdComparator4.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator9);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator15 = org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator16 = kafkaSpoutMessageIdComparator15.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator17 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator17;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator19 = offsetComparator17.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator20 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator21 = kafkaSpoutMessageIdComparator19.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator20);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator22 = kafkaSpoutMessageIdComparator21.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator23 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator23;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator25 = offsetComparator23.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator26 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator27 = kafkaSpoutMessageIdComparator25.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator26);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator26;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator29 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator30 = offsetComparator26.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator29);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator31 = kafkaSpoutMessageIdComparator21.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator26);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator32 = kafkaSpoutMessageIdComparator15.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator26);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator33 = kafkaSpoutMessageIdComparator14.thenComparing(kafkaSpoutMessageIdComparator15);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator34 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator34;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator36 = offsetComparator34.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator37 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator38 = kafkaSpoutMessageIdComparator36.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator37);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator37;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator40 = kafkaSpoutMessageIdComparator33.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator37);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator41 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator41;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator43 = offsetComparator41.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator44 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator45 = kafkaSpoutMessageIdComparator43.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator44);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator43;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator47 = org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator48 = kafkaSpoutMessageIdComparator43.thenComparing(kafkaSpoutMessageIdComparator47);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator47;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator50 = offsetComparator37.thenComparing(kafkaSpoutMessageIdComparator47);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId51 = null;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId52 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int53 = offsetComparator37.compare(kafkaSpoutMessageId51, kafkaSpoutMessageId52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator2);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator5);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator8);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator10);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator13);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator14);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator15);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator16);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator19);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator21);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator22);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator25);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator27);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator30);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator31);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator32);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator33);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator36);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator38);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator40);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator43);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator45);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator47);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator48);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator50);
    }

    @Test
    public void test0446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0446");
        org.apache.storm.kafka.spout.KafkaSpout<java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.CharSequence> kafkaSpoutMessageIdSetKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.CharSequence>();
    }

    @Test
    public void test0447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0447");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray5 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet6, kafkaSpoutMessageIdArray5);
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet6;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor9 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor9;
        org.apache.storm.kafka.spout.internal.KafkaConsumerFactory kafkaConsumerFactory11 = offsetComparatorKafkaSpout0.kafkaConsumerFactory;
        org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy firstPollOffsetStrategy12 = null;
        offsetComparatorKafkaSpout0.firstPollOffsetStrategy = firstPollOffsetStrategy12;
        org.apache.storm.topology.OutputFieldsDeclarer outputFieldsDeclarer14 = null;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.declareOutputFields(outputFieldsDeclarer14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(kafkaConsumerFactory11);
    }

    @Test
    public void test0448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0448");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.topology.IComponent, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, java.io.Serializable>.KafkaSpoutConsumerRebalanceListener> iComponentKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, java.io.Serializable>.KafkaSpoutConsumerRebalanceListener> iComponentKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, java.io.Serializable>.KafkaSpoutConsumerRebalanceListener>(iComponentKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0449");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.storm.kafka.spout.internal.KafkaConsumerFactory kafkaConsumerFactory1 = null;
        offsetComparatorKafkaSpout0.kafkaConsumerFactory = kafkaConsumerFactory1;
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer3 = offsetComparatorKafkaSpout0.kafkaConsumer;
        boolean boolean4 = offsetComparatorKafkaSpout0.waitingToEmit();
        org.apache.storm.kafka.spout.KafkaSpoutStreams kafkaSpoutStreams5 = null;
        offsetComparatorKafkaSpout0.kafkaSpoutStreams = kafkaSpoutStreams5;
        org.apache.storm.spout.SpoutOutputCollector spoutOutputCollector7 = null;
        offsetComparatorKafkaSpout0.collector = spoutOutputCollector7;
        java.util.Map map9 = null;
        org.apache.storm.task.TopologyContext topologyContext10 = null;
        org.apache.storm.spout.SpoutOutputCollector spoutOutputCollector11 = null;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.open(map9, topologyContext10, spoutOutputCollector11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(offsetComparatorKafkaConsumer3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0450");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator0 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator0;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator2 = offsetComparator0.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator4 = kafkaSpoutMessageIdComparator2.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator2;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator6 = org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator7 = kafkaSpoutMessageIdComparator2.thenComparing(kafkaSpoutMessageIdComparator6);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator8 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator8;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator10 = offsetComparator8.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator11 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator12 = kafkaSpoutMessageIdComparator10.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator11);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator13 = kafkaSpoutMessageIdComparator12.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator14 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator14;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator16 = offsetComparator14.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator17 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator18 = kafkaSpoutMessageIdComparator16.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator17);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator17;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator20 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator21 = offsetComparator17.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator20);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator22 = kafkaSpoutMessageIdComparator12.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator17);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator23 = kafkaSpoutMessageIdComparator6.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator17);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator17;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator25 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator25;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator27 = offsetComparator25.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator28 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator29 = kafkaSpoutMessageIdComparator27.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator28);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator30 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator30;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator32 = kafkaSpoutMessageIdComparator27.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator30);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator33 = offsetComparator17.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator30);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator34 = offsetComparator17.reversed();
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId35 = null;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId36 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int37 = offsetComparator17.compare(kafkaSpoutMessageId35, kafkaSpoutMessageId36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator2);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator6);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator7);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator10);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator12);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator13);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator16);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator18);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator21);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator22);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator23);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator27);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator29);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator32);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator33);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator34);
    }

    @Test
    public void test0451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0451");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig5 = offsetComparatorKafkaSpout0.kafkaSpoutConfig;
        org.apache.storm.spout.SpoutOutputCollector spoutOutputCollector6 = offsetComparatorKafkaSpout0.collector;
        java.util.Set<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet7 = offsetComparatorKafkaSpout0.emitted;
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig8 = offsetComparatorKafkaSpout0.kafkaSpoutConfig;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = offsetComparatorKafkaSpout0.getWildCardTopics();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNull(offsetComparatorKafkaSpoutConfig5);
        org.junit.Assert.assertNull(spoutOutputCollector6);
        org.junit.Assert.assertNull(kafkaSpoutMessageIdSet7);
        org.junit.Assert.assertNull(offsetComparatorKafkaSpoutConfig8);
    }

    @Test
    public void test0452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0452");
        org.apache.storm.kafka.spout.KafkaSpout<java.util.Set<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.Cloneable> kafkaSpoutMessageIdSetKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.util.Set<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.Cloneable>();
    }

    @Test
    public void test0453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0453");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.topology.IComponent, java.util.AbstractCollection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> iComponentKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, java.util.AbstractCollection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> iComponentKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, java.util.AbstractCollection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>(iComponentKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0454");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.topology.IComponent, java.lang.Object> iComponentKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, java.lang.Object> iComponentKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, java.lang.Object>(iComponentKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0455");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.common.record.TimestampType timestampType15 = null;
        org.apache.kafka.common.record.TimestampType timestampType23 = null;
        java.lang.Object obj27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("", 10, (long) (byte) -1, (long) '4', timestampType23, (long) (byte) 0, (int) (short) 10, (int) (byte) 100, obj27, (java.io.Serializable) 1);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String> objConsumerRecordConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String>("", (int) 'a', (long) (short) 10, (long) (byte) -1, timestampType15, (long) 'a', (int) (byte) -1, 0, objConsumerRecord29, "hi!");
        long long32 = objConsumerRecord29.checksum();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("", (int) (short) 100, (long) 100, (long) (short) 100, timestampType7, (long) '4', (int) (byte) 10, (int) (short) 10, (java.lang.Object) objConsumerRecord29, (java.io.Serializable) 1L);
        java.lang.Object obj35 = objConsumerRecord34.key();
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.base.BaseComponent, java.util.AbstractCollection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> baseComponentKafkaSpout36 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.base.BaseComponent, java.util.AbstractCollection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("hi!", (int) ' ', (long) (-1), (java.lang.Object) objConsumerRecord34, (java.io.Serializable) baseComponentKafkaSpout36);
        org.apache.kafka.common.header.Headers headers38 = objConsumerRecord37.headers();
        java.lang.String str39 = objConsumerRecord37.topic();
        int int40 = objConsumerRecord37.serializedKeySize();
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)");
        org.junit.Assert.assertNotNull(headers38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
    }

    @Test
    public void test0456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0456");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>>.KafkaSpoutConsumerRebalanceListener kafkaSpoutConsumerRebalanceListener1 = kafkaSpout0.new KafkaSpoutConsumerRebalanceListener();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$KafkaSpoutConsumerRebalanceListener with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0457");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator14 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout15 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer16 = null;
        offsetComparatorKafkaSpout15.kafkaConsumer = offsetComparatorKafkaConsumer16;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout18 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean19 = offsetComparatorKafkaSpout18.consumerAutoCommitMode;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray20 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet21 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet21, kafkaSpoutMessageIdArray20);
        offsetComparatorKafkaSpout18.emitted = kafkaSpoutMessageIdSet21;
        offsetComparatorKafkaSpout15.emitted = kafkaSpoutMessageIdSet21;
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> offsetComparatorConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)", (int) (short) -1, (long) 0, offsetComparator14, (java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet21);
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> iComponentKafkaSpout26 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.topology.IRichSpout> kafkaSpoutMessageIdSetConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.topology.IRichSpout>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)", (int) (byte) -1, (long) 1, kafkaSpoutMessageIdSet21, (org.apache.storm.topology.IRichSpout) iComponentKafkaSpout26);
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout28 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer29 = null;
        offsetComparatorKafkaSpout28.kafkaConsumer = offsetComparatorKafkaConsumer29;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout31 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean32 = offsetComparatorKafkaSpout31.consumerAutoCommitMode;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray33 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet34 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet34, kafkaSpoutMessageIdArray33);
        offsetComparatorKafkaSpout31.emitted = kafkaSpoutMessageIdSet34;
        offsetComparatorKafkaSpout28.emitted = kafkaSpoutMessageIdSet34;
        java.util.Map<org.apache.kafka.common.TopicPartition, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>.OffsetEntry> topicPartitionMap38 = null;
        offsetComparatorKafkaSpout28.acked = topicPartitionMap38;
        org.apache.kafka.common.record.TimestampType timestampType47 = null;
        org.apache.kafka.common.record.TimestampType timestampType55 = null;
        org.apache.kafka.common.record.TimestampType timestampType63 = null;
        java.lang.Object obj67 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord69 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("", 10, (long) (byte) -1, (long) '4', timestampType63, (long) (byte) 0, (int) (short) 10, (int) (byte) 100, obj67, (java.io.Serializable) 1);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String> objConsumerRecordConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String>("", (int) 'a', (long) (short) 10, (long) (byte) -1, timestampType55, (long) 'a', (int) (byte) -1, 0, objConsumerRecord69, "hi!");
        long long72 = objConsumerRecord69.checksum();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("", (int) (short) 100, (long) 100, (long) (short) 100, timestampType47, (long) '4', (int) (byte) 10, (int) (short) 10, (java.lang.Object) objConsumerRecord69, (java.io.Serializable) 1L);
        java.lang.Object obj75 = objConsumerRecord74.key();
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.base.BaseComponent, java.util.AbstractCollection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> baseComponentKafkaSpout76 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.base.BaseComponent, java.util.AbstractCollection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("hi!", (int) ' ', (long) (-1), (java.lang.Object) objConsumerRecord74, (java.io.Serializable) baseComponentKafkaSpout76);
        org.apache.kafka.common.header.Headers headers78 = objConsumerRecord77.headers();
        java.util.Optional<java.lang.Integer> intOptional79 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("", (int) (byte) -1, (long) '4', (long) (byte) 100, timestampType4, (java.lang.Long) 0L, (int) ' ', 0, (java.lang.Object) iComponentKafkaSpout26, (java.io.Serializable) offsetComparatorKafkaSpout28, headers78, intOptional79);
        java.util.Optional<java.lang.Integer> intOptional81 = objConsumerRecord80.leaderEpoch();
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertEquals(obj75.toString(), "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj75), "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj75), "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)");
        org.junit.Assert.assertNotNull(headers78);
        org.junit.Assert.assertNull(intOptional81);
    }

    @Test
    public void test0458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0458");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator14 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout15 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer16 = null;
        offsetComparatorKafkaSpout15.kafkaConsumer = offsetComparatorKafkaConsumer16;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout18 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean19 = offsetComparatorKafkaSpout18.consumerAutoCommitMode;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray20 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet21 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet21, kafkaSpoutMessageIdArray20);
        offsetComparatorKafkaSpout18.emitted = kafkaSpoutMessageIdSet21;
        offsetComparatorKafkaSpout15.emitted = kafkaSpoutMessageIdSet21;
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> offsetComparatorConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)", (int) (short) -1, (long) 0, offsetComparator14, (java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet21);
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> iComponentKafkaSpout26 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.topology.IRichSpout> kafkaSpoutMessageIdSetConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, org.apache.storm.topology.IRichSpout>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)", (int) (byte) -1, (long) 1, kafkaSpoutMessageIdSet21, (org.apache.storm.topology.IRichSpout) iComponentKafkaSpout26);
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout28 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer29 = null;
        offsetComparatorKafkaSpout28.kafkaConsumer = offsetComparatorKafkaConsumer29;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout31 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean32 = offsetComparatorKafkaSpout31.consumerAutoCommitMode;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray33 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet34 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet34, kafkaSpoutMessageIdArray33);
        offsetComparatorKafkaSpout31.emitted = kafkaSpoutMessageIdSet34;
        offsetComparatorKafkaSpout28.emitted = kafkaSpoutMessageIdSet34;
        java.util.Map<org.apache.kafka.common.TopicPartition, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>.OffsetEntry> topicPartitionMap38 = null;
        offsetComparatorKafkaSpout28.acked = topicPartitionMap38;
        org.apache.kafka.common.record.TimestampType timestampType47 = null;
        org.apache.kafka.common.record.TimestampType timestampType55 = null;
        org.apache.kafka.common.record.TimestampType timestampType63 = null;
        java.lang.Object obj67 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord69 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("", 10, (long) (byte) -1, (long) '4', timestampType63, (long) (byte) 0, (int) (short) 10, (int) (byte) 100, obj67, (java.io.Serializable) 1);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String> objConsumerRecordConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String>("", (int) 'a', (long) (short) 10, (long) (byte) -1, timestampType55, (long) 'a', (int) (byte) -1, 0, objConsumerRecord69, "hi!");
        long long72 = objConsumerRecord69.checksum();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("", (int) (short) 100, (long) 100, (long) (short) 100, timestampType47, (long) '4', (int) (byte) 10, (int) (short) 10, (java.lang.Object) objConsumerRecord69, (java.io.Serializable) 1L);
        java.lang.Object obj75 = objConsumerRecord74.key();
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.base.BaseComponent, java.util.AbstractCollection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> baseComponentKafkaSpout76 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.base.BaseComponent, java.util.AbstractCollection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("hi!", (int) ' ', (long) (-1), (java.lang.Object) objConsumerRecord74, (java.io.Serializable) baseComponentKafkaSpout76);
        org.apache.kafka.common.header.Headers headers78 = objConsumerRecord77.headers();
        java.util.Optional<java.lang.Integer> intOptional79 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("", (int) (byte) -1, (long) '4', (long) (byte) 100, timestampType4, (java.lang.Long) 0L, (int) ' ', 0, (java.lang.Object) iComponentKafkaSpout26, (java.io.Serializable) offsetComparatorKafkaSpout28, headers78, intOptional79);
        org.apache.storm.spout.SpoutOutputCollector spoutOutputCollector81 = offsetComparatorKafkaSpout28.collector;
        java.util.Map<org.apache.kafka.common.TopicPartition, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>.OffsetEntry> topicPartitionMap82 = offsetComparatorKafkaSpout28.acked;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean83 = offsetComparatorKafkaSpout28.poll();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertEquals(obj75.toString(), "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj75), "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj75), "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)");
        org.junit.Assert.assertNotNull(headers78);
        org.junit.Assert.assertNull(spoutOutputCollector81);
        org.junit.Assert.assertNull(topicPartitionMap82);
    }

    @Test
    public void test0459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0459");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray5 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet6, kafkaSpoutMessageIdArray5);
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet6;
        java.util.Map<org.apache.kafka.common.TopicPartition, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>.OffsetEntry> topicPartitionMap9 = null;
        offsetComparatorKafkaSpout0.acked = topicPartitionMap9;
        java.util.Map<org.apache.kafka.common.TopicPartition, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>.OffsetEntry> topicPartitionMap11 = offsetComparatorKafkaSpout0.acked;
        int int12 = offsetComparatorKafkaSpout0.maxRetries;
        org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy firstPollOffsetStrategy13 = null;
        offsetComparatorKafkaSpout0.firstPollOffsetStrategy = firstPollOffsetStrategy13;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout15 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer16 = null;
        offsetComparatorKafkaSpout15.kafkaConsumer = offsetComparatorKafkaConsumer16;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout18 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean19 = offsetComparatorKafkaSpout18.consumerAutoCommitMode;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray20 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet21 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet21, kafkaSpoutMessageIdArray20);
        offsetComparatorKafkaSpout18.emitted = kafkaSpoutMessageIdSet21;
        offsetComparatorKafkaSpout15.emitted = kafkaSpoutMessageIdSet21;
        org.apache.storm.spout.SpoutOutputCollector spoutOutputCollector25 = null;
        offsetComparatorKafkaSpout15.collector = spoutOutputCollector25;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor27 = offsetComparatorKafkaSpout15.waitingToEmit;
        java.util.Set<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet28 = offsetComparatorKafkaSpout15.emitted;
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet28;
        offsetComparatorKafkaSpout0.maxRetries = (byte) 0;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.kafka.clients.consumer.ConsumerRecords<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorConsumerRecords32 = offsetComparatorKafkaSpout0.pollKafkaBroker();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(topicPartitionMap11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(offsetComparatorConsumerRecordItor27);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdSet28);
    }

    @Test
    public void test0460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0460");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray5 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet6, kafkaSpoutMessageIdArray5);
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet6;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor9 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor9;
        org.apache.storm.kafka.spout.internal.KafkaConsumerFactory kafkaConsumerFactory11 = offsetComparatorKafkaSpout0.kafkaConsumerFactory;
        java.lang.String str12 = offsetComparatorKafkaSpout0.toString();
        org.apache.storm.spout.SpoutOutputCollector spoutOutputCollector13 = null;
        offsetComparatorKafkaSpout0.collector = spoutOutputCollector13;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.activate();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(kafkaConsumerFactory11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "KafkaSpout{acked=null, emitted=[]}" + "'", str12, "KafkaSpout{acked=null, emitted=[]}");
    }

    @Test
    public void test0461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0461");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer1 = null;
        offsetComparatorKafkaSpout0.kafkaConsumer = offsetComparatorKafkaConsumer1;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout3 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean4 = offsetComparatorKafkaSpout3.consumerAutoCommitMode;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray5 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet6, kafkaSpoutMessageIdArray5);
        offsetComparatorKafkaSpout3.emitted = kafkaSpoutMessageIdSet6;
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet6;
        java.util.Map<org.apache.kafka.common.TopicPartition, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>.OffsetEntry> topicPartitionMap10 = null;
        offsetComparatorKafkaSpout0.acked = topicPartitionMap10;
        org.apache.storm.spout.SpoutOutputCollector spoutOutputCollector12 = null;
        offsetComparatorKafkaSpout0.collector = spoutOutputCollector12;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.subscribeKafkaConsumer();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0462");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.lang.String, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IRichSpout, org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>>.Timer> strKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.lang.String, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IRichSpout, org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>>.Timer> strKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.String, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IRichSpout, org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>>.Timer>(strKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0463");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.storm.topology.IComponent iComponent8 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.topology.IComponent, java.lang.String> iComponentConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.topology.IComponent, java.lang.String>("ConsumerRecord(topic = hi!, partition = -1, leaderEpoch = null, offset = 0, null = 100, serialized key size = 1, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 0)", 97, 0L, 1L, timestampType4, (long) (byte) -1, 32, (int) (byte) 0, iComponent8, "ConsumerRecord(topic = hi!, partition = -1, leaderEpoch = null, offset = 0, null = 52, serialized key size = 10, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = 10.0)");
    }

    @Test
    public void test0464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0464");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator0 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator0;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator2 = offsetComparator0.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator4 = kafkaSpoutMessageIdComparator2.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator3;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator6 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator7 = offsetComparator3.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator6);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator8 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator8;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator10 = offsetComparator8.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator11 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator12 = kafkaSpoutMessageIdComparator10.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator11);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator10;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator14 = org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator15 = kafkaSpoutMessageIdComparator10.thenComparing(kafkaSpoutMessageIdComparator14);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator16 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator16;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator18 = offsetComparator16.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator19 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator20 = kafkaSpoutMessageIdComparator18.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator19);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator21 = kafkaSpoutMessageIdComparator20.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator22 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator22;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator24 = offsetComparator22.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator25 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator26 = kafkaSpoutMessageIdComparator24.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator25);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator25;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator28 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator29 = offsetComparator25.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator28);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator30 = kafkaSpoutMessageIdComparator20.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator25);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator31 = kafkaSpoutMessageIdComparator14.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator25);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator25;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator33 = offsetComparator6.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator25);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator34 = offsetComparator6.reversed();
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId35 = null;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId36 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int37 = offsetComparator6.compare(kafkaSpoutMessageId35, kafkaSpoutMessageId36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator2);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator7);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator10);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator12);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator14);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator15);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator18);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator20);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator21);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator24);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator26);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator29);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator30);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator31);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator33);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator34);
    }

    @Test
    public void test0465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0465");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig5 = offsetComparatorKafkaSpout0.kafkaSpoutConfig;
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig6 = offsetComparatorKafkaSpout0.kafkaSpoutConfig;
        boolean boolean7 = offsetComparatorKafkaSpout0.waitingToEmit();
        org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy firstPollOffsetStrategy8 = offsetComparatorKafkaSpout0.firstPollOffsetStrategy;
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig9 = null;
        offsetComparatorKafkaSpout0.kafkaSpoutConfig = offsetComparatorKafkaSpoutConfig9;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean11 = offsetComparatorKafkaSpout0.commit();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNull(offsetComparatorKafkaSpoutConfig5);
        org.junit.Assert.assertNull(offsetComparatorKafkaSpoutConfig6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(firstPollOffsetStrategy8);
    }

    @Test
    public void test0466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0466");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout7 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor8 = null;
        offsetComparatorKafkaSpout7.waitingToEmit = offsetComparatorConsumerRecordItor8;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord11 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("hi!", (int) (byte) 0, 1L, (java.lang.Object) offsetComparatorConsumerRecordItor8, (java.io.Serializable) (-1));
        long long12 = objConsumerRecord11.offset();
        org.apache.kafka.common.record.TimestampType timestampType13 = objConsumerRecord11.timestampType();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator17 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator17;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator19 = offsetComparator17.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator20 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator21 = kafkaSpoutMessageIdComparator19.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator20);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator20;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator23 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator24 = offsetComparator20.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator23);
        org.apache.kafka.common.record.TimestampType timestampType29 = null;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator33 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator33;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator35 = offsetComparator33.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator36 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator37 = kafkaSpoutMessageIdComparator35.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator36);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator38 = kafkaSpoutMessageIdComparator37.reversed();
        org.apache.kafka.common.record.TimestampType timestampType43 = null;
        org.apache.storm.topology.base.BaseRichSpout baseRichSpout47 = null;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray48 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.ArrayList<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdList49 = new java.util.ArrayList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdList49, kafkaSpoutMessageIdArray48);
        org.apache.kafka.common.record.TimestampType timestampType55 = null;
        org.apache.kafka.common.record.TimestampType timestampType63 = null;
        java.lang.Object obj67 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord69 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("", 10, (long) (byte) -1, (long) '4', timestampType63, (long) (byte) 0, (int) (short) 10, (int) (byte) 100, obj67, (java.io.Serializable) 1);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String> objConsumerRecordConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String>("", (int) 'a', (long) (short) 10, (long) (byte) -1, timestampType55, (long) 'a', (int) (byte) -1, 0, objConsumerRecord69, "hi!");
        long long72 = objConsumerRecord69.checksum();
        java.util.Optional<java.lang.Integer> intOptional73 = objConsumerRecord69.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType74 = objConsumerRecord69.timestampType();
        org.apache.kafka.common.header.Headers headers75 = objConsumerRecord69.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.topology.base.BaseRichSpout, java.util.AbstractCollection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> baseRichSpoutConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.topology.base.BaseRichSpout, java.util.AbstractCollection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>("", (int) (byte) 1, (long) (byte) 0, (long) ' ', timestampType43, (java.lang.Long) 1L, (int) (short) -1, (int) '4', baseRichSpout47, (java.util.AbstractCollection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdList49, headers75);
        java.lang.Class<?> wildcardClass77 = kafkaSpoutMessageIdList49.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.reflect.Type> kafkaSpoutMessageIdComparatorConsumerRecord78 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.lang.reflect.Type>("hi!", (int) 'a', (long) (byte) 100, 1L, timestampType29, (long) (short) 0, (int) ' ', (int) (byte) 100, kafkaSpoutMessageIdComparator37, (java.lang.reflect.Type) wildcardClass77);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1), partition = 0, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = [], value = 0)", 10, (long) 10, (long) '#', timestampType13, (long) (byte) 1, (int) (byte) 10, (int) (byte) -1, (java.lang.Object) kafkaSpoutMessageIdComparator24, (java.io.Serializable) timestampType29);
        java.util.Optional<java.lang.Integer> intOptional80 = objConsumerRecord79.leaderEpoch();
        java.lang.Object obj81 = objConsumerRecord79.key();
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator19);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator21);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator24);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator35);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator37);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator38);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertNotNull(intOptional73);
        org.junit.Assert.assertNull(timestampType74);
        org.junit.Assert.assertNotNull(headers75);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertNotNull(intOptional80);
        org.junit.Assert.assertNotNull(obj81);
    }

    @Test
    public void test0467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0467");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.spout.ISpout, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> iSpoutKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.spout.ISpout, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>();
    }

    @Test
    public void test0468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0468");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutConfig5 = offsetComparatorKafkaSpout0.kafkaSpoutConfig;
        org.apache.kafka.common.TopicPartition topicPartition6 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection7 = offsetComparatorKafkaSpout0.toArrayList(topicPartition6);
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor8 = offsetComparatorKafkaSpout0.waitingToEmit;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean9 = offsetComparatorKafkaSpout0.poll();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNull(offsetComparatorKafkaSpoutConfig5);
        org.junit.Assert.assertNotNull(topicPartitionCollection7);
        org.junit.Assert.assertNull(offsetComparatorConsumerRecordItor8);
    }

    @Test
    public void test0469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0469");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator0 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator0;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator2 = offsetComparator0.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator4 = kafkaSpoutMessageIdComparator2.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator3;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator6 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator6;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator8 = offsetComparator6.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator9 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator10 = kafkaSpoutMessageIdComparator8.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator9);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator11 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator11;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator13 = offsetComparator11.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator14 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator15 = kafkaSpoutMessageIdComparator13.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator14);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator13;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator17 = org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator18 = kafkaSpoutMessageIdComparator13.thenComparing(kafkaSpoutMessageIdComparator17);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator19 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator19;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator21 = offsetComparator19.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator22 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator23 = kafkaSpoutMessageIdComparator21.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator22);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator24 = kafkaSpoutMessageIdComparator23.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator25 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator25;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator27 = offsetComparator25.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator28 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator29 = kafkaSpoutMessageIdComparator27.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator28);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator28;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator31 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator32 = offsetComparator28.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator31);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator33 = kafkaSpoutMessageIdComparator23.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator28);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator34 = kafkaSpoutMessageIdComparator17.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator28);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator35 = offsetComparator9.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator28);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator36 = offsetComparator9.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator37 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator37;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator39 = offsetComparator37.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator40 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator41 = kafkaSpoutMessageIdComparator39.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator40);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator42 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator42;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator44 = kafkaSpoutMessageIdComparator39.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator42);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator45 = offsetComparator9.thenComparing(kafkaSpoutMessageIdComparator39);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator45;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator47 = offsetComparator3.thenComparing(kafkaSpoutMessageIdComparator45);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator3;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId49 = null;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId50 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int51 = offsetComparator3.compare(kafkaSpoutMessageId49, kafkaSpoutMessageId50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator2);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator8);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator10);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator13);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator15);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator17);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator18);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator21);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator23);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator24);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator27);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator29);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator32);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator33);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator34);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator35);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator36);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator39);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator41);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator44);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator45);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator47);
    }

    @Test
    public void test0470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0470");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IRichSpout, org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>>.Timer, org.apache.storm.topology.base.BaseRichSpout> timerKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IRichSpout, org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>>.Timer, org.apache.storm.topology.base.BaseRichSpout>();
    }

    @Test
    public void test0471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0471");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> timestampTypeEnumKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>();
    }

    @Test
    public void test0472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0472");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.kafka.common.record.TimestampType, java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> timestampTypeKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<org.apache.kafka.common.record.TimestampType, java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> timestampTypeKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.kafka.common.record.TimestampType, java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>(timestampTypeKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0473");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator0 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator0;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator2 = offsetComparator0.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator4 = kafkaSpoutMessageIdComparator2.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator5 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator5;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator7 = offsetComparator5.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator8 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator9 = kafkaSpoutMessageIdComparator7.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator8);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator7;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator11 = org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator12 = kafkaSpoutMessageIdComparator7.thenComparing(kafkaSpoutMessageIdComparator11);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator13 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator13;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator15 = offsetComparator13.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator16 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator17 = kafkaSpoutMessageIdComparator15.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator16);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator18 = kafkaSpoutMessageIdComparator17.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator19 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator19;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator21 = offsetComparator19.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator22 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator23 = kafkaSpoutMessageIdComparator21.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator22);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator22;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator25 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator26 = offsetComparator22.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator25);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator27 = kafkaSpoutMessageIdComparator17.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator22);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator28 = kafkaSpoutMessageIdComparator11.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator22);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator29 = offsetComparator3.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator22);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator30 = offsetComparator3.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator31 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator31;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator33 = offsetComparator31.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator34 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator35 = kafkaSpoutMessageIdComparator33.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator34);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator36 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator36;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator38 = kafkaSpoutMessageIdComparator33.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator36);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator39 = offsetComparator3.thenComparing(kafkaSpoutMessageIdComparator33);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator3;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator41 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator41;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator43 = offsetComparator41.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator44 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator45 = kafkaSpoutMessageIdComparator43.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator44);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator46 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator46;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator48 = offsetComparator46.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator49 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator50 = kafkaSpoutMessageIdComparator48.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator49);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator48;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator52 = org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator53 = kafkaSpoutMessageIdComparator48.thenComparing(kafkaSpoutMessageIdComparator52);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator54 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator54;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator56 = offsetComparator54.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator57 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator58 = kafkaSpoutMessageIdComparator56.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator57);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator59 = kafkaSpoutMessageIdComparator58.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator60 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator60;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator62 = offsetComparator60.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator63 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator64 = kafkaSpoutMessageIdComparator62.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator63);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator63;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator66 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator67 = offsetComparator63.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator66);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator68 = kafkaSpoutMessageIdComparator58.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator63);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator69 = kafkaSpoutMessageIdComparator52.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator63);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator70 = offsetComparator44.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator63);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator71 = offsetComparator44.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator72 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator72;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator74 = offsetComparator72.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator75 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator76 = kafkaSpoutMessageIdComparator74.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator75);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator77 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator77;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator79 = kafkaSpoutMessageIdComparator74.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator77);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator80 = offsetComparator44.thenComparing(kafkaSpoutMessageIdComparator74);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator44;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator82 = offsetComparator3.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator44);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId83 = null;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId84 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int85 = offsetComparator44.compare(kafkaSpoutMessageId83, kafkaSpoutMessageId84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator2);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator7);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator9);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator11);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator12);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator15);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator17);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator18);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator21);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator23);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator26);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator27);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator28);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator29);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator30);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator33);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator35);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator38);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator39);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator43);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator45);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator48);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator50);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator52);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator53);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator56);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator58);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator59);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator62);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator64);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator67);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator68);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator69);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator70);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator71);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator74);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator76);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator79);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator80);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator82);
    }

    @Test
    public void test0474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0474");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator0 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator0;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator2 = offsetComparator0.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator4 = kafkaSpoutMessageIdComparator2.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator5 = kafkaSpoutMessageIdComparator4.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator6 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator6;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator8 = offsetComparator6.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator9 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator10 = kafkaSpoutMessageIdComparator8.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator9);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator9;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator12 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator13 = offsetComparator9.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator12);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator14 = kafkaSpoutMessageIdComparator4.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator9);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator15 = offsetComparator9.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator9;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId17 = null;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId18 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int19 = offsetComparator9.compare(kafkaSpoutMessageId17, kafkaSpoutMessageId18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator2);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator5);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator8);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator10);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator13);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator14);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator15);
    }

    @Test
    public void test0475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0475");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer1 = null;
        offsetComparatorKafkaSpout0.kafkaConsumer = offsetComparatorKafkaConsumer1;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout3 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean4 = offsetComparatorKafkaSpout3.consumerAutoCommitMode;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray5 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet6, kafkaSpoutMessageIdArray5);
        offsetComparatorKafkaSpout3.emitted = kafkaSpoutMessageIdSet6;
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet6;
        java.util.Map<org.apache.kafka.common.TopicPartition, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>.OffsetEntry> topicPartitionMap10 = null;
        offsetComparatorKafkaSpout0.acked = topicPartitionMap10;
        org.apache.storm.spout.SpoutOutputCollector spoutOutputCollector12 = null;
        offsetComparatorKafkaSpout0.collector = spoutOutputCollector12;
        java.util.Set<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet14 = offsetComparatorKafkaSpout0.emitted;
        org.apache.storm.kafka.spout.KafkaSpoutTuplesBuilder<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpoutTuplesBuilder15 = null;
        offsetComparatorKafkaSpout0.tuplesBuilder = offsetComparatorKafkaSpoutTuplesBuilder15;
        boolean boolean17 = offsetComparatorKafkaSpout0.initialized;
        org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy firstPollOffsetStrategy18 = null;
        offsetComparatorKafkaSpout0.firstPollOffsetStrategy = firstPollOffsetStrategy18;
        org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy firstPollOffsetStrategy20 = offsetComparatorKafkaSpout0.firstPollOffsetStrategy;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean21 = offsetComparatorKafkaSpout0.commit();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdSet14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(firstPollOffsetStrategy20);
    }

    @Test
    public void test0476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0476");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        java.util.Map<org.apache.kafka.common.TopicPartition, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>.OffsetEntry> topicPartitionMap5 = null;
        offsetComparatorKafkaSpout0.acked = topicPartitionMap5;
        org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy firstPollOffsetStrategy7 = null;
        offsetComparatorKafkaSpout0.firstPollOffsetStrategy = firstPollOffsetStrategy7;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean9 = offsetComparatorKafkaSpout0.commit();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
    }

    @Test
    public void test0477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0477");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer1 = null;
        offsetComparatorKafkaSpout0.kafkaConsumer = offsetComparatorKafkaConsumer1;
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService3 = offsetComparatorKafkaSpout0.retryService;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.activate();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(kafkaSpoutRetryService3);
    }

    @Test
    public void test0478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0478");
        org.apache.kafka.common.record.TimestampType timestampType3 = null;
        org.apache.kafka.common.record.TimestampType timestampType8 = null;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout15 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean16 = offsetComparatorKafkaSpout15.consumerAutoCommitMode;
        org.apache.kafka.common.TopicPartition topicPartition17 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection18 = offsetComparatorKafkaSpout15.toArrayList(topicPartition17);
        org.apache.kafka.common.record.TimestampType timestampType23 = null;
        org.apache.storm.topology.base.BaseRichSpout baseRichSpout27 = null;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray28 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.ArrayList<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdList29 = new java.util.ArrayList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdList29, kafkaSpoutMessageIdArray28);
        org.apache.kafka.common.record.TimestampType timestampType35 = null;
        org.apache.kafka.common.record.TimestampType timestampType43 = null;
        java.lang.Object obj47 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("", 10, (long) (byte) -1, (long) '4', timestampType43, (long) (byte) 0, (int) (short) 10, (int) (byte) 100, obj47, (java.io.Serializable) 1);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String> objConsumerRecordConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String>("", (int) 'a', (long) (short) 10, (long) (byte) -1, timestampType35, (long) 'a', (int) (byte) -1, 0, objConsumerRecord49, "hi!");
        long long52 = objConsumerRecord49.checksum();
        java.util.Optional<java.lang.Integer> intOptional53 = objConsumerRecord49.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType54 = objConsumerRecord49.timestampType();
        org.apache.kafka.common.header.Headers headers55 = objConsumerRecord49.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.topology.base.BaseRichSpout, java.util.AbstractCollection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> baseRichSpoutConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.topology.base.BaseRichSpout, java.util.AbstractCollection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>("", (int) (byte) 1, (long) (byte) 0, (long) ' ', timestampType23, (java.lang.Long) 1L, (int) (short) -1, (int) '4', baseRichSpout27, (java.util.AbstractCollection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdList29, headers55);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.TopicPartition>, java.util.AbstractList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> topicPartitionIterableConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.TopicPartition>, java.util.AbstractList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 100, null = 100, serialized key size = 10, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1), value = 1)", (int) ' ', (long) 10, (java.lang.Iterable<org.apache.kafka.common.TopicPartition>) topicPartitionCollection18, (java.util.AbstractList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdList29);
        org.apache.storm.topology.base.BaseComponent baseComponent58 = null;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout62 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor63 = null;
        offsetComparatorKafkaSpout62.waitingToEmit = offsetComparatorConsumerRecordItor63;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("hi!", (int) (byte) 0, 1L, (java.lang.Object) offsetComparatorConsumerRecordItor63, (java.io.Serializable) (-1));
        org.apache.kafka.common.header.Headers headers67 = objConsumerRecord66.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.RandomAccess, org.apache.storm.topology.base.BaseComponent> randomAccessConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.RandomAccess, org.apache.storm.topology.base.BaseComponent>("ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = -1)", (int) (byte) 100, (long) (short) 10, 1L, timestampType8, (java.lang.Long) 52L, (int) ' ', (int) (byte) -1, (java.util.RandomAccess) kafkaSpoutMessageIdList29, baseComponent58, headers67);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.util.RandomAccess> timestampTypeConsumerRecord69 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.util.RandomAccess>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = 10)", (-1), (-1L), timestampType3, (java.util.RandomAccess) kafkaSpoutMessageIdList29);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(topicPartitionCollection18);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(intOptional53);
        org.junit.Assert.assertNull(timestampType54);
        org.junit.Assert.assertNotNull(headers55);
        org.junit.Assert.assertNotNull(headers67);
    }

    @Test
    public void test0479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0479");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        org.apache.kafka.common.TopicPartition topicPartition1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.spout.ISpout, java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>.OffsetEntry offsetEntry3 = kafkaSpout0.new OffsetEntry(topicPartition1, (long) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$OffsetEntry with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0480");
        org.apache.storm.kafka.spout.KafkaSpout<java.lang.Object, java.lang.Comparable<java.lang.String>> objKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.Object, java.lang.Comparable<java.lang.String>>();
    }

    @Test
    public void test0481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0481");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.lang.Iterable<org.apache.kafka.common.TopicPartition>, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, java.io.Serializable>.KafkaSpoutConsumerRebalanceListener>.OffsetEntry offsetEntry1 = kafkaSpout0.new OffsetEntry();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$OffsetEntry with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0482");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, org.apache.kafka.clients.consumer.ConsumerRebalanceListener> objConsumerRecordKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, org.apache.kafka.clients.consumer.ConsumerRebalanceListener>();
    }

    @Test
    public void test0483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0483");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType12 = null;
        org.apache.kafka.common.record.TimestampType timestampType20 = null;
        java.lang.Object obj24 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("", 10, (long) (byte) -1, (long) '4', timestampType20, (long) (byte) 0, (int) (short) 10, (int) (byte) 100, obj24, (java.io.Serializable) 1);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String> objConsumerRecordConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String>("", (int) 'a', (long) (short) 10, (long) (byte) -1, timestampType12, (long) 'a', (int) (byte) -1, 0, objConsumerRecord26, "hi!");
        long long29 = objConsumerRecord26.checksum();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("", (int) (short) 100, (long) 100, (long) (short) 100, timestampType4, (long) '4', (int) (byte) 10, (int) (short) 10, (java.lang.Object) objConsumerRecord26, (java.io.Serializable) 1L);
        long long32 = objConsumerRecord26.checksum();
        java.lang.Object obj33 = objConsumerRecord26.key();
        int int34 = objConsumerRecord26.serializedValueSize();
        int int35 = objConsumerRecord26.serializedKeySize();
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
    }

    @Test
    public void test0484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0484");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType12 = null;
        java.lang.Object obj16 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord18 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("", 10, (long) (byte) -1, (long) '4', timestampType12, (long) (byte) 0, (int) (short) 10, (int) (byte) 100, obj16, (java.io.Serializable) 1);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String> objConsumerRecordConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String>("", (int) 'a', (long) (short) 10, (long) (byte) -1, timestampType4, (long) 'a', (int) (byte) -1, 0, objConsumerRecord18, "hi!");
        int int21 = objConsumerRecord18.serializedKeySize();
        java.lang.String str22 = objConsumerRecord18.toString();
        java.lang.String str23 = objConsumerRecord18.toString();
        long long24 = objConsumerRecord18.offset();
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)" + "'", str22, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)" + "'", str23, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
    }

    @Test
    public void test0485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0485");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean1 = offsetComparatorKafkaSpout0.consumerAutoCommitMode;
        int int2 = offsetComparatorKafkaSpout0.maxRetries;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor3 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor3;
        boolean boolean5 = offsetComparatorKafkaSpout0.initialized;
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService6 = null;
        offsetComparatorKafkaSpout0.retryService = kafkaSpoutRetryService6;
        java.lang.Class<?> wildcardClass8 = offsetComparatorKafkaSpout0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0486");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator0 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator0;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator2 = offsetComparator0.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator4 = kafkaSpoutMessageIdComparator2.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator2;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator6 = org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator7 = kafkaSpoutMessageIdComparator2.thenComparing(kafkaSpoutMessageIdComparator6);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator8 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator8;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator10 = offsetComparator8.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator11 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator12 = kafkaSpoutMessageIdComparator10.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator11);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator13 = kafkaSpoutMessageIdComparator12.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator14 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator14;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator16 = offsetComparator14.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator17 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator18 = kafkaSpoutMessageIdComparator16.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator17);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator17;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator20 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator21 = offsetComparator17.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator20);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator22 = kafkaSpoutMessageIdComparator12.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator17);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator23 = kafkaSpoutMessageIdComparator6.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator17);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator17;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator25 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator25;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator27 = offsetComparator25.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator28 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator29 = kafkaSpoutMessageIdComparator27.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator28);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator30 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator30;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator32 = kafkaSpoutMessageIdComparator27.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator30);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator33 = offsetComparator17.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator30);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId34 = null;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId35 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int36 = offsetComparator30.compare(kafkaSpoutMessageId34, kafkaSpoutMessageId35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator2);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator6);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator7);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator10);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator12);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator13);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator16);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator18);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator21);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator22);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator23);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator27);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator29);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator32);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator33);
    }

    @Test
    public void test0487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0487");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.common.record.TimestampType timestampType15 = null;
        org.apache.kafka.common.record.TimestampType timestampType23 = null;
        java.lang.Object obj27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("", 10, (long) (byte) -1, (long) '4', timestampType23, (long) (byte) 0, (int) (short) 10, (int) (byte) 100, obj27, (java.io.Serializable) 1);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String> objConsumerRecordConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String>("", (int) 'a', (long) (short) 10, (long) (byte) -1, timestampType15, (long) 'a', (int) (byte) -1, 0, objConsumerRecord29, "hi!");
        long long32 = objConsumerRecord29.checksum();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("", (int) (short) 100, (long) 100, (long) (short) 100, timestampType7, (long) '4', (int) (byte) 10, (int) (short) 10, (java.lang.Object) objConsumerRecord29, (java.io.Serializable) 1L);
        java.lang.Object obj35 = objConsumerRecord34.key();
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.base.BaseComponent, java.util.AbstractCollection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> baseComponentKafkaSpout36 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.base.BaseComponent, java.util.AbstractCollection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("hi!", (int) ' ', (long) (-1), (java.lang.Object) objConsumerRecord34, (java.io.Serializable) baseComponentKafkaSpout36);
        long long38 = objConsumerRecord37.timestamp();
        int int39 = objConsumerRecord37.serializedKeySize();
        java.lang.Object obj40 = objConsumerRecord37.key();
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1L) + "'", long38 == (-1L));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 100, null = 100, serialized key size = 10, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1), value = 1)");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 100, null = 100, serialized key size = 10, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1), value = 1)");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 100, null = 100, serialized key size = 10, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1), value = 1)");
    }

    @Test
    public void test0488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0488");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType12 = null;
        java.lang.Object obj16 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord18 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("", 10, (long) (byte) -1, (long) '4', timestampType12, (long) (byte) 0, (int) (short) 10, (int) (byte) 100, obj16, (java.io.Serializable) 1);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String> objConsumerRecordConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String>("", (int) 'a', (long) (short) 10, (long) (byte) -1, timestampType4, (long) 'a', (int) (byte) -1, 0, objConsumerRecord18, "hi!");
        long long21 = objConsumerRecord18.checksum();
        java.util.Optional<java.lang.Integer> intOptional22 = objConsumerRecord18.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType23 = objConsumerRecord18.timestampType();
        long long24 = objConsumerRecord18.offset();
        int int25 = objConsumerRecord18.serializedKeySize();
        java.io.Serializable serializable26 = objConsumerRecord18.value();
        java.io.Serializable serializable27 = objConsumerRecord18.value();
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(intOptional22);
        org.junit.Assert.assertNull(timestampType23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertEquals("'" + serializable26 + "' != '" + 1 + "'", serializable26, 1);
        org.junit.Assert.assertEquals("'" + serializable27 + "' != '" + 1 + "'", serializable27, 1);
    }

    @Test
    public void test0489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0489");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean1 = offsetComparatorKafkaSpout0.consumerAutoCommitMode;
        org.apache.kafka.common.TopicPartition topicPartition2 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection3 = offsetComparatorKafkaSpout0.toArrayList(topicPartition2);
        long long4 = offsetComparatorKafkaSpout0.numUncommittedOffsets;
        long long5 = offsetComparatorKafkaSpout0.numUncommittedOffsets;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>.Timer timer6 = offsetComparatorKafkaSpout0.commitTimer;
        boolean boolean7 = offsetComparatorKafkaSpout0.waitingToEmit();
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(topicPartitionCollection3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(timer6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0490");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer1 = null;
        offsetComparatorKafkaSpout0.kafkaConsumer = offsetComparatorKafkaConsumer1;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout3 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean4 = offsetComparatorKafkaSpout3.consumerAutoCommitMode;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray5 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet6, kafkaSpoutMessageIdArray5);
        offsetComparatorKafkaSpout3.emitted = kafkaSpoutMessageIdSet6;
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet6;
        java.util.Map<org.apache.kafka.common.TopicPartition, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>.OffsetEntry> topicPartitionMap10 = null;
        offsetComparatorKafkaSpout0.acked = topicPartitionMap10;
        org.apache.storm.spout.SpoutOutputCollector spoutOutputCollector12 = null;
        offsetComparatorKafkaSpout0.collector = spoutOutputCollector12;
        java.util.Set<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet14 = offsetComparatorKafkaSpout0.emitted;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.activate();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdSet14);
    }

    @Test
    public void test0491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0491");
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator0 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator0;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator2 = offsetComparator0.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator3 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator4 = kafkaSpoutMessageIdComparator2.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator3);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator2;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator6 = org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator7 = kafkaSpoutMessageIdComparator2.thenComparing(kafkaSpoutMessageIdComparator6);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator8 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator8;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator10 = offsetComparator8.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator11 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator12 = kafkaSpoutMessageIdComparator10.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator11);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator13 = kafkaSpoutMessageIdComparator12.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator14 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator14;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator16 = offsetComparator14.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator17 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator18 = kafkaSpoutMessageIdComparator16.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator17);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator17;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator20 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator21 = offsetComparator17.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator20);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator22 = kafkaSpoutMessageIdComparator12.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator17);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator23 = kafkaSpoutMessageIdComparator6.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator17);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator24 = offsetComparator17.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator25 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator25;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator27 = offsetComparator25.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator28 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator29 = kafkaSpoutMessageIdComparator27.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator28);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator28;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator31 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator31;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator33 = offsetComparator31.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator34 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator35 = kafkaSpoutMessageIdComparator33.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator34);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = kafkaSpoutMessageIdComparator33;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator37 = org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator38 = kafkaSpoutMessageIdComparator33.thenComparing(kafkaSpoutMessageIdComparator37);
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator39 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator39;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator41 = offsetComparator39.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator42 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator43 = kafkaSpoutMessageIdComparator41.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator42);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator44 = kafkaSpoutMessageIdComparator43.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator45 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator45;
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator47 = offsetComparator45.reversed();
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator48 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator49 = kafkaSpoutMessageIdComparator47.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator48);
        org.apache.storm.kafka.spout.KafkaSpout.OFFSET_COMPARATOR = offsetComparator48;
        org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator offsetComparator51 = new org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator();
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator52 = offsetComparator48.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator51);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator53 = kafkaSpoutMessageIdComparator43.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator48);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator54 = kafkaSpoutMessageIdComparator37.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator48);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator55 = offsetComparator28.thenComparing(kafkaSpoutMessageIdComparator54);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator56 = offsetComparator17.thenComparing((java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) offsetComparator28);
        java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdComparator57 = offsetComparator28.reversed();
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId58 = null;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId kafkaSpoutMessageId59 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int60 = offsetComparator28.compare(kafkaSpoutMessageId58, kafkaSpoutMessageId59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator2);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator6);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator7);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator10);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator12);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator13);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator16);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator18);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator21);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator22);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator23);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator24);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator27);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator29);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator33);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator35);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator37);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator38);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator41);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator43);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator44);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator47);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator49);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator52);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator53);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator54);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator55);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator56);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdComparator57);
    }

    @Test
    public void test0492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0492");
        org.apache.storm.kafka.spout.KafkaSpout kafkaSpout0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.util.AbstractCollection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.util.HashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>.KafkaSpoutConsumerRebalanceListener kafkaSpoutConsumerRebalanceListener1 = kafkaSpout0.new KafkaSpoutConsumerRebalanceListener();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.storm.kafka.spout.KafkaSpout$KafkaSpoutConsumerRebalanceListener with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0493");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray5 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet6, kafkaSpoutMessageIdArray5);
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet6;
        java.util.Map<org.apache.kafka.common.TopicPartition, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>.OffsetEntry> topicPartitionMap9 = null;
        offsetComparatorKafkaSpout0.acked = topicPartitionMap9;
        java.util.Map<org.apache.kafka.common.TopicPartition, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>.OffsetEntry> topicPartitionMap11 = offsetComparatorKafkaSpout0.acked;
        int int12 = offsetComparatorKafkaSpout0.maxRetries;
        org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy firstPollOffsetStrategy13 = null;
        offsetComparatorKafkaSpout0.firstPollOffsetStrategy = firstPollOffsetStrategy13;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout15 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        org.apache.kafka.clients.consumer.KafkaConsumer<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaConsumer16 = null;
        offsetComparatorKafkaSpout15.kafkaConsumer = offsetComparatorKafkaConsumer16;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout18 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean19 = offsetComparatorKafkaSpout18.consumerAutoCommitMode;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray20 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet21 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet21, kafkaSpoutMessageIdArray20);
        offsetComparatorKafkaSpout18.emitted = kafkaSpoutMessageIdSet21;
        offsetComparatorKafkaSpout15.emitted = kafkaSpoutMessageIdSet21;
        org.apache.storm.spout.SpoutOutputCollector spoutOutputCollector25 = null;
        offsetComparatorKafkaSpout15.collector = spoutOutputCollector25;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor27 = offsetComparatorKafkaSpout15.waitingToEmit;
        java.util.Set<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet28 = offsetComparatorKafkaSpout15.emitted;
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet28;
        offsetComparatorKafkaSpout0.maxRetries = (byte) 0;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>.Timer timer32 = offsetComparatorKafkaSpout0.commitTimer;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(topicPartitionMap11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(offsetComparatorConsumerRecordItor27);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdSet28);
        org.junit.Assert.assertNull(timer32);
    }

    @Test
    public void test0494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0494");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType12 = null;
        org.apache.kafka.common.record.TimestampType timestampType20 = null;
        java.lang.Object obj24 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("", 10, (long) (byte) -1, (long) '4', timestampType20, (long) (byte) 0, (int) (short) 10, (int) (byte) 100, obj24, (java.io.Serializable) 1);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String> objConsumerRecordConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String>("", (int) 'a', (long) (short) 10, (long) (byte) -1, timestampType12, (long) 'a', (int) (byte) -1, 0, objConsumerRecord26, "hi!");
        long long29 = objConsumerRecord26.checksum();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("", (int) (short) 100, (long) 100, (long) (short) 100, timestampType4, (long) '4', (int) (byte) 10, (int) (short) 10, (java.lang.Object) objConsumerRecord26, (java.io.Serializable) 1L);
        long long32 = objConsumerRecord26.checksum();
        java.lang.Object obj33 = objConsumerRecord26.key();
        long long34 = objConsumerRecord26.offset();
        java.util.Optional<java.lang.Integer> intOptional35 = objConsumerRecord26.leaderEpoch();
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
        org.junit.Assert.assertNotNull(intOptional35);
    }

    @Test
    public void test0495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0495");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.util.List<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> kafkaSpoutMessageIdSetKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.util.List<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> kafkaSpoutMessageIdSetKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.util.List<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>(kafkaSpoutMessageIdSetKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0496");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> kafkaSpoutMessageIdComparatorKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> kafkaSpoutMessageIdComparatorKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>, java.util.AbstractSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>(kafkaSpoutMessageIdComparatorKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0497");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout3 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor4 = null;
        offsetComparatorKafkaSpout3.waitingToEmit = offsetComparatorConsumerRecordItor4;
        org.apache.kafka.common.TopicPartition topicPartition6 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection7 = offsetComparatorKafkaSpout3.toArrayList(topicPartition6);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray8 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet9 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet9, kafkaSpoutMessageIdArray8);
        offsetComparatorKafkaSpout3.emitted = kafkaSpoutMessageIdSet9;
        offsetComparatorKafkaSpout3.maxRetries = 100;
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor14 = null;
        offsetComparatorKafkaSpout3.waitingToEmit = offsetComparatorConsumerRecordItor14;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout<java.lang.Object, java.io.Serializable>.OffsetEntry, java.lang.reflect.Type> offsetEntryKafkaSpout16 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout<java.lang.Object, java.io.Serializable>.OffsetEntry, java.lang.reflect.Type>();
        java.lang.Class<?> wildcardClass17 = offsetEntryKafkaSpout16.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord18 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = -1)", (int) '4', (long) 0, (java.lang.Object) offsetComparatorKafkaSpout3, (java.io.Serializable) wildcardClass17);
        java.lang.Class<?> wildcardClass19 = objConsumerRecord18.getClass();
        org.junit.Assert.assertNotNull(topicPartitionCollection7);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0498");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.base.BaseComponent, java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> baseComponentKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.base.BaseComponent, java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>();
    }

    @Test
    public void test0499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0499");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout0 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        java.util.Iterator<org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>> offsetComparatorConsumerRecordItor1 = null;
        offsetComparatorKafkaSpout0.waitingToEmit = offsetComparatorConsumerRecordItor1;
        org.apache.kafka.common.TopicPartition topicPartition3 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection4 = offsetComparatorKafkaSpout0.toArrayList(topicPartition3);
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray5 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet6 = new java.util.LinkedHashSet<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdSet6, kafkaSpoutMessageIdArray5);
        offsetComparatorKafkaSpout0.emitted = kafkaSpoutMessageIdSet6;
        java.util.Map<org.apache.kafka.common.TopicPartition, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>.OffsetEntry> topicPartitionMap9 = null;
        offsetComparatorKafkaSpout0.acked = topicPartitionMap9;
        org.apache.storm.spout.SpoutOutputCollector spoutOutputCollector11 = offsetComparatorKafkaSpout0.collector;
        java.util.Map<org.apache.kafka.common.TopicPartition, org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>.OffsetEntry> topicPartitionMap12 = offsetComparatorKafkaSpout0.acked;
        org.apache.storm.kafka.spout.KafkaSpoutRetryService kafkaSpoutRetryService13 = null;
        offsetComparatorKafkaSpout0.retryService = kafkaSpoutRetryService13;
        java.util.Set<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdSet15 = offsetComparatorKafkaSpout0.emitted;
        long long16 = offsetComparatorKafkaSpout0.numUncommittedOffsets;
        // The following exception was thrown during execution in test generation
        try {
            offsetComparatorKafkaSpout0.shutdown();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(topicPartitionCollection4);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(spoutOutputCollector11);
        org.junit.Assert.assertNull(topicPartitionMap12);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdSet15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test0500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0500");
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String> offsetComparatorKafkaSpout3 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.kafka.spout.KafkaSpout.OffsetComparator, java.lang.String>();
        boolean boolean4 = offsetComparatorKafkaSpout3.consumerAutoCommitMode;
        org.apache.kafka.common.TopicPartition topicPartition5 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection6 = offsetComparatorKafkaSpout3.toArrayList(topicPartition5);
        org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy firstPollOffsetStrategy7 = null;
        offsetComparatorKafkaSpout3.firstPollOffsetStrategy = firstPollOffsetStrategy7;
        org.apache.kafka.common.TopicPartition topicPartition9 = null;
        java.util.Collection<org.apache.kafka.common.TopicPartition> topicPartitionCollection10 = offsetComparatorKafkaSpout3.toArrayList(topicPartition9);
        org.apache.kafka.common.record.TimestampType timestampType15 = null;
        org.apache.kafka.common.record.TimestampType timestampType23 = null;
        org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> iComponentKafkaSpout27 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.storm.topology.IComponent, java.util.Comparator<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>();
        java.lang.Class<?> wildcardClass28 = iComponentKafkaSpout27.getClass();
        org.apache.kafka.common.record.TimestampType timestampType34 = null;
        org.apache.kafka.common.record.TimestampType timestampType42 = null;
        java.lang.Object obj46 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("", 10, (long) (byte) -1, (long) '4', timestampType42, (long) (byte) 0, (int) (short) 10, (int) (byte) 100, obj46, (java.io.Serializable) 1);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String> objConsumerRecordConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String>("", (int) 'a', (long) (short) 10, (long) (byte) -1, timestampType34, (long) 'a', (int) (byte) -1, 0, objConsumerRecord48, "hi!");
        long long51 = objConsumerRecord48.checksum();
        java.util.Optional<java.lang.Integer> intOptional52 = objConsumerRecord48.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType53 = objConsumerRecord48.timestampType();
        long long54 = objConsumerRecord48.offset();
        org.apache.kafka.common.header.Headers headers55 = objConsumerRecord48.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.String> typeConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.String>("", (int) '#', (long) (short) 1, (long) (byte) -1, timestampType23, (java.lang.Long) (-1L), (int) (byte) 0, (int) 'a', (java.lang.reflect.Type) wildcardClass28, "", headers55);
        org.apache.kafka.common.record.TimestampType timestampType61 = null;
        org.apache.storm.topology.base.BaseRichSpout baseRichSpout65 = null;
        org.apache.storm.kafka.spout.KafkaSpoutMessageId[] kafkaSpoutMessageIdArray66 = new org.apache.storm.kafka.spout.KafkaSpoutMessageId[] {};
        java.util.ArrayList<org.apache.storm.kafka.spout.KafkaSpoutMessageId> kafkaSpoutMessageIdList67 = new java.util.ArrayList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdList67, kafkaSpoutMessageIdArray66);
        org.apache.kafka.common.record.TimestampType timestampType73 = null;
        org.apache.kafka.common.record.TimestampType timestampType81 = null;
        java.lang.Object obj85 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("", 10, (long) (byte) -1, (long) '4', timestampType81, (long) (byte) 0, (int) (short) 10, (int) (byte) 100, obj85, (java.io.Serializable) 1);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String> objConsumerRecordConsumerRecord89 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>, java.lang.String>("", (int) 'a', (long) (short) 10, (long) (byte) -1, timestampType73, (long) 'a', (int) (byte) -1, 0, objConsumerRecord87, "hi!");
        long long90 = objConsumerRecord87.checksum();
        java.util.Optional<java.lang.Integer> intOptional91 = objConsumerRecord87.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType92 = objConsumerRecord87.timestampType();
        org.apache.kafka.common.header.Headers headers93 = objConsumerRecord87.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.topology.base.BaseRichSpout, java.util.AbstractCollection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> baseRichSpoutConsumerRecord94 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.storm.topology.base.BaseRichSpout, java.util.AbstractCollection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>("", (int) (byte) 1, (long) (byte) 0, (long) ' ', timestampType61, (java.lang.Long) 1L, (int) (short) -1, (int) '4', baseRichSpout65, (java.util.AbstractCollection<org.apache.storm.kafka.spout.KafkaSpoutMessageId>) kafkaSpoutMessageIdList67, headers93);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, java.util.ArrayList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> headersConsumerRecord95 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, java.util.ArrayList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1)", 10, (long) '#', (long) (-1), timestampType15, 0L, (int) (byte) 10, 0, headers55, kafkaSpoutMessageIdList67);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Collection<org.apache.kafka.common.TopicPartition>, java.util.ArrayList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>> topicPartitionCollectionConsumerRecord96 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Collection<org.apache.kafka.common.TopicPartition>, java.util.ArrayList<org.apache.storm.kafka.spout.KafkaSpoutMessageId>>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, null = 52, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = 1), partition = 35, leaderEpoch = null, offset = 100, null = 97, serialized key size = 52, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = 0.0)", 32, (long) 97, topicPartitionCollection10, kafkaSpoutMessageIdList67);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(topicPartitionCollection6);
        org.junit.Assert.assertNotNull(topicPartitionCollection10);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(intOptional52);
        org.junit.Assert.assertNull(timestampType53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-1L) + "'", long54 == (-1L));
        org.junit.Assert.assertNotNull(headers55);
        org.junit.Assert.assertNotNull(kafkaSpoutMessageIdArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertNotNull(intOptional91);
        org.junit.Assert.assertNull(timestampType92);
        org.junit.Assert.assertNotNull(headers93);
    }
}

